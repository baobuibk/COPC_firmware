
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fa0  08011ee8  08011ee8  00012ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e88  08014e88  000165cc  2**0
                  CONTENTS
  4 .ARM          00000008  08014e88  08014e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e90  08014e90  000165cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e90  08014e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014e94  08014e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005cc  20000000  08014e98  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000165cc  2**0
                  CONTENTS
 10 .bss          00005038  200005cc  200005cc  000165cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005604  20005604  000165cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000165cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e648  00000000  00000000  000165fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e7  00000000  00000000  00024c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00028130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a49  00000000  00000000  00028f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d6b7  00000000  00000000  00029949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c4b  00000000  00000000  00047000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095661  00000000  00000000  00058c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ee2ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004afc  00000000  00000000  000ee2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f2dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005cc 	.word	0x200005cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011ecc 	.word	0x08011ecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005d0 	.word	0x200005d0
 80001cc:	08011ecc 	.word	0x08011ecc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003f0 	.word	0x200003f0
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001798:	2b80      	cmp	r3, #128	@ 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	@ 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	61ba      	str	r2, [r7, #24]
 8001840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	e841 2300 	strex	r3, r2, [r1]
 800184a:	613b      	str	r3, [r7, #16]
   return(result);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e7      	bne.n	8001822 <LL_USART_EnableIT_RXNE+0x8>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	330c      	adds	r3, #12
 800186c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	60bb      	str	r3, [r7, #8]
   return(result);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	61ba      	str	r2, [r7, #24]
 8001886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	e841 2300 	strex	r3, r2, [r1]
 8001890:	613b      	str	r3, [r7, #16]
   return(result);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <LL_USART_EnableIT_TXE+0x8>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b089      	sub	sp, #36	@ 0x24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3314      	adds	r3, #20
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	613b      	str	r3, [r7, #16]
   return(result);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e7      	bne.n	80018ae <LL_USART_EnableIT_ERROR+0x8>
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	60bb      	str	r3, [r7, #8]
   return(result);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	61ba      	str	r2, [r7, #24]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	e841 2300 	strex	r3, r2, [r1]
 800191c:	613b      	str	r3, [r7, #16]
   return(result);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e7      	bne.n	80018f4 <LL_USART_DisableIT_RXNE+0x8>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001932:	b480      	push	{r7}
 8001934:	b089      	sub	sp, #36	@ 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e853 3f00 	ldrex	r3, [r3]
 8001946:	60bb      	str	r3, [r7, #8]
   return(result);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	330c      	adds	r3, #12
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	61ba      	str	r2, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	e841 2300 	strex	r3, r2, [r1]
 8001962:	613b      	str	r3, [r7, #16]
   return(result);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e7      	bne.n	800193a <LL_USART_DisableIT_TXE+0x8>
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3724      	adds	r7, #36	@ 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b80      	cmp	r3, #128	@ 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:


void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001a00:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <Ringbuf_init+0x88>)
 8001a02:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <Ringbuf_init+0x8c>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <Ringbuf_init+0x90>)
 8001a08:	4a21      	ldr	r2, [pc, #132]	@ (8001a90 <Ringbuf_init+0x94>)
 8001a0a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <Ringbuf_init+0x98>)
 8001a0e:	4a22      	ldr	r2, [pc, #136]	@ (8001a98 <Ringbuf_init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <Ringbuf_init+0xa0>)
 8001a14:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <Ringbuf_init+0xa4>)
 8001a16:	601a      	str	r2, [r3, #0]
  _rx_buffer5 = &rx_buffer5;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <Ringbuf_init+0xa8>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	@ (8001aa8 <Ringbuf_init+0xac>)
 8001a1c:	601a      	str	r2, [r3, #0]
  _tx_buffer5 = &tx_buffer5;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <Ringbuf_init+0xb0>)
 8001a20:	4a23      	ldr	r2, [pc, #140]	@ (8001ab0 <Ringbuf_init+0xb4>)
 8001a22:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001a24:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <Ringbuf_init+0xb8>)
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <Ringbuf_init+0xbc>)
 8001a28:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001a2a:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <Ringbuf_init+0xc0>)
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <Ringbuf_init+0xc4>)
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff36 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart2);
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff31 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart5);
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff2c 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff27 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fedc 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart2);
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fed7 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart5);
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fed2 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fecd 	bl	800181a <LL_USART_EnableIT_RXNE>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20004628 	.word	0x20004628
 8001a88:	200005e8 	.word	0x200005e8
 8001a8c:	2000462c 	.word	0x2000462c
 8001a90:	20000df0 	.word	0x20000df0
 8001a94:	20004630 	.word	0x20004630
 8001a98:	200015f8 	.word	0x200015f8
 8001a9c:	20004634 	.word	0x20004634
 8001aa0:	20001e00 	.word	0x20001e00
 8001aa4:	20004638 	.word	0x20004638
 8001aa8:	20002608 	.word	0x20002608
 8001aac:	2000463c 	.word	0x2000463c
 8001ab0:	20002e10 	.word	0x20002e10
 8001ab4:	20004640 	.word	0x20004640
 8001ab8:	20003618 	.word	0x20003618
 8001abc:	20004644 	.word	0x20004644
 8001ac0:	20003e20 	.word	0x20003e20
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aec:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d031      	beq.n	8001b5e <store_char+0x8a>
	ATOMIC_BLOCK_START(USART1)
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <store_char+0x94>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fef4 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(USART2)
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <store_char+0x98>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff feef 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(UART5)
 8001b0e:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <store_char+0x9c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff feea 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(USART6)
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <store_char+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fee5 	bl	80018ec <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	79f9      	ldrb	r1, [r7, #7]
 8001b2c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
    ATOMIC_BLOCK_END(USART1)
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <store_char+0x94>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe6d 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART2)
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <store_char+0x98>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fe68 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART5)
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <store_char+0x9c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fe63 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART6)
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <store_char+0xa0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe5e 	bl	800181a <LL_USART_EnableIT_RXNE>
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000008 	.word	0x20000008
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <Uart_read>:
//	else return -1;
//}
//

int Uart_read(USART_TypeDef *uart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;

  switch ((uint32_t)uart) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a41      	ldr	r2, [pc, #260]	@ (8001c88 <Uart_read+0x110>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <Uart_read+0x24>
 8001b88:	4a3f      	ldr	r2, [pc, #252]	@ (8001c88 <Uart_read+0x110>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d812      	bhi.n	8001bb4 <Uart_read+0x3c>
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c8c <Uart_read+0x114>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <Uart_read+0x2c>
 8001b94:	4a3e      	ldr	r2, [pc, #248]	@ (8001c90 <Uart_read+0x118>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d008      	beq.n	8001bac <Uart_read+0x34>
 8001b9a:	e00b      	b.n	8001bb4 <Uart_read+0x3c>
    case (uint32_t)USART1:
      _rx_buffer = _rx_buffer1;
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <Uart_read+0x11c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
      break;
 8001ba2:	e00b      	b.n	8001bbc <Uart_read+0x44>
    case (uint32_t)USART2:
      _rx_buffer = _rx_buffer2;
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <Uart_read+0x120>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
      break;
 8001baa:	e007      	b.n	8001bbc <Uart_read+0x44>
    case (uint32_t)UART5:
      _rx_buffer = _rx_buffer5;
 8001bac:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <Uart_read+0x124>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
      break;
 8001bb2:	e003      	b.n	8001bbc <Uart_read+0x44>
    default:
      _rx_buffer = _rx_buffer6;
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca0 <Uart_read+0x128>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
      break;
 8001bba:	bf00      	nop
  }

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d102      	bne.n	8001bd2 <Uart_read+0x5a>
  {
    return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e055      	b.n	8001c7e <Uart_read+0x106>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c88 <Uart_read+0x110>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d105      	bne.n	8001be6 <Uart_read+0x6e>
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <Uart_read+0x12c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fe84 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001be4:	e018      	b.n	8001c18 <Uart_read+0xa0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a28      	ldr	r2, [pc, #160]	@ (8001c8c <Uart_read+0x114>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d105      	bne.n	8001bfa <Uart_read+0x82>
 8001bee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <Uart_read+0x130>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe7a 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001bf8:	e00e      	b.n	8001c18 <Uart_read+0xa0>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	@ (8001c90 <Uart_read+0x118>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d105      	bne.n	8001c0e <Uart_read+0x96>
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <Uart_read+0x134>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe70 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c0c:	e004      	b.n	8001c18 <Uart_read+0xa0>
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <Uart_read+0x138>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fe6a 	bl	80018ec <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    ATOMIC_BLOCK_END(uart)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <Uart_read+0x110>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d105      	bne.n	8001c4a <Uart_read+0xd2>
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <Uart_read+0x12c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fde9 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c48:	e018      	b.n	8001c7c <Uart_read+0x104>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c8c <Uart_read+0x114>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d105      	bne.n	8001c5e <Uart_read+0xe6>
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <Uart_read+0x130>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fddf 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c5c:	e00e      	b.n	8001c7c <Uart_read+0x104>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <Uart_read+0x118>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d105      	bne.n	8001c72 <Uart_read+0xfa>
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <Uart_read+0x134>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fdd5 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c70:	e004      	b.n	8001c7c <Uart_read+0x104>
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <Uart_read+0x138>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fdcf 	bl	800181a <LL_USART_EnableIT_RXNE>
    return c;
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40004400 	.word	0x40004400
 8001c90:	40005000 	.word	0x40005000
 8001c94:	20004628 	.word	0x20004628
 8001c98:	20004630 	.word	0x20004630
 8001c9c:	20004638 	.word	0x20004638
 8001ca0:	20004640 	.word	0x20004640
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  switch ((uint32_t)uart) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a54      	ldr	r2, [pc, #336]	@ (8001e14 <Uart_write+0x160>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d009      	beq.n	8001cda <Uart_write+0x26>
 8001cc6:	4a53      	ldr	r2, [pc, #332]	@ (8001e14 <Uart_write+0x160>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d812      	bhi.n	8001cf2 <Uart_write+0x3e>
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <Uart_write+0x164>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <Uart_write+0x2e>
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <Uart_write+0x168>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d008      	beq.n	8001cea <Uart_write+0x36>
 8001cd8:	e00b      	b.n	8001cf2 <Uart_write+0x3e>
    case (uint32_t)USART1:
      _tx_buffer = _tx_buffer1;
 8001cda:	4b51      	ldr	r3, [pc, #324]	@ (8001e20 <Uart_write+0x16c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]
      break;
 8001ce0:	e00b      	b.n	8001cfa <Uart_write+0x46>
    case (uint32_t)USART2:
      _tx_buffer = _tx_buffer2;
 8001ce2:	4b50      	ldr	r3, [pc, #320]	@ (8001e24 <Uart_write+0x170>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
      break;
 8001ce8:	e007      	b.n	8001cfa <Uart_write+0x46>
    case (uint32_t)UART5:
      _tx_buffer = _tx_buffer5;
 8001cea:	4b4f      	ldr	r3, [pc, #316]	@ (8001e28 <Uart_write+0x174>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
      break;
 8001cf0:	e003      	b.n	8001cfa <Uart_write+0x46>
    default:
      _tx_buffer = _tx_buffer6;
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e2c <Uart_write+0x178>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
      break;
 8001cf8:	bf00      	nop
  }

	if (c>=0)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f2c0 8085 	blt.w	8001e0c <Uart_write+0x158>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0e:	60bb      	str	r3, [r7, #8]

		ATOMIC_BLOCK_START(uart)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <Uart_write+0x160>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d105      	bne.n	8001d24 <Uart_write+0x70>
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <Uart_write+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fde5 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d22:	e018      	b.n	8001d56 <Uart_write+0xa2>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3c      	ldr	r2, [pc, #240]	@ (8001e18 <Uart_write+0x164>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d105      	bne.n	8001d38 <Uart_write+0x84>
 8001d2c:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <Uart_write+0x180>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fddb 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d36:	e00e      	b.n	8001d56 <Uart_write+0xa2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a38      	ldr	r2, [pc, #224]	@ (8001e1c <Uart_write+0x168>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d105      	bne.n	8001d4c <Uart_write+0x98>
 8001d40:	4b3d      	ldr	r3, [pc, #244]	@ (8001e38 <Uart_write+0x184>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fdd1 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d4a:	e004      	b.n	8001d56 <Uart_write+0xa2>
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <Uart_write+0x188>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fdcb 	bl	80018ec <LL_USART_DisableIT_RXNE>
		while (i == _tx_buffer->tail);
 8001d56:	bf00      	nop
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d0f9      	beq.n	8001d58 <Uart_write+0xa4>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	b2d1      	uxtb	r1, r2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
		ATOMIC_BLOCK_END(uart)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <Uart_write+0x160>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d105      	bne.n	8001d8e <Uart_write+0xda>
 8001d82:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <Uart_write+0x17c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd47 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001d8c:	e018      	b.n	8001dc0 <Uart_write+0x10c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <Uart_write+0x164>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d105      	bne.n	8001da2 <Uart_write+0xee>
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <Uart_write+0x180>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd3d 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001da0:	e00e      	b.n	8001dc0 <Uart_write+0x10c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <Uart_write+0x168>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d105      	bne.n	8001db6 <Uart_write+0x102>
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <Uart_write+0x184>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fd33 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001db4:	e004      	b.n	8001dc0 <Uart_write+0x10c>
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <Uart_write+0x188>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fd2d 	bl	800181a <LL_USART_EnableIT_RXNE>

		  switch ((uint32_t)uart) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <Uart_write+0x160>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <Uart_write+0x128>
 8001dc8:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <Uart_write+0x160>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d818      	bhi.n	8001e00 <Uart_write+0x14c>
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <Uart_write+0x164>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <Uart_write+0x134>
 8001dd4:	4a11      	ldr	r2, [pc, #68]	@ (8001e1c <Uart_write+0x168>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00c      	beq.n	8001df4 <Uart_write+0x140>
 8001dda:	e011      	b.n	8001e00 <Uart_write+0x14c>
		    case (uint32_t)USART1:
		      LL_USART_EnableIT_TXE(uart1);
 8001ddc:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <Uart_write+0x17c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fd3d 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001de6:	e011      	b.n	8001e0c <Uart_write+0x158>
		    case (uint32_t)USART2:
		      LL_USART_EnableIT_TXE(uart2);
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <Uart_write+0x180>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd37 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001df2:	e00b      	b.n	8001e0c <Uart_write+0x158>
		    case (uint32_t)UART5:
		      LL_USART_EnableIT_TXE(uart5);
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <Uart_write+0x184>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fd31 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001dfe:	e005      	b.n	8001e0c <Uart_write+0x158>
		    default:
		      LL_USART_EnableIT_TXE(uart6);
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <Uart_write+0x188>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fd2b 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001e0a:	bf00      	nop
		  }
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40004400 	.word	0x40004400
 8001e1c:	40005000 	.word	0x40005000
 8001e20:	2000462c 	.word	0x2000462c
 8001e24:	20004634 	.word	0x20004634
 8001e28:	2000463c 	.word	0x2000463c
 8001e2c:	20004644 	.word	0x20004644
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;
	  switch ((uint32_t)uart) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <IsDataAvailable+0x70>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <IsDataAvailable+0x24>
 8001e50:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <IsDataAvailable+0x70>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d812      	bhi.n	8001e7c <IsDataAvailable+0x3c>
 8001e56:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <IsDataAvailable+0x74>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <IsDataAvailable+0x2c>
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <IsDataAvailable+0x78>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d008      	beq.n	8001e74 <IsDataAvailable+0x34>
 8001e62:	e00b      	b.n	8001e7c <IsDataAvailable+0x3c>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <IsDataAvailable+0x7c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
	      break;
 8001e6a:	e00b      	b.n	8001e84 <IsDataAvailable+0x44>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <IsDataAvailable+0x80>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
	      break;
 8001e72:	e007      	b.n	8001e84 <IsDataAvailable+0x44>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <IsDataAvailable+0x84>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
	      break;
 8001e7a:	e003      	b.n	8001e84 <IsDataAvailable+0x44>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <IsDataAvailable+0x88>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
	      break;
 8001e82:	bf00      	nop
	  }

  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40004400 	.word	0x40004400
 8001eb8:	40005000 	.word	0x40005000
 8001ebc:	20004628 	.word	0x20004628
 8001ec0:	20004630 	.word	0x20004630
 8001ec4:	20004638 	.word	0x20004638
 8001ec8:	20004640 	.word	0x20004640

08001ecc <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8001ed6:	e007      	b.n	8001ee8 <Uart_sendstring+0x1c>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	603a      	str	r2, [r7, #0]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fee6 	bl	8001cb4 <Uart_write>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f3      	bne.n	8001ed8 <Uart_sendstring+0xc>
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <Uart_flush>:


}

void Uart_flush (USART_TypeDef *uart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;

	  switch ((uint32_t)uart) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <Uart_flush+0x6c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <Uart_flush+0x24>
 8001f0c:	4a16      	ldr	r2, [pc, #88]	@ (8001f68 <Uart_flush+0x6c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d812      	bhi.n	8001f38 <Uart_flush+0x3c>
 8001f12:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <Uart_flush+0x70>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <Uart_flush+0x2c>
 8001f18:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <Uart_flush+0x74>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d008      	beq.n	8001f30 <Uart_flush+0x34>
 8001f1e:	e00b      	b.n	8001f38 <Uart_flush+0x3c>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <Uart_flush+0x78>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
	      break;
 8001f26:	e00b      	b.n	8001f40 <Uart_flush+0x44>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <Uart_flush+0x7c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
	      break;
 8001f2e:	e007      	b.n	8001f40 <Uart_flush+0x44>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <Uart_flush+0x80>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
	      break;
 8001f36:	e003      	b.n	8001f40 <Uart_flush+0x44>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <Uart_flush+0x84>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
	      break;
 8001f3e:	bf00      	nop
	  }

	  memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00c fc62 	bl	800e812 <memset>
	  _rx_buffer->head = 0;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	  _rx_buffer->tail = 0;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	40005000 	.word	0x40005000
 8001f74:	20004628 	.word	0x20004628
 8001f78:	20004630 	.word	0x20004630
 8001f7c:	20004638 	.word	0x20004638
 8001f80:	20004640 	.word	0x20004640

08001f84 <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    switch ((uint32_t)uart) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <Uart_isr+0x124>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <Uart_isr+0x24>
 8001f94:	4a44      	ldr	r2, [pc, #272]	@ (80020a8 <Uart_isr+0x124>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d81b      	bhi.n	8001fd2 <Uart_isr+0x4e>
 8001f9a:	4a44      	ldr	r2, [pc, #272]	@ (80020ac <Uart_isr+0x128>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00a      	beq.n	8001fb6 <Uart_isr+0x32>
 8001fa0:	4a43      	ldr	r2, [pc, #268]	@ (80020b0 <Uart_isr+0x12c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <Uart_isr+0x40>
 8001fa6:	e014      	b.n	8001fd2 <Uart_isr+0x4e>
      case (uint32_t)USART1:
        _rx_buffer = _rx_buffer1;
 8001fa8:	4b42      	ldr	r3, [pc, #264]	@ (80020b4 <Uart_isr+0x130>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer1;
 8001fae:	4b42      	ldr	r3, [pc, #264]	@ (80020b8 <Uart_isr+0x134>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        break;
 8001fb4:	e014      	b.n	8001fe0 <Uart_isr+0x5c>
      case (uint32_t)USART2:
        _rx_buffer = _rx_buffer2;
 8001fb6:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <Uart_isr+0x138>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer2;
 8001fbc:	4b40      	ldr	r3, [pc, #256]	@ (80020c0 <Uart_isr+0x13c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
        break;
 8001fc2:	e00d      	b.n	8001fe0 <Uart_isr+0x5c>
      case (uint32_t)UART5:
        _rx_buffer = _rx_buffer5;
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80020c4 <Uart_isr+0x140>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer5;
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <Uart_isr+0x144>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
        break;
 8001fd0:	e006      	b.n	8001fe0 <Uart_isr+0x5c>
      default:
        _rx_buffer = _rx_buffer6;
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80020cc <Uart_isr+0x148>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer6;
 8001fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <Uart_isr+0x14c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	613b      	str	r3, [r7, #16]
        break;
 8001fde:	bf00      	nop
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fbbe 	bl	8001762 <LL_USART_IsActiveFlag_RXNE>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02c      	beq.n	8002046 <Uart_isr+0xc2>
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fcc3 	bl	8001978 <LL_USART_IsEnabledIT_RXNE>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d026      	beq.n	8002046 <Uart_isr+0xc2>
//        LL_USART_ReceiveData8(uart);                /* Read status register */
//        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
//        store_char (c, _rx_buffer);  // store data in buffer
//        return;

        unsigned char data = LL_USART_ReceiveData8(uart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fce3 	bl	80019c4 <LL_USART_ReceiveData8>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fb9a 	bl	800173c <LL_USART_IsActiveFlag_ORE>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10b      	bne.n	8002026 <Uart_isr+0xa2>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fb6e 	bl	80016f0 <LL_USART_IsActiveFlag_FE>
 8002014:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <Uart_isr+0xa2>
            (LL_USART_IsActiveFlag_NE(uart) != RESET))
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fb7b 	bl	8001716 <LL_USART_IsActiveFlag_NE>
 8002020:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <Uart_isr+0xb6>
        {
          // if error, del flag
          LL_USART_ClearFlag_ORE(uart);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fbe5 	bl	80017f6 <LL_USART_ClearFlag_ORE>
          LL_USART_ClearFlag_FE(uart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fbbe 	bl	80017ae <LL_USART_ClearFlag_FE>
          LL_USART_ClearFlag_NE(uart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fbcd 	bl	80017d2 <LL_USART_ClearFlag_NE>
        }
        else
        {
          store_char(data, _rx_buffer); // store data in buffer
        }
        return;
 8002038:	e032      	b.n	80020a0 <Uart_isr+0x11c>
          store_char(data, _rx_buffer); // store data in buffer
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	6979      	ldr	r1, [r7, #20]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fd48 	bl	8001ad4 <store_char>
        return;
 8002044:	e02c      	b.n	80020a0 <Uart_isr+0x11c>


    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fb9e 	bl	8001788 <LL_USART_IsActiveFlag_TXE>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d026      	beq.n	80020a0 <Uart_isr+0x11c>
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fca3 	bl	800199e <LL_USART_IsEnabledIT_TXE>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d020      	beq.n	80020a0 <Uart_isr+0x11c>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800206a:	429a      	cmp	r2, r3
 800206c:	d103      	bne.n	8002076 <Uart_isr+0xf2>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fc5f 	bl	8001932 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 8002074:	e013      	b.n	800209e <Uart_isr+0x11a>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002088:	3301      	adds	r3, #1
 800208a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
          LL_USART_TransmitData8(uart, c);
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fca0 	bl	80019de <LL_USART_TransmitData8>
        return;
 800209e:	bf00      	nop
    }
}
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40004400 	.word	0x40004400
 80020b0:	40005000 	.word	0x40005000
 80020b4:	20004628 	.word	0x20004628
 80020b8:	2000462c 	.word	0x2000462c
 80020bc:	20004630 	.word	0x20004630
 80020c0:	20004634 	.word	0x20004634
 80020c4:	20004638 	.word	0x20004638
 80020c8:	2000463c 	.word	0x2000463c
 80020cc:	20004640 	.word	0x20004640
 80020d0:	20004644 	.word	0x20004644

080020d4 <send_packet_init>:
		status_ACKsend_update					// taskFunction;
	}
};

void send_packet_init(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
    sendFlag = 0;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <send_packet_init+0x1c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <send_packet_init+0x20>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20004749 	.word	0x20004749
 80020f4:	2000474a 	.word	0x2000474a

080020f8 <set_send_flag>:

void set_send_flag(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
    sendFlag = 1;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <set_send_flag+0x14>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	20004749 	.word	0x20004749

08002110 <clear_send_flag>:

void clear_send_flag(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <clear_send_flag+0x14>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20004749 	.word	0x20004749

08002128 <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
	while (g_pkt_lock);
 8002134:	bf00      	nop
 8002136:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <set_fsp_packet+0x58>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1fa      	bne.n	8002136 <set_fsp_packet+0xe>
	g_pkt_lock = 1;
 8002140:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <set_fsp_packet+0x58>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
	memset((void *)g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 8002146:	22ff      	movs	r2, #255	@ 0xff
 8002148:	2100      	movs	r1, #0
 800214a:	480e      	ldr	r0, [pc, #56]	@ (8002184 <set_fsp_packet+0x5c>)
 800214c:	f00c fb61 	bl	800e812 <memset>
    memcpy((void *)g_encoded_pkt, encoded_pkt, encoded_len);
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	461a      	mov	r2, r3
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	480b      	ldr	r0, [pc, #44]	@ (8002184 <set_fsp_packet+0x5c>)
 8002158:	f00c fbdb 	bl	800e912 <memcpy>
    g_encoded_len = encoded_len;
 800215c:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <set_fsp_packet+0x60>)
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	7013      	strb	r3, [r2, #0]
    g_pkt_lock = 0;
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <set_fsp_packet+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
    sendFlag = 1;
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <set_fsp_packet+0x64>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);
 800216e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002172:	2003      	movs	r0, #3
 8002174:	f008 fb7c 	bl	800a870 <SCH_TIM_Start>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20004748 	.word	0x20004748
 8002184:	20004648 	.word	0x20004648
 8002188:	20004747 	.word	0x20004747
 800218c:	20004749 	.word	0x20004749

08002190 <send_packet_create_task>:

void send_packet_create_task(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 8002194:	4902      	ldr	r1, [pc, #8]	@ (80021a0 <send_packet_create_task+0x10>)
 8002196:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <send_packet_create_task+0x14>)
 8002198:	f008 fb96 	bl	800a8c8 <SCH_TASK_CreateTask>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000014 	.word	0x20000014
 80021a4:	20000010 	.word	0x20000010

080021a8 <status_ACKsend_update>:


uint8_t sendBuffer[FSP_PKT_MAX_LENGTH];

void	status_ACKsend_update(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 80021ae:	2003      	movs	r0, #3
 80021b0:	f008 fb74 	bl	800a89c <SCH_TIM_HasCompleted>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d057      	beq.n	800226a <status_ACKsend_update+0xc2>
			{

			    if (sendFlag)
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <status_ACKsend_update+0xcc>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d04d      	beq.n	8002260 <status_ACKsend_update+0xb8>
			    {
			    	if(retryCount < MAX_RETRIES){
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <status_ACKsend_update+0xd0>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d833      	bhi.n	8002236 <status_ACKsend_update+0x8e>
			    		while (g_pkt_lock);
 80021ce:	bf00      	nop
 80021d0:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <status_ACKsend_update+0xd4>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1fa      	bne.n	80021d0 <status_ACKsend_update+0x28>
			    		g_pkt_lock = 1;
 80021da:	4b28      	ldr	r3, [pc, #160]	@ (800227c <status_ACKsend_update+0xd4>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
			            memcpy(sendBuffer, (const void *)g_encoded_pkt, g_encoded_len);
 80021e0:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <status_ACKsend_update+0xd8>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	4926      	ldr	r1, [pc, #152]	@ (8002284 <status_ACKsend_update+0xdc>)
 80021ea:	4827      	ldr	r0, [pc, #156]	@ (8002288 <status_ACKsend_update+0xe0>)
 80021ec:	f00c fb91 	bl	800e912 <memcpy>
			            for (int i = 0; i < g_encoded_len; i++) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	e00a      	b.n	800220c <status_ACKsend_update+0x64>
			                Uart_write(USART1, sendBuffer[i]);
 80021f6:	4a24      	ldr	r2, [pc, #144]	@ (8002288 <status_ACKsend_update+0xe0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4822      	ldr	r0, [pc, #136]	@ (800228c <status_ACKsend_update+0xe4>)
 8002202:	f7ff fd57 	bl	8001cb4 <Uart_write>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3301      	adds	r3, #1
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <status_ACKsend_update+0xd8>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4293      	cmp	r3, r2
 8002218:	dbed      	blt.n	80021f6 <status_ACKsend_update+0x4e>
			            }
						retryCount++;
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <status_ACKsend_update+0xd0>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <status_ACKsend_update+0xd0>)
 8002226:	701a      	strb	r2, [r3, #0]
						sendFlag = 1;
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <status_ACKsend_update+0xcc>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
						g_pkt_lock = 0;
 800222e:	4b13      	ldr	r3, [pc, #76]	@ (800227c <status_ACKsend_update+0xd4>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e014      	b.n	8002260 <status_ACKsend_update+0xb8>
			    	}
			    	else {
			    		retryCount = 0;
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <status_ACKsend_update+0xd0>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 800223c:	f7ff ff68 	bl	8002110 <clear_send_flag>

			    		Uart_sendstring(UART5, "TIMEOUT_NORESPONE");
 8002240:	4913      	ldr	r1, [pc, #76]	@ (8002290 <status_ACKsend_update+0xe8>)
 8002242:	4814      	ldr	r0, [pc, #80]	@ (8002294 <status_ACKsend_update+0xec>)
 8002244:	f7ff fe42 	bl	8001ecc <Uart_sendstring>
			    		Uart_sendstring(UART5, "\r\n> ");
 8002248:	4913      	ldr	r1, [pc, #76]	@ (8002298 <status_ACKsend_update+0xf0>)
 800224a:	4812      	ldr	r0, [pc, #72]	@ (8002294 <status_ACKsend_update+0xec>)
 800224c:	f7ff fe3e 	bl	8001ecc <Uart_sendstring>
			    		Uart_sendstring(USART6, "TIMEOUT_NORESPONE");
 8002250:	490f      	ldr	r1, [pc, #60]	@ (8002290 <status_ACKsend_update+0xe8>)
 8002252:	4812      	ldr	r0, [pc, #72]	@ (800229c <status_ACKsend_update+0xf4>)
 8002254:	f7ff fe3a 	bl	8001ecc <Uart_sendstring>
			    		Uart_sendstring(USART6, "\r\n> ");
 8002258:	490f      	ldr	r1, [pc, #60]	@ (8002298 <status_ACKsend_update+0xf0>)
 800225a:	4810      	ldr	r0, [pc, #64]	@ (800229c <status_ACKsend_update+0xf4>)
 800225c:	f7ff fe36 	bl	8001ecc <Uart_sendstring>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);	//restart
 8002260:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002264:	2003      	movs	r0, #3
 8002266:	f008 fb03 	bl	800a870 <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20004749 	.word	0x20004749
 8002278:	2000474a 	.word	0x2000474a
 800227c:	20004748 	.word	0x20004748
 8002280:	20004747 	.word	0x20004747
 8002284:	20004648 	.word	0x20004648
 8002288:	2000474c 	.word	0x2000474c
 800228c:	40011000 	.word	0x40011000
 8002290:	08011ee8 	.word	0x08011ee8
 8002294:	40005000 	.word	0x40005000
 8002298:	08011efc 	.word	0x08011efc
 800229c:	40011400 	.word	0x40011400

080022a0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	619a      	str	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <IOU_create_task>:
};



void IOU_create_task(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&IOU_task_context.taskHandle, &IOU_task_context.taskProperty);
 80022c0:	4906      	ldr	r1, [pc, #24]	@ (80022dc <IOU_create_task+0x20>)
 80022c2:	4807      	ldr	r0, [pc, #28]	@ (80022e0 <IOU_create_task+0x24>)
 80022c4:	f008 fb00 	bl	800a8c8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 80022c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022cc:	2007      	movs	r0, #7
 80022ce:	f008 facf 	bl	800a870 <SCH_TIM_Start>
    Ringbuf_init();
 80022d2:	f7ff fb93 	bl	80019fc <Ringbuf_init>
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000030 	.word	0x20000030
 80022e0:	2000002c 	.word	0x2000002c

080022e4 <IOU_update_task>:
volatile uint8_t send_rs422 = 0;

volatile uint8_t timeout_counter_iou = 0;


void IOU_update_task(void) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
	if (auto_report_enabled) {
 80022ea:	4b3d      	ldr	r3, [pc, #244]	@ (80023e0 <IOU_update_task+0xfc>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d071      	beq.n	80023d8 <IOU_update_task+0xf4>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_IOU))
 80022f4:	2007      	movs	r0, #7
 80022f6:	f008 fad1 	bl	800a89c <SCH_TIM_HasCompleted>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d06b      	beq.n	80023d8 <IOU_update_task+0xf4>
		{

			if(!sendFlag){
 8002300:	4b38      	ldr	r3, [pc, #224]	@ (80023e4 <IOU_update_task+0x100>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d166      	bne.n	80023d8 <IOU_update_task+0xf4>
				if(!send_rs422){
 800230a:	4b37      	ldr	r3, [pc, #220]	@ (80023e8 <IOU_update_task+0x104>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d161      	bne.n	80023d8 <IOU_update_task+0xf4>
					if(receive_pduFlag&&receive_pmuFlag){
 8002314:	4b35      	ldr	r3, [pc, #212]	@ (80023ec <IOU_update_task+0x108>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d02b      	beq.n	8002376 <IOU_update_task+0x92>
 800231e:	4b34      	ldr	r3, [pc, #208]	@ (80023f0 <IOU_update_task+0x10c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d026      	beq.n	8002376 <IOU_update_task+0x92>
						switch_board(0);
 8002328:	2000      	movs	r0, #0
 800232a:	f004 fddb 	bl	8006ee4 <switch_board>
						Uart_flush(USART1);
 800232e:	4831      	ldr	r0, [pc, #196]	@ (80023f4 <IOU_update_task+0x110>)
 8002330:	f7ff fde4 	bl	8001efc <Uart_flush>

						frame = iou_frame;
 8002334:	4b30      	ldr	r3, [pc, #192]	@ (80023f8 <IOU_update_task+0x114>)
 8002336:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(iou_frame);
 8002338:	2309      	movs	r3, #9
 800233a:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e00a      	b.n	8002358 <IOU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	4829      	ldr	r0, [pc, #164]	@ (80023f4 <IOU_update_task+0x110>)
 800234e:	f7ff fcb1 	bl	8001cb4 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	dbf0      	blt.n	8002342 <IOU_update_task+0x5e>
						}
						receive_iouFlag = 0;
 8002360:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <IOU_update_task+0x118>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <IOU_update_task+0x104>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 800236c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002370:	2007      	movs	r0, #7
 8002372:	f008 fa7d 	bl	800a870 <SCH_TIM_Start>
					}
					if(!receive_iouFlag){
 8002376:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <IOU_update_task+0x118>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d12b      	bne.n	80023d8 <IOU_update_task+0xf4>
						timeout_counter_iou++;
 8002380:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <IOU_update_task+0x11c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3301      	adds	r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <IOU_update_task+0x11c>)
 800238c:	701a      	strb	r2, [r3, #0]
						if (timeout_counter_iou > 2){
 800238e:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <IOU_update_task+0x11c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d91f      	bls.n	80023d8 <IOU_update_task+0xf4>
							disconnect_counter_iou++;
 8002398:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <IOU_update_task+0x120>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <IOU_update_task+0x120>)
 80023a4:	701a      	strb	r2, [r3, #0]
							timeout_counter_iou = 0;
 80023a6:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <IOU_update_task+0x11c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
							receive_pmuFlag = 1;
 80023ac:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <IOU_update_task+0x10c>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
							if(disconnect_counter_iou> 4){
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <IOU_update_task+0x120>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d90d      	bls.n	80023d8 <IOU_update_task+0xf4>
								for (int i = 1; i <= 35; i++) {
 80023bc:	2301      	movs	r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	e007      	b.n	80023d2 <IOU_update_task+0xee>
										    sourceArray[i + 7] = 0xFF; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3307      	adds	r3, #7
 80023c6:	4a10      	ldr	r2, [pc, #64]	@ (8002408 <IOU_update_task+0x124>)
 80023c8:	21ff      	movs	r1, #255	@ 0xff
 80023ca:	54d1      	strb	r1, [r2, r3]
								for (int i = 1; i <= 35; i++) {
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3301      	adds	r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b23      	cmp	r3, #35	@ 0x23
 80023d6:	ddf4      	ble.n	80023c2 <IOU_update_task+0xde>
					}
				}
			}
		}
	}
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20004978 	.word	0x20004978
 80023e4:	20004749 	.word	0x20004749
 80023e8:	2000484e 	.word	0x2000484e
 80023ec:	2000003c 	.word	0x2000003c
 80023f0:	2000003d 	.word	0x2000003d
 80023f4:	40011000 	.word	0x40011000
 80023f8:	20000020 	.word	0x20000020
 80023fc:	2000003e 	.word	0x2000003e
 8002400:	2000484f 	.word	0x2000484f
 8002404:	2000484b 	.word	0x2000484b
 8002408:	2000497c 	.word	0x2000497c

0800240c <Cmd_iou_set_temp>:
//}

volatile uint8_t uart_choose_uart5 = 0;

int Cmd_iou_set_temp(int argc, char *argv[])
{
 800240c:	b580      	push	{r7, lr}
 800240e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002412:	af02      	add	r7, sp, #8
 8002414:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002418:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800241c:	6018      	str	r0, [r3, #0]
 800241e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002422:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002426:	6019      	str	r1, [r3, #0]


    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8002428:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800242c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b03      	cmp	r3, #3
 8002434:	dc01      	bgt.n	800243a <Cmd_iou_set_temp+0x2e>
 8002436:	2303      	movs	r3, #3
 8002438:	e0d8      	b.n	80025ec <Cmd_iou_set_temp+0x1e0>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 800243a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800243e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b04      	cmp	r3, #4
 8002446:	dd01      	ble.n	800244c <Cmd_iou_set_temp+0x40>
 8002448:	2302      	movs	r3, #2
 800244a:	e0cf      	b.n	80025ec <Cmd_iou_set_temp+0x1e0>

    uint8_t channel = atoi(argv[1]);
 800244c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002450:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3304      	adds	r3, #4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f00b f9be 	bl	800d7dc <atoi>
 8002460:	4603      	mov	r3, r0
 8002462:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002466:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800246a:	2b03      	cmp	r3, #3
 800246c:	d901      	bls.n	8002472 <Cmd_iou_set_temp+0x66>
 800246e:	2304      	movs	r3, #4
 8002470:	e0bc      	b.n	80025ec <Cmd_iou_set_temp+0x1e0>

    uint16_t temp = atoi(argv[2]);
 8002472:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002476:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3308      	adds	r3, #8
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f00b f9ab 	bl	800d7dc <atoi>
 8002486:	4603      	mov	r3, r0
 8002488:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (temp > 500)    return CMDLINE_INVALID_ARG;
 800248c:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002490:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002494:	d901      	bls.n	800249a <Cmd_iou_set_temp+0x8e>
 8002496:	2304      	movs	r3, #4
 8002498:	e0a8      	b.n	80025ec <Cmd_iou_set_temp+0x1e0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800249a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800249e:	4856      	ldr	r0, [pc, #344]	@ (80025f8 <Cmd_iou_set_temp+0x1ec>)
 80024a0:	f7ff fefe 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80024a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024a8:	4853      	ldr	r0, [pc, #332]	@ (80025f8 <Cmd_iou_set_temp+0x1ec>)
 80024aa:	f7ff fef9 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80024ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80024b2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024bc:	3b01      	subs	r3, #1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80024c4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80024d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80024d6:	4a49      	ldr	r2, [pc, #292]	@ (80025fc <Cmd_iou_set_temp+0x1f0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d103      	bne.n	80024e4 <Cmd_iou_set_temp+0xd8>
    	uart_choose_uart5 = 1;
 80024dc:	4b48      	ldr	r3, [pc, #288]	@ (8002600 <Cmd_iou_set_temp+0x1f4>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e002      	b.n	80024ea <Cmd_iou_set_temp+0xde>
    }else{
    	uart_choose_uart5 = 0;
 80024e4:	4b46      	ldr	r3, [pc, #280]	@ (8002600 <Cmd_iou_set_temp+0x1f4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
    }

    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = channel;
 80024f0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80024f4:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(temp >> 8);   //high
 80024f8:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	b29b      	uxth	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(temp & 0xFF); //low
 8002506:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002510:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002514:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	2301      	movs	r3, #1
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2305      	movs	r3, #5
 8002524:	2203      	movs	r2, #3
 8002526:	f008 fb7b 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800252a:	f107 020f 	add.w	r2, r7, #15
 800252e:	f107 0110 	add.w	r1, r7, #16
 8002532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002536:	4618      	mov	r0, r3
 8002538:	f008 fbf8 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 800253c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002540:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02c      	beq.n	80025a4 <Cmd_iou_set_temp+0x198>
        for (int i = 0; i < frame_len; i++) {
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002550:	e010      	b.n	8002574 <Cmd_iou_set_temp+0x168>
            Uart_write(USART1, encoded_frame[i]);
 8002552:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002556:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800255a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	4827      	ldr	r0, [pc, #156]	@ (8002604 <Cmd_iou_set_temp+0x1f8>)
 8002566:	f7ff fba5 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800256a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800256e:	3301      	adds	r3, #1
 8002570:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002574:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002578:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002584:	4293      	cmp	r3, r2
 8002586:	dbe4      	blt.n	8002552 <Cmd_iou_set_temp+0x146>

        }
        set_fsp_packet(encoded_frame, frame_len);
 8002588:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800258c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	f107 0310 	add.w	r3, r7, #16
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fdc5 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800259e:	f7ff fdab 	bl	80020f8 <set_send_flag>
 80025a2:	e022      	b.n	80025ea <Cmd_iou_set_temp+0x1de>
    }else{
    	fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80025a4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80025a8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80025ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2301      	movs	r3, #1
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2305      	movs	r3, #5
 80025b8:	2203      	movs	r2, #3
 80025ba:	f008 fb31 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
    	frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80025be:	f107 020f 	add.w	r2, r7, #15
 80025c2:	f107 0110 	add.w	r1, r7, #16
 80025c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80025ca:	4618      	mov	r0, r3
 80025cc:	f008 fbae 	bl	800ad2c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 80025d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025d4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fda1 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80025e6:	f7ff fd87 	bl	80020f8 <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 80025ea:	2305      	movs	r3, #5
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40005000 	.word	0x40005000
 8002600:	20004850 	.word	0x20004850
 8002604:	40011000 	.word	0x40011000

08002608 <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 8002608:	b580      	push	{r7, lr}
 800260a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800260e:	af02      	add	r7, sp, #8
 8002610:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002614:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002618:	6018      	str	r0, [r3, #0]
 800261a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800261e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002622:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8002624:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002628:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b03      	cmp	r3, #3
 8002630:	dc01      	bgt.n	8002636 <Cmd_iou_get_temp+0x2e>
 8002632:	2303      	movs	r3, #3
 8002634:	e0cf      	b.n	80027d6 <Cmd_iou_get_temp+0x1ce>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8002636:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800263a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b04      	cmp	r3, #4
 8002642:	dd01      	ble.n	8002648 <Cmd_iou_get_temp+0x40>
 8002644:	2302      	movs	r3, #2
 8002646:	e0c6      	b.n	80027d6 <Cmd_iou_get_temp+0x1ce>


    uint8_t sensor = atoi(argv[1]);
 8002648:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800264c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3304      	adds	r3, #4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f00b f8c0 	bl	800d7dc <atoi>
 800265c:	4603      	mov	r3, r0
 800265e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 8002662:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002666:	2b01      	cmp	r3, #1
 8002668:	d901      	bls.n	800266e <Cmd_iou_get_temp+0x66>
 800266a:	2304      	movs	r3, #4
 800266c:	e0b3      	b.n	80027d6 <Cmd_iou_get_temp+0x1ce>

    uint8_t channel = atoi(argv[2]);
 800266e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002672:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3308      	adds	r3, #8
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f00b f8ad 	bl	800d7dc <atoi>
 8002682:	4603      	mov	r3, r0
 8002684:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002688:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 800268c:	2b03      	cmp	r3, #3
 800268e:	d901      	bls.n	8002694 <Cmd_iou_get_temp+0x8c>
 8002690:	2304      	movs	r3, #4
 8002692:	e0a0      	b.n	80027d6 <Cmd_iou_get_temp+0x1ce>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002694:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002698:	4851      	ldr	r0, [pc, #324]	@ (80027e0 <Cmd_iou_get_temp+0x1d8>)
 800269a:	f7ff fe01 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800269e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026a2:	484f      	ldr	r0, [pc, #316]	@ (80027e0 <Cmd_iou_get_temp+0x1d8>)
 80026a4:	f7ff fdfc 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80026a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026ac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026b6:	3b01      	subs	r3, #1
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80026be:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80026cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80026d0:	4a44      	ldr	r2, [pc, #272]	@ (80027e4 <Cmd_iou_get_temp+0x1dc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d103      	bne.n	80026de <Cmd_iou_get_temp+0xd6>
    	uart_choose_uart5 = 1;
 80026d6:	4b44      	ldr	r3, [pc, #272]	@ (80027e8 <Cmd_iou_get_temp+0x1e0>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e002      	b.n	80026e4 <Cmd_iou_get_temp+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 80026de:	4b42      	ldr	r3, [pc, #264]	@ (80027e8 <Cmd_iou_get_temp+0x1e0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_GET_TEMP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];


    payload[0] = sensor;
 80026ea:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80026ee:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = channel;
 80026f2:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80026f6:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80026fa:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80026fe:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	2301      	movs	r3, #1
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2305      	movs	r3, #5
 800270e:	2202      	movs	r2, #2
 8002710:	f008 fa86 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002714:	f107 020f 	add.w	r2, r7, #15
 8002718:	f107 0110 	add.w	r1, r7, #16
 800271c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002720:	4618      	mov	r0, r3
 8002722:	f008 fb03 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 8002726:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800272a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02c      	beq.n	800278e <Cmd_iou_get_temp+0x186>
        for (int i = 0; i < frame_len; i++) {
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800273a:	e010      	b.n	800275e <Cmd_iou_get_temp+0x156>
            Uart_write(USART1, encoded_frame[i]);
 800273c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002740:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002744:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	4827      	ldr	r0, [pc, #156]	@ (80027ec <Cmd_iou_get_temp+0x1e4>)
 8002750:	f7ff fab0 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002754:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002758:	3301      	adds	r3, #1
 800275a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800275e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002762:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800276e:	4293      	cmp	r3, r2
 8002770:	dbe4      	blt.n	800273c <Cmd_iou_get_temp+0x134>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002772:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002776:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fcd0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002788:	f7ff fcb6 	bl	80020f8 <set_send_flag>
 800278c:	e022      	b.n	80027d4 <Cmd_iou_get_temp+0x1cc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800278e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002792:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002796:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	2301      	movs	r3, #1
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2305      	movs	r3, #5
 80027a2:	2202      	movs	r2, #2
 80027a4:	f008 fa3c 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80027a8:	f107 020f 	add.w	r2, r7, #15
 80027ac:	f107 0110 	add.w	r1, r7, #16
 80027b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027b4:	4618      	mov	r0, r3
 80027b6:	f008 fab9 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80027ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027be:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fcac 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80027d0:	f7ff fc92 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80027d4:	2305      	movs	r3, #5
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40005000 	.word	0x40005000
 80027e8:	20004850 	.word	0x20004850
 80027ec:	40011000 	.word	0x40011000

080027f0 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027fc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002800:	6018      	str	r0, [r3, #0]
 8002802:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002806:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800280a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800280c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002810:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b02      	cmp	r3, #2
 8002818:	dc01      	bgt.n	800281e <Cmd_iou_temp_setpoint+0x2e>
 800281a:	2303      	movs	r3, #3
 800281c:	e0b8      	b.n	8002990 <Cmd_iou_temp_setpoint+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800281e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002822:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	dd01      	ble.n	8002830 <Cmd_iou_temp_setpoint+0x40>
 800282c:	2302      	movs	r3, #2
 800282e:	e0af      	b.n	8002990 <Cmd_iou_temp_setpoint+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8002830:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002834:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3304      	adds	r3, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f00a ffcc 	bl	800d7dc <atoi>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800284a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800284e:	2b03      	cmp	r3, #3
 8002850:	d901      	bls.n	8002856 <Cmd_iou_temp_setpoint+0x66>
 8002852:	2304      	movs	r3, #4
 8002854:	e09c      	b.n	8002990 <Cmd_iou_temp_setpoint+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002856:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800285a:	4850      	ldr	r0, [pc, #320]	@ (800299c <Cmd_iou_temp_setpoint+0x1ac>)
 800285c:	f7ff fd20 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002860:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002864:	484d      	ldr	r0, [pc, #308]	@ (800299c <Cmd_iou_temp_setpoint+0x1ac>)
 8002866:	f7ff fd1b 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800286a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800286e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002878:	3b01      	subs	r3, #1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002880:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	4413      	add	r3, r2
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800288e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002892:	4a43      	ldr	r2, [pc, #268]	@ (80029a0 <Cmd_iou_temp_setpoint+0x1b0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d103      	bne.n	80028a0 <Cmd_iou_temp_setpoint+0xb0>
    	uart_choose_uart5 = 1;
 8002898:	4b42      	ldr	r3, [pc, #264]	@ (80029a4 <Cmd_iou_temp_setpoint+0x1b4>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e002      	b.n	80028a6 <Cmd_iou_temp_setpoint+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 80028a0:	4b40      	ldr	r3, [pc, #256]	@ (80029a4 <Cmd_iou_temp_setpoint+0x1b4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 80028ac:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80028b0:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80028b4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80028b8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80028bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	2301      	movs	r3, #1
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2305      	movs	r3, #5
 80028c8:	2201      	movs	r2, #1
 80028ca:	f008 f9a9 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80028ce:	f107 020f 	add.w	r2, r7, #15
 80028d2:	f107 0110 	add.w	r1, r7, #16
 80028d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028da:	4618      	mov	r0, r3
 80028dc:	f008 fa26 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 80028e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028e4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d02c      	beq.n	8002948 <Cmd_iou_temp_setpoint+0x158>
        for (int i = 0; i < frame_len; i++) {
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80028f4:	e010      	b.n	8002918 <Cmd_iou_temp_setpoint+0x128>
            Uart_write(USART1, encoded_frame[i]);
 80028f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028fa:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80028fe:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4619      	mov	r1, r3
 8002908:	4827      	ldr	r0, [pc, #156]	@ (80029a8 <Cmd_iou_temp_setpoint+0x1b8>)
 800290a:	f7ff f9d3 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800290e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002912:	3301      	adds	r3, #1
 8002914:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002918:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800291c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002928:	4293      	cmp	r3, r2
 800292a:	dbe4      	blt.n	80028f6 <Cmd_iou_temp_setpoint+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800292c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002930:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fbf3 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002942:	f7ff fbd9 	bl	80020f8 <set_send_flag>
 8002946:	e022      	b.n	800298e <Cmd_iou_temp_setpoint+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002948:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800294c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	2301      	movs	r3, #1
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2305      	movs	r3, #5
 800295c:	2201      	movs	r2, #1
 800295e:	f008 f95f 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002962:	f107 020f 	add.w	r2, r7, #15
 8002966:	f107 0110 	add.w	r1, r7, #16
 800296a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800296e:	4618      	mov	r0, r3
 8002970:	f008 f9dc 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002974:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002978:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fbcf 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800298a:	f7ff fbb5 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800298e:	2305      	movs	r3, #5
}
 8002990:	4618      	mov	r0, r3
 8002992:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40020000 	.word	0x40020000
 80029a0:	40005000 	.word	0x40005000
 80029a4:	20004850 	.word	0x20004850
 80029a8:	40011000 	.word	0x40011000

080029ac <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80029b2:	af02      	add	r7, sp, #8
 80029b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029b8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029bc:	6018      	str	r0, [r3, #0]
 80029be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029c2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029c6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80029c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029cc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	dc01      	bgt.n	80029da <Cmd_iou_tec_ena+0x2e>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0b8      	b.n	8002b4c <Cmd_iou_tec_ena+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80029da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029de:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	dd01      	ble.n	80029ec <Cmd_iou_tec_ena+0x40>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0af      	b.n	8002b4c <Cmd_iou_tec_ena+0x1a0>
    uint8_t channel = atoi(argv[1]);
 80029ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029f0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3304      	adds	r3, #4
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00a feee 	bl	800d7dc <atoi>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002a06:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d901      	bls.n	8002a12 <Cmd_iou_tec_ena+0x66>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e09c      	b.n	8002b4c <Cmd_iou_tec_ena+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002a12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a16:	4850      	ldr	r0, [pc, #320]	@ (8002b58 <Cmd_iou_tec_ena+0x1ac>)
 8002a18:	f7ff fc42 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002a1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a20:	484d      	ldr	r0, [pc, #308]	@ (8002b58 <Cmd_iou_tec_ena+0x1ac>)
 8002a22:	f7ff fc3d 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002a26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a2a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a34:	3b01      	subs	r3, #1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002a3c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002a4a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a4e:	4a43      	ldr	r2, [pc, #268]	@ (8002b5c <Cmd_iou_tec_ena+0x1b0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <Cmd_iou_tec_ena+0xb0>
    	uart_choose_uart5 = 1;
 8002a54:	4b42      	ldr	r3, [pc, #264]	@ (8002b60 <Cmd_iou_tec_ena+0x1b4>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e002      	b.n	8002a62 <Cmd_iou_tec_ena+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002a5c:	4b40      	ldr	r3, [pc, #256]	@ (8002b60 <Cmd_iou_tec_ena+0x1b4>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_ENA;
 8002a62:	2304      	movs	r3, #4
 8002a64:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002a68:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002a6c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a70:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a74:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002a78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	2301      	movs	r3, #1
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2305      	movs	r3, #5
 8002a84:	2201      	movs	r2, #1
 8002a86:	f008 f8cb 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002a8a:	f107 020f 	add.w	r2, r7, #15
 8002a8e:	f107 0110 	add.w	r1, r7, #16
 8002a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a96:	4618      	mov	r0, r3
 8002a98:	f008 f948 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002a9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002aa0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d02c      	beq.n	8002b04 <Cmd_iou_tec_ena+0x158>
        for (int i = 0; i < frame_len; i++) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ab0:	e010      	b.n	8002ad4 <Cmd_iou_tec_ena+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002ab2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ab6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002aba:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002abe:	4413      	add	r3, r2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4827      	ldr	r0, [pc, #156]	@ (8002b64 <Cmd_iou_tec_ena+0x1b8>)
 8002ac6:	f7ff f8f5 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002aca:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ad4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ad8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	dbe4      	blt.n	8002ab2 <Cmd_iou_tec_ena+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002ae8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002aec:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	f107 0310 	add.w	r3, r7, #16
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fb15 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002afe:	f7ff fafb 	bl	80020f8 <set_send_flag>
 8002b02:	e022      	b.n	8002b4a <Cmd_iou_tec_ena+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002b04:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002b08:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002b0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	2301      	movs	r3, #1
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2305      	movs	r3, #5
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f008 f881 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002b1e:	f107 020f 	add.w	r2, r7, #15
 8002b22:	f107 0110 	add.w	r1, r7, #16
 8002b26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f008 f8fe 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002b30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b34:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff faf1 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002b46:	f7ff fad7 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002b4a:	2305      	movs	r3, #5
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40005000 	.word	0x40005000
 8002b60:	20004850 	.word	0x20004850
 8002b64:	40011000 	.word	0x40011000

08002b68 <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002b6e:	af02      	add	r7, sp, #8
 8002b70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b74:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b78:	6018      	str	r0, [r3, #0]
 8002b7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b7e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002b82:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002b84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b88:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	dc01      	bgt.n	8002b96 <Cmd_iou_tec_dis+0x2e>
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0b8      	b.n	8002d08 <Cmd_iou_tec_dis+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002b96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b9a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	dd01      	ble.n	8002ba8 <Cmd_iou_tec_dis+0x40>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0af      	b.n	8002d08 <Cmd_iou_tec_dis+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8002ba8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f00a fe10 	bl	800d7dc <atoi>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002bc2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d901      	bls.n	8002bce <Cmd_iou_tec_dis+0x66>
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e09c      	b.n	8002d08 <Cmd_iou_tec_dis+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002bce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bd2:	4850      	ldr	r0, [pc, #320]	@ (8002d14 <Cmd_iou_tec_dis+0x1ac>)
 8002bd4:	f7ff fb64 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002bd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bdc:	484d      	ldr	r0, [pc, #308]	@ (8002d14 <Cmd_iou_tec_dis+0x1ac>)
 8002bde:	f7ff fb5f 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002be2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002be6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002bf8:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002c06:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002c0a:	4a43      	ldr	r2, [pc, #268]	@ (8002d18 <Cmd_iou_tec_dis+0x1b0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d103      	bne.n	8002c18 <Cmd_iou_tec_dis+0xb0>
    	uart_choose_uart5 = 1;
 8002c10:	4b42      	ldr	r3, [pc, #264]	@ (8002d1c <Cmd_iou_tec_dis+0x1b4>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e002      	b.n	8002c1e <Cmd_iou_tec_dis+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002c18:	4b40      	ldr	r3, [pc, #256]	@ (8002d1c <Cmd_iou_tec_dis+0x1b4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_TEC_DIS;
 8002c1e:	2305      	movs	r3, #5
 8002c20:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002c24:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002c28:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002c2c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002c30:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002c34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2305      	movs	r3, #5
 8002c40:	2201      	movs	r2, #1
 8002c42:	f007 ffed 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002c46:	f107 020f 	add.w	r2, r7, #15
 8002c4a:	f107 0110 	add.w	r1, r7, #16
 8002c4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c52:	4618      	mov	r0, r3
 8002c54:	f008 f86a 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002c58:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c5c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02c      	beq.n	8002cc0 <Cmd_iou_tec_dis+0x158>
        for (int i = 0; i < frame_len; i++) {
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002c6c:	e010      	b.n	8002c90 <Cmd_iou_tec_dis+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002c6e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c72:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002c76:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4827      	ldr	r0, [pc, #156]	@ (8002d20 <Cmd_iou_tec_dis+0x1b8>)
 8002c82:	f7ff f817 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002c86:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002c90:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c94:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	dbe4      	blt.n	8002c6e <Cmd_iou_tec_dis+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002ca4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ca8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fa37 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002cba:	f7ff fa1d 	bl	80020f8 <set_send_flag>
 8002cbe:	e022      	b.n	8002d06 <Cmd_iou_tec_dis+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002cc0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002cc4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002cc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f007 ffa3 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002cda:	f107 020f 	add.w	r2, r7, #15
 8002cde:	f107 0110 	add.w	r1, r7, #16
 8002ce2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f008 f820 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002cec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cf0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	f107 0310 	add.w	r3, r7, #16
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fa13 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002d02:	f7ff f9f9 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002d06:	2305      	movs	r3, #5
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40020000 	.word	0x40020000
 8002d18:	40005000 	.word	0x40005000
 8002d1c:	20004850 	.word	0x20004850
 8002d20:	40011000 	.word	0x40011000

08002d24 <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002d2a:	af02      	add	r7, sp, #8
 8002d2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d30:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d34:	6018      	str	r0, [r3, #0]
 8002d36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d3a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d3e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002d40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d44:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	dc01      	bgt.n	8002d52 <Cmd_iou_tec_ena_auto+0x2e>
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0b8      	b.n	8002ec4 <Cmd_iou_tec_ena_auto+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002d52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d56:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	dd01      	ble.n	8002d64 <Cmd_iou_tec_ena_auto+0x40>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0af      	b.n	8002ec4 <Cmd_iou_tec_ena_auto+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8002d64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d68:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f00a fd32 	bl	800d7dc <atoi>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002d7e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d901      	bls.n	8002d8a <Cmd_iou_tec_ena_auto+0x66>
 8002d86:	2304      	movs	r3, #4
 8002d88:	e09c      	b.n	8002ec4 <Cmd_iou_tec_ena_auto+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002d8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d8e:	4850      	ldr	r0, [pc, #320]	@ (8002ed0 <Cmd_iou_tec_ena_auto+0x1ac>)
 8002d90:	f7ff fa86 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002d94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d98:	484d      	ldr	r0, [pc, #308]	@ (8002ed0 <Cmd_iou_tec_ena_auto+0x1ac>)
 8002d9a:	f7ff fa81 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002d9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002da2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dac:	3b01      	subs	r3, #1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002db4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002dc2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002dc6:	4a43      	ldr	r2, [pc, #268]	@ (8002ed4 <Cmd_iou_tec_ena_auto+0x1b0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <Cmd_iou_tec_ena_auto+0xb0>
    	uart_choose_uart5 = 1;
 8002dcc:	4b42      	ldr	r3, [pc, #264]	@ (8002ed8 <Cmd_iou_tec_ena_auto+0x1b4>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e002      	b.n	8002dda <Cmd_iou_tec_ena_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002dd4:	4b40      	ldr	r3, [pc, #256]	@ (8002ed8 <Cmd_iou_tec_ena_auto+0x1b4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 8002dda:	2306      	movs	r3, #6
 8002ddc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002de0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002de4:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002de8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002dec:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002df0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2301      	movs	r3, #1
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2305      	movs	r3, #5
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f007 ff0f 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e02:	f107 020f 	add.w	r2, r7, #15
 8002e06:	f107 0110 	add.w	r1, r7, #16
 8002e0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f007 ff8c 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 8002e14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e18:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d02c      	beq.n	8002e7c <Cmd_iou_tec_ena_auto+0x158>
        for (int i = 0; i < frame_len; i++) {
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e28:	e010      	b.n	8002e4c <Cmd_iou_tec_ena_auto+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002e2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e2e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002e32:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4827      	ldr	r0, [pc, #156]	@ (8002edc <Cmd_iou_tec_ena_auto+0x1b8>)
 8002e3e:	f7fe ff39 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002e42:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e46:	3301      	adds	r3, #1
 8002e48:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e50:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	dbe4      	blt.n	8002e2a <Cmd_iou_tec_ena_auto+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002e60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e64:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f959 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002e76:	f7ff f93f 	bl	80020f8 <set_send_flag>
 8002e7a:	e022      	b.n	8002ec2 <Cmd_iou_tec_ena_auto+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002e7c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002e80:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002e84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	2305      	movs	r3, #5
 8002e90:	2201      	movs	r2, #1
 8002e92:	f007 fec5 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e96:	f107 020f 	add.w	r2, r7, #15
 8002e9a:	f107 0110 	add.w	r1, r7, #16
 8002e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f007 ff42 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002ea8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002eac:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f935 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002ebe:	f7ff f91b 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002ec2:	2305      	movs	r3, #5
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40005000 	.word	0x40005000
 8002ed8:	20004850 	.word	0x20004850
 8002edc:	40011000 	.word	0x40011000

08002ee0 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002ee6:	af02      	add	r7, sp, #8
 8002ee8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002eec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002ef0:	6018      	str	r0, [r3, #0]
 8002ef2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ef6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002efa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002efc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f00:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	dc01      	bgt.n	8002f0e <Cmd_iou_tec_dis_auto+0x2e>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e0b8      	b.n	8003080 <Cmd_iou_tec_dis_auto+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002f0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f12:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	dd01      	ble.n	8002f20 <Cmd_iou_tec_dis_auto+0x40>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e0af      	b.n	8003080 <Cmd_iou_tec_dis_auto+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8002f20:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f24:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f00a fc54 	bl	800d7dc <atoi>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002f3a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d901      	bls.n	8002f46 <Cmd_iou_tec_dis_auto+0x66>
 8002f42:	2304      	movs	r3, #4
 8002f44:	e09c      	b.n	8003080 <Cmd_iou_tec_dis_auto+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002f46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f4a:	4850      	ldr	r0, [pc, #320]	@ (800308c <Cmd_iou_tec_dis_auto+0x1ac>)
 8002f4c:	f7ff f9a8 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002f50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f54:	484d      	ldr	r0, [pc, #308]	@ (800308c <Cmd_iou_tec_dis_auto+0x1ac>)
 8002f56:	f7ff f9a3 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002f5a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f5e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002f70:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002f7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002f82:	4a43      	ldr	r2, [pc, #268]	@ (8003090 <Cmd_iou_tec_dis_auto+0x1b0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d103      	bne.n	8002f90 <Cmd_iou_tec_dis_auto+0xb0>
    	uart_choose_uart5 = 1;
 8002f88:	4b42      	ldr	r3, [pc, #264]	@ (8003094 <Cmd_iou_tec_dis_auto+0x1b4>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e002      	b.n	8002f96 <Cmd_iou_tec_dis_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002f90:	4b40      	ldr	r3, [pc, #256]	@ (8003094 <Cmd_iou_tec_dis_auto+0x1b4>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 8002f96:	2307      	movs	r3, #7
 8002f98:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002f9c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002fa0:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002fa4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002fa8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002fac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f007 fe31 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002fbe:	f107 020f 	add.w	r2, r7, #15
 8002fc2:	f107 0110 	add.w	r1, r7, #16
 8002fc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f007 feae 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 8002fd0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002fd4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d02c      	beq.n	8003038 <Cmd_iou_tec_dis_auto+0x158>
        for (int i = 0; i < frame_len; i++) {
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002fe4:	e010      	b.n	8003008 <Cmd_iou_tec_dis_auto+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002fe6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002fea:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002fee:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4827      	ldr	r0, [pc, #156]	@ (8003098 <Cmd_iou_tec_dis_auto+0x1b8>)
 8002ffa:	f7fe fe5b 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002ffe:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003002:	3301      	adds	r3, #1
 8003004:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003008:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800300c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003018:	4293      	cmp	r3, r2
 800301a:	dbe4      	blt.n	8002fe6 <Cmd_iou_tec_dis_auto+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800301c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003020:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	f107 0310 	add.w	r3, r7, #16
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f87b 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003032:	f7ff f861 	bl	80020f8 <set_send_flag>
 8003036:	e022      	b.n	800307e <Cmd_iou_tec_dis_auto+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003038:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800303c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003040:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	2301      	movs	r3, #1
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	2305      	movs	r3, #5
 800304c:	2201      	movs	r2, #1
 800304e:	f007 fde7 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003052:	f107 020f 	add.w	r2, r7, #15
 8003056:	f107 0110 	add.w	r1, r7, #16
 800305a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800305e:	4618      	mov	r0, r3
 8003060:	f007 fe64 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003064:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003068:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	f107 0310 	add.w	r3, r7, #16
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff f857 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800307a:	f7ff f83d 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800307e:	2305      	movs	r3, #5
}
 8003080:	4618      	mov	r0, r3
 8003082:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40020000 	.word	0x40020000
 8003090:	40005000 	.word	0x40005000
 8003094:	20004850 	.word	0x20004850
 8003098:	40011000 	.word	0x40011000

0800309c <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 800309c:	b580      	push	{r7, lr}
 800309e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80030a2:	af02      	add	r7, sp, #8
 80030a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030a8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030ac:	6018      	str	r0, [r3, #0]
 80030ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030b2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80030b6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 4) return CMDLINE_TOO_FEW_ARGS;
 80030b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030bc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	dc01      	bgt.n	80030ca <Cmd_iou_tec_set_output+0x2e>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0ef      	b.n	80032aa <Cmd_iou_tec_set_output+0x20e>
    if ((argc-1) > 4) return CMDLINE_TOO_MANY_ARGS;
 80030ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030ce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	dd01      	ble.n	80030dc <Cmd_iou_tec_set_output+0x40>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0e6      	b.n	80032aa <Cmd_iou_tec_set_output+0x20e>
    uint8_t channel = atoi(argv[1]);
 80030dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3304      	adds	r3, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00a fb76 	bl	800d7dc <atoi>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80030f6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d901      	bls.n	8003102 <Cmd_iou_tec_set_output+0x66>
 80030fe:	2304      	movs	r3, #4
 8003100:	e0d3      	b.n	80032aa <Cmd_iou_tec_set_output+0x20e>

    uint8_t mode = atoi(argv[2]);
 8003102:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003106:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3308      	adds	r3, #8
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f00a fb63 	bl	800d7dc <atoi>
 8003116:	4603      	mov	r3, r0
 8003118:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 800311c:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003120:	2b01      	cmp	r3, #1
 8003122:	d901      	bls.n	8003128 <Cmd_iou_tec_set_output+0x8c>
 8003124:	2304      	movs	r3, #4
 8003126:	e0c0      	b.n	80032aa <Cmd_iou_tec_set_output+0x20e>

    uint16_t vol = atoi(argv[3]);
 8003128:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800312c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	330c      	adds	r3, #12
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f00a fb50 	bl	800d7dc <atoi>
 800313c:	4603      	mov	r3, r0
 800313e:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 8003142:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003146:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800314a:	d901      	bls.n	8003150 <Cmd_iou_tec_set_output+0xb4>
 800314c:	2304      	movs	r3, #4
 800314e:	e0ac      	b.n	80032aa <Cmd_iou_tec_set_output+0x20e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003150:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003154:	4857      	ldr	r0, [pc, #348]	@ (80032b4 <Cmd_iou_tec_set_output+0x218>)
 8003156:	f7ff f8a3 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800315a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800315e:	4855      	ldr	r0, [pc, #340]	@ (80032b4 <Cmd_iou_tec_set_output+0x218>)
 8003160:	f7ff f89e 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003164:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003168:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003172:	3b01      	subs	r3, #1
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800317a:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	4413      	add	r3, r2
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003188:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800318c:	4a4a      	ldr	r2, [pc, #296]	@ (80032b8 <Cmd_iou_tec_set_output+0x21c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d103      	bne.n	800319a <Cmd_iou_tec_set_output+0xfe>
    	uart_choose_uart5 = 1;
 8003192:	4b4a      	ldr	r3, [pc, #296]	@ (80032bc <Cmd_iou_tec_set_output+0x220>)
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e002      	b.n	80031a0 <Cmd_iou_tec_set_output+0x104>
    }else{
    	uart_choose_uart5 = 0;
 800319a:	4b48      	ldr	r3, [pc, #288]	@ (80032bc <Cmd_iou_tec_set_output+0x220>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 80031a0:	2308      	movs	r3, #8
 80031a2:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];
    payload[0] = channel;
 80031a6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80031aa:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1] = mode;
 80031ae:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80031b2:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(vol >> 8);   //high
 80031b6:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	b29b      	uxth	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(vol & 0xFF); //low
 80031c4:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80031ce:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80031d2:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80031d6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	2301      	movs	r3, #1
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2305      	movs	r3, #5
 80031e2:	2204      	movs	r2, #4
 80031e4:	f007 fd1c 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80031e8:	f107 020b 	add.w	r2, r7, #11
 80031ec:	f107 010c 	add.w	r1, r7, #12
 80031f0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80031f4:	4618      	mov	r0, r3
 80031f6:	f007 fd99 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 80031fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031fe:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02c      	beq.n	8003262 <Cmd_iou_tec_set_output+0x1c6>
        for (int i = 0; i < frame_len; i++) {
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800320e:	e010      	b.n	8003232 <Cmd_iou_tec_set_output+0x196>
            Uart_write(USART1, encoded_frame[i]);
 8003210:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003214:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003218:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800321c:	4413      	add	r3, r2
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	4619      	mov	r1, r3
 8003222:	4827      	ldr	r0, [pc, #156]	@ (80032c0 <Cmd_iou_tec_set_output+0x224>)
 8003224:	f7fe fd46 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003228:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800322c:	3301      	adds	r3, #1
 800322e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003232:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003236:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003242:	4293      	cmp	r3, r2
 8003244:	dbe4      	blt.n	8003210 <Cmd_iou_tec_set_output+0x174>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003246:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800324a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ff66 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800325c:	f7fe ff4c 	bl	80020f8 <set_send_flag>
 8003260:	e022      	b.n	80032a8 <Cmd_iou_tec_set_output+0x20c>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003262:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003266:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800326a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2301      	movs	r3, #1
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2305      	movs	r3, #5
 8003276:	2204      	movs	r2, #4
 8003278:	f007 fcd2 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800327c:	f107 020b 	add.w	r2, r7, #11
 8003280:	f107 010c 	add.w	r1, r7, #12
 8003284:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003288:	4618      	mov	r0, r3
 800328a:	f007 fd4f 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800328e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003292:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	f107 030c 	add.w	r3, r7, #12
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ff42 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80032a4:	f7fe ff28 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80032a8:	2305      	movs	r3, #5
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40005000 	.word	0x40005000
 80032bc:	20004850 	.word	0x20004850
 80032c0:	40011000 	.word	0x40011000

080032c4 <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80032ca:	af02      	add	r7, sp, #8
 80032cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032d4:	6018      	str	r0, [r3, #0]
 80032d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032da:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80032de:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80032e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032e4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	dc01      	bgt.n	80032f2 <Cmd_iou_tec_auto_vol+0x2e>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e0d8      	b.n	80034a4 <Cmd_iou_tec_auto_vol+0x1e0>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80032f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032f6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	dd01      	ble.n	8003304 <Cmd_iou_tec_auto_vol+0x40>
 8003300:	2302      	movs	r3, #2
 8003302:	e0cf      	b.n	80034a4 <Cmd_iou_tec_auto_vol+0x1e0>
    uint8_t channel = atoi(argv[1]);
 8003304:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003308:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3304      	adds	r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f00a fa62 	bl	800d7dc <atoi>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800331e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003322:	2b03      	cmp	r3, #3
 8003324:	d901      	bls.n	800332a <Cmd_iou_tec_auto_vol+0x66>
 8003326:	2304      	movs	r3, #4
 8003328:	e0bc      	b.n	80034a4 <Cmd_iou_tec_auto_vol+0x1e0>

    uint16_t vol = atoi(argv[2]);
 800332a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800332e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3308      	adds	r3, #8
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f00a fa4f 	bl	800d7dc <atoi>
 800333e:	4603      	mov	r3, r0
 8003340:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 8003344:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003348:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800334c:	d901      	bls.n	8003352 <Cmd_iou_tec_auto_vol+0x8e>
 800334e:	2304      	movs	r3, #4
 8003350:	e0a8      	b.n	80034a4 <Cmd_iou_tec_auto_vol+0x1e0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003352:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003356:	4856      	ldr	r0, [pc, #344]	@ (80034b0 <Cmd_iou_tec_auto_vol+0x1ec>)
 8003358:	f7fe ffa2 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800335c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003360:	4853      	ldr	r0, [pc, #332]	@ (80034b0 <Cmd_iou_tec_auto_vol+0x1ec>)
 8003362:	f7fe ff9d 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003366:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800336a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003374:	3b01      	subs	r3, #1
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800337c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	4413      	add	r3, r2
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800338a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800338e:	4a49      	ldr	r2, [pc, #292]	@ (80034b4 <Cmd_iou_tec_auto_vol+0x1f0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d103      	bne.n	800339c <Cmd_iou_tec_auto_vol+0xd8>
    	uart_choose_uart5 = 1;
 8003394:	4b48      	ldr	r3, [pc, #288]	@ (80034b8 <Cmd_iou_tec_auto_vol+0x1f4>)
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e002      	b.n	80033a2 <Cmd_iou_tec_auto_vol+0xde>
    }else{
    	uart_choose_uart5 = 0;
 800339c:	4b46      	ldr	r3, [pc, #280]	@ (80034b8 <Cmd_iou_tec_auto_vol+0x1f4>)
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 80033a2:	2309      	movs	r3, #9
 80033a4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0] = channel;
 80033a8:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80033ac:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(vol >> 8);   //high
 80033b0:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(vol & 0xFF); //low
 80033be:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80033c8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80033cc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80033d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	2301      	movs	r3, #1
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2305      	movs	r3, #5
 80033dc:	2203      	movs	r2, #3
 80033de:	f007 fc1f 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80033e2:	f107 020f 	add.w	r2, r7, #15
 80033e6:	f107 0110 	add.w	r1, r7, #16
 80033ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80033ee:	4618      	mov	r0, r3
 80033f0:	f007 fc9c 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 80033f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033f8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d02c      	beq.n	800345c <Cmd_iou_tec_auto_vol+0x198>
        for (int i = 0; i < frame_len; i++) {
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003408:	e010      	b.n	800342c <Cmd_iou_tec_auto_vol+0x168>
            Uart_write(USART1, encoded_frame[i]);
 800340a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800340e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8003412:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003416:	4413      	add	r3, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	4827      	ldr	r0, [pc, #156]	@ (80034bc <Cmd_iou_tec_auto_vol+0x1f8>)
 800341e:	f7fe fc49 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003422:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003426:	3301      	adds	r3, #1
 8003428:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800342c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003430:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800343c:	4293      	cmp	r3, r2
 800343e:	dbe4      	blt.n	800340a <Cmd_iou_tec_auto_vol+0x146>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003440:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003444:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	f107 0310 	add.w	r3, r7, #16
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe fe69 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003456:	f7fe fe4f 	bl	80020f8 <set_send_flag>
 800345a:	e022      	b.n	80034a2 <Cmd_iou_tec_auto_vol+0x1de>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800345c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003460:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003464:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	2301      	movs	r3, #1
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2305      	movs	r3, #5
 8003470:	2203      	movs	r2, #3
 8003472:	f007 fbd5 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003476:	f107 020f 	add.w	r2, r7, #15
 800347a:	f107 0110 	add.w	r1, r7, #16
 800347e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003482:	4618      	mov	r0, r3
 8003484:	f007 fc52 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003488:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800348c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	f107 0310 	add.w	r3, r7, #16
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe fe45 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800349e:	f7fe fe2b 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80034a2:	2305      	movs	r3, #5
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40020000 	.word	0x40020000
 80034b4:	40005000 	.word	0x40005000
 80034b8:	20004850 	.word	0x20004850
 80034bc:	40011000 	.word	0x40011000

080034c0 <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80034cc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80034d0:	6018      	str	r0, [r3, #0]
 80034d2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80034d6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80034da:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80034dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80034e0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	dc01      	bgt.n	80034ee <Cmd_iou_tec_status+0x2e>
 80034ea:	2303      	movs	r3, #3
 80034ec:	e097      	b.n	800361e <Cmd_iou_tec_status+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80034ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80034f2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	dd01      	ble.n	8003500 <Cmd_iou_tec_status+0x40>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e08e      	b.n	800361e <Cmd_iou_tec_status+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003500:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003504:	4848      	ldr	r0, [pc, #288]	@ (8003628 <Cmd_iou_tec_status+0x168>)
 8003506:	f7fe fecb 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800350a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800350e:	4846      	ldr	r0, [pc, #280]	@ (8003628 <Cmd_iou_tec_status+0x168>)
 8003510:	f7fe fec6 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003514:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003518:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003522:	3b01      	subs	r3, #1
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800352a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	4413      	add	r3, r2
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003538:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800353c:	4a3b      	ldr	r2, [pc, #236]	@ (800362c <Cmd_iou_tec_status+0x16c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d103      	bne.n	800354a <Cmd_iou_tec_status+0x8a>
    	uart_choose_uart5 = 1;
 8003542:	4b3b      	ldr	r3, [pc, #236]	@ (8003630 <Cmd_iou_tec_status+0x170>)
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e002      	b.n	8003550 <Cmd_iou_tec_status+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800354a:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <Cmd_iou_tec_status+0x170>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 8003550:	230a      	movs	r3, #10
 8003552:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003556:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800355a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800355e:	2201      	movs	r2, #1
 8003560:	2105      	movs	r1, #5
 8003562:	f007 fb35 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003566:	f107 020f 	add.w	r2, r7, #15
 800356a:	f107 0110 	add.w	r1, r7, #16
 800356e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003572:	4618      	mov	r0, r3
 8003574:	f007 fbda 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003578:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800357c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d02c      	beq.n	80035e0 <Cmd_iou_tec_status+0x120>
        for (int i = 0; i < frame_len; i++) {
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800358c:	e010      	b.n	80035b0 <Cmd_iou_tec_status+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 800358e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003592:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003596:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	4619      	mov	r1, r3
 80035a0:	4824      	ldr	r0, [pc, #144]	@ (8003634 <Cmd_iou_tec_status+0x174>)
 80035a2:	f7fe fb87 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80035a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80035aa:	3301      	adds	r3, #1
 80035ac:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80035b0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80035b4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80035c0:	4293      	cmp	r3, r2
 80035c2:	dbe4      	blt.n	800358e <Cmd_iou_tec_status+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80035c4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80035c8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe fda7 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80035da:	f7fe fd8d 	bl	80020f8 <set_send_flag>
 80035de:	e01d      	b.n	800361c <Cmd_iou_tec_status+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80035e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80035e4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80035e8:	2201      	movs	r2, #1
 80035ea:	2105      	movs	r1, #5
 80035ec:	f007 faf0 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80035f0:	f107 020f 	add.w	r2, r7, #15
 80035f4:	f107 0110 	add.w	r1, r7, #16
 80035f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80035fc:	4618      	mov	r0, r3
 80035fe:	f007 fb95 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003602:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003606:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fd88 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003618:	f7fe fd6e 	bl	80020f8 <set_send_flag>
    }
    return CMDLINE_PENDING;
 800361c:	2305      	movs	r3, #5
}
 800361e:	4618      	mov	r0, r3
 8003620:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40020000 	.word	0x40020000
 800362c:	40005000 	.word	0x40005000
 8003630:	20004850 	.word	0x20004850
 8003634:	40011000 	.word	0x40011000

08003638 <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 8003638:	b580      	push	{r7, lr}
 800363a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800363e:	af00      	add	r7, sp, #0
 8003640:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003644:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003648:	6018      	str	r0, [r3, #0]
 800364a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800364e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003652:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003654:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003658:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	dc01      	bgt.n	8003666 <Cmd_iou_tec_log_ena+0x2e>
 8003662:	2303      	movs	r3, #3
 8003664:	e097      	b.n	8003796 <Cmd_iou_tec_log_ena+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003666:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800366a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b02      	cmp	r3, #2
 8003672:	dd01      	ble.n	8003678 <Cmd_iou_tec_log_ena+0x40>
 8003674:	2302      	movs	r3, #2
 8003676:	e08e      	b.n	8003796 <Cmd_iou_tec_log_ena+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003678:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800367c:	4848      	ldr	r0, [pc, #288]	@ (80037a0 <Cmd_iou_tec_log_ena+0x168>)
 800367e:	f7fe fe0f 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003686:	4846      	ldr	r0, [pc, #280]	@ (80037a0 <Cmd_iou_tec_log_ena+0x168>)
 8003688:	f7fe fe0a 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800368c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003690:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800369a:	3b01      	subs	r3, #1
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80036a2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80036b0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80036b4:	4a3b      	ldr	r2, [pc, #236]	@ (80037a4 <Cmd_iou_tec_log_ena+0x16c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d103      	bne.n	80036c2 <Cmd_iou_tec_log_ena+0x8a>
    	uart_choose_uart5 = 1;
 80036ba:	4b3b      	ldr	r3, [pc, #236]	@ (80037a8 <Cmd_iou_tec_log_ena+0x170>)
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e002      	b.n	80036c8 <Cmd_iou_tec_log_ena+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80036c2:	4b39      	ldr	r3, [pc, #228]	@ (80037a8 <Cmd_iou_tec_log_ena+0x170>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 80036c8:	230b      	movs	r3, #11
 80036ca:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80036ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036d2:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80036d6:	2201      	movs	r2, #1
 80036d8:	2105      	movs	r1, #5
 80036da:	f007 fa79 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80036de:	f107 020f 	add.w	r2, r7, #15
 80036e2:	f107 0110 	add.w	r1, r7, #16
 80036e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036ea:	4618      	mov	r0, r3
 80036ec:	f007 fb1e 	bl	800ad2c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80036f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036f4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02c      	beq.n	8003758 <Cmd_iou_tec_log_ena+0x120>
        for (int i = 0; i < frame_len; i++) {
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003704:	e010      	b.n	8003728 <Cmd_iou_tec_log_ena+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8003706:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800370a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800370e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003712:	4413      	add	r3, r2
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	4619      	mov	r1, r3
 8003718:	4824      	ldr	r0, [pc, #144]	@ (80037ac <Cmd_iou_tec_log_ena+0x174>)
 800371a:	f7fe facb 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800371e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003722:	3301      	adds	r3, #1
 8003724:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003728:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800372c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003738:	4293      	cmp	r3, r2
 800373a:	dbe4      	blt.n	8003706 <Cmd_iou_tec_log_ena+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800373c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003740:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	f107 0310 	add.w	r3, r7, #16
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fceb 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003752:	f7fe fcd1 	bl	80020f8 <set_send_flag>
 8003756:	e01d      	b.n	8003794 <Cmd_iou_tec_log_ena+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003758:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800375c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003760:	2201      	movs	r2, #1
 8003762:	2105      	movs	r1, #5
 8003764:	f007 fa34 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003768:	f107 020f 	add.w	r2, r7, #15
 800376c:	f107 0110 	add.w	r1, r7, #16
 8003770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003774:	4618      	mov	r0, r3
 8003776:	f007 fad9 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800377a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800377e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fccc 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003790:	f7fe fcb2 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003794:	2305      	movs	r3, #5
}
 8003796:	4618      	mov	r0, r3
 8003798:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40020000 	.word	0x40020000
 80037a4:	40005000 	.word	0x40005000
 80037a8:	20004850 	.word	0x20004850
 80037ac:	40011000 	.word	0x40011000

080037b0 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037bc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037c0:	6018      	str	r0, [r3, #0]
 80037c2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037c6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80037ca:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80037cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	dc01      	bgt.n	80037de <Cmd_iou_tec_log_dis+0x2e>
 80037da:	2303      	movs	r3, #3
 80037dc:	e097      	b.n	800390e <Cmd_iou_tec_log_dis+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80037de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037e2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	dd01      	ble.n	80037f0 <Cmd_iou_tec_log_dis+0x40>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e08e      	b.n	800390e <Cmd_iou_tec_log_dis+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80037f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037f4:	4848      	ldr	r0, [pc, #288]	@ (8003918 <Cmd_iou_tec_log_dis+0x168>)
 80037f6:	f7fe fd53 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80037fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037fe:	4846      	ldr	r0, [pc, #280]	@ (8003918 <Cmd_iou_tec_log_dis+0x168>)
 8003800:	f7fe fd4e 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003804:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003808:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003812:	3b01      	subs	r3, #1
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800381a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	4413      	add	r3, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003828:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800382c:	4a3b      	ldr	r2, [pc, #236]	@ (800391c <Cmd_iou_tec_log_dis+0x16c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d103      	bne.n	800383a <Cmd_iou_tec_log_dis+0x8a>
    	uart_choose_uart5 = 1;
 8003832:	4b3b      	ldr	r3, [pc, #236]	@ (8003920 <Cmd_iou_tec_log_dis+0x170>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e002      	b.n	8003840 <Cmd_iou_tec_log_dis+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <Cmd_iou_tec_log_dis+0x170>)
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 8003840:	230c      	movs	r3, #12
 8003842:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003846:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800384a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800384e:	2201      	movs	r2, #1
 8003850:	2105      	movs	r1, #5
 8003852:	f007 f9bd 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003856:	f107 020f 	add.w	r2, r7, #15
 800385a:	f107 0110 	add.w	r1, r7, #16
 800385e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003862:	4618      	mov	r0, r3
 8003864:	f007 fa62 	bl	800ad2c <frame_encode>

//    SCH_Delay(5);
    if (frame_len > 0) {
 8003868:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800386c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02c      	beq.n	80038d0 <Cmd_iou_tec_log_dis+0x120>
        for (int i = 0; i < frame_len; i++) {
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800387c:	e010      	b.n	80038a0 <Cmd_iou_tec_log_dis+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 800387e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003882:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003886:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800388a:	4413      	add	r3, r2
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	4824      	ldr	r0, [pc, #144]	@ (8003924 <Cmd_iou_tec_log_dis+0x174>)
 8003892:	f7fe fa0f 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003896:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800389a:	3301      	adds	r3, #1
 800389c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80038a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038a4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80038b0:	4293      	cmp	r3, r2
 80038b2:	dbe4      	blt.n	800387e <Cmd_iou_tec_log_dis+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80038b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038b8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	f107 0310 	add.w	r3, r7, #16
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fc2f 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80038ca:	f7fe fc15 	bl	80020f8 <set_send_flag>
 80038ce:	e01d      	b.n	800390c <Cmd_iou_tec_log_dis+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80038d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038d4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80038d8:	2201      	movs	r2, #1
 80038da:	2105      	movs	r1, #5
 80038dc:	f007 f978 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80038e0:	f107 020f 	add.w	r2, r7, #15
 80038e4:	f107 0110 	add.w	r1, r7, #16
 80038e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038ec:	4618      	mov	r0, r3
 80038ee:	f007 fa1d 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80038f2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038f6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	f107 0310 	add.w	r3, r7, #16
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fc10 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003908:	f7fe fbf6 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 800390c:	2305      	movs	r3, #5
}
 800390e:	4618      	mov	r0, r3
 8003910:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40020000 	.word	0x40020000
 800391c:	40005000 	.word	0x40005000
 8003920:	20004850 	.word	0x20004850
 8003924:	40011000 	.word	0x40011000

08003928 <Cmd_iou_ringled_setRGB>:

int Cmd_iou_ringled_setRGB(int argc, char *argv[])
{
 8003928:	b580      	push	{r7, lr}
 800392a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800392e:	af02      	add	r7, sp, #8
 8003930:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003934:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003938:	6018      	str	r0, [r3, #0]
 800393a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800393e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003942:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 5) return CMDLINE_TOO_FEW_ARGS;
 8003944:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003948:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b05      	cmp	r3, #5
 8003950:	dc01      	bgt.n	8003956 <Cmd_iou_ringled_setRGB+0x2e>
 8003952:	2303      	movs	r3, #3
 8003954:	e0e5      	b.n	8003b22 <Cmd_iou_ringled_setRGB+0x1fa>
    if ((argc-1) > 5) return CMDLINE_TOO_MANY_ARGS;
 8003956:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800395a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b06      	cmp	r3, #6
 8003962:	dd01      	ble.n	8003968 <Cmd_iou_ringled_setRGB+0x40>
 8003964:	2302      	movs	r3, #2
 8003966:	e0dc      	b.n	8003b22 <Cmd_iou_ringled_setRGB+0x1fa>
    uint8_t red = atoi(argv[1]);
 8003968:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800396c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3304      	adds	r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f009 ff30 	bl	800d7dc <atoi>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (red > 255)    return CMDLINE_INVALID_ARG;
    uint8_t green = atoi(argv[2]);
 8003982:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003986:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3308      	adds	r3, #8
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f009 ff23 	bl	800d7dc <atoi>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (green > 255)    return CMDLINE_INVALID_ARG;
    uint8_t blue = atoi(argv[3]);
 800399c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80039a0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f009 ff16 	bl	800d7dc <atoi>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
    if (blue > 255)    return CMDLINE_INVALID_ARG;
    uint8_t white = atoi(argv[4]);
 80039b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80039ba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3310      	adds	r3, #16
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f009 ff09 	bl	800d7dc <atoi>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80039d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039d4:	4855      	ldr	r0, [pc, #340]	@ (8003b2c <Cmd_iou_ringled_setRGB+0x204>)
 80039d6:	f7fe fc63 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80039da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039de:	4853      	ldr	r0, [pc, #332]	@ (8003b2c <Cmd_iou_ringled_setRGB+0x204>)
 80039e0:	f7fe fc5e 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80039e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80039e8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039f2:	3b01      	subs	r3, #1
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80039fa:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	4413      	add	r3, r2
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003a08:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003a0c:	4a48      	ldr	r2, [pc, #288]	@ (8003b30 <Cmd_iou_ringled_setRGB+0x208>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d103      	bne.n	8003a1a <Cmd_iou_ringled_setRGB+0xf2>
    	uart_choose_uart5 = 1;
 8003a12:	4b48      	ldr	r3, [pc, #288]	@ (8003b34 <Cmd_iou_ringled_setRGB+0x20c>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
 8003a18:	e002      	b.n	8003a20 <Cmd_iou_ringled_setRGB+0xf8>
    }else{
    	uart_choose_uart5 = 0;
 8003a1a:	4b46      	ldr	r3, [pc, #280]	@ (8003b34 <Cmd_iou_ringled_setRGB+0x20c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_RINGLED_SETRGB;
 8003a20:	230d      	movs	r3, #13
 8003a22:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];

    payload[0]  = red; //low
 8003a26:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003a2a:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = green; //low
 8003a2e:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003a32:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = blue; //low
 8003a36:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003a3a:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = white; //low
 8003a3e:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003a42:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003a46:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003a4a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003a4e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	2301      	movs	r3, #1
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2305      	movs	r3, #5
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	f007 f8e0 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003a60:	f107 020b 	add.w	r2, r7, #11
 8003a64:	f107 010c 	add.w	r1, r7, #12
 8003a68:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f007 f95d 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003a72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003a76:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02c      	beq.n	8003ada <Cmd_iou_ringled_setRGB+0x1b2>
        for (int i = 0; i < frame_len; i++) {
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003a86:	e010      	b.n	8003aaa <Cmd_iou_ringled_setRGB+0x182>
            Uart_write(USART1, encoded_frame[i]);
 8003a88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003a8c:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003a90:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003a94:	4413      	add	r3, r2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4827      	ldr	r0, [pc, #156]	@ (8003b38 <Cmd_iou_ringled_setRGB+0x210>)
 8003a9c:	f7fe f90a 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003aa0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003aaa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003aae:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003aba:	4293      	cmp	r3, r2
 8003abc:	dbe4      	blt.n	8003a88 <Cmd_iou_ringled_setRGB+0x160>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003abe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ac2:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fb2a 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003ad4:	f7fe fb10 	bl	80020f8 <set_send_flag>
 8003ad8:	e022      	b.n	8003b20 <Cmd_iou_ringled_setRGB+0x1f8>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003ada:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003ade:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003ae2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2305      	movs	r3, #5
 8003aee:	2204      	movs	r2, #4
 8003af0:	f007 f896 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003af4:	f107 020b 	add.w	r2, r7, #11
 8003af8:	f107 010c 	add.w	r1, r7, #12
 8003afc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003b00:	4618      	mov	r0, r3
 8003b02:	f007 f913 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003b06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003b0a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fb06 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003b1c:	f7fe faec 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003b20:	2305      	movs	r3, #5
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40020000 	.word	0x40020000
 8003b30:	40005000 	.word	0x40005000
 8003b34:	20004850 	.word	0x20004850
 8003b38:	40011000 	.word	0x40011000

08003b3c <Cmd_iou_ringled_getRGB>:

int Cmd_iou_ringled_getRGB(int argc, char *argv[])
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b48:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003b4c:	6018      	str	r0, [r3, #0]
 8003b4e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b52:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003b56:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003b58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b5c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	dc01      	bgt.n	8003b6a <Cmd_iou_ringled_getRGB+0x2e>
 8003b66:	2303      	movs	r3, #3
 8003b68:	e097      	b.n	8003c9a <Cmd_iou_ringled_getRGB+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003b6a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b6e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	dd01      	ble.n	8003b7c <Cmd_iou_ringled_getRGB+0x40>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e08e      	b.n	8003c9a <Cmd_iou_ringled_getRGB+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003b7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b80:	4848      	ldr	r0, [pc, #288]	@ (8003ca4 <Cmd_iou_ringled_getRGB+0x168>)
 8003b82:	f7fe fb8d 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003b86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b8a:	4846      	ldr	r0, [pc, #280]	@ (8003ca4 <Cmd_iou_ringled_getRGB+0x168>)
 8003b8c:	f7fe fb88 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003b90:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b94:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003ba6:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	4413      	add	r3, r2
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003bb4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ca8 <Cmd_iou_ringled_getRGB+0x16c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d103      	bne.n	8003bc6 <Cmd_iou_ringled_getRGB+0x8a>
    	uart_choose_uart5 = 1;
 8003bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8003cac <Cmd_iou_ringled_getRGB+0x170>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e002      	b.n	8003bcc <Cmd_iou_ringled_getRGB+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003bc6:	4b39      	ldr	r3, [pc, #228]	@ (8003cac <Cmd_iou_ringled_getRGB+0x170>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_RINGLED_GETRGB;
 8003bcc:	230e      	movs	r3, #14
 8003bce:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003bd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bd6:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2105      	movs	r1, #5
 8003bde:	f006 fff7 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003be2:	f107 020f 	add.w	r2, r7, #15
 8003be6:	f107 0110 	add.w	r1, r7, #16
 8003bea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f007 f89c 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 8003bf4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003bf8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d02c      	beq.n	8003c5c <Cmd_iou_ringled_getRGB+0x120>
        for (int i = 0; i < frame_len; i++) {
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003c08:	e010      	b.n	8003c2c <Cmd_iou_ringled_getRGB+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8003c0a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003c0e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003c12:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003c16:	4413      	add	r3, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4824      	ldr	r0, [pc, #144]	@ (8003cb0 <Cmd_iou_ringled_getRGB+0x174>)
 8003c1e:	f7fe f849 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003c22:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003c26:	3301      	adds	r3, #1
 8003c28:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003c2c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003c30:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	dbe4      	blt.n	8003c0a <Cmd_iou_ringled_getRGB+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003c40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003c44:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe fa69 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003c56:	f7fe fa4f 	bl	80020f8 <set_send_flag>
 8003c5a:	e01d      	b.n	8003c98 <Cmd_iou_ringled_getRGB+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003c5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c60:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003c64:	2201      	movs	r2, #1
 8003c66:	2105      	movs	r1, #5
 8003c68:	f006 ffb2 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003c6c:	f107 020f 	add.w	r2, r7, #15
 8003c70:	f107 0110 	add.w	r1, r7, #16
 8003c74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f007 f857 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003c7e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003c82:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	f107 0310 	add.w	r3, r7, #16
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fa4a 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003c94:	f7fe fa30 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003c98:	2305      	movs	r3, #5
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40005000 	.word	0x40005000
 8003cac:	20004850 	.word	0x20004850
 8003cb0:	40011000 	.word	0x40011000

08003cb4 <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003cba:	af02      	add	r7, sp, #8
 8003cbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cc0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003cc4:	6018      	str	r0, [r3, #0]
 8003cc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003cce:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8003cd0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cd4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	dc01      	bgt.n	8003ce2 <Cmd_iou_irled_set_bright+0x2e>
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0b8      	b.n	8003e54 <Cmd_iou_irled_set_bright+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8003ce2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ce6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	dd01      	ble.n	8003cf4 <Cmd_iou_irled_set_bright+0x40>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0af      	b.n	8003e54 <Cmd_iou_irled_set_bright+0x1a0>
    uint8_t percent = atoi(argv[1]);
 8003cf4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cf8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f009 fd6a 	bl	800d7dc <atoi>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 8003d0e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003d12:	2b64      	cmp	r3, #100	@ 0x64
 8003d14:	d901      	bls.n	8003d1a <Cmd_iou_irled_set_bright+0x66>
 8003d16:	2304      	movs	r3, #4
 8003d18:	e09c      	b.n	8003e54 <Cmd_iou_irled_set_bright+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003d1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003d1e:	4850      	ldr	r0, [pc, #320]	@ (8003e60 <Cmd_iou_irled_set_bright+0x1ac>)
 8003d20:	f7fe fabe 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003d24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d28:	484d      	ldr	r0, [pc, #308]	@ (8003e60 <Cmd_iou_irled_set_bright+0x1ac>)
 8003d2a:	f7fe fab9 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003d2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d32:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003d44:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003d52:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003d56:	4a43      	ldr	r2, [pc, #268]	@ (8003e64 <Cmd_iou_irled_set_bright+0x1b0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d103      	bne.n	8003d64 <Cmd_iou_irled_set_bright+0xb0>
    	uart_choose_uart5 = 1;
 8003d5c:	4b42      	ldr	r3, [pc, #264]	@ (8003e68 <Cmd_iou_irled_set_bright+0x1b4>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	e002      	b.n	8003d6a <Cmd_iou_irled_set_bright+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8003d64:	4b40      	ldr	r3, [pc, #256]	@ (8003e68 <Cmd_iou_irled_set_bright+0x1b4>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 8003d6a:	230f      	movs	r3, #15
 8003d6c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];

    payload[0]  = percent; //low
 8003d70:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003d74:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d78:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003d7c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003d80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	2301      	movs	r3, #1
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2305      	movs	r3, #5
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f006 ff47 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003d92:	f107 020f 	add.w	r2, r7, #15
 8003d96:	f107 0110 	add.w	r1, r7, #16
 8003d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f006 ffc4 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 8003da4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003da8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d02c      	beq.n	8003e0c <Cmd_iou_irled_set_bright+0x158>
        for (int i = 0; i < frame_len; i++) {
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003db8:	e010      	b.n	8003ddc <Cmd_iou_irled_set_bright+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8003dba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dbe:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8003dc2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003dc6:	4413      	add	r3, r2
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4827      	ldr	r0, [pc, #156]	@ (8003e6c <Cmd_iou_irled_set_bright+0x1b8>)
 8003dce:	f7fd ff71 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003dd2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003ddc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003de0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003dec:	4293      	cmp	r3, r2
 8003dee:	dbe4      	blt.n	8003dba <Cmd_iou_irled_set_bright+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003df0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003df4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	f107 0310 	add.w	r3, r7, #16
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe f991 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003e06:	f7fe f977 	bl	80020f8 <set_send_flag>
 8003e0a:	e022      	b.n	8003e52 <Cmd_iou_irled_set_bright+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003e0c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003e10:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003e14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2305      	movs	r3, #5
 8003e20:	2201      	movs	r2, #1
 8003e22:	f006 fefd 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003e26:	f107 020f 	add.w	r2, r7, #15
 8003e2a:	f107 0110 	add.w	r1, r7, #16
 8003e2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003e32:	4618      	mov	r0, r3
 8003e34:	f006 ff7a 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003e38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e3c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	f107 0310 	add.w	r3, r7, #16
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe f96d 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003e4e:	f7fe f953 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003e52:	2305      	movs	r3, #5
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40020000 	.word	0x40020000
 8003e64:	40005000 	.word	0x40005000
 8003e68:	20004850 	.word	0x20004850
 8003e6c:	40011000 	.word	0x40011000

08003e70 <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e7c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e80:	6018      	str	r0, [r3, #0]
 8003e82:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e86:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e8a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003e8c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e90:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	dc01      	bgt.n	8003e9e <Cmd_iou_irled_get_bright+0x2e>
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e097      	b.n	8003fce <Cmd_iou_irled_get_bright+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003e9e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ea2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	dd01      	ble.n	8003eb0 <Cmd_iou_irled_get_bright+0x40>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e08e      	b.n	8003fce <Cmd_iou_irled_get_bright+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003eb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003eb4:	4848      	ldr	r0, [pc, #288]	@ (8003fd8 <Cmd_iou_irled_get_bright+0x168>)
 8003eb6:	f7fe f9f3 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003eba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ebe:	4846      	ldr	r0, [pc, #280]	@ (8003fd8 <Cmd_iou_irled_get_bright+0x168>)
 8003ec0:	f7fe f9ee 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003ec4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ec8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003eda:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003ee8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003eec:	4a3b      	ldr	r2, [pc, #236]	@ (8003fdc <Cmd_iou_irled_get_bright+0x16c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d103      	bne.n	8003efa <Cmd_iou_irled_get_bright+0x8a>
    	uart_choose_uart5 = 1;
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <Cmd_iou_irled_get_bright+0x170>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e002      	b.n	8003f00 <Cmd_iou_irled_get_bright+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003efa:	4b39      	ldr	r3, [pc, #228]	@ (8003fe0 <Cmd_iou_irled_get_bright+0x170>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 8003f00:	2310      	movs	r3, #16
 8003f02:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f0a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f0e:	2201      	movs	r2, #1
 8003f10:	2105      	movs	r1, #5
 8003f12:	f006 fe5d 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003f16:	f107 020f 	add.w	r2, r7, #15
 8003f1a:	f107 0110 	add.w	r1, r7, #16
 8003f1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f22:	4618      	mov	r0, r3
 8003f24:	f006 ff02 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 8003f28:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f2c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02c      	beq.n	8003f90 <Cmd_iou_irled_get_bright+0x120>
        for (int i = 0; i < frame_len; i++) {
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f3c:	e010      	b.n	8003f60 <Cmd_iou_irled_get_bright+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8003f3e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f42:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003f46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f4a:	4413      	add	r3, r2
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4824      	ldr	r0, [pc, #144]	@ (8003fe4 <Cmd_iou_irled_get_bright+0x174>)
 8003f52:	f7fd feaf 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003f56:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f64:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f70:	4293      	cmp	r3, r2
 8003f72:	dbe4      	blt.n	8003f3e <Cmd_iou_irled_get_bright+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003f74:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f78:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	f107 0310 	add.w	r3, r7, #16
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe f8cf 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003f8a:	f7fe f8b5 	bl	80020f8 <set_send_flag>
 8003f8e:	e01d      	b.n	8003fcc <Cmd_iou_irled_get_bright+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f94:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2105      	movs	r1, #5
 8003f9c:	f006 fe18 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003fa0:	f107 020f 	add.w	r2, r7, #15
 8003fa4:	f107 0110 	add.w	r1, r7, #16
 8003fa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003fac:	4618      	mov	r0, r3
 8003fae:	f006 febd 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003fb2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fb6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	f107 0310 	add.w	r3, r7, #16
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe f8b0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003fc8:	f7fe f896 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003fcc:	2305      	movs	r3, #5
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40005000 	.word	0x40005000
 8003fe0:	20004850 	.word	0x20004850
 8003fe4:	40011000 	.word	0x40011000

08003fe8 <Cmd_iou_get_accel>:



int Cmd_iou_get_accel(int argc, char *argv[])
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ff4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003ff8:	6018      	str	r0, [r3, #0]
 8003ffa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ffe:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004002:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004004:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004008:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	dc01      	bgt.n	8004016 <Cmd_iou_get_accel+0x2e>
 8004012:	2303      	movs	r3, #3
 8004014:	e097      	b.n	8004146 <Cmd_iou_get_accel+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8004016:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800401a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b02      	cmp	r3, #2
 8004022:	dd01      	ble.n	8004028 <Cmd_iou_get_accel+0x40>
 8004024:	2302      	movs	r3, #2
 8004026:	e08e      	b.n	8004146 <Cmd_iou_get_accel+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004028:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800402c:	4848      	ldr	r0, [pc, #288]	@ (8004150 <Cmd_iou_get_accel+0x168>)
 800402e:	f7fe f937 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004032:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004036:	4846      	ldr	r0, [pc, #280]	@ (8004150 <Cmd_iou_get_accel+0x168>)
 8004038:	f7fe f932 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800403c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004040:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800404a:	3b01      	subs	r3, #1
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004052:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	4413      	add	r3, r2
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004060:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004064:	4a3b      	ldr	r2, [pc, #236]	@ (8004154 <Cmd_iou_get_accel+0x16c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d103      	bne.n	8004072 <Cmd_iou_get_accel+0x8a>
    	uart_choose_uart5 = 1;
 800406a:	4b3b      	ldr	r3, [pc, #236]	@ (8004158 <Cmd_iou_get_accel+0x170>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	e002      	b.n	8004078 <Cmd_iou_get_accel+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004072:	4b39      	ldr	r3, [pc, #228]	@ (8004158 <Cmd_iou_get_accel+0x170>)
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_GET_ACCEL_GYRO;
 8004078:	2311      	movs	r3, #17
 800407a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800407e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004082:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004086:	2201      	movs	r2, #1
 8004088:	2105      	movs	r1, #5
 800408a:	f006 fda1 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800408e:	f107 020f 	add.w	r2, r7, #15
 8004092:	f107 0110 	add.w	r1, r7, #16
 8004096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800409a:	4618      	mov	r0, r3
 800409c:	f006 fe46 	bl	800ad2c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80040a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040a4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d02c      	beq.n	8004108 <Cmd_iou_get_accel+0x120>
        for (int i = 0; i < frame_len; i++) {
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80040b4:	e010      	b.n	80040d8 <Cmd_iou_get_accel+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 80040b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040ba:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80040be:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80040c2:	4413      	add	r3, r2
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	4619      	mov	r1, r3
 80040c8:	4824      	ldr	r0, [pc, #144]	@ (800415c <Cmd_iou_get_accel+0x174>)
 80040ca:	f7fd fdf3 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80040ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80040d2:	3301      	adds	r3, #1
 80040d4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80040d8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040dc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80040e8:	4293      	cmp	r3, r2
 80040ea:	dbe4      	blt.n	80040b6 <Cmd_iou_get_accel+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80040ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040f0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	f107 0310 	add.w	r3, r7, #16
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe f813 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004102:	f7fd fff9 	bl	80020f8 <set_send_flag>
 8004106:	e01d      	b.n	8004144 <Cmd_iou_get_accel+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004108:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800410c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004110:	2201      	movs	r2, #1
 8004112:	2105      	movs	r1, #5
 8004114:	f006 fd5c 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004118:	f107 020f 	add.w	r2, r7, #15
 800411c:	f107 0110 	add.w	r1, r7, #16
 8004120:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004124:	4618      	mov	r0, r3
 8004126:	f006 fe01 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800412a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800412e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	f107 0310 	add.w	r3, r7, #16
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fff4 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004140:	f7fd ffda 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004144:	2305      	movs	r3, #5
}
 8004146:	4618      	mov	r0, r3
 8004148:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40020000 	.word	0x40020000
 8004154:	40005000 	.word	0x40005000
 8004158:	20004850 	.word	0x20004850
 800415c:	40011000 	.word	0x40011000

08004160 <Cmd_iou_get_press>:

int Cmd_iou_get_press(int argc, char *argv[])
{
 8004160:	b580      	push	{r7, lr}
 8004162:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004166:	af00      	add	r7, sp, #0
 8004168:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800416c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004170:	6018      	str	r0, [r3, #0]
 8004172:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004176:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800417a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800417c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004180:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	dc01      	bgt.n	800418e <Cmd_iou_get_press+0x2e>
 800418a:	2303      	movs	r3, #3
 800418c:	e097      	b.n	80042be <Cmd_iou_get_press+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800418e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004192:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b02      	cmp	r3, #2
 800419a:	dd01      	ble.n	80041a0 <Cmd_iou_get_press+0x40>
 800419c:	2302      	movs	r3, #2
 800419e:	e08e      	b.n	80042be <Cmd_iou_get_press+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80041a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041a4:	4848      	ldr	r0, [pc, #288]	@ (80042c8 <Cmd_iou_get_press+0x168>)
 80041a6:	f7fe f87b 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80041aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041ae:	4846      	ldr	r0, [pc, #280]	@ (80042c8 <Cmd_iou_get_press+0x168>)
 80041b0:	f7fe f876 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80041b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041b8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041c2:	3b01      	subs	r3, #1
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80041ca:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	4413      	add	r3, r2
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80041d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80041dc:	4a3b      	ldr	r2, [pc, #236]	@ (80042cc <Cmd_iou_get_press+0x16c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d103      	bne.n	80041ea <Cmd_iou_get_press+0x8a>
    	uart_choose_uart5 = 1;
 80041e2:	4b3b      	ldr	r3, [pc, #236]	@ (80042d0 <Cmd_iou_get_press+0x170>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e002      	b.n	80041f0 <Cmd_iou_get_press+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80041ea:	4b39      	ldr	r3, [pc, #228]	@ (80042d0 <Cmd_iou_get_press+0x170>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_GET_PRESS;
 80041f0:	2312      	movs	r3, #18
 80041f2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80041f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80041fa:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80041fe:	2201      	movs	r2, #1
 8004200:	2105      	movs	r1, #5
 8004202:	f006 fce5 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004206:	f107 020f 	add.w	r2, r7, #15
 800420a:	f107 0110 	add.w	r1, r7, #16
 800420e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004212:	4618      	mov	r0, r3
 8004214:	f006 fd8a 	bl	800ad2c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8004218:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800421c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02c      	beq.n	8004280 <Cmd_iou_get_press+0x120>
        for (int i = 0; i < frame_len; i++) {
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800422c:	e010      	b.n	8004250 <Cmd_iou_get_press+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 800422e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004232:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8004236:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800423a:	4413      	add	r3, r2
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	4619      	mov	r1, r3
 8004240:	4824      	ldr	r0, [pc, #144]	@ (80042d4 <Cmd_iou_get_press+0x174>)
 8004242:	f7fd fd37 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004246:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800424a:	3301      	adds	r3, #1
 800424c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004250:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004254:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004260:	4293      	cmp	r3, r2
 8004262:	dbe4      	blt.n	800422e <Cmd_iou_get_press+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004264:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004268:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	f107 0310 	add.w	r3, r7, #16
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd ff57 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800427a:	f7fd ff3d 	bl	80020f8 <set_send_flag>
 800427e:	e01d      	b.n	80042bc <Cmd_iou_get_press+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004280:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004284:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004288:	2201      	movs	r2, #1
 800428a:	2105      	movs	r1, #5
 800428c:	f006 fca0 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004290:	f107 020f 	add.w	r2, r7, #15
 8004294:	f107 0110 	add.w	r1, r7, #16
 8004298:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800429c:	4618      	mov	r0, r3
 800429e:	f006 fd45 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80042a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042a6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	4611      	mov	r1, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd ff38 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80042b8:	f7fd ff1e 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80042bc:	2305      	movs	r3, #5
}
 80042be:	4618      	mov	r0, r3
 80042c0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40020000 	.word	0x40020000
 80042cc:	40005000 	.word	0x40005000
 80042d0:	20004850 	.word	0x20004850
 80042d4:	40011000 	.word	0x40011000

080042d8 <Cmd_iou_get_parameters>:


int Cmd_iou_get_parameters(int argc, char *argv[])
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80042de:	af00      	add	r7, sp, #0
 80042e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042e4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80042e8:	6018      	str	r0, [r3, #0]
 80042ea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042ee:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80042f2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80042f4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042f8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	dc01      	bgt.n	8004306 <Cmd_iou_get_parameters+0x2e>
 8004302:	2303      	movs	r3, #3
 8004304:	e097      	b.n	8004436 <Cmd_iou_get_parameters+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8004306:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800430a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b02      	cmp	r3, #2
 8004312:	dd01      	ble.n	8004318 <Cmd_iou_get_parameters+0x40>
 8004314:	2302      	movs	r3, #2
 8004316:	e08e      	b.n	8004436 <Cmd_iou_get_parameters+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004318:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800431c:	4848      	ldr	r0, [pc, #288]	@ (8004440 <Cmd_iou_get_parameters+0x168>)
 800431e:	f7fd ffbf 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004322:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004326:	4846      	ldr	r0, [pc, #280]	@ (8004440 <Cmd_iou_get_parameters+0x168>)
 8004328:	f7fd ffba 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800432c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004330:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800433a:	3b01      	subs	r3, #1
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004342:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	4413      	add	r3, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004350:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004354:	4a3b      	ldr	r2, [pc, #236]	@ (8004444 <Cmd_iou_get_parameters+0x16c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d103      	bne.n	8004362 <Cmd_iou_get_parameters+0x8a>
    	uart_choose_uart5 = 1;
 800435a:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <Cmd_iou_get_parameters+0x170>)
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e002      	b.n	8004368 <Cmd_iou_get_parameters+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004362:	4b39      	ldr	r3, [pc, #228]	@ (8004448 <Cmd_iou_get_parameters+0x170>)
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_GET_PARAMETERS;
 8004368:	2313      	movs	r3, #19
 800436a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800436e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004372:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004376:	2201      	movs	r2, #1
 8004378:	2105      	movs	r1, #5
 800437a:	f006 fc29 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800437e:	f107 020f 	add.w	r2, r7, #15
 8004382:	f107 0110 	add.w	r1, r7, #16
 8004386:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800438a:	4618      	mov	r0, r3
 800438c:	f006 fcce 	bl	800ad2c <frame_encode>

  //  SCH_Delay(5);.
    if (frame_len > 0) {
 8004390:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004394:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d02c      	beq.n	80043f8 <Cmd_iou_get_parameters+0x120>
        for (int i = 0; i < frame_len; i++) {
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80043a4:	e010      	b.n	80043c8 <Cmd_iou_get_parameters+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 80043a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043aa:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80043ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80043b2:	4413      	add	r3, r2
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	4824      	ldr	r0, [pc, #144]	@ (800444c <Cmd_iou_get_parameters+0x174>)
 80043ba:	f7fd fc7b 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80043be:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80043c2:	3301      	adds	r3, #1
 80043c4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80043c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043cc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80043d8:	4293      	cmp	r3, r2
 80043da:	dbe4      	blt.n	80043a6 <Cmd_iou_get_parameters+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80043dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043e0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	f107 0310 	add.w	r3, r7, #16
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fd fe9b 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80043f2:	f7fd fe81 	bl	80020f8 <set_send_flag>
 80043f6:	e01d      	b.n	8004434 <Cmd_iou_get_parameters+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80043f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043fc:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004400:	2201      	movs	r2, #1
 8004402:	2105      	movs	r1, #5
 8004404:	f006 fbe4 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004408:	f107 020f 	add.w	r2, r7, #15
 800440c:	f107 0110 	add.w	r1, r7, #16
 8004410:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004414:	4618      	mov	r0, r3
 8004416:	f006 fc89 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800441a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800441e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	f107 0310 	add.w	r3, r7, #16
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fe7c 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004430:	f7fd fe62 	bl	80020f8 <set_send_flag>

    }

    return CMDLINE_PENDING;
 8004434:	2305      	movs	r3, #5
}
 8004436:	4618      	mov	r0, r3
 8004438:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40020000 	.word	0x40020000
 8004444:	40005000 	.word	0x40005000
 8004448:	20004850 	.word	0x20004850
 800444c:	40011000 	.word	0x40011000

08004450 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	041a      	lsls	r2, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	619a      	str	r2, [r3, #24]
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <PDU_create_task>:
};



void PDU_create_task(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PDU_task_context.taskHandle, &PDU_task_context.taskProperty);
 8004474:	4906      	ldr	r1, [pc, #24]	@ (8004490 <PDU_create_task+0x20>)
 8004476:	4807      	ldr	r0, [pc, #28]	@ (8004494 <PDU_create_task+0x24>)
 8004478:	f006 fa26 	bl	800a8c8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 800447c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004480:	2006      	movs	r0, #6
 8004482:	f006 f9f5 	bl	800a870 <SCH_TIM_Start>
    Ringbuf_init();
 8004486:	f7fd fab9 	bl	80019fc <Ringbuf_init>
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000050 	.word	0x20000050
 8004494:	2000004c 	.word	0x2000004c

08004498 <PDU_update_task>:


volatile uint8_t timeout_counter_pdu = 0;

void PDU_update_task(void) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
	if (auto_report_enabled) {
 800449e:	4b3d      	ldr	r3, [pc, #244]	@ (8004594 <PDU_update_task+0xfc>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d071      	beq.n	800458c <PDU_update_task+0xf4>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PDU))
 80044a8:	2006      	movs	r0, #6
 80044aa:	f006 f9f7 	bl	800a89c <SCH_TIM_HasCompleted>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d06b      	beq.n	800458c <PDU_update_task+0xf4>
		{

			if(!sendFlag){
 80044b4:	4b38      	ldr	r3, [pc, #224]	@ (8004598 <PDU_update_task+0x100>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d166      	bne.n	800458c <PDU_update_task+0xf4>
				if(!send_rs422){
 80044be:	4b37      	ldr	r3, [pc, #220]	@ (800459c <PDU_update_task+0x104>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d161      	bne.n	800458c <PDU_update_task+0xf4>
					if(receive_iouFlag&&receive_pmuFlag){
 80044c8:	4b35      	ldr	r3, [pc, #212]	@ (80045a0 <PDU_update_task+0x108>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d02b      	beq.n	800452a <PDU_update_task+0x92>
 80044d2:	4b34      	ldr	r3, [pc, #208]	@ (80045a4 <PDU_update_task+0x10c>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d026      	beq.n	800452a <PDU_update_task+0x92>
						switch_board(0);
 80044dc:	2000      	movs	r0, #0
 80044de:	f002 fd01 	bl	8006ee4 <switch_board>
						Uart_flush(USART1);
 80044e2:	4831      	ldr	r0, [pc, #196]	@ (80045a8 <PDU_update_task+0x110>)
 80044e4:	f7fd fd0a 	bl	8001efc <Uart_flush>

						frame = pdu_frame;
 80044e8:	4b30      	ldr	r3, [pc, #192]	@ (80045ac <PDU_update_task+0x114>)
 80044ea:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(pdu_frame);
 80044ec:	2309      	movs	r3, #9
 80044ee:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e00a      	b.n	800450c <PDU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	4619      	mov	r1, r3
 8004500:	4829      	ldr	r0, [pc, #164]	@ (80045a8 <PDU_update_task+0x110>)
 8004502:	f7fd fbd7 	bl	8001cb4 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	429a      	cmp	r2, r3
 8004512:	dbf0      	blt.n	80044f6 <PDU_update_task+0x5e>
						}
						receive_pduFlag = 0;
 8004514:	4b26      	ldr	r3, [pc, #152]	@ (80045b0 <PDU_update_task+0x118>)
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 800451a:	4b20      	ldr	r3, [pc, #128]	@ (800459c <PDU_update_task+0x104>)
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 8004520:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004524:	2006      	movs	r0, #6
 8004526:	f006 f9a3 	bl	800a870 <SCH_TIM_Start>
					}
					if(!receive_pduFlag){
 800452a:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <PDU_update_task+0x118>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d12b      	bne.n	800458c <PDU_update_task+0xf4>
						timeout_counter_pdu++;
 8004534:	4b1f      	ldr	r3, [pc, #124]	@ (80045b4 <PDU_update_task+0x11c>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	3301      	adds	r3, #1
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4b1d      	ldr	r3, [pc, #116]	@ (80045b4 <PDU_update_task+0x11c>)
 8004540:	701a      	strb	r2, [r3, #0]
						if (timeout_counter_pdu > 2){
 8004542:	4b1c      	ldr	r3, [pc, #112]	@ (80045b4 <PDU_update_task+0x11c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d91f      	bls.n	800458c <PDU_update_task+0xf4>
							disconnect_counter_pdu++;
 800454c:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <PDU_update_task+0x120>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3301      	adds	r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4b18      	ldr	r3, [pc, #96]	@ (80045b8 <PDU_update_task+0x120>)
 8004558:	701a      	strb	r2, [r3, #0]
							timeout_counter_pdu = 0;
 800455a:	4b16      	ldr	r3, [pc, #88]	@ (80045b4 <PDU_update_task+0x11c>)
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
							receive_pduFlag = 1;
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <PDU_update_task+0x118>)
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
							if(disconnect_counter_pdu> 4){
 8004566:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <PDU_update_task+0x120>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b04      	cmp	r3, #4
 800456e:	d90d      	bls.n	800458c <PDU_update_task+0xf4>
								for (int i = 1; i <= 54; i++) {
 8004570:	2301      	movs	r3, #1
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	e007      	b.n	8004586 <PDU_update_task+0xee>
									    sourceArray[i + 42] = 0xFF; //43   pay1    + 44  pay2        96-<54
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	332a      	adds	r3, #42	@ 0x2a
 800457a:	4a10      	ldr	r2, [pc, #64]	@ (80045bc <PDU_update_task+0x124>)
 800457c:	21ff      	movs	r1, #255	@ 0xff
 800457e:	54d1      	strb	r1, [r2, r3]
								for (int i = 1; i <= 54; i++) {
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	3301      	adds	r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b36      	cmp	r3, #54	@ 0x36
 800458a:	ddf4      	ble.n	8004576 <PDU_update_task+0xde>
					}
				}
			}
		}
	}
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20004978 	.word	0x20004978
 8004598:	20004749 	.word	0x20004749
 800459c:	2000484e 	.word	0x2000484e
 80045a0:	2000003e 	.word	0x2000003e
 80045a4:	2000003d 	.word	0x2000003d
 80045a8:	40011000 	.word	0x40011000
 80045ac:	20000040 	.word	0x20000040
 80045b0:	2000003c 	.word	0x2000003c
 80045b4:	20004851 	.word	0x20004851
 80045b8:	2000484c 	.word	0x2000484c
 80045bc:	2000497c 	.word	0x2000497c

080045c0 <Cmd_pdu_set_channel>:


#define DEST_ADDR FSP_ADR_PDU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pdu_set_channel(int argc, char *argv[])
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80045c6:	af02      	add	r7, sp, #8
 80045c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045cc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80045d0:	6018      	str	r0, [r3, #0]
 80045d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045d6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80045da:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80045dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045e0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	dc01      	bgt.n	80045ee <Cmd_pdu_set_channel+0x2e>
 80045ea:	2303      	movs	r3, #3
 80045ec:	e0cf      	b.n	800478e <Cmd_pdu_set_channel+0x1ce>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80045ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045f2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	dd01      	ble.n	8004600 <Cmd_pdu_set_channel+0x40>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0c6      	b.n	800478e <Cmd_pdu_set_channel+0x1ce>
    uint8_t channel = atoi(argv[1]);
 8004600:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004604:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3304      	adds	r3, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f009 f8e4 	bl	800d7dc <atoi>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 800461a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800461e:	2b09      	cmp	r3, #9
 8004620:	d901      	bls.n	8004626 <Cmd_pdu_set_channel+0x66>
 8004622:	2304      	movs	r3, #4
 8004624:	e0b3      	b.n	800478e <Cmd_pdu_set_channel+0x1ce>

    uint8_t state = atoi(argv[2]);
 8004626:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800462a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f009 f8d1 	bl	800d7dc <atoi>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004640:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004644:	2b01      	cmp	r3, #1
 8004646:	d901      	bls.n	800464c <Cmd_pdu_set_channel+0x8c>
 8004648:	2304      	movs	r3, #4
 800464a:	e0a0      	b.n	800478e <Cmd_pdu_set_channel+0x1ce>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800464c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004650:	4851      	ldr	r0, [pc, #324]	@ (8004798 <Cmd_pdu_set_channel+0x1d8>)
 8004652:	f7ff fefd 	bl	8004450 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004656:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800465a:	484f      	ldr	r0, [pc, #316]	@ (8004798 <Cmd_pdu_set_channel+0x1d8>)
 800465c:	f7ff fef8 	bl	8004450 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004660:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004664:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800466e:	3b01      	subs	r3, #1
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004676:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	4413      	add	r3, r2
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004684:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004688:	4a44      	ldr	r2, [pc, #272]	@ (800479c <Cmd_pdu_set_channel+0x1dc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d103      	bne.n	8004696 <Cmd_pdu_set_channel+0xd6>
    	uart_choose_uart5 = 1;
 800468e:	4b44      	ldr	r3, [pc, #272]	@ (80047a0 <Cmd_pdu_set_channel+0x1e0>)
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e002      	b.n	800469c <Cmd_pdu_set_channel+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8004696:	4b42      	ldr	r3, [pc, #264]	@ (80047a0 <Cmd_pdu_set_channel+0x1e0>)
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = channel;
 80046a2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80046a6:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 80046aa:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80046ae:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80046b2:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80046b6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80046ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	2301      	movs	r3, #1
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2303      	movs	r3, #3
 80046c6:	2202      	movs	r2, #2
 80046c8:	f006 faaa 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80046cc:	f107 020f 	add.w	r2, r7, #15
 80046d0:	f107 0110 	add.w	r1, r7, #16
 80046d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046d8:	4618      	mov	r0, r3
 80046da:	f006 fb27 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80046de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80046e2:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02c      	beq.n	8004746 <Cmd_pdu_set_channel+0x186>
        for (int i = 0; i < frame_len; i++) {
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80046f2:	e010      	b.n	8004716 <Cmd_pdu_set_channel+0x156>
            Uart_write(USART1, encoded_frame[i]);
 80046f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80046f8:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80046fc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004700:	4413      	add	r3, r2
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	4619      	mov	r1, r3
 8004706:	4827      	ldr	r0, [pc, #156]	@ (80047a4 <Cmd_pdu_set_channel+0x1e4>)
 8004708:	f7fd fad4 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800470c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004710:	3301      	adds	r3, #1
 8004712:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004716:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800471a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004726:	4293      	cmp	r3, r2
 8004728:	dbe4      	blt.n	80046f4 <Cmd_pdu_set_channel+0x134>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800472a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800472e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	f107 0310 	add.w	r3, r7, #16
 8004738:	4611      	mov	r1, r2
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fcf4 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004740:	f7fd fcda 	bl	80020f8 <set_send_flag>
 8004744:	e022      	b.n	800478c <Cmd_pdu_set_channel+0x1cc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004746:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800474a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800474e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	2301      	movs	r3, #1
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2303      	movs	r3, #3
 800475a:	2202      	movs	r2, #2
 800475c:	f006 fa60 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004760:	f107 020f 	add.w	r2, r7, #15
 8004764:	f107 0110 	add.w	r1, r7, #16
 8004768:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800476c:	4618      	mov	r0, r3
 800476e:	f006 fadd 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004772:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004776:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd fcd0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004788:	f7fd fcb6 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800478c:	2305      	movs	r3, #5
}
 800478e:	4618      	mov	r0, r3
 8004790:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40020000 	.word	0x40020000
 800479c:	40005000 	.word	0x40005000
 80047a0:	20004850 	.word	0x20004850
 80047a4:	40011000 	.word	0x40011000

080047a8 <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80047ae:	af02      	add	r7, sp, #8
 80047b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80047b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80047b8:	6018      	str	r0, [r3, #0]
 80047ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80047be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80047c2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80047c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80047c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	dc01      	bgt.n	80047d6 <Cmd_pdu_set_buck+0x2e>
 80047d2:	2303      	movs	r3, #3
 80047d4:	e0cf      	b.n	8004976 <Cmd_pdu_set_buck+0x1ce>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80047d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80047da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	dd01      	ble.n	80047e8 <Cmd_pdu_set_buck+0x40>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e0c6      	b.n	8004976 <Cmd_pdu_set_buck+0x1ce>
    uint8_t buck = atoi(argv[1]);
 80047e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80047ec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3304      	adds	r3, #4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f008 fff0 	bl	800d7dc <atoi>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004802:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004806:	2b06      	cmp	r3, #6
 8004808:	d901      	bls.n	800480e <Cmd_pdu_set_buck+0x66>
 800480a:	2304      	movs	r3, #4
 800480c:	e0b3      	b.n	8004976 <Cmd_pdu_set_buck+0x1ce>

    uint8_t state = atoi(argv[2]);
 800480e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004812:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f008 ffdd 	bl	800d7dc <atoi>
 8004822:	4603      	mov	r3, r0
 8004824:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004828:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 800482c:	2b01      	cmp	r3, #1
 800482e:	d901      	bls.n	8004834 <Cmd_pdu_set_buck+0x8c>
 8004830:	2304      	movs	r3, #4
 8004832:	e0a0      	b.n	8004976 <Cmd_pdu_set_buck+0x1ce>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004834:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004838:	4851      	ldr	r0, [pc, #324]	@ (8004980 <Cmd_pdu_set_buck+0x1d8>)
 800483a:	f7ff fe09 	bl	8004450 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800483e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004842:	484f      	ldr	r0, [pc, #316]	@ (8004980 <Cmd_pdu_set_buck+0x1d8>)
 8004844:	f7ff fe04 	bl	8004450 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004848:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800484c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004856:	3b01      	subs	r3, #1
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800485e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	4413      	add	r3, r2
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800486c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004870:	4a44      	ldr	r2, [pc, #272]	@ (8004984 <Cmd_pdu_set_buck+0x1dc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d103      	bne.n	800487e <Cmd_pdu_set_buck+0xd6>
    	uart_choose_uart5 = 1;
 8004876:	4b44      	ldr	r3, [pc, #272]	@ (8004988 <Cmd_pdu_set_buck+0x1e0>)
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e002      	b.n	8004884 <Cmd_pdu_set_buck+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 800487e:	4b42      	ldr	r3, [pc, #264]	@ (8004988 <Cmd_pdu_set_buck+0x1e0>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 8004884:	2302      	movs	r3, #2
 8004886:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = buck;
 800488a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800488e:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004892:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004896:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800489a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800489e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80048a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	2301      	movs	r3, #1
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2303      	movs	r3, #3
 80048ae:	2202      	movs	r2, #2
 80048b0:	f006 f9b6 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80048b4:	f107 020f 	add.w	r2, r7, #15
 80048b8:	f107 0110 	add.w	r1, r7, #16
 80048bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048c0:	4618      	mov	r0, r3
 80048c2:	f006 fa33 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80048c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048ca:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d02c      	beq.n	800492e <Cmd_pdu_set_buck+0x186>
        for (int i = 0; i < frame_len; i++) {
 80048d4:	2300      	movs	r3, #0
 80048d6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80048da:	e010      	b.n	80048fe <Cmd_pdu_set_buck+0x156>
            Uart_write(USART1, encoded_frame[i]);
 80048dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048e0:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80048e4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80048e8:	4413      	add	r3, r2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	4619      	mov	r1, r3
 80048ee:	4827      	ldr	r0, [pc, #156]	@ (800498c <Cmd_pdu_set_buck+0x1e4>)
 80048f0:	f7fd f9e0 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80048f4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80048f8:	3301      	adds	r3, #1
 80048fa:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80048fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004902:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800490e:	4293      	cmp	r3, r2
 8004910:	dbe4      	blt.n	80048dc <Cmd_pdu_set_buck+0x134>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004912:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004916:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	f107 0310 	add.w	r3, r7, #16
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f7fd fc00 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004928:	f7fd fbe6 	bl	80020f8 <set_send_flag>
 800492c:	e022      	b.n	8004974 <Cmd_pdu_set_buck+0x1cc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800492e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004932:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	2301      	movs	r3, #1
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2303      	movs	r3, #3
 8004942:	2202      	movs	r2, #2
 8004944:	f006 f96c 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004948:	f107 020f 	add.w	r2, r7, #15
 800494c:	f107 0110 	add.w	r1, r7, #16
 8004950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004954:	4618      	mov	r0, r3
 8004956:	f006 f9e9 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800495a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800495e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	f107 0310 	add.w	r3, r7, #16
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd fbdc 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004970:	f7fd fbc2 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004974:	2305      	movs	r3, #5
}
 8004976:	4618      	mov	r0, r3
 8004978:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40020000 	.word	0x40020000
 8004984:	40005000 	.word	0x40005000
 8004988:	20004850 	.word	0x20004850
 800498c:	40011000 	.word	0x40011000

08004990 <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 8004990:	b580      	push	{r7, lr}
 8004992:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004996:	af02      	add	r7, sp, #8
 8004998:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800499c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049a0:	6018      	str	r0, [r3, #0]
 80049a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049a6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80049aa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80049ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049b0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	dc01      	bgt.n	80049be <Cmd_pdu_set_all+0x2e>
 80049ba:	2303      	movs	r3, #3
 80049bc:	e0b8      	b.n	8004b30 <Cmd_pdu_set_all+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80049be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049c2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	dd01      	ble.n	80049d0 <Cmd_pdu_set_all+0x40>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0af      	b.n	8004b30 <Cmd_pdu_set_all+0x1a0>

    uint8_t state = atoi(argv[1]);
 80049d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049d4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3304      	adds	r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f008 fefc 	bl	800d7dc <atoi>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1) return CMDLINE_INVALID_ARG;
 80049ea:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d901      	bls.n	80049f6 <Cmd_pdu_set_all+0x66>
 80049f2:	2304      	movs	r3, #4
 80049f4:	e09c      	b.n	8004b30 <Cmd_pdu_set_all+0x1a0>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80049f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049fa:	4850      	ldr	r0, [pc, #320]	@ (8004b3c <Cmd_pdu_set_all+0x1ac>)
 80049fc:	f7ff fd28 	bl	8004450 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004a00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004a04:	484d      	ldr	r0, [pc, #308]	@ (8004b3c <Cmd_pdu_set_all+0x1ac>)
 8004a06:	f7ff fd23 	bl	8004450 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004a0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a0e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004a20:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	4413      	add	r3, r2
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004a2e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004a32:	4a43      	ldr	r2, [pc, #268]	@ (8004b40 <Cmd_pdu_set_all+0x1b0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d103      	bne.n	8004a40 <Cmd_pdu_set_all+0xb0>
    	uart_choose_uart5 = 1;
 8004a38:	4b42      	ldr	r3, [pc, #264]	@ (8004b44 <Cmd_pdu_set_all+0x1b4>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e002      	b.n	8004a46 <Cmd_pdu_set_all+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004a40:	4b40      	ldr	r3, [pc, #256]	@ (8004b44 <Cmd_pdu_set_all+0x1b4>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 8004a46:	2303      	movs	r3, #3
 8004a48:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = state;
 8004a4c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004a50:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004a54:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004a58:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004a5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	2301      	movs	r3, #1
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2303      	movs	r3, #3
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f006 f8d9 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004a6e:	f107 020f 	add.w	r2, r7, #15
 8004a72:	f107 0110 	add.w	r1, r7, #16
 8004a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f006 f956 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 8004a80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a84:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02c      	beq.n	8004ae8 <Cmd_pdu_set_all+0x158>
        for (int i = 0; i < frame_len; i++) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004a94:	e010      	b.n	8004ab8 <Cmd_pdu_set_all+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8004a96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a9a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004a9e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004aa2:	4413      	add	r3, r2
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4827      	ldr	r0, [pc, #156]	@ (8004b48 <Cmd_pdu_set_all+0x1b8>)
 8004aaa:	f7fd f903 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004aae:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004ab8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004abc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	dbe4      	blt.n	8004a96 <Cmd_pdu_set_all+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004acc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ad0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	f107 0310 	add.w	r3, r7, #16
 8004ada:	4611      	mov	r1, r2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fd fb23 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004ae2:	f7fd fb09 	bl	80020f8 <set_send_flag>
 8004ae6:	e022      	b.n	8004b2e <Cmd_pdu_set_all+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004ae8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004aec:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	2301      	movs	r3, #1
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	2303      	movs	r3, #3
 8004afc:	2201      	movs	r2, #1
 8004afe:	f006 f88f 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004b02:	f107 020f 	add.w	r2, r7, #15
 8004b06:	f107 0110 	add.w	r1, r7, #16
 8004b0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f006 f90c 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004b14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b18:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	f107 0310 	add.w	r3, r7, #16
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fd faff 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004b2a:	f7fd fae5 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004b2e:	2305      	movs	r3, #5
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40020000 	.word	0x40020000
 8004b40:	40005000 	.word	0x40005000
 8004b44:	20004850 	.word	0x20004850
 8004b48:	40011000 	.word	0x40011000

08004b4c <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004b52:	af02      	add	r7, sp, #8
 8004b54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b58:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004b5c:	6018      	str	r0, [r3, #0]
 8004b5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b62:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004b66:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004b68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b6c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	dc01      	bgt.n	8004b7a <Cmd_pdu_get_channel+0x2e>
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0b8      	b.n	8004cec <Cmd_pdu_get_channel+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004b7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b7e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	dd01      	ble.n	8004b8c <Cmd_pdu_get_channel+0x40>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e0af      	b.n	8004cec <Cmd_pdu_get_channel+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8004b8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b90:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3304      	adds	r3, #4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f008 fe1e 	bl	800d7dc <atoi>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8004ba6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004baa:	2b09      	cmp	r3, #9
 8004bac:	d901      	bls.n	8004bb2 <Cmd_pdu_get_channel+0x66>
 8004bae:	2304      	movs	r3, #4
 8004bb0:	e09c      	b.n	8004cec <Cmd_pdu_get_channel+0x1a0>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004bb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bb6:	4850      	ldr	r0, [pc, #320]	@ (8004cf8 <Cmd_pdu_get_channel+0x1ac>)
 8004bb8:	f7ff fc4a 	bl	8004450 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004bbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004bc0:	484d      	ldr	r0, [pc, #308]	@ (8004cf8 <Cmd_pdu_get_channel+0x1ac>)
 8004bc2:	f7ff fc45 	bl	8004450 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004bc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bca:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004bdc:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	4413      	add	r3, r2
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004bea:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004bee:	4a43      	ldr	r2, [pc, #268]	@ (8004cfc <Cmd_pdu_get_channel+0x1b0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d103      	bne.n	8004bfc <Cmd_pdu_get_channel+0xb0>
    	uart_choose_uart5 = 1;
 8004bf4:	4b42      	ldr	r3, [pc, #264]	@ (8004d00 <Cmd_pdu_get_channel+0x1b4>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <Cmd_pdu_get_channel+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004bfc:	4b40      	ldr	r3, [pc, #256]	@ (8004d00 <Cmd_pdu_get_channel+0x1b4>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 8004c02:	2304      	movs	r3, #4
 8004c04:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = channel;
 8004c08:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004c0c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004c10:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004c14:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004c18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	2301      	movs	r3, #1
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	2303      	movs	r3, #3
 8004c24:	2201      	movs	r2, #1
 8004c26:	f005 fffb 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004c2a:	f107 020f 	add.w	r2, r7, #15
 8004c2e:	f107 0110 	add.w	r1, r7, #16
 8004c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c36:	4618      	mov	r0, r3
 8004c38:	f006 f878 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004c3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c40:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02c      	beq.n	8004ca4 <Cmd_pdu_get_channel+0x158>
        for (int i = 0; i < frame_len; i++) {
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004c50:	e010      	b.n	8004c74 <Cmd_pdu_get_channel+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8004c52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c56:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004c5a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c5e:	4413      	add	r3, r2
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	4619      	mov	r1, r3
 8004c64:	4827      	ldr	r0, [pc, #156]	@ (8004d04 <Cmd_pdu_get_channel+0x1b8>)
 8004c66:	f7fd f825 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004c6a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004c74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c78:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c84:	4293      	cmp	r3, r2
 8004c86:	dbe4      	blt.n	8004c52 <Cmd_pdu_get_channel+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004c88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c8c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	f107 0310 	add.w	r3, r7, #16
 8004c96:	4611      	mov	r1, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fd fa45 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004c9e:	f7fd fa2b 	bl	80020f8 <set_send_flag>
 8004ca2:	e022      	b.n	8004cea <Cmd_pdu_get_channel+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004ca4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004ca8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004cac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f005 ffb1 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004cbe:	f107 020f 	add.w	r2, r7, #15
 8004cc2:	f107 0110 	add.w	r1, r7, #16
 8004cc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f006 f82e 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004cd0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cd4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	f107 0310 	add.w	r3, r7, #16
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fd fa21 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004ce6:	f7fd fa07 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004cea:	2305      	movs	r3, #5
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40020000 	.word	0x40020000
 8004cfc:	40005000 	.word	0x40005000
 8004d00:	20004850 	.word	0x20004850
 8004d04:	40011000 	.word	0x40011000

08004d08 <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d14:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004d18:	6018      	str	r0, [r3, #0]
 8004d1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d1e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004d22:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004d24:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d28:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	dc01      	bgt.n	8004d36 <Cmd_pdu_get_buck+0x2e>
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0b8      	b.n	8004ea8 <Cmd_pdu_get_buck+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004d36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d3a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	dd01      	ble.n	8004d48 <Cmd_pdu_get_buck+0x40>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e0af      	b.n	8004ea8 <Cmd_pdu_get_buck+0x1a0>
    uint8_t buck = atoi(argv[1]);
 8004d48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d4c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3304      	adds	r3, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f008 fd40 	bl	800d7dc <atoi>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004d62:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004d66:	2b06      	cmp	r3, #6
 8004d68:	d901      	bls.n	8004d6e <Cmd_pdu_get_buck+0x66>
 8004d6a:	2304      	movs	r3, #4
 8004d6c:	e09c      	b.n	8004ea8 <Cmd_pdu_get_buck+0x1a0>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004d6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d72:	4850      	ldr	r0, [pc, #320]	@ (8004eb4 <Cmd_pdu_get_buck+0x1ac>)
 8004d74:	f7ff fb6c 	bl	8004450 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004d78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d7c:	484d      	ldr	r0, [pc, #308]	@ (8004eb4 <Cmd_pdu_get_buck+0x1ac>)
 8004d7e:	f7ff fb67 	bl	8004450 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004d82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d86:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d90:	3b01      	subs	r3, #1
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004d98:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	4413      	add	r3, r2
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004da6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004daa:	4a43      	ldr	r2, [pc, #268]	@ (8004eb8 <Cmd_pdu_get_buck+0x1b0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d103      	bne.n	8004db8 <Cmd_pdu_get_buck+0xb0>
    	uart_choose_uart5 = 1;
 8004db0:	4b42      	ldr	r3, [pc, #264]	@ (8004ebc <Cmd_pdu_get_buck+0x1b4>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e002      	b.n	8004dbe <Cmd_pdu_get_buck+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004db8:	4b40      	ldr	r3, [pc, #256]	@ (8004ebc <Cmd_pdu_get_buck+0x1b4>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 8004dbe:	2305      	movs	r3, #5
 8004dc0:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = buck;
 8004dc4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004dc8:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004dcc:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004dd0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004dd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	2301      	movs	r3, #1
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2303      	movs	r3, #3
 8004de0:	2201      	movs	r2, #1
 8004de2:	f005 ff1d 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004de6:	f107 020f 	add.w	r2, r7, #15
 8004dea:	f107 0110 	add.w	r1, r7, #16
 8004dee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004df2:	4618      	mov	r0, r3
 8004df4:	f005 ff9a 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004df8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dfc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02c      	beq.n	8004e60 <Cmd_pdu_get_buck+0x158>
        for (int i = 0; i < frame_len; i++) {
 8004e06:	2300      	movs	r3, #0
 8004e08:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004e0c:	e010      	b.n	8004e30 <Cmd_pdu_get_buck+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8004e0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e12:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004e16:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004e1a:	4413      	add	r3, r2
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4827      	ldr	r0, [pc, #156]	@ (8004ec0 <Cmd_pdu_get_buck+0x1b8>)
 8004e22:	f7fc ff47 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004e26:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004e30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e34:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004e40:	4293      	cmp	r3, r2
 8004e42:	dbe4      	blt.n	8004e0e <Cmd_pdu_get_buck+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004e44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e48:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	f107 0310 	add.w	r3, r7, #16
 8004e52:	4611      	mov	r1, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fd f967 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004e5a:	f7fd f94d 	bl	80020f8 <set_send_flag>
 8004e5e:	e022      	b.n	8004ea6 <Cmd_pdu_get_buck+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004e60:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004e64:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004e68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2301      	movs	r3, #1
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2303      	movs	r3, #3
 8004e74:	2201      	movs	r2, #1
 8004e76:	f005 fed3 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004e7a:	f107 020f 	add.w	r2, r7, #15
 8004e7e:	f107 0110 	add.w	r1, r7, #16
 8004e82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e86:	4618      	mov	r0, r3
 8004e88:	f005 ff50 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004e8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e90:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	f107 0310 	add.w	r3, r7, #16
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fd f943 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004ea2:	f7fd f929 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004ea6:	2305      	movs	r3, #5
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40020000 	.word	0x40020000
 8004eb8:	40005000 	.word	0x40005000
 8004ebc:	20004850 	.word	0x20004850
 8004ec0:	40011000 	.word	0x40011000

08004ec4 <Cmd_pdu_get_all>:

int Cmd_pdu_get_all(int argc, char *argv[])
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ed0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004ed4:	6018      	str	r0, [r3, #0]
 8004ed6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004eda:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ede:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004ee0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ee4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	dc01      	bgt.n	8004ef2 <Cmd_pdu_get_all+0x2e>
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e097      	b.n	8005022 <Cmd_pdu_get_all+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8004ef2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ef6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	dd01      	ble.n	8004f04 <Cmd_pdu_get_all+0x40>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e08e      	b.n	8005022 <Cmd_pdu_get_all+0x15e>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004f04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f08:	4848      	ldr	r0, [pc, #288]	@ (800502c <Cmd_pdu_get_all+0x168>)
 8004f0a:	f7ff faa1 	bl	8004450 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f12:	4846      	ldr	r0, [pc, #280]	@ (800502c <Cmd_pdu_get_all+0x168>)
 8004f14:	f7ff fa9c 	bl	8004450 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004f18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f1c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f26:	3b01      	subs	r3, #1
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004f2e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004f3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004f40:	4a3b      	ldr	r2, [pc, #236]	@ (8005030 <Cmd_pdu_get_all+0x16c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d103      	bne.n	8004f4e <Cmd_pdu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 8004f46:	4b3b      	ldr	r3, [pc, #236]	@ (8005034 <Cmd_pdu_get_all+0x170>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e002      	b.n	8004f54 <Cmd_pdu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004f4e:	4b39      	ldr	r3, [pc, #228]	@ (8005034 <Cmd_pdu_get_all+0x170>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_GET_ALL;
 8004f54:	2306      	movs	r3, #6
 8004f56:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004f5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f5e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004f62:	2201      	movs	r2, #1
 8004f64:	2103      	movs	r1, #3
 8004f66:	f005 fe33 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004f6a:	f107 020f 	add.w	r2, r7, #15
 8004f6e:	f107 0110 	add.w	r1, r7, #16
 8004f72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f76:	4618      	mov	r0, r3
 8004f78:	f005 fed8 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004f7c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f80:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02c      	beq.n	8004fe4 <Cmd_pdu_get_all+0x120>
        for (int i = 0; i < frame_len; i++) {
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004f90:	e010      	b.n	8004fb4 <Cmd_pdu_get_all+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8004f92:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f96:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8004f9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004f9e:	4413      	add	r3, r2
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4824      	ldr	r0, [pc, #144]	@ (8005038 <Cmd_pdu_get_all+0x174>)
 8004fa6:	f7fc fe85 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004faa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004fb4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004fb8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	dbe4      	blt.n	8004f92 <Cmd_pdu_get_all+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004fc8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004fcc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	f107 0310 	add.w	r3, r7, #16
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fd f8a5 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004fde:	f7fd f88b 	bl	80020f8 <set_send_flag>
 8004fe2:	e01d      	b.n	8005020 <Cmd_pdu_get_all+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004fe4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fe8:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004fec:	2201      	movs	r2, #1
 8004fee:	2103      	movs	r1, #3
 8004ff0:	f005 fdee 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004ff4:	f107 020f 	add.w	r2, r7, #15
 8004ff8:	f107 0110 	add.w	r1, r7, #16
 8004ffc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005000:	4618      	mov	r0, r3
 8005002:	f005 fe93 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005006:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800500a:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800500e:	781a      	ldrb	r2, [r3, #0]
 8005010:	f107 0310 	add.w	r3, r7, #16
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f7fd f886 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800501c:	f7fd f86c 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005020:	2305      	movs	r3, #5
}
 8005022:	4618      	mov	r0, r3
 8005024:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40020000 	.word	0x40020000
 8005030:	40005000 	.word	0x40005000
 8005034:	20004850 	.word	0x20004850
 8005038:	40011000 	.word	0x40011000

0800503c <LL_GPIO_SetOutputPin>:
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	619a      	str	r2, [r3, #24]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <LL_GPIO_ResetOutputPin>:
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	041a      	lsls	r2, r3, #16
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	619a      	str	r2, [r3, #24]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <PMU_create_task>:
};



void PMU_create_task(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PMU_task_context.taskHandle, &PMU_task_context.taskProperty);
 800507c:	4906      	ldr	r1, [pc, #24]	@ (8005098 <PMU_create_task+0x20>)
 800507e:	4807      	ldr	r0, [pc, #28]	@ (800509c <PMU_create_task+0x24>)
 8005080:	f005 fc22 	bl	800a8c8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 8005084:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005088:	2005      	movs	r0, #5
 800508a:	f005 fbf1 	bl	800a870 <SCH_TIM_Start>
    Ringbuf_init();
 800508e:	f7fc fcb5 	bl	80019fc <Ringbuf_init>
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	2000006c 	.word	0x2000006c
 800509c:	20000068 	.word	0x20000068

080050a0 <PMU_update_task>:



volatile uint8_t timeout_counter_pmu = 0;

void PMU_update_task(void) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
	if (auto_report_enabled) {
 80050a6:	4b3d      	ldr	r3, [pc, #244]	@ (800519c <PMU_update_task+0xfc>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d071      	beq.n	8005194 <PMU_update_task+0xf4>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PMU))
 80050b0:	2005      	movs	r0, #5
 80050b2:	f005 fbf3 	bl	800a89c <SCH_TIM_HasCompleted>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d06b      	beq.n	8005194 <PMU_update_task+0xf4>
		{

			if(!sendFlag){
 80050bc:	4b38      	ldr	r3, [pc, #224]	@ (80051a0 <PMU_update_task+0x100>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d166      	bne.n	8005194 <PMU_update_task+0xf4>
				if(!send_rs422){
 80050c6:	4b37      	ldr	r3, [pc, #220]	@ (80051a4 <PMU_update_task+0x104>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d161      	bne.n	8005194 <PMU_update_task+0xf4>
					if(receive_iouFlag&&receive_pduFlag){
 80050d0:	4b35      	ldr	r3, [pc, #212]	@ (80051a8 <PMU_update_task+0x108>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d02b      	beq.n	8005132 <PMU_update_task+0x92>
 80050da:	4b34      	ldr	r3, [pc, #208]	@ (80051ac <PMU_update_task+0x10c>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d026      	beq.n	8005132 <PMU_update_task+0x92>
						switch_board(1);
 80050e4:	2001      	movs	r0, #1
 80050e6:	f001 fefd 	bl	8006ee4 <switch_board>
						Uart_flush(USART1);
 80050ea:	4831      	ldr	r0, [pc, #196]	@ (80051b0 <PMU_update_task+0x110>)
 80050ec:	f7fc ff06 	bl	8001efc <Uart_flush>

						frame = pmu_frame;
 80050f0:	4b30      	ldr	r3, [pc, #192]	@ (80051b4 <PMU_update_task+0x114>)
 80050f2:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(pmu_frame);
 80050f4:	2309      	movs	r3, #9
 80050f6:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e00a      	b.n	8005114 <PMU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4413      	add	r3, r2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	4829      	ldr	r0, [pc, #164]	@ (80051b0 <PMU_update_task+0x110>)
 800510a:	f7fc fdd3 	bl	8001cb4 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	429a      	cmp	r2, r3
 800511a:	dbf0      	blt.n	80050fe <PMU_update_task+0x5e>
						}
						receive_pmuFlag = 0;
 800511c:	4b26      	ldr	r3, [pc, #152]	@ (80051b8 <PMU_update_task+0x118>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 8005122:	4b20      	ldr	r3, [pc, #128]	@ (80051a4 <PMU_update_task+0x104>)
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 8005128:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800512c:	2005      	movs	r0, #5
 800512e:	f005 fb9f 	bl	800a870 <SCH_TIM_Start>
					}
					if(!receive_pmuFlag){
 8005132:	4b21      	ldr	r3, [pc, #132]	@ (80051b8 <PMU_update_task+0x118>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d12b      	bne.n	8005194 <PMU_update_task+0xf4>
						timeout_counter_pmu++;
 800513c:	4b1f      	ldr	r3, [pc, #124]	@ (80051bc <PMU_update_task+0x11c>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	3301      	adds	r3, #1
 8005144:	b2da      	uxtb	r2, r3
 8005146:	4b1d      	ldr	r3, [pc, #116]	@ (80051bc <PMU_update_task+0x11c>)
 8005148:	701a      	strb	r2, [r3, #0]
						if (timeout_counter_pmu > 2){
 800514a:	4b1c      	ldr	r3, [pc, #112]	@ (80051bc <PMU_update_task+0x11c>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d91f      	bls.n	8005194 <PMU_update_task+0xf4>
							disconnect_counter_pmu++;
 8005154:	4b1a      	ldr	r3, [pc, #104]	@ (80051c0 <PMU_update_task+0x120>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	3301      	adds	r3, #1
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4b18      	ldr	r3, [pc, #96]	@ (80051c0 <PMU_update_task+0x120>)
 8005160:	701a      	strb	r2, [r3, #0]
							timeout_counter_pmu = 0;
 8005162:	4b16      	ldr	r3, [pc, #88]	@ (80051bc <PMU_update_task+0x11c>)
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
							receive_pmuFlag = 1;
 8005168:	4b13      	ldr	r3, [pc, #76]	@ (80051b8 <PMU_update_task+0x118>)
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
							if(disconnect_counter_pmu> 4){
 800516e:	4b14      	ldr	r3, [pc, #80]	@ (80051c0 <PMU_update_task+0x120>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b04      	cmp	r3, #4
 8005176:	d90d      	bls.n	8005194 <PMU_update_task+0xf4>
								for (int i = 1; i <= 24; i++) {
 8005178:	2301      	movs	r3, #1
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	e007      	b.n	800518e <PMU_update_task+0xee>
									sourceArray[i + 96] = 0xFF; //97   pay1    + 98 pay2    120    pay24
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	3360      	adds	r3, #96	@ 0x60
 8005182:	4a10      	ldr	r2, [pc, #64]	@ (80051c4 <PMU_update_task+0x124>)
 8005184:	21ff      	movs	r1, #255	@ 0xff
 8005186:	54d1      	strb	r1, [r2, r3]
								for (int i = 1; i <= 24; i++) {
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3301      	adds	r3, #1
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b18      	cmp	r3, #24
 8005192:	ddf4      	ble.n	800517e <PMU_update_task+0xde>
					}
				}
			}
		}
	}
}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20004978 	.word	0x20004978
 80051a0:	20004749 	.word	0x20004749
 80051a4:	2000484e 	.word	0x2000484e
 80051a8:	2000003e 	.word	0x2000003e
 80051ac:	2000003c 	.word	0x2000003c
 80051b0:	40011000 	.word	0x40011000
 80051b4:	2000005c 	.word	0x2000005c
 80051b8:	2000003d 	.word	0x2000003d
 80051bc:	20004852 	.word	0x20004852
 80051c0:	2000484d 	.word	0x2000484d
 80051c4:	2000497c 	.word	0x2000497c

080051c8 <Cmd_pmu_get_temp>:


#define DEST_ADDR FSP_ADR_PMU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pmu_get_temp(int argc, char *argv[])
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80051d4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80051d8:	6018      	str	r0, [r3, #0]
 80051da:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80051de:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80051e2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80051e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80051e8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	dc01      	bgt.n	80051f6 <Cmd_pmu_get_temp+0x2e>
 80051f2:	2303      	movs	r3, #3
 80051f4:	e097      	b.n	8005326 <Cmd_pmu_get_temp+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80051f6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80051fa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b02      	cmp	r3, #2
 8005202:	dd01      	ble.n	8005208 <Cmd_pmu_get_temp+0x40>
 8005204:	2302      	movs	r3, #2
 8005206:	e08e      	b.n	8005326 <Cmd_pmu_get_temp+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005208:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800520c:	4848      	ldr	r0, [pc, #288]	@ (8005330 <Cmd_pmu_get_temp+0x168>)
 800520e:	f7ff ff23 	bl	8005058 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005212:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005216:	4846      	ldr	r0, [pc, #280]	@ (8005330 <Cmd_pmu_get_temp+0x168>)
 8005218:	f7ff ff10 	bl	800503c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800521c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005220:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800522a:	3b01      	subs	r3, #1
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005232:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	4413      	add	r3, r2
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005240:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005244:	4a3b      	ldr	r2, [pc, #236]	@ (8005334 <Cmd_pmu_get_temp+0x16c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d103      	bne.n	8005252 <Cmd_pmu_get_temp+0x8a>
    	uart_choose_uart5 = 1;
 800524a:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <Cmd_pmu_get_temp+0x170>)
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e002      	b.n	8005258 <Cmd_pmu_get_temp+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005252:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <Cmd_pmu_get_temp+0x170>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800525e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005262:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005266:	2201      	movs	r2, #1
 8005268:	2102      	movs	r1, #2
 800526a:	f005 fcb1 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800526e:	f107 020f 	add.w	r2, r7, #15
 8005272:	f107 0110 	add.w	r1, r7, #16
 8005276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800527a:	4618      	mov	r0, r3
 800527c:	f005 fd56 	bl	800ad2c <frame_encode>

    if (frame_len > 0) {
 8005280:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005284:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d02c      	beq.n	80052e8 <Cmd_pmu_get_temp+0x120>
        for (int i = 0; i < frame_len; i++) {
 800528e:	2300      	movs	r3, #0
 8005290:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005294:	e010      	b.n	80052b8 <Cmd_pmu_get_temp+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8005296:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800529a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800529e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80052a2:	4413      	add	r3, r2
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	4619      	mov	r1, r3
 80052a8:	4824      	ldr	r0, [pc, #144]	@ (800533c <Cmd_pmu_get_temp+0x174>)
 80052aa:	f7fc fd03 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80052ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80052b2:	3301      	adds	r3, #1
 80052b4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80052b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052bc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80052c8:	4293      	cmp	r3, r2
 80052ca:	dbe4      	blt.n	8005296 <Cmd_pmu_get_temp+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80052cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052d0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fc ff23 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80052e2:	f7fc ff09 	bl	80020f8 <set_send_flag>
 80052e6:	e01d      	b.n	8005324 <Cmd_pmu_get_temp+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80052e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052ec:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80052f0:	2201      	movs	r2, #1
 80052f2:	2102      	movs	r1, #2
 80052f4:	f005 fc6c 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80052f8:	f107 020f 	add.w	r2, r7, #15
 80052fc:	f107 0110 	add.w	r1, r7, #16
 8005300:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005304:	4618      	mov	r0, r3
 8005306:	f005 fd11 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800530a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800530e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	f107 0310 	add.w	r3, r7, #16
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f7fc ff04 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005320:	f7fc feea 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005324:	2305      	movs	r3, #5
}
 8005326:	4618      	mov	r0, r3
 8005328:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40020000 	.word	0x40020000
 8005334:	40005000 	.word	0x40005000
 8005338:	20004850 	.word	0x20004850
 800533c:	40011000 	.word	0x40011000

08005340 <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 8005340:	b580      	push	{r7, lr}
 8005342:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005346:	af00      	add	r7, sp, #0
 8005348:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800534c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005350:	6018      	str	r0, [r3, #0]
 8005352:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005356:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800535a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800535c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005360:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b01      	cmp	r3, #1
 8005368:	dc01      	bgt.n	800536e <Cmd_pmu_bat_vol+0x2e>
 800536a:	2303      	movs	r3, #3
 800536c:	e097      	b.n	800549e <Cmd_pmu_bat_vol+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800536e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005372:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b02      	cmp	r3, #2
 800537a:	dd01      	ble.n	8005380 <Cmd_pmu_bat_vol+0x40>
 800537c:	2302      	movs	r3, #2
 800537e:	e08e      	b.n	800549e <Cmd_pmu_bat_vol+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005380:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005384:	4848      	ldr	r0, [pc, #288]	@ (80054a8 <Cmd_pmu_bat_vol+0x168>)
 8005386:	f7ff fe67 	bl	8005058 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800538a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800538e:	4846      	ldr	r0, [pc, #280]	@ (80054a8 <Cmd_pmu_bat_vol+0x168>)
 8005390:	f7ff fe54 	bl	800503c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005394:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005398:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053a2:	3b01      	subs	r3, #1
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80053aa:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80053b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80053bc:	4a3b      	ldr	r2, [pc, #236]	@ (80054ac <Cmd_pmu_bat_vol+0x16c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d103      	bne.n	80053ca <Cmd_pmu_bat_vol+0x8a>
    	uart_choose_uart5 = 1;
 80053c2:	4b3b      	ldr	r3, [pc, #236]	@ (80054b0 <Cmd_pmu_bat_vol+0x170>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e002      	b.n	80053d0 <Cmd_pmu_bat_vol+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80053ca:	4b39      	ldr	r3, [pc, #228]	@ (80054b0 <Cmd_pmu_bat_vol+0x170>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_BAT_VOL;
 80053d0:	2302      	movs	r3, #2
 80053d2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80053d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80053da:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80053de:	2201      	movs	r2, #1
 80053e0:	2102      	movs	r1, #2
 80053e2:	f005 fbf5 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80053e6:	f107 020f 	add.w	r2, r7, #15
 80053ea:	f107 0110 	add.w	r1, r7, #16
 80053ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80053f2:	4618      	mov	r0, r3
 80053f4:	f005 fc9a 	bl	800ad2c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80053f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80053fc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d02c      	beq.n	8005460 <Cmd_pmu_bat_vol+0x120>
        for (int i = 0; i < frame_len; i++) {
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800540c:	e010      	b.n	8005430 <Cmd_pmu_bat_vol+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 800540e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005412:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005416:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800541a:	4413      	add	r3, r2
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	4619      	mov	r1, r3
 8005420:	4824      	ldr	r0, [pc, #144]	@ (80054b4 <Cmd_pmu_bat_vol+0x174>)
 8005422:	f7fc fc47 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005426:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800542a:	3301      	adds	r3, #1
 800542c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005430:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005434:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005440:	4293      	cmp	r3, r2
 8005442:	dbe4      	blt.n	800540e <Cmd_pmu_bat_vol+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005444:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005448:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800544c:	781a      	ldrb	r2, [r3, #0]
 800544e:	f107 0310 	add.w	r3, r7, #16
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f7fc fe67 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800545a:	f7fc fe4d 	bl	80020f8 <set_send_flag>
 800545e:	e01d      	b.n	800549c <Cmd_pmu_bat_vol+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005460:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005464:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005468:	2201      	movs	r2, #1
 800546a:	2102      	movs	r1, #2
 800546c:	f005 fbb0 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005470:	f107 020f 	add.w	r2, r7, #15
 8005474:	f107 0110 	add.w	r1, r7, #16
 8005478:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800547c:	4618      	mov	r0, r3
 800547e:	f005 fc55 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005482:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005486:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	f107 0310 	add.w	r3, r7, #16
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f7fc fe48 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005498:	f7fc fe2e 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800549c:	2305      	movs	r3, #5
}
 800549e:	4618      	mov	r0, r3
 80054a0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40020000 	.word	0x40020000
 80054ac:	40005000 	.word	0x40005000
 80054b0:	20004850 	.word	0x20004850
 80054b4:	40011000 	.word	0x40011000

080054b8 <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80054be:	af00      	add	r7, sp, #0
 80054c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80054c8:	6018      	str	r0, [r3, #0]
 80054ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80054d2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80054d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	dc01      	bgt.n	80054e6 <Cmd_pmu_parag_in+0x2e>
 80054e2:	2303      	movs	r3, #3
 80054e4:	e097      	b.n	8005616 <Cmd_pmu_parag_in+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80054e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054ea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	dd01      	ble.n	80054f8 <Cmd_pmu_parag_in+0x40>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e08e      	b.n	8005616 <Cmd_pmu_parag_in+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80054f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054fc:	4848      	ldr	r0, [pc, #288]	@ (8005620 <Cmd_pmu_parag_in+0x168>)
 80054fe:	f7ff fdab 	bl	8005058 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005502:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005506:	4846      	ldr	r0, [pc, #280]	@ (8005620 <Cmd_pmu_parag_in+0x168>)
 8005508:	f7ff fd98 	bl	800503c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800550c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005510:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800551a:	3b01      	subs	r3, #1
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005522:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	4413      	add	r3, r2
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005530:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005534:	4a3b      	ldr	r2, [pc, #236]	@ (8005624 <Cmd_pmu_parag_in+0x16c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d103      	bne.n	8005542 <Cmd_pmu_parag_in+0x8a>
    	uart_choose_uart5 = 1;
 800553a:	4b3b      	ldr	r3, [pc, #236]	@ (8005628 <Cmd_pmu_parag_in+0x170>)
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e002      	b.n	8005548 <Cmd_pmu_parag_in+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005542:	4b39      	ldr	r3, [pc, #228]	@ (8005628 <Cmd_pmu_parag_in+0x170>)
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PARAG_IN;
 8005548:	2303      	movs	r3, #3
 800554a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800554e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005552:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005556:	2201      	movs	r2, #1
 8005558:	2102      	movs	r1, #2
 800555a:	f005 fb39 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800555e:	f107 020f 	add.w	r2, r7, #15
 8005562:	f107 0110 	add.w	r1, r7, #16
 8005566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800556a:	4618      	mov	r0, r3
 800556c:	f005 fbde 	bl	800ad2c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005570:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005574:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02c      	beq.n	80055d8 <Cmd_pmu_parag_in+0x120>
        for (int i = 0; i < frame_len; i++) {
 800557e:	2300      	movs	r3, #0
 8005580:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005584:	e010      	b.n	80055a8 <Cmd_pmu_parag_in+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8005586:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800558a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800558e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005592:	4413      	add	r3, r2
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4824      	ldr	r0, [pc, #144]	@ (800562c <Cmd_pmu_parag_in+0x174>)
 800559a:	f7fc fb8b 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800559e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80055a2:	3301      	adds	r3, #1
 80055a4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80055a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055ac:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80055b8:	4293      	cmp	r3, r2
 80055ba:	dbe4      	blt.n	8005586 <Cmd_pmu_parag_in+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80055bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055c0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	f107 0310 	add.w	r3, r7, #16
 80055ca:	4611      	mov	r1, r2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fc fdab 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80055d2:	f7fc fd91 	bl	80020f8 <set_send_flag>
 80055d6:	e01d      	b.n	8005614 <Cmd_pmu_parag_in+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80055d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055dc:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80055e0:	2201      	movs	r2, #1
 80055e2:	2102      	movs	r1, #2
 80055e4:	f005 faf4 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80055e8:	f107 020f 	add.w	r2, r7, #15
 80055ec:	f107 0110 	add.w	r1, r7, #16
 80055f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055f4:	4618      	mov	r0, r3
 80055f6:	f005 fb99 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80055fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055fe:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	f107 0310 	add.w	r3, r7, #16
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f7fc fd8c 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005610:	f7fc fd72 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005614:	2305      	movs	r3, #5
}
 8005616:	4618      	mov	r0, r3
 8005618:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40020000 	.word	0x40020000
 8005624:	40005000 	.word	0x40005000
 8005628:	20004850 	.word	0x20004850
 800562c:	40011000 	.word	0x40011000

08005630 <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 8005630:	b580      	push	{r7, lr}
 8005632:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005636:	af00      	add	r7, sp, #0
 8005638:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800563c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005640:	6018      	str	r0, [r3, #0]
 8005642:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005646:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800564a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800564c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005650:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	dc01      	bgt.n	800565e <Cmd_pmu_parag_out+0x2e>
 800565a:	2303      	movs	r3, #3
 800565c:	e097      	b.n	800578e <Cmd_pmu_parag_out+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800565e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005662:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b02      	cmp	r3, #2
 800566a:	dd01      	ble.n	8005670 <Cmd_pmu_parag_out+0x40>
 800566c:	2302      	movs	r3, #2
 800566e:	e08e      	b.n	800578e <Cmd_pmu_parag_out+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005670:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005674:	4848      	ldr	r0, [pc, #288]	@ (8005798 <Cmd_pmu_parag_out+0x168>)
 8005676:	f7ff fcef 	bl	8005058 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800567a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800567e:	4846      	ldr	r0, [pc, #280]	@ (8005798 <Cmd_pmu_parag_out+0x168>)
 8005680:	f7ff fcdc 	bl	800503c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005684:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005688:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005692:	3b01      	subs	r3, #1
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800569a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80056a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80056ac:	4a3b      	ldr	r2, [pc, #236]	@ (800579c <Cmd_pmu_parag_out+0x16c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d103      	bne.n	80056ba <Cmd_pmu_parag_out+0x8a>
    	uart_choose_uart5 = 1;
 80056b2:	4b3b      	ldr	r3, [pc, #236]	@ (80057a0 <Cmd_pmu_parag_out+0x170>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e002      	b.n	80056c0 <Cmd_pmu_parag_out+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80056ba:	4b39      	ldr	r3, [pc, #228]	@ (80057a0 <Cmd_pmu_parag_out+0x170>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 80056c0:	2304      	movs	r3, #4
 80056c2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80056c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056ca:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80056ce:	2201      	movs	r2, #1
 80056d0:	2102      	movs	r1, #2
 80056d2:	f005 fa7d 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80056d6:	f107 020f 	add.w	r2, r7, #15
 80056da:	f107 0110 	add.w	r1, r7, #16
 80056de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056e2:	4618      	mov	r0, r3
 80056e4:	f005 fb22 	bl	800ad2c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 80056e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056ec:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d02c      	beq.n	8005750 <Cmd_pmu_parag_out+0x120>
        for (int i = 0; i < frame_len; i++) {
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80056fc:	e010      	b.n	8005720 <Cmd_pmu_parag_out+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 80056fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005702:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005706:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800570a:	4413      	add	r3, r2
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	4619      	mov	r1, r3
 8005710:	4824      	ldr	r0, [pc, #144]	@ (80057a4 <Cmd_pmu_parag_out+0x174>)
 8005712:	f7fc facf 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005716:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800571a:	3301      	adds	r3, #1
 800571c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005720:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005724:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005730:	4293      	cmp	r3, r2
 8005732:	dbe4      	blt.n	80056fe <Cmd_pmu_parag_out+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005734:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005738:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	f107 0310 	add.w	r3, r7, #16
 8005742:	4611      	mov	r1, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f7fc fcef 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800574a:	f7fc fcd5 	bl	80020f8 <set_send_flag>
 800574e:	e01d      	b.n	800578c <Cmd_pmu_parag_out+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005750:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005754:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005758:	2201      	movs	r2, #1
 800575a:	2102      	movs	r1, #2
 800575c:	f005 fa38 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005760:	f107 020f 	add.w	r2, r7, #15
 8005764:	f107 0110 	add.w	r1, r7, #16
 8005768:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800576c:	4618      	mov	r0, r3
 800576e:	f005 fadd 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005772:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005776:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	f107 0310 	add.w	r3, r7, #16
 8005780:	4611      	mov	r1, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f7fc fcd0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005788:	f7fc fcb6 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800578c:	2305      	movs	r3, #5
}
 800578e:	4618      	mov	r0, r3
 8005790:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40020000 	.word	0x40020000
 800579c:	40005000 	.word	0x40005000
 80057a0:	20004850 	.word	0x20004850
 80057a4:	40011000 	.word	0x40011000

080057a8 <Cmd_pmu_set_temppoint>:

int Cmd_pmu_set_temppoint(int argc, char *argv[])
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80057ae:	af02      	add	r7, sp, #8
 80057b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80057b8:	6018      	str	r0, [r3, #0]
 80057ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80057c2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80057c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	dc01      	bgt.n	80057d6 <Cmd_pmu_set_temppoint+0x2e>
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0db      	b.n	800598e <Cmd_pmu_set_temppoint+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80057d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	dd01      	ble.n	80057e8 <Cmd_pmu_set_temppoint+0x40>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e0d2      	b.n	800598e <Cmd_pmu_set_temppoint+0x1e6>
    uint16_t lowpoint = atoi(argv[1]);
 80057e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057ec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3304      	adds	r3, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f007 fff0 	bl	800d7dc <atoi>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
   // if (lowpoint > 6)   return CMDLINE_INVALID_ARG;
    uint16_t highpoint = atoi(argv[2]);
 8005802:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005806:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f007 ffe3 	bl	800d7dc <atoi>
 8005816:	4603      	mov	r3, r0
 8005818:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
   // if (highpoint > 6)   return CMDLINE_INVALID_ARG;
    if (highpoint < lowpoint)   return CMDLINE_INVALID_ARG;
 800581c:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 8005820:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005824:	429a      	cmp	r2, r3
 8005826:	d201      	bcs.n	800582c <Cmd_pmu_set_temppoint+0x84>
 8005828:	2304      	movs	r3, #4
 800582a:	e0b0      	b.n	800598e <Cmd_pmu_set_temppoint+0x1e6>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800582c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005830:	4859      	ldr	r0, [pc, #356]	@ (8005998 <Cmd_pmu_set_temppoint+0x1f0>)
 8005832:	f7ff fc11 	bl	8005058 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800583a:	4857      	ldr	r0, [pc, #348]	@ (8005998 <Cmd_pmu_set_temppoint+0x1f0>)
 800583c:	f7ff fbfe 	bl	800503c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005840:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005844:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800584e:	3b01      	subs	r3, #1
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005856:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	4413      	add	r3, r2
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005864:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005868:	4a4c      	ldr	r2, [pc, #304]	@ (800599c <Cmd_pmu_set_temppoint+0x1f4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d103      	bne.n	8005876 <Cmd_pmu_set_temppoint+0xce>
    	uart_choose_uart5 = 1;
 800586e:	4b4c      	ldr	r3, [pc, #304]	@ (80059a0 <Cmd_pmu_set_temppoint+0x1f8>)
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	e002      	b.n	800587c <Cmd_pmu_set_temppoint+0xd4>
    }else{
    	uart_choose_uart5 = 0;
 8005876:	4b4a      	ldr	r3, [pc, #296]	@ (80059a0 <Cmd_pmu_set_temppoint+0x1f8>)
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_TEMP_POINT;
 800587c:	2305      	movs	r3, #5
 800587e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = (uint8_t)(lowpoint >> 8);
 8005882:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	b29b      	uxth	r3, r3
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(lowpoint & 0xFF);
 8005890:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(highpoint >> 8);
 800589a:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(highpoint & 0xFF);
 80058a8:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80058b2:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80058b6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80058ba:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	2301      	movs	r3, #1
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2302      	movs	r3, #2
 80058c6:	2204      	movs	r2, #4
 80058c8:	f005 f9aa 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80058cc:	f107 020b 	add.w	r2, r7, #11
 80058d0:	f107 010c 	add.w	r1, r7, #12
 80058d4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80058d8:	4618      	mov	r0, r3
 80058da:	f005 fa27 	bl	800ad2c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80058de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80058e2:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02c      	beq.n	8005946 <Cmd_pmu_set_temppoint+0x19e>
        for (int i = 0; i < frame_len; i++) {
 80058ec:	2300      	movs	r3, #0
 80058ee:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80058f2:	e010      	b.n	8005916 <Cmd_pmu_set_temppoint+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 80058f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80058f8:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 80058fc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005900:	4413      	add	r3, r2
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	4619      	mov	r1, r3
 8005906:	4827      	ldr	r0, [pc, #156]	@ (80059a4 <Cmd_pmu_set_temppoint+0x1fc>)
 8005908:	f7fc f9d4 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800590c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005910:	3301      	adds	r3, #1
 8005912:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005916:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800591a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005926:	4293      	cmp	r3, r2
 8005928:	dbe4      	blt.n	80058f4 <Cmd_pmu_set_temppoint+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800592a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800592e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005932:	781a      	ldrb	r2, [r3, #0]
 8005934:	f107 030c 	add.w	r3, r7, #12
 8005938:	4611      	mov	r1, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f7fc fbf4 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005940:	f7fc fbda 	bl	80020f8 <set_send_flag>
 8005944:	e022      	b.n	800598c <Cmd_pmu_set_temppoint+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005946:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800594a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800594e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005952:	9301      	str	r3, [sp, #4]
 8005954:	2301      	movs	r3, #1
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2302      	movs	r3, #2
 800595a:	2204      	movs	r2, #4
 800595c:	f005 f960 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005960:	f107 020b 	add.w	r2, r7, #11
 8005964:	f107 010c 	add.w	r1, r7, #12
 8005968:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800596c:	4618      	mov	r0, r3
 800596e:	f005 f9dd 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005972:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005976:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	f107 030c 	add.w	r3, r7, #12
 8005980:	4611      	mov	r1, r2
 8005982:	4618      	mov	r0, r3
 8005984:	f7fc fbd0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005988:	f7fc fbb6 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800598c:	2305      	movs	r3, #5
}
 800598e:	4618      	mov	r0, r3
 8005990:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40020000 	.word	0x40020000
 800599c:	40005000 	.word	0x40005000
 80059a0:	20004850 	.word	0x20004850
 80059a4:	40011000 	.word	0x40011000

080059a8 <Cmd_pmu_set_output>:

int Cmd_pmu_set_output(int argc, char *argv[])
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80059ae:	af02      	add	r7, sp, #8
 80059b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80059b8:	6018      	str	r0, [r3, #0]
 80059ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80059c2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80059c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	dc01      	bgt.n	80059d6 <Cmd_pmu_set_output+0x2e>
 80059d2:	2303      	movs	r3, #3
 80059d4:	e0b8      	b.n	8005b48 <Cmd_pmu_set_output+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80059d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	dd01      	ble.n	80059e8 <Cmd_pmu_set_output+0x40>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e0af      	b.n	8005b48 <Cmd_pmu_set_output+0x1a0>
    uint8_t state = atoi(argv[1]);
 80059e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059ec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3304      	adds	r3, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f007 fef0 	bl	800d7dc <atoi>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1)   return CMDLINE_INVALID_ARG;
 8005a02:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d901      	bls.n	8005a0e <Cmd_pmu_set_output+0x66>
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	e09c      	b.n	8005b48 <Cmd_pmu_set_output+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005a0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a12:	4850      	ldr	r0, [pc, #320]	@ (8005b54 <Cmd_pmu_set_output+0x1ac>)
 8005a14:	f7ff fb20 	bl	8005058 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005a18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a1c:	484d      	ldr	r0, [pc, #308]	@ (8005b54 <Cmd_pmu_set_output+0x1ac>)
 8005a1e:	f7ff fb0d 	bl	800503c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005a22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a26:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a30:	3b01      	subs	r3, #1
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005a38:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	4413      	add	r3, r2
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005a46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005a4a:	4a43      	ldr	r2, [pc, #268]	@ (8005b58 <Cmd_pmu_set_output+0x1b0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d103      	bne.n	8005a58 <Cmd_pmu_set_output+0xb0>
    	uart_choose_uart5 = 1;
 8005a50:	4b42      	ldr	r3, [pc, #264]	@ (8005b5c <Cmd_pmu_set_output+0x1b4>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <Cmd_pmu_set_output+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005a58:	4b40      	ldr	r3, [pc, #256]	@ (8005b5c <Cmd_pmu_set_output+0x1b4>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_PMU_OUTPUT;
 8005a5e:	2306      	movs	r3, #6
 8005a60:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = state;
 8005a64:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005a68:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005a6c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005a70:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005a74:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	2302      	movs	r3, #2
 8005a80:	2204      	movs	r2, #4
 8005a82:	f005 f8cd 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005a86:	f107 020b 	add.w	r2, r7, #11
 8005a8a:	f107 010c 	add.w	r1, r7, #12
 8005a8e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005a92:	4618      	mov	r0, r3
 8005a94:	f005 f94a 	bl	800ad2c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005a98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a9c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d02c      	beq.n	8005b00 <Cmd_pmu_set_output+0x158>
        for (int i = 0; i < frame_len; i++) {
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005aac:	e010      	b.n	8005ad0 <Cmd_pmu_set_output+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8005aae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ab2:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005ab6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005aba:	4413      	add	r3, r2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4827      	ldr	r0, [pc, #156]	@ (8005b60 <Cmd_pmu_set_output+0x1b8>)
 8005ac2:	f7fc f8f7 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005ac6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005aca:	3301      	adds	r3, #1
 8005acc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005ad0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ad4:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	dbe4      	blt.n	8005aae <Cmd_pmu_set_output+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005ae4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ae8:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	f107 030c 	add.w	r3, r7, #12
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fc fb17 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005afa:	f7fc fafd 	bl	80020f8 <set_send_flag>
 8005afe:	e022      	b.n	8005b46 <Cmd_pmu_set_output+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005b00:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005b04:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005b08:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	2301      	movs	r3, #1
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2302      	movs	r3, #2
 8005b14:	2204      	movs	r2, #4
 8005b16:	f005 f883 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005b1a:	f107 020b 	add.w	r2, r7, #11
 8005b1e:	f107 010c 	add.w	r1, r7, #12
 8005b22:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005b26:	4618      	mov	r0, r3
 8005b28:	f005 f900 	bl	800ad2c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8005b2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b30:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005b34:	781a      	ldrb	r2, [r3, #0]
 8005b36:	f107 030c 	add.w	r3, r7, #12
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fc faf3 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005b42:	f7fc fad9 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8005b46:	2305      	movs	r3, #5
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40020000 	.word	0x40020000
 8005b58:	40005000 	.word	0x40005000
 8005b5c:	20004850 	.word	0x20004850
 8005b60:	40011000 	.word	0x40011000

08005b64 <Cmd_pmu_set_pwm>:

int Cmd_pmu_set_pwm(int argc, char *argv[])
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005b6a:	af02      	add	r7, sp, #8
 8005b6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b70:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005b74:	6018      	str	r0, [r3, #0]
 8005b76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b7a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005b7e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005b80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b84:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	dc01      	bgt.n	8005b92 <Cmd_pmu_set_pwm+0x2e>
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e0b8      	b.n	8005d04 <Cmd_pmu_set_pwm+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8005b92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b96:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	dd01      	ble.n	8005ba4 <Cmd_pmu_set_pwm+0x40>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e0af      	b.n	8005d04 <Cmd_pmu_set_pwm+0x1a0>
    uint8_t duty = atoi(argv[1]);
 8005ba4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ba8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f007 fe12 	bl	800d7dc <atoi>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (duty > 100)   return CMDLINE_INVALID_ARG;
 8005bbe:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005bc2:	2b64      	cmp	r3, #100	@ 0x64
 8005bc4:	d901      	bls.n	8005bca <Cmd_pmu_set_pwm+0x66>
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	e09c      	b.n	8005d04 <Cmd_pmu_set_pwm+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005bca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bce:	4850      	ldr	r0, [pc, #320]	@ (8005d10 <Cmd_pmu_set_pwm+0x1ac>)
 8005bd0:	f7ff fa42 	bl	8005058 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005bd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005bd8:	484d      	ldr	r0, [pc, #308]	@ (8005d10 <Cmd_pmu_set_pwm+0x1ac>)
 8005bda:	f7ff fa2f 	bl	800503c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005bde:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005be2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bec:	3b01      	subs	r3, #1
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005bf4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005c02:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c06:	4a43      	ldr	r2, [pc, #268]	@ (8005d14 <Cmd_pmu_set_pwm+0x1b0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d103      	bne.n	8005c14 <Cmd_pmu_set_pwm+0xb0>
    	uart_choose_uart5 = 1;
 8005c0c:	4b42      	ldr	r3, [pc, #264]	@ (8005d18 <Cmd_pmu_set_pwm+0x1b4>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e002      	b.n	8005c1a <Cmd_pmu_set_pwm+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005c14:	4b40      	ldr	r3, [pc, #256]	@ (8005d18 <Cmd_pmu_set_pwm+0x1b4>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_PWM;
 8005c1a:	2307      	movs	r3, #7
 8005c1c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = duty;
 8005c20:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005c24:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005c28:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005c2c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005c30:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	2301      	movs	r3, #1
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	f004 ffef 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005c42:	f107 020b 	add.w	r2, r7, #11
 8005c46:	f107 010c 	add.w	r1, r7, #12
 8005c4a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f005 f86c 	bl	800ad2c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005c54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c58:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02c      	beq.n	8005cbc <Cmd_pmu_set_pwm+0x158>
        for (int i = 0; i < frame_len; i++) {
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005c68:	e010      	b.n	8005c8c <Cmd_pmu_set_pwm+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8005c6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c6e:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005c72:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005c76:	4413      	add	r3, r2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4827      	ldr	r0, [pc, #156]	@ (8005d1c <Cmd_pmu_set_pwm+0x1b8>)
 8005c7e:	f7fc f819 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005c82:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005c86:	3301      	adds	r3, #1
 8005c88:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005c8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c90:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	dbe4      	blt.n	8005c6a <Cmd_pmu_set_pwm+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005ca0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ca4:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005ca8:	781a      	ldrb	r2, [r3, #0]
 8005caa:	f107 030c 	add.w	r3, r7, #12
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fc fa39 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005cb6:	f7fc fa1f 	bl	80020f8 <set_send_flag>
 8005cba:	e022      	b.n	8005d02 <Cmd_pmu_set_pwm+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005cbc:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005cc0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005cc4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	2301      	movs	r3, #1
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2302      	movs	r3, #2
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	f004 ffa5 	bl	800ac20 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005cd6:	f107 020b 	add.w	r2, r7, #11
 8005cda:	f107 010c 	add.w	r1, r7, #12
 8005cde:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f005 f822 	bl	800ad2c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8005ce8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cec:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fc fa15 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005cfe:	f7fc f9fb 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8005d02:	2305      	movs	r3, #5
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40020000 	.word	0x40020000
 8005d14:	40005000 	.word	0x40005000
 8005d18:	20004850 	.word	0x20004850
 8005d1c:	40011000 	.word	0x40011000

08005d20 <Cmd_pmu_get_all>:

int Cmd_pmu_get_all(int argc, char *argv[])
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005d2c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005d30:	6018      	str	r0, [r3, #0]
 8005d32:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005d36:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005d3a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005d3c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005d40:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	dc01      	bgt.n	8005d4e <Cmd_pmu_get_all+0x2e>
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e097      	b.n	8005e7e <Cmd_pmu_get_all+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005d4e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005d52:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	dd01      	ble.n	8005d60 <Cmd_pmu_get_all+0x40>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e08e      	b.n	8005e7e <Cmd_pmu_get_all+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005d60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d64:	4848      	ldr	r0, [pc, #288]	@ (8005e88 <Cmd_pmu_get_all+0x168>)
 8005d66:	f7ff f977 	bl	8005058 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005d6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005d6e:	4846      	ldr	r0, [pc, #280]	@ (8005e88 <Cmd_pmu_get_all+0x168>)
 8005d70:	f7ff f964 	bl	800503c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005d74:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005d78:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d82:	3b01      	subs	r3, #1
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005d8a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	4413      	add	r3, r2
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005d98:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005d9c:	4a3b      	ldr	r2, [pc, #236]	@ (8005e8c <Cmd_pmu_get_all+0x16c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d103      	bne.n	8005daa <Cmd_pmu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 8005da2:	4b3b      	ldr	r3, [pc, #236]	@ (8005e90 <Cmd_pmu_get_all+0x170>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e002      	b.n	8005db0 <Cmd_pmu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005daa:	4b39      	ldr	r3, [pc, #228]	@ (8005e90 <Cmd_pmu_get_all+0x170>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_ALL;
 8005db0:	2308      	movs	r3, #8
 8005db2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005db6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dba:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	2102      	movs	r1, #2
 8005dc2:	f004 ff05 	bl	800abd0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005dc6:	f107 020f 	add.w	r2, r7, #15
 8005dca:	f107 0110 	add.w	r1, r7, #16
 8005dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f004 ffaa 	bl	800ad2c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005dd8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ddc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02c      	beq.n	8005e40 <Cmd_pmu_get_all+0x120>
        for (int i = 0; i < frame_len; i++) {
 8005de6:	2300      	movs	r3, #0
 8005de8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005dec:	e010      	b.n	8005e10 <Cmd_pmu_get_all+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8005dee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005df2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005df6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005dfa:	4413      	add	r3, r2
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4824      	ldr	r0, [pc, #144]	@ (8005e94 <Cmd_pmu_get_all+0x174>)
 8005e02:	f7fb ff57 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005e06:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005e10:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005e14:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005e20:	4293      	cmp	r3, r2
 8005e22:	dbe4      	blt.n	8005dee <Cmd_pmu_get_all+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005e24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005e28:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005e2c:	781a      	ldrb	r2, [r3, #0]
 8005e2e:	f107 0310 	add.w	r3, r7, #16
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fc f977 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005e3a:	f7fc f95d 	bl	80020f8 <set_send_flag>
 8005e3e:	e01d      	b.n	8005e7c <Cmd_pmu_get_all+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005e40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e44:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	f004 fec0 	bl	800abd0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005e50:	f107 020f 	add.w	r2, r7, #15
 8005e54:	f107 0110 	add.w	r1, r7, #16
 8005e58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f004 ff65 	bl	800ad2c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005e62:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005e66:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	f107 0310 	add.w	r3, r7, #16
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fc f958 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005e78:	f7fc f93e 	bl	80020f8 <set_send_flag>
    }
    return CMDLINE_PENDING;
 8005e7c:	2305      	movs	r3, #5
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40020000 	.word	0x40020000
 8005e8c:	40005000 	.word	0x40005000
 8005e90:	20004850 	.word	0x20004850
 8005e94:	40011000 	.word	0x40011000

08005e98 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8005eae:	e01f      	b.n	8005ef0 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d105      	bne.n	8005ec4 <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
 8005ec2:	e012      	b.n	8005eea <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00f      	beq.n	8005eea <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b07      	cmp	r3, #7
 8005ece:	d80a      	bhi.n	8005ee6 <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8005ed0:	4920      	ldr	r1, [pc, #128]	@ (8005f54 <CmdLineProcess+0xbc>)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	3301      	adds	r3, #1
 8005ede:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e001      	b.n	8005eea <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e030      	b.n	8005f4c <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	3301      	adds	r3, #1
 8005eee:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1db      	bne.n	8005eb0 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d025      	beq.n	8005f4a <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 8005efe:	4915      	ldr	r1, [pc, #84]	@ (8005f54 <CmdLineProcess+0xbc>)
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8005f0e:	4b12      	ldr	r3, [pc, #72]	@ (8005f58 <CmdLineProcess+0xc0>)
 8005f10:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8005f12:	e016      	b.n	8005f42 <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8005f14:	4b0f      	ldr	r3, [pc, #60]	@ (8005f54 <CmdLineProcess+0xbc>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f7fa f956 	bl	80001d0 <strcmp>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d108      	bne.n	8005f3c <CmdLineProcess+0xa4>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4908      	ldr	r1, [pc, #32]	@ (8005f54 <CmdLineProcess+0xbc>)
 8005f32:	4610      	mov	r0, r2
 8005f34:	4798      	blx	r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	e007      	b.n	8005f4c <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e4      	bne.n	8005f14 <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8005f4a:	2301      	movs	r3, #1
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20004854 	.word	0x20004854
 8005f58:	20000090 	.word	0x20000090

08005f5c <__NVIC_SystemReset>:
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005f60:	f3bf 8f4f 	dsb	sy
}
 8005f64:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005f66:	4b06      	ldr	r3, [pc, #24]	@ (8005f80 <__NVIC_SystemReset+0x24>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005f6e:	4904      	ldr	r1, [pc, #16]	@ (8005f80 <__NVIC_SystemReset+0x24>)
 8005f70:	4b04      	ldr	r3, [pc, #16]	@ (8005f84 <__NVIC_SystemReset+0x28>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f76:	f3bf 8f4f 	dsb	sy
}
 8005f7a:	bf00      	nop
    __NOP();
 8005f7c:	bf00      	nop
 8005f7e:	e7fd      	b.n	8005f7c <__NVIC_SystemReset+0x20>
 8005f80:	e000ed00 	.word	0xe000ed00
 8005f84:	05fa0004 	.word	0x05fa0004

08005f88 <LL_GPIO_IsOutputPinSet>:
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_GPIO_SetOutputPin>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	619a      	str	r2, [r3, #24]
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <LL_GPIO_ResetOutputPin>:
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	041a      	lsls	r2, r3, #16
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	619a      	str	r2, [r3, #24]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <command_init>:
		command_task_update                // taskFunction;
	}
};

void	command_init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8005ff2:	f7fb fd03 	bl	80019fc <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8005ff6:	22ff      	movs	r2, #255	@ 0xff
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	483b      	ldr	r0, [pc, #236]	@ (80060e8 <command_init+0xfc>)
 8005ffc:	f008 fc09 	bl	800e812 <memset>
	s_commandBufferIndex = 0;
 8006000:	4b3a      	ldr	r3, [pc, #232]	@ (80060ec <command_init+0x100>)
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
	Uart_sendstring(UART5,"\r\n");
 8006006:	493a      	ldr	r1, [pc, #232]	@ (80060f0 <command_init+0x104>)
 8006008:	483a      	ldr	r0, [pc, #232]	@ (80060f4 <command_init+0x108>)
 800600a:	f7fb ff5f 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"\r\n");
 800600e:	4938      	ldr	r1, [pc, #224]	@ (80060f0 <command_init+0x104>)
 8006010:	4838      	ldr	r0, [pc, #224]	@ (80060f4 <command_init+0x108>)
 8006012:	f7fb ff5b 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"> CPOC FIRMWARE V1.2.0 \r\n");
 8006016:	4938      	ldr	r1, [pc, #224]	@ (80060f8 <command_init+0x10c>)
 8006018:	4836      	ldr	r0, [pc, #216]	@ (80060f4 <command_init+0x108>)
 800601a:	f7fb ff57 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"\r\n");
 800601e:	4934      	ldr	r1, [pc, #208]	@ (80060f0 <command_init+0x104>)
 8006020:	4834      	ldr	r0, [pc, #208]	@ (80060f4 <command_init+0x108>)
 8006022:	f7fb ff53 	bl	8001ecc <Uart_sendstring>
	command_send_splash();
 8006026:	f000 fe95 	bl	8006d54 <command_send_splash>

    Uart_sendstring(USART6, "\r\n");
 800602a:	4931      	ldr	r1, [pc, #196]	@ (80060f0 <command_init+0x104>)
 800602c:	4833      	ldr	r0, [pc, #204]	@ (80060fc <command_init+0x110>)
 800602e:	f7fb ff4d 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "\r\n");
 8006032:	492f      	ldr	r1, [pc, #188]	@ (80060f0 <command_init+0x104>)
 8006034:	4831      	ldr	r0, [pc, #196]	@ (80060fc <command_init+0x110>)
 8006036:	f7fb ff49 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "> CPOC FIRMWARE V1.2.0 \r\n");
 800603a:	492f      	ldr	r1, [pc, #188]	@ (80060f8 <command_init+0x10c>)
 800603c:	482f      	ldr	r0, [pc, #188]	@ (80060fc <command_init+0x110>)
 800603e:	f7fb ff45 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "\r\n");
 8006042:	492b      	ldr	r1, [pc, #172]	@ (80060f0 <command_init+0x104>)
 8006044:	482d      	ldr	r0, [pc, #180]	@ (80060fc <command_init+0x110>)
 8006046:	f7fb ff41 	bl	8001ecc <Uart_sendstring>
    command_send_splash();
 800604a:	f000 fe83 	bl	8006d54 <command_send_splash>

	tCmdLineEntry *pEntry;


	Uart_sendstring(UART5, "\nStart with <help_xxxx> command\r\n");
 800604e:	492c      	ldr	r1, [pc, #176]	@ (8006100 <command_init+0x114>)
 8006050:	4828      	ldr	r0, [pc, #160]	@ (80060f4 <command_init+0x108>)
 8006052:	f7fb ff3b 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "-------------------------------------\r\n");
 8006056:	492b      	ldr	r1, [pc, #172]	@ (8006104 <command_init+0x118>)
 8006058:	4826      	ldr	r0, [pc, #152]	@ (80060f4 <command_init+0x108>)
 800605a:	f7fb ff37 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "\nStart with <help_xxxx> command\r\n");
 800605e:	4928      	ldr	r1, [pc, #160]	@ (8006100 <command_init+0x114>)
 8006060:	4826      	ldr	r0, [pc, #152]	@ (80060fc <command_init+0x110>)
 8006062:	f7fb ff33 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "-------------------------------------\r\n");
 8006066:	4927      	ldr	r1, [pc, #156]	@ (8006104 <command_init+0x118>)
 8006068:	4824      	ldr	r0, [pc, #144]	@ (80060fc <command_init+0x110>)
 800606a:	f7fb ff2f 	bl	8001ecc <Uart_sendstring>

	pEntry = &g_psCmdTable[0];
 800606e:	4b26      	ldr	r3, [pc, #152]	@ (8006108 <command_init+0x11c>)
 8006070:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 8006072:	e026      	b.n	80060c2 <command_init+0xd6>
		Uart_sendstring(UART5, pEntry->pcCmd);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	481e      	ldr	r0, [pc, #120]	@ (80060f4 <command_init+0x108>)
 800607c:	f7fb ff26 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	4619      	mov	r1, r3
 8006086:	481b      	ldr	r0, [pc, #108]	@ (80060f4 <command_init+0x108>)
 8006088:	f7fb ff20 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 800608c:	4918      	ldr	r1, [pc, #96]	@ (80060f0 <command_init+0x104>)
 800608e:	4819      	ldr	r0, [pc, #100]	@ (80060f4 <command_init+0x108>)
 8006090:	f7fb ff1c 	bl	8001ecc <Uart_sendstring>

        Uart_sendstring(USART6, pEntry->pcCmd);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4619      	mov	r1, r3
 800609a:	4818      	ldr	r0, [pc, #96]	@ (80060fc <command_init+0x110>)
 800609c:	f7fb ff16 	bl	8001ecc <Uart_sendstring>
        Uart_sendstring(USART6, pEntry->pcHelp);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4619      	mov	r1, r3
 80060a6:	4815      	ldr	r0, [pc, #84]	@ (80060fc <command_init+0x110>)
 80060a8:	f7fb ff10 	bl	8001ecc <Uart_sendstring>
        Uart_sendstring(USART6, "\r\n");
 80060ac:	4910      	ldr	r1, [pc, #64]	@ (80060f0 <command_init+0x104>)
 80060ae:	4813      	ldr	r0, [pc, #76]	@ (80060fc <command_init+0x110>)
 80060b0:	f7fb ff0c 	bl	8001ecc <Uart_sendstring>

	    if (pEntry == &g_psCmdTable[11]) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a15      	ldr	r2, [pc, #84]	@ (800610c <command_init+0x120>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <command_init+0xe0>
	        break;
	    }
	    pEntry++;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	330c      	adds	r3, #12
 80060c0:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1d4      	bne.n	8006074 <command_init+0x88>
 80060ca:	e000      	b.n	80060ce <command_init+0xe2>
	        break;
 80060cc:	bf00      	nop
	}

	Uart_sendstring(UART5, "\r\n> ");
 80060ce:	4910      	ldr	r1, [pc, #64]	@ (8006110 <command_init+0x124>)
 80060d0:	4808      	ldr	r0, [pc, #32]	@ (80060f4 <command_init+0x108>)
 80060d2:	f7fb fefb 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "\r\n> ");
 80060d6:	490e      	ldr	r1, [pc, #56]	@ (8006110 <command_init+0x124>)
 80060d8:	4808      	ldr	r0, [pc, #32]	@ (80060fc <command_init+0x110>)
 80060da:	f7fb fef7 	bl	8001ecc <Uart_sendstring>

}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20004878 	.word	0x20004878
 80060ec:	20004977 	.word	0x20004977
 80060f0:	080132ec 	.word	0x080132ec
 80060f4:	40005000 	.word	0x40005000
 80060f8:	080132f0 	.word	0x080132f0
 80060fc:	40011400 	.word	0x40011400
 8006100:	0801330c 	.word	0x0801330c
 8006104:	08013330 	.word	0x08013330
 8006108:	20000090 	.word	0x20000090
 800610c:	20000114 	.word	0x20000114
 8006110:	08013358 	.word	0x08013358

08006114 <command_task_update>:
volatile uint8_t rs422_report_enable = 0;
void process_command(USART_TypeDef* USARTx, char rxData);


static void command_task_update(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
    char rxData;


    while (IsDataAvailable(UART5) || IsDataAvailable(USART6))
 800611a:	e029      	b.n	8006170 <command_task_update+0x5c>
    {
        if (IsDataAvailable(UART5)) {
 800611c:	481d      	ldr	r0, [pc, #116]	@ (8006194 <command_task_update+0x80>)
 800611e:	f7fb fe8f 	bl	8001e40 <IsDataAvailable>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00e      	beq.n	8006146 <command_task_update+0x32>
            rxData = Uart_read(UART5);
 8006128:	481a      	ldr	r0, [pc, #104]	@ (8006194 <command_task_update+0x80>)
 800612a:	f7fb fd25 	bl	8001b78 <Uart_read>
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
            Uart_write(UART5, rxData);
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	4619      	mov	r1, r3
 8006136:	4817      	ldr	r0, [pc, #92]	@ (8006194 <command_task_update+0x80>)
 8006138:	f7fb fdbc 	bl	8001cb4 <Uart_write>
            process_command(UART5, rxData);
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	4619      	mov	r1, r3
 8006140:	4814      	ldr	r0, [pc, #80]	@ (8006194 <command_task_update+0x80>)
 8006142:	f000 f82b 	bl	800619c <process_command>
        }

        if (IsDataAvailable(USART6)) {
 8006146:	4814      	ldr	r0, [pc, #80]	@ (8006198 <command_task_update+0x84>)
 8006148:	f7fb fe7a 	bl	8001e40 <IsDataAvailable>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00e      	beq.n	8006170 <command_task_update+0x5c>
            rxData = Uart_read(USART6);
 8006152:	4811      	ldr	r0, [pc, #68]	@ (8006198 <command_task_update+0x84>)
 8006154:	f7fb fd10 	bl	8001b78 <Uart_read>
 8006158:	4603      	mov	r3, r0
 800615a:	71fb      	strb	r3, [r7, #7]
            Uart_write(USART6, rxData);
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	4619      	mov	r1, r3
 8006160:	480d      	ldr	r0, [pc, #52]	@ (8006198 <command_task_update+0x84>)
 8006162:	f7fb fda7 	bl	8001cb4 <Uart_write>
            process_command(USART6, rxData);
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	4619      	mov	r1, r3
 800616a:	480b      	ldr	r0, [pc, #44]	@ (8006198 <command_task_update+0x84>)
 800616c:	f000 f816 	bl	800619c <process_command>
    while (IsDataAvailable(UART5) || IsDataAvailable(USART6))
 8006170:	4808      	ldr	r0, [pc, #32]	@ (8006194 <command_task_update+0x80>)
 8006172:	f7fb fe65 	bl	8001e40 <IsDataAvailable>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1cf      	bne.n	800611c <command_task_update+0x8>
 800617c:	4806      	ldr	r0, [pc, #24]	@ (8006198 <command_task_update+0x84>)
 800617e:	f7fb fe5f 	bl	8001e40 <IsDataAvailable>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1c9      	bne.n	800611c <command_task_update+0x8>
        }
    }
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40005000 	.word	0x40005000
 8006198:	40011400 	.word	0x40011400

0800619c <process_command>:

void process_command(USART_TypeDef* USARTx, char rxData)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
    int8_t ret_val;
    if (rxData == 27)  // ASCII code for ESC key
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	2b1b      	cmp	r3, #27
 80061ac:	d106      	bne.n	80061bc <process_command+0x20>
    {
    	auto_report_enabled = 0;
 80061ae:	4b2e      	ldr	r3, [pc, #184]	@ (8006268 <process_command+0xcc>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
        rs422_report_enable = 0;
 80061b4:	4b2d      	ldr	r3, [pc, #180]	@ (800626c <process_command+0xd0>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
        return;
 80061ba:	e052      	b.n	8006262 <process_command+0xc6>
    }

    if ((rxData == '\r') || (rxData == '\n'))
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	2b0d      	cmp	r3, #13
 80061c0:	d002      	beq.n	80061c8 <process_command+0x2c>
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	2b0a      	cmp	r3, #10
 80061c6:	d12f      	bne.n	8006228 <process_command+0x8c>
    {
        if (s_commandBufferIndex > 0)
 80061c8:	4b29      	ldr	r3, [pc, #164]	@ (8006270 <process_command+0xd4>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d026      	beq.n	800621e <process_command+0x82>
        {
            s_commandBuffer[s_commandBufferIndex] = 0;
 80061d0:	4b27      	ldr	r3, [pc, #156]	@ (8006270 <process_command+0xd4>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	4b27      	ldr	r3, [pc, #156]	@ (8006274 <process_command+0xd8>)
 80061d8:	2100      	movs	r1, #0
 80061da:	5499      	strb	r1, [r3, r2]
            s_commandBufferIndex++;
 80061dc:	4b24      	ldr	r3, [pc, #144]	@ (8006270 <process_command+0xd4>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	3301      	adds	r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	4b22      	ldr	r3, [pc, #136]	@ (8006270 <process_command+0xd4>)
 80061e6:	701a      	strb	r2, [r3, #0]
            ret_val = CmdLineProcess(s_commandBuffer,USARTx);
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4822      	ldr	r0, [pc, #136]	@ (8006274 <process_command+0xd8>)
 80061ec:	f7ff fe54 	bl	8005e98 <CmdLineProcess>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]
            s_commandBufferIndex = 0;
 80061f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <process_command+0xd4>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
            Uart_sendstring(USARTx, "\r\n> ");
 80061fa:	491f      	ldr	r1, [pc, #124]	@ (8006278 <process_command+0xdc>)
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fb fe65 	bl	8001ecc <Uart_sendstring>
            Uart_sendstring(USARTx, ErrorCode[ret_val]);
 8006202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006206:	4a1d      	ldr	r2, [pc, #116]	@ (800627c <process_command+0xe0>)
 8006208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb fe5c 	bl	8001ecc <Uart_sendstring>
            Uart_sendstring(USARTx, "> ");
 8006214:	491a      	ldr	r1, [pc, #104]	@ (8006280 <process_command+0xe4>)
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fb fe58 	bl	8001ecc <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 800621c:	e021      	b.n	8006262 <process_command+0xc6>
        }
        else
        {
            Uart_sendstring(USARTx, "\r\n> ");
 800621e:	4916      	ldr	r1, [pc, #88]	@ (8006278 <process_command+0xdc>)
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fb fe53 	bl	8001ecc <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006226:	e01c      	b.n	8006262 <process_command+0xc6>
        }
    }
    else if ((rxData == 8) || (rxData == 127))
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	2b08      	cmp	r3, #8
 800622c:	d002      	beq.n	8006234 <process_command+0x98>
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	2b7f      	cmp	r3, #127	@ 0x7f
 8006232:	d10a      	bne.n	800624a <process_command+0xae>
    {
        if (s_commandBufferIndex > 0)
 8006234:	4b0e      	ldr	r3, [pc, #56]	@ (8006270 <process_command+0xd4>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d012      	beq.n	8006262 <process_command+0xc6>
        {
            s_commandBufferIndex--;
 800623c:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <process_command+0xd4>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	4b0a      	ldr	r3, [pc, #40]	@ (8006270 <process_command+0xd4>)
 8006246:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > 0)
 8006248:	e00b      	b.n	8006262 <process_command+0xc6>
        }
    }
    else
    {
        s_commandBuffer[s_commandBufferIndex] = rxData;
 800624a:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <process_command+0xd4>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	4619      	mov	r1, r3
 8006250:	4a08      	ldr	r2, [pc, #32]	@ (8006274 <process_command+0xd8>)
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	5453      	strb	r3, [r2, r1]
        s_commandBufferIndex++;
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <process_command+0xd4>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	3301      	adds	r3, #1
 800625c:	b2da      	uxtb	r2, r3
 800625e:	4b04      	ldr	r3, [pc, #16]	@ (8006270 <process_command+0xd4>)
 8006260:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > COMMAND_MAX_LENGTH)
        {
            s_commandBufferIndex = 0;
        }
    }
}
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20004978 	.word	0x20004978
 800626c:	20004979 	.word	0x20004979
 8006270:	20004977 	.word	0x20004977
 8006274:	20004878 	.word	0x20004878
 8006278:	08013358 	.word	0x08013358
 800627c:	20000078 	.word	0x20000078
 8006280:	08013360 	.word	0x08013360

08006284 <Cmd_help>:

//USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];

int Cmd_help(int argc, char *argv[]) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
    tCmdLineEntry *pEntry;
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006294:	3b01      	subs	r3, #1
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	4413      	add	r3, r2
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60bb      	str	r3, [r7, #8]

    Uart_sendstring(USARTx, "\nSimple commands\r\n");
 80062a0:	4916      	ldr	r1, [pc, #88]	@ (80062fc <Cmd_help+0x78>)
 80062a2:	68b8      	ldr	r0, [r7, #8]
 80062a4:	f7fb fe12 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USARTx, "------------------\r\n");
 80062a8:	4915      	ldr	r1, [pc, #84]	@ (8006300 <Cmd_help+0x7c>)
 80062aa:	68b8      	ldr	r0, [r7, #8]
 80062ac:	f7fb fe0e 	bl	8001ecc <Uart_sendstring>
    pEntry = &g_psCmdTable[0];
 80062b0:	4b14      	ldr	r3, [pc, #80]	@ (8006304 <Cmd_help+0x80>)
 80062b2:	60fb      	str	r3, [r7, #12]

    while (pEntry->pcCmd) {
 80062b4:	e016      	b.n	80062e4 <Cmd_help+0x60>
        Uart_sendstring(USARTx, pEntry->pcCmd);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	68b8      	ldr	r0, [r7, #8]
 80062be:	f7fb fe05 	bl	8001ecc <Uart_sendstring>
        Uart_sendstring(USARTx, pEntry->pcHelp);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	4619      	mov	r1, r3
 80062c8:	68b8      	ldr	r0, [r7, #8]
 80062ca:	f7fb fdff 	bl	8001ecc <Uart_sendstring>
        Uart_sendstring(USARTx, "\r\n");
 80062ce:	490e      	ldr	r1, [pc, #56]	@ (8006308 <Cmd_help+0x84>)
 80062d0:	68b8      	ldr	r0, [r7, #8]
 80062d2:	f7fb fdfb 	bl	8001ecc <Uart_sendstring>
        if (pEntry == &g_psCmdTable[11]) {
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4a0c      	ldr	r2, [pc, #48]	@ (800630c <Cmd_help+0x88>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d007      	beq.n	80062ee <Cmd_help+0x6a>
            break;
        }
        pEntry++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	330c      	adds	r3, #12
 80062e2:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd) {
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e4      	bne.n	80062b6 <Cmd_help+0x32>
 80062ec:	e000      	b.n	80062f0 <Cmd_help+0x6c>
            break;
 80062ee:	bf00      	nop
    }

    return (CMDLINE_OK);
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	08013364 	.word	0x08013364
 8006300:	08013378 	.word	0x08013378
 8006304:	20000090 	.word	0x20000090
 8006308:	080132ec 	.word	0x080132ec
 800630c:	20000114 	.word	0x20000114

08006310 <Cmd_help_all>:

// 9table <-> 8 o day
int Cmd_help_all(int argc, char *argv[]) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006320:	3b01      	subs	r3, #1
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	4413      	add	r3, r2
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60bb      	str	r3, [r7, #8]
	Uart_sendstring(USARTx, "\nAvailable commands\r\n");
 800632c:	492b      	ldr	r1, [pc, #172]	@ (80063dc <Cmd_help_all+0xcc>)
 800632e:	68b8      	ldr	r0, [r7, #8]
 8006330:	f7fb fdcc 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USARTx, "------------------\r\n");
 8006334:	492a      	ldr	r1, [pc, #168]	@ (80063e0 <Cmd_help_all+0xd0>)
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f7fb fdc8 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 800633c:	4b29      	ldr	r3, [pc, #164]	@ (80063e4 <Cmd_help_all+0xd4>)
 800633e:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006340:	e03e      	b.n	80063c0 <Cmd_help_all+0xb0>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4619      	mov	r1, r3
 8006348:	68b8      	ldr	r0, [r7, #8]
 800634a:	f7fb fdbf 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4619      	mov	r1, r3
 8006354:	68b8      	ldr	r0, [r7, #8]
 8006356:	f7fb fdb9 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 800635a:	4923      	ldr	r1, [pc, #140]	@ (80063e8 <Cmd_help_all+0xd8>)
 800635c:	68b8      	ldr	r0, [r7, #8]
 800635e:	f7fb fdb5 	bl	8001ecc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[11]) {
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4a21      	ldr	r2, [pc, #132]	@ (80063ec <Cmd_help_all+0xdc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d104      	bne.n	8006374 <Cmd_help_all+0x64>
	        Uart_sendstring(USARTx, "\n--------------CPOC Command List-------------\r\n");
 800636a:	4921      	ldr	r1, [pc, #132]	@ (80063f0 <Cmd_help_all+0xe0>)
 800636c:	68b8      	ldr	r0, [r7, #8]
 800636e:	f7fb fdad 	bl	8001ecc <Uart_sendstring>
 8006372:	e022      	b.n	80063ba <Cmd_help_all+0xaa>
	    }

	    else if (pEntry == &g_psCmdTable[27]) {
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a1f      	ldr	r2, [pc, #124]	@ (80063f4 <Cmd_help_all+0xe4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d104      	bne.n	8006386 <Cmd_help_all+0x76>
	        Uart_sendstring(USARTx, "\n--------------PMU Command List-------------\r\n");
 800637c:	491e      	ldr	r1, [pc, #120]	@ (80063f8 <Cmd_help_all+0xe8>)
 800637e:	68b8      	ldr	r0, [r7, #8]
 8006380:	f7fb fda4 	bl	8001ecc <Uart_sendstring>
 8006384:	e019      	b.n	80063ba <Cmd_help_all+0xaa>
	    }

	    else if (pEntry == &g_psCmdTable[34]) {
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <Cmd_help_all+0xec>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d104      	bne.n	8006398 <Cmd_help_all+0x88>
	        Uart_sendstring(USARTx, "\n--------------PDU Command List-------------\r\n");
 800638e:	491c      	ldr	r1, [pc, #112]	@ (8006400 <Cmd_help_all+0xf0>)
 8006390:	68b8      	ldr	r0, [r7, #8]
 8006392:	f7fb fd9b 	bl	8001ecc <Uart_sendstring>
 8006396:	e010      	b.n	80063ba <Cmd_help_all+0xaa>
	    }

	    else if (pEntry == &g_psCmdTable[40]) {
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a1a      	ldr	r2, [pc, #104]	@ (8006404 <Cmd_help_all+0xf4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d104      	bne.n	80063aa <Cmd_help_all+0x9a>
	        Uart_sendstring(USARTx, "\n--------------CAM Command List-------------\r\n");
 80063a0:	4919      	ldr	r1, [pc, #100]	@ (8006408 <Cmd_help_all+0xf8>)
 80063a2:	68b8      	ldr	r0, [r7, #8]
 80063a4:	f7fb fd92 	bl	8001ecc <Uart_sendstring>
 80063a8:	e007      	b.n	80063ba <Cmd_help_all+0xaa>
	    }

	    else if (pEntry == &g_psCmdTable[41]) {
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a17      	ldr	r2, [pc, #92]	@ (800640c <Cmd_help_all+0xfc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d103      	bne.n	80063ba <Cmd_help_all+0xaa>
	        Uart_sendstring(USARTx, "\n--------------IOU Command List-------------\r\n");
 80063b2:	4917      	ldr	r1, [pc, #92]	@ (8006410 <Cmd_help_all+0x100>)
 80063b4:	68b8      	ldr	r0, [r7, #8]
 80063b6:	f7fb fd89 	bl	8001ecc <Uart_sendstring>
	    }


		// Advance to the next entry in the table.
		pEntry++;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	330c      	adds	r3, #12
 80063be:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1bc      	bne.n	8006342 <Cmd_help_all+0x32>

	}
	Uart_sendstring(USARTx, "--------------    END    -------------\r\n");
 80063c8:	4912      	ldr	r1, [pc, #72]	@ (8006414 <Cmd_help_all+0x104>)
 80063ca:	68b8      	ldr	r0, [r7, #8]
 80063cc:	f7fb fd7e 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	08013390 	.word	0x08013390
 80063e0:	08013378 	.word	0x08013378
 80063e4:	20000090 	.word	0x20000090
 80063e8:	080132ec 	.word	0x080132ec
 80063ec:	20000114 	.word	0x20000114
 80063f0:	080133a8 	.word	0x080133a8
 80063f4:	200001d4 	.word	0x200001d4
 80063f8:	080133d8 	.word	0x080133d8
 80063fc:	20000228 	.word	0x20000228
 8006400:	08013408 	.word	0x08013408
 8006404:	20000270 	.word	0x20000270
 8006408:	08013438 	.word	0x08013438
 800640c:	2000027c 	.word	0x2000027c
 8006410:	08013468 	.word	0x08013468
 8006414:	08013498 	.word	0x08013498

08006418 <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006428:	3b01      	subs	r3, #1
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	4413      	add	r3, r2
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CPOC Command List-------------\r\n");
 8006434:	4914      	ldr	r1, [pc, #80]	@ (8006488 <Cmd_help_cpoc+0x70>)
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f7fb fd48 	bl	8001ecc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[12];
 800643c:	4b13      	ldr	r3, [pc, #76]	@ (800648c <Cmd_help_cpoc+0x74>)
 800643e:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006440:	e016      	b.n	8006470 <Cmd_help_cpoc+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4619      	mov	r1, r3
 8006448:	68b8      	ldr	r0, [r7, #8]
 800644a:	f7fb fd3f 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	4619      	mov	r1, r3
 8006454:	68b8      	ldr	r0, [r7, #8]
 8006456:	f7fb fd39 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 800645a:	490d      	ldr	r1, [pc, #52]	@ (8006490 <Cmd_help_cpoc+0x78>)
 800645c:	68b8      	ldr	r0, [r7, #8]
 800645e:	f7fb fd35 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[27]) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4a0b      	ldr	r2, [pc, #44]	@ (8006494 <Cmd_help_cpoc+0x7c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d007      	beq.n	800647a <Cmd_help_cpoc+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	330c      	adds	r3, #12
 800646e:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e4      	bne.n	8006442 <Cmd_help_cpoc+0x2a>
 8006478:	e000      	b.n	800647c <Cmd_help_cpoc+0x64>
	        break;
 800647a:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 800647c:	2300      	movs	r3, #0

}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	080134c4 	.word	0x080134c4
 800648c:	20000120 	.word	0x20000120
 8006490:	080132ec 	.word	0x080132ec
 8006494:	200001d4 	.word	0x200001d4

08006498 <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064a8:	3b01      	subs	r3, #1
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	4413      	add	r3, r2
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PMU Command List-------------\r\n");
 80064b4:	4914      	ldr	r1, [pc, #80]	@ (8006508 <Cmd_help_pmu+0x70>)
 80064b6:	68b8      	ldr	r0, [r7, #8]
 80064b8:	f7fb fd08 	bl	8001ecc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[28];
 80064bc:	4b13      	ldr	r3, [pc, #76]	@ (800650c <Cmd_help_pmu+0x74>)
 80064be:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80064c0:	e016      	b.n	80064f0 <Cmd_help_pmu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4619      	mov	r1, r3
 80064c8:	68b8      	ldr	r0, [r7, #8]
 80064ca:	f7fb fcff 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	4619      	mov	r1, r3
 80064d4:	68b8      	ldr	r0, [r7, #8]
 80064d6:	f7fb fcf9 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 80064da:	490d      	ldr	r1, [pc, #52]	@ (8006510 <Cmd_help_pmu+0x78>)
 80064dc:	68b8      	ldr	r0, [r7, #8]
 80064de:	f7fb fcf5 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006514 <Cmd_help_pmu+0x7c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <Cmd_help_pmu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	330c      	adds	r3, #12
 80064ee:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e4      	bne.n	80064c2 <Cmd_help_pmu+0x2a>
 80064f8:	e000      	b.n	80064fc <Cmd_help_pmu+0x64>
	        break;
 80064fa:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	080134f4 	.word	0x080134f4
 800650c:	200001e0 	.word	0x200001e0
 8006510:	080132ec 	.word	0x080132ec
 8006514:	20000228 	.word	0x20000228

08006518 <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006528:	3b01      	subs	r3, #1
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	4413      	add	r3, r2
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PDU Command List-------------\r\n");
 8006534:	4914      	ldr	r1, [pc, #80]	@ (8006588 <Cmd_help_pdu+0x70>)
 8006536:	68b8      	ldr	r0, [r7, #8]
 8006538:	f7fb fcc8 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 800653c:	4b13      	ldr	r3, [pc, #76]	@ (800658c <Cmd_help_pdu+0x74>)
 800653e:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006540:	e016      	b.n	8006570 <Cmd_help_pdu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4619      	mov	r1, r3
 8006548:	68b8      	ldr	r0, [r7, #8]
 800654a:	f7fb fcbf 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	4619      	mov	r1, r3
 8006554:	68b8      	ldr	r0, [r7, #8]
 8006556:	f7fb fcb9 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 800655a:	490d      	ldr	r1, [pc, #52]	@ (8006590 <Cmd_help_pdu+0x78>)
 800655c:	68b8      	ldr	r0, [r7, #8]
 800655e:	f7fb fcb5 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[40]) {
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a0b      	ldr	r2, [pc, #44]	@ (8006594 <Cmd_help_pdu+0x7c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <Cmd_help_pdu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	330c      	adds	r3, #12
 800656e:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e4      	bne.n	8006542 <Cmd_help_pdu+0x2a>
 8006578:	e000      	b.n	800657c <Cmd_help_pdu+0x64>
	        break;
 800657a:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	08013524 	.word	0x08013524
 800658c:	20000234 	.word	0x20000234
 8006590:	080132ec 	.word	0x080132ec
 8006594:	20000270 	.word	0x20000270

08006598 <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065a8:	3b01      	subs	r3, #1
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	4413      	add	r3, r2
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CAM Command List-------------\r\n");
 80065b4:	4914      	ldr	r1, [pc, #80]	@ (8006608 <Cmd_help_cam+0x70>)
 80065b6:	68b8      	ldr	r0, [r7, #8]
 80065b8:	f7fb fc88 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[41];
 80065bc:	4b13      	ldr	r3, [pc, #76]	@ (800660c <Cmd_help_cam+0x74>)
 80065be:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80065c0:	e016      	b.n	80065f0 <Cmd_help_cam+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4619      	mov	r1, r3
 80065c8:	68b8      	ldr	r0, [r7, #8]
 80065ca:	f7fb fc7f 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	4619      	mov	r1, r3
 80065d4:	68b8      	ldr	r0, [r7, #8]
 80065d6:	f7fb fc79 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 80065da:	490d      	ldr	r1, [pc, #52]	@ (8006610 <Cmd_help_cam+0x78>)
 80065dc:	68b8      	ldr	r0, [r7, #8]
 80065de:	f7fb fc75 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[41]) {
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a09      	ldr	r2, [pc, #36]	@ (800660c <Cmd_help_cam+0x74>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <Cmd_help_cam+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	330c      	adds	r3, #12
 80065ee:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e4      	bne.n	80065c2 <Cmd_help_cam+0x2a>
 80065f8:	e000      	b.n	80065fc <Cmd_help_cam+0x64>
	        break;
 80065fa:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	08013554 	.word	0x08013554
 800660c:	2000027c 	.word	0x2000027c
 8006610:	080132ec 	.word	0x080132ec

08006614 <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006624:	3b01      	subs	r3, #1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	4413      	add	r3, r2
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------IOU Command List-------------\r\n");
 8006630:	4914      	ldr	r1, [pc, #80]	@ (8006684 <Cmd_help_iou+0x70>)
 8006632:	68b8      	ldr	r0, [r7, #8]
 8006634:	f7fb fc4a 	bl	8001ecc <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[42];
 8006638:	4b13      	ldr	r3, [pc, #76]	@ (8006688 <Cmd_help_iou+0x74>)
 800663a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 800663c:	e016      	b.n	800666c <Cmd_help_iou+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4619      	mov	r1, r3
 8006644:	68b8      	ldr	r0, [r7, #8]
 8006646:	f7fb fc41 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	4619      	mov	r1, r3
 8006650:	68b8      	ldr	r0, [r7, #8]
 8006652:	f7fb fc3b 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006656:	490d      	ldr	r1, [pc, #52]	@ (800668c <Cmd_help_iou+0x78>)
 8006658:	68b8      	ldr	r0, [r7, #8]
 800665a:	f7fb fc37 	bl	8001ecc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a0b      	ldr	r2, [pc, #44]	@ (8006690 <Cmd_help_iou+0x7c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <Cmd_help_iou+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	330c      	adds	r3, #12
 800666a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e4      	bne.n	800663e <Cmd_help_iou+0x2a>
 8006674:	e000      	b.n	8006678 <Cmd_help_iou+0x64>
	        break;
 8006676:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	08013584 	.word	0x08013584
 8006688:	20000288 	.word	0x20000288
 800668c:	080132ec 	.word	0x080132ec
 8006690:	200001a4 	.word	0x200001a4

08006694 <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066a4:	3b01      	subs	r3, #1
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	4413      	add	r3, r2
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]
	Uart_sendstring(USARTx, "\nThis function is not defined yet \r\n");
 80066b0:	4904      	ldr	r1, [pc, #16]	@ (80066c4 <NotYetDefine+0x30>)
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7fb fc0a 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	080135b4 	.word	0x080135b4

080066c8 <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
	command_send_splash();
 80066d2:	f000 fb3f 	bl	8006d54 <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 80066e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e2:	b0a5      	sub	sp, #148	@ 0x94
 80066e4:	af04      	add	r7, sp, #16
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066f0:	3b01      	subs	r3, #1
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	4413      	add	r3, r2
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 80066fc:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8006700:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 8006704:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 8006708:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 800670c:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 8006710:	9302      	str	r3, [sp, #8]
 8006712:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	4623      	mov	r3, r4
 8006720:	f7fa fea0 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 8006724:	f7fa ff46 	bl	80015b4 <DS3231_GetTemperature>
 8006728:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78

    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 800672c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006730:	461d      	mov	r5, r3
 8006732:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006736:	461e      	mov	r6, r3
 8006738:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800673c:	461a      	mov	r2, r3
 800673e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006742:	4619      	mov	r1, r3
 8006744:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8006748:	461c      	mov	r4, r3
 800674a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800674e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8006752:	f107 000c 	add.w	r0, r7, #12
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	9402      	str	r4, [sp, #8]
 800675a:	9101      	str	r1, [sp, #4]
 800675c:	9200      	str	r2, [sp, #0]
 800675e:	4633      	mov	r3, r6
 8006760:	462a      	mov	r2, r5
 8006762:	4931      	ldr	r1, [pc, #196]	@ (8006828 <Cmd_status_now+0x148>)
 8006764:	f007 fff2 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006768:	f107 030c 	add.w	r3, r7, #12
 800676c:	4619      	mov	r1, r3
 800676e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006770:	f7fb fbac 	bl	8001ecc <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f *C\r\n", temp);
 8006774:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8006776:	f7f9 fef7 	bl	8000568 <__aeabi_f2d>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	f107 000c 	add.w	r0, r7, #12
 8006782:	492a      	ldr	r1, [pc, #168]	@ (800682c <Cmd_status_now+0x14c>)
 8006784:	f007 ffe2 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006788:	f107 030c 	add.w	r3, r7, #12
 800678c:	4619      	mov	r1, r3
 800678e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006790:	f7fb fb9c 	bl	8001ecc <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 8006794:	f107 030c 	add.w	r3, r7, #12
 8006798:	4925      	ldr	r1, [pc, #148]	@ (8006830 <Cmd_status_now+0x150>)
 800679a:	4618      	mov	r0, r3
 800679c:	f007 ffd6 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80067a0:	f107 030c 	add.w	r3, r7, #12
 80067a4:	4619      	mov	r1, r3
 80067a6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80067a8:	f7fb fb90 	bl	8001ecc <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.2.0\r\n");
 80067ac:	f107 030c 	add.w	r3, r7, #12
 80067b0:	4920      	ldr	r1, [pc, #128]	@ (8006834 <Cmd_status_now+0x154>)
 80067b2:	4618      	mov	r0, r3
 80067b4:	f007 ffca 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80067b8:	f107 030c 	add.w	r3, r7, #12
 80067bc:	4619      	mov	r1, r3
 80067be:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80067c0:	f7fb fb84 	bl	8001ecc <Uart_sendstring>

    if (LL_GPIO_IsOutputPinSet(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin)) {
 80067c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80067c8:	481b      	ldr	r0, [pc, #108]	@ (8006838 <Cmd_status_now+0x158>)
 80067ca:	f7ff fbdd 	bl	8005f88 <LL_GPIO_IsOutputPinSet>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00c      	beq.n	80067ee <Cmd_status_now+0x10e>
        sprintf(buffer, "Enable: RF[OFF]\r\n");
 80067d4:	f107 030c 	add.w	r3, r7, #12
 80067d8:	4918      	ldr	r1, [pc, #96]	@ (800683c <Cmd_status_now+0x15c>)
 80067da:	4618      	mov	r0, r3
 80067dc:	f007 ffb6 	bl	800e74c <siprintf>
        Uart_sendstring(USARTx, buffer);
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	4619      	mov	r1, r3
 80067e6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80067e8:	f7fb fb70 	bl	8001ecc <Uart_sendstring>
 80067ec:	e00b      	b.n	8006806 <Cmd_status_now+0x126>
    } else {
        sprintf(buffer, "Enable: RF[ON]\r\n");
 80067ee:	f107 030c 	add.w	r3, r7, #12
 80067f2:	4913      	ldr	r1, [pc, #76]	@ (8006840 <Cmd_status_now+0x160>)
 80067f4:	4618      	mov	r0, r3
 80067f6:	f007 ffa9 	bl	800e74c <siprintf>
        Uart_sendstring(USARTx, buffer);
 80067fa:	f107 030c 	add.w	r3, r7, #12
 80067fe:	4619      	mov	r1, r3
 8006800:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006802:	f7fb fb63 	bl	8001ecc <Uart_sendstring>
    }

    sprintf(buffer, "MuxMode: Auto\r\n");
 8006806:	f107 030c 	add.w	r3, r7, #12
 800680a:	490e      	ldr	r1, [pc, #56]	@ (8006844 <Cmd_status_now+0x164>)
 800680c:	4618      	mov	r0, r3
 800680e:	f007 ff9d 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006812:	f107 030c 	add.w	r3, r7, #12
 8006816:	4619      	mov	r1, r3
 8006818:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800681a:	f7fb fb57 	bl	8001ecc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3784      	adds	r7, #132	@ 0x84
 8006824:	46bd      	mov	sp, r7
 8006826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006828:	080135dc 	.word	0x080135dc
 800682c:	08013600 	.word	0x08013600
 8006830:	08013618 	.word	0x08013618
 8006834:	0801363c 	.word	0x0801363c
 8006838:	40020400 	.word	0x40020400
 800683c:	08013660 	.word	0x08013660
 8006840:	08013674 	.word	0x08013674
 8006844:	08013688 	.word	0x08013688

08006848 <Cmd_set_byte_rs422>:
//uint32_t RS422_PERIOD = 3000;

uint16_t ARRAY_SIZE = 282;

int Cmd_set_byte_rs422(int argc, char *argv[])
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b090      	sub	sp, #64	@ 0x40
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b02      	cmp	r3, #2
 8006856:	dc01      	bgt.n	800685c <Cmd_set_byte_rs422+0x14>
 8006858:	2303      	movs	r3, #3
 800685a:	e03c      	b.n	80068d6 <Cmd_set_byte_rs422+0x8e>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b03      	cmp	r3, #3
 8006860:	dd01      	ble.n	8006866 <Cmd_set_byte_rs422+0x1e>
 8006862:	2302      	movs	r3, #2
 8006864:	e037      	b.n	80068d6 <Cmd_set_byte_rs422+0x8e>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800686c:	3b01      	subs	r3, #1
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	4413      	add	r3, r2
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint16_t size = atoi(argv[1]);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	3304      	adds	r3, #4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f006 ffac 	bl	800d7dc <atoi>
 8006884:	4603      	mov	r3, r0
 8006886:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (size <= 0) {
 8006888:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800688a:	2b00      	cmp	r3, #0
 800688c:	d105      	bne.n	800689a <Cmd_set_byte_rs422+0x52>
        Uart_sendstring(USARTx,"\nPositive integer!!!\n");
 800688e:	4914      	ldr	r1, [pc, #80]	@ (80068e0 <Cmd_set_byte_rs422+0x98>)
 8006890:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006892:	f7fb fb1b 	bl	8001ecc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8006896:	2304      	movs	r3, #4
 8006898:	e01d      	b.n	80068d6 <Cmd_set_byte_rs422+0x8e>
    }

    if ( size > 1000 || size < 150) {
 800689a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800689c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068a0:	d802      	bhi.n	80068a8 <Cmd_set_byte_rs422+0x60>
 80068a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80068a4:	2b95      	cmp	r3, #149	@ 0x95
 80068a6:	d805      	bhi.n	80068b4 <Cmd_set_byte_rs422+0x6c>
        Uart_sendstring(USARTx,"Array size > 150or < 1000.\n");
 80068a8:	490e      	ldr	r1, [pc, #56]	@ (80068e4 <Cmd_set_byte_rs422+0x9c>)
 80068aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80068ac:	f7fb fb0e 	bl	8001ecc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 80068b0:	2304      	movs	r3, #4
 80068b2:	e010      	b.n	80068d6 <Cmd_set_byte_rs422+0x8e>
    }

    ARRAY_SIZE = size;
 80068b4:	4a0c      	ldr	r2, [pc, #48]	@ (80068e8 <Cmd_set_byte_rs422+0xa0>)
 80068b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80068b8:	8013      	strh	r3, [r2, #0]

    char msg[50];
    sprintf(msg, "\nArray size set to %d bytes.\n", size);
 80068ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80068bc:	f107 0308 	add.w	r3, r7, #8
 80068c0:	490a      	ldr	r1, [pc, #40]	@ (80068ec <Cmd_set_byte_rs422+0xa4>)
 80068c2:	4618      	mov	r0, r3
 80068c4:	f007 ff42 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, msg);
 80068c8:	f107 0308 	add.w	r3, r7, #8
 80068cc:	4619      	mov	r1, r3
 80068ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80068d0:	f7fb fafc 	bl	8001ecc <Uart_sendstring>
    return CMDLINE_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3740      	adds	r7, #64	@ 0x40
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	08013698 	.word	0x08013698
 80068e4:	080136b0 	.word	0x080136b0
 80068e8:	200003a0 	.word	0x200003a0
 80068ec:	080136cc 	.word	0x080136cc

080068f0 <Cmd_auto_report_ena>:



int Cmd_auto_report_ena(int argc, char *argv[])
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b092      	sub	sp, #72	@ 0x48
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	dc01      	bgt.n	8006904 <Cmd_auto_report_ena+0x14>
 8006900:	2303      	movs	r3, #3
 8006902:	e037      	b.n	8006974 <Cmd_auto_report_ena+0x84>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b03      	cmp	r3, #3
 8006908:	dd01      	ble.n	800690e <Cmd_auto_report_ena+0x1e>
 800690a:	2302      	movs	r3, #2
 800690c:	e032      	b.n	8006974 <Cmd_auto_report_ena+0x84>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006914:	3b01      	subs	r3, #1
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	4413      	add	r3, r2
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	647b      	str	r3, [r7, #68]	@ 0x44
    int sec = atoi(argv[1]);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	3304      	adds	r3, #4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f006 ff58 	bl	800d7dc <atoi>
 800692c:	6438      	str	r0, [r7, #64]	@ 0x40
    if (sec <= 0) {
 800692e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	dc05      	bgt.n	8006940 <Cmd_auto_report_ena+0x50>
        Uart_sendstring(USARTx,"\nPlease provide a positive integer.\n");
 8006934:	4911      	ldr	r1, [pc, #68]	@ (800697c <Cmd_auto_report_ena+0x8c>)
 8006936:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006938:	f7fb fac8 	bl	8001ecc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 800693c:	2304      	movs	r3, #4
 800693e:	e019      	b.n	8006974 <Cmd_auto_report_ena+0x84>
    }

    if (sec > 20)
 8006940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006942:	2b14      	cmp	r3, #20
 8006944:	dd05      	ble.n	8006952 <Cmd_auto_report_ena+0x62>
    	{
    	Uart_sendstring(USARTx,"Arg < 20\n");
 8006946:	490e      	ldr	r1, [pc, #56]	@ (8006980 <Cmd_auto_report_ena+0x90>)
 8006948:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800694a:	f7fb fabf 	bl	8001ecc <Uart_sendstring>
    	return CMDLINE_INVALID_ARG;
 800694e:	2304      	movs	r3, #4
 8006950:	e010      	b.n	8006974 <Cmd_auto_report_ena+0x84>
    	}

    auto_report_enabled = 1;
 8006952:	4b0c      	ldr	r3, [pc, #48]	@ (8006984 <Cmd_auto_report_ena+0x94>)
 8006954:	2201      	movs	r2, #1
 8006956:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds

    char msg[50];
    sprintf(msg, "\nAuto report %d seconds, [ESC] to Stop\n", sec);
 8006958:	f107 030c 	add.w	r3, r7, #12
 800695c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800695e:	490a      	ldr	r1, [pc, #40]	@ (8006988 <Cmd_auto_report_ena+0x98>)
 8006960:	4618      	mov	r0, r3
 8006962:	f007 fef3 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, msg);
 8006966:	f107 030c 	add.w	r3, r7, #12
 800696a:	4619      	mov	r1, r3
 800696c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800696e:	f7fb faad 	bl	8001ecc <Uart_sendstring>
    return CMDLINE_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3748      	adds	r7, #72	@ 0x48
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	080136ec 	.word	0x080136ec
 8006980:	08013714 	.word	0x08013714
 8006984:	20004978 	.word	0x20004978
 8006988:	08013720 	.word	0x08013720

0800698c <Cmd_rs422_report_ena>:



int Cmd_rs422_report_ena(int argc, char *argv[])
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b090      	sub	sp, #64	@ 0x40
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b01      	cmp	r3, #1
 800699a:	dc01      	bgt.n	80069a0 <Cmd_rs422_report_ena+0x14>
 800699c:	2303      	movs	r3, #3
 800699e:	e01d      	b.n	80069dc <Cmd_rs422_report_ena+0x50>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	dd01      	ble.n	80069aa <Cmd_rs422_report_ena+0x1e>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e018      	b.n	80069dc <Cmd_rs422_report_ena+0x50>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069b0:	3b01      	subs	r3, #1
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	4413      	add	r3, r2
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rs422_report_enable = 1;
 80069bc:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <Cmd_rs422_report_ena+0x58>)
 80069be:	2201      	movs	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds

    char msg[50];
    sprintf(msg, "\nAuto report RS422, [ESC] to Stop\n");
 80069c2:	f107 0308 	add.w	r3, r7, #8
 80069c6:	4908      	ldr	r1, [pc, #32]	@ (80069e8 <Cmd_rs422_report_ena+0x5c>)
 80069c8:	4618      	mov	r0, r3
 80069ca:	f007 febf 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, msg);
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	4619      	mov	r1, r3
 80069d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80069d6:	f7fb fa79 	bl	8001ecc <Uart_sendstring>
    return CMDLINE_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3740      	adds	r7, #64	@ 0x40
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20004979 	.word	0x20004979
 80069e8:	08013748 	.word	0x08013748

080069ec <Cmd_memory_usage>:


int Cmd_memory_usage(int argc, char *argv[]) {
 80069ec:	b5b0      	push	{r4, r5, r7, lr}
 80069ee:	b0a6      	sub	sp, #152	@ 0x98
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	4674      	mov	r4, lr
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069fe:	3b01      	subs	r3, #1
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	4413      	add	r3, r2
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    // STM32F405RGT7 có 192KB SRAM [[5]]
    uint32_t totalRAM = 192 * 1024;
 8006a0c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8006a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8006a14:	f3ef 8308 	mrs	r3, MSP
 8006a18:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 8006a1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    uint32_t usedRAM = SRAM1_BASE + totalRAM - __get_MSP();
 8006a1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float ramUsage = (float)usedRAM / totalRAM * 100;
 8006a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a46:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8006ac4 <Cmd_memory_usage+0xd8>
 8006a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a4e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

    // STM32F405RGT7 có 1MB Flash [[1]] [[4]]
    uint32_t totalFlash = 1 * 1024 * 1024;
 8006a52:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006a56:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t usedFlash = (uint32_t)__builtin_return_address(0) - FLASH_BASE;
 8006a58:	4623      	mov	r3, r4
 8006a5a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8006a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    float flashUsage = (float)usedFlash / totalFlash * 100;
 8006a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a78:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006ac4 <Cmd_memory_usage+0xd8>
 8006a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a80:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74


    char buffer[100];
    sprintf(buffer, "\nRAM: %.2f%% used\r\nFlash: %.2f%% used\r\n", ramUsage, flashUsage);
 8006a84:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006a88:	f7f9 fd6e 	bl	8000568 <__aeabi_f2d>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	460d      	mov	r5, r1
 8006a90:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006a92:	f7f9 fd69 	bl	8000568 <__aeabi_f2d>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	f107 000c 	add.w	r0, r7, #12
 8006a9e:	e9cd 2300 	strd	r2, r3, [sp]
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	4908      	ldr	r1, [pc, #32]	@ (8006ac8 <Cmd_memory_usage+0xdc>)
 8006aa8:	f007 fe50 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006aac:	f107 030c 	add.w	r3, r7, #12
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8006ab6:	f7fb fa09 	bl	8001ecc <Uart_sendstring>

    return CMDLINE_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3790      	adds	r7, #144	@ 0x90
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac4:	42c80000 	.word	0x42c80000
 8006ac8:	0801376c 	.word	0x0801376c

08006acc <Cmd_time_get>:


int Cmd_time_get(int argc, char *argv[]){
 8006acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ace:	b0a3      	sub	sp, #140	@ 0x8c
 8006ad0:	af04      	add	r7, sp, #16
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006adc:	3b01      	subs	r3, #1
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	677b      	str	r3, [r7, #116]	@ 0x74
    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8006ae8:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8006aec:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 8006af0:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 8006af4:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 8006af8:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 8006afc:	9302      	str	r3, [sp, #8]
 8006afe:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	4623      	mov	r3, r4
 8006b0c:	f7fa fcaa 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8006b10:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006b14:	461d      	mov	r5, r3
 8006b16:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8006b1a:	461e      	mov	r6, r3
 8006b1c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006b20:	461a      	mov	r2, r3
 8006b22:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006b26:	4619      	mov	r1, r3
 8006b28:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8006b2c:	461c      	mov	r4, r3
 8006b2e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8006b32:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8006b36:	f107 0008 	add.w	r0, r7, #8
 8006b3a:	9303      	str	r3, [sp, #12]
 8006b3c:	9402      	str	r4, [sp, #8]
 8006b3e:	9101      	str	r1, [sp, #4]
 8006b40:	9200      	str	r2, [sp, #0]
 8006b42:	4633      	mov	r3, r6
 8006b44:	462a      	mov	r2, r5
 8006b46:	4907      	ldr	r1, [pc, #28]	@ (8006b64 <Cmd_time_get+0x98>)
 8006b48:	f007 fe00 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006b4c:	f107 0308 	add.w	r3, r7, #8
 8006b50:	4619      	mov	r1, r3
 8006b52:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006b54:	f7fb f9ba 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	377c      	adds	r7, #124	@ 0x7c
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b62:	bf00      	nop
 8006b64:	080135dc 	.word	0x080135dc

08006b68 <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 8006b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b6a:	b0a3      	sub	sp, #140	@ 0x8c
 8006b6c:	af04      	add	r7, sp, #16
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 7) return CMDLINE_TOO_FEW_ARGS;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b07      	cmp	r3, #7
 8006b76:	dc01      	bgt.n	8006b7c <Cmd_time_set+0x14>
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e091      	b.n	8006ca0 <Cmd_time_set+0x138>
    if ((argc-1) > 7) return CMDLINE_TOO_MANY_ARGS;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	dd01      	ble.n	8006b86 <Cmd_time_set+0x1e>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e08c      	b.n	8006ca0 <Cmd_time_set+0x138>
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	4413      	add	r3, r2
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	677b      	str	r3, [r7, #116]	@ 0x74
    uint8_t hour = atoi(argv[1]);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f006 fe1c 	bl	800d7dc <atoi>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t min = atoi(argv[2]);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f006 fe13 	bl	800d7dc <atoi>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    uint8_t sec = atoi(argv[3]);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f006 fe0a 	bl	800d7dc <atoi>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    uint8_t date = atoi(argv[4]);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	3310      	adds	r3, #16
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f006 fe01 	bl	800d7dc <atoi>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
    uint8_t month = atoi(argv[5]);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	3314      	adds	r3, #20
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f006 fdf8 	bl	800d7dc <atoi>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t year = atoi(argv[6]);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	3318      	adds	r3, #24
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f006 fdef 	bl	800d7dc <atoi>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 8006c04:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006c08:	2b17      	cmp	r3, #23
 8006c0a:	d813      	bhi.n	8006c34 <Cmd_time_set+0xcc>
 8006c0c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006c10:	2b3b      	cmp	r3, #59	@ 0x3b
 8006c12:	d80f      	bhi.n	8006c34 <Cmd_time_set+0xcc>
 8006c14:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8006c18:	2b3b      	cmp	r3, #59	@ 0x3b
 8006c1a:	d80b      	bhi.n	8006c34 <Cmd_time_set+0xcc>
 8006c1c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8006c20:	2b1f      	cmp	r3, #31
 8006c22:	d807      	bhi.n	8006c34 <Cmd_time_set+0xcc>
 8006c24:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006c28:	2b0c      	cmp	r3, #12
 8006c2a:	d803      	bhi.n	8006c34 <Cmd_time_set+0xcc>
 8006c2c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8006c30:	2b63      	cmp	r3, #99	@ 0x63
 8006c32:	d901      	bls.n	8006c38 <Cmd_time_set+0xd0>
        return CMDLINE_INVALID_ARG;
 8006c34:	2304      	movs	r3, #4
 8006c36:	e033      	b.n	8006ca0 <Cmd_time_set+0x138>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 8006c38:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 8006c3c:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8006c40:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 8006c44:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	4603      	mov	r3, r0
 8006c58:	2001      	movs	r0, #1
 8006c5a:	f7fa fb45 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "Time set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8006c5e:	f897 5073 	ldrb.w	r5, [r7, #115]	@ 0x73
 8006c62:	f897 6072 	ldrb.w	r6, [r7, #114]	@ 0x72
 8006c66:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8006c6a:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8006c6e:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8006c72:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 8006c76:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8006c7a:	f107 0408 	add.w	r4, r7, #8
 8006c7e:	9003      	str	r0, [sp, #12]
 8006c80:	9102      	str	r1, [sp, #8]
 8006c82:	9201      	str	r2, [sp, #4]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4633      	mov	r3, r6
 8006c88:	462a      	mov	r2, r5
 8006c8a:	4907      	ldr	r1, [pc, #28]	@ (8006ca8 <Cmd_time_set+0x140>)
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f007 fd5d 	bl	800e74c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	4619      	mov	r1, r3
 8006c98:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006c9a:	f7fb f917 	bl	8001ecc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	377c      	adds	r7, #124	@ 0x7c
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca8:	08013794 	.word	0x08013794

08006cac <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 8006cb6:	f7ff f951 	bl	8005f5c <__NVIC_SystemReset>
	...

08006cbc <Cmd_rf_ena>:
//	Cmd_pmu_board_alive();
//	Cmd_pmu_board_alive();
//
//}

int Cmd_rf_ena(int argc, char *argv[]){
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8006cd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006cdc:	4805      	ldr	r0, [pc, #20]	@ (8006cf4 <Cmd_rf_ena+0x38>)
 8006cde:	f7ff f976 	bl	8005fce <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(USARTx, "\nRF Set to Enable\r\n");
 8006ce2:	4905      	ldr	r1, [pc, #20]	@ (8006cf8 <Cmd_rf_ena+0x3c>)
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7fb f8f1 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40020400 	.word	0x40020400
 8006cf8:	080137c4 	.word	0x080137c4

08006cfc <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	4413      	add	r3, r2
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8006d18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006d1c:	4805      	ldr	r0, [pc, #20]	@ (8006d34 <Cmd_rf_dis+0x38>)
 8006d1e:	f7ff f948 	bl	8005fb2 <LL_GPIO_SetOutputPin>
	Uart_sendstring(USARTx, "\nRF Disable\r\n");
 8006d22:	4905      	ldr	r1, [pc, #20]	@ (8006d38 <Cmd_rf_dis+0x3c>)
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7fb f8d1 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40020400 	.word	0x40020400
 8006d38:	080137d8 	.word	0x080137d8

08006d3c <command_create_task>:




void	command_create_task(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8006d40:	4902      	ldr	r1, [pc, #8]	@ (8006d4c <command_create_task+0x10>)
 8006d42:	4803      	ldr	r0, [pc, #12]	@ (8006d50 <command_create_task+0x14>)
 8006d44:	f003 fdc0 	bl	800a8c8 <SCH_TASK_CreateTask>
}
 8006d48:	bf00      	nop
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20000394 	.word	0x20000394
 8006d50:	20000390 	.word	0x20000390

08006d54 <command_send_splash>:

void	command_send_splash(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
	Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8006d58:	4938      	ldr	r1, [pc, #224]	@ (8006e3c <command_send_splash+0xe8>)
 8006d5a:	4839      	ldr	r0, [pc, #228]	@ (8006e40 <command_send_splash+0xec>)
 8006d5c:	f7fb f8b6 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--        ____                                --\r\n");
 8006d60:	4938      	ldr	r1, [pc, #224]	@ (8006e44 <command_send_splash+0xf0>)
 8006d62:	4837      	ldr	r0, [pc, #220]	@ (8006e40 <command_send_splash+0xec>)
 8006d64:	f7fb f8b2 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       / ___| _ __   __ _  ___ ___          --\r\n");
 8006d68:	4937      	ldr	r1, [pc, #220]	@ (8006e48 <command_send_splash+0xf4>)
 8006d6a:	4835      	ldr	r0, [pc, #212]	@ (8006e40 <command_send_splash+0xec>)
 8006d6c:	f7fb f8ae 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       \\___ \\| '_ \\ / _` |/ __/ _ \\         --  \r\n");
 8006d70:	4936      	ldr	r1, [pc, #216]	@ (8006e4c <command_send_splash+0xf8>)
 8006d72:	4833      	ldr	r0, [pc, #204]	@ (8006e40 <command_send_splash+0xec>)
 8006d74:	f7fb f8aa 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--        ___) | |_) | (_| | (_|  __/         --\r\n");
 8006d78:	4935      	ldr	r1, [pc, #212]	@ (8006e50 <command_send_splash+0xfc>)
 8006d7a:	4831      	ldr	r0, [pc, #196]	@ (8006e40 <command_send_splash+0xec>)
 8006d7c:	f7fb f8a6 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       |____/| -__/ \\__,_|\\___\\___|         --  \r\n");
 8006d80:	4934      	ldr	r1, [pc, #208]	@ (8006e54 <command_send_splash+0x100>)
 8006d82:	482f      	ldr	r0, [pc, #188]	@ (8006e40 <command_send_splash+0xec>)
 8006d84:	f7fb f8a2 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--             |_|                            --\r\n");
 8006d88:	4933      	ldr	r1, [pc, #204]	@ (8006e58 <command_send_splash+0x104>)
 8006d8a:	482d      	ldr	r0, [pc, #180]	@ (8006e40 <command_send_splash+0xec>)
 8006d8c:	f7fb f89e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--     _     _ _     _____         _          --\r\n");
 8006d90:	4932      	ldr	r1, [pc, #200]	@ (8006e5c <command_send_splash+0x108>)
 8006d92:	482b      	ldr	r0, [pc, #172]	@ (8006e40 <command_send_splash+0xec>)
 8006d94:	f7fb f89a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |   (_|_)_ _|_   _|__  ___| |__       --\r\n");
 8006d98:	4931      	ldr	r1, [pc, #196]	@ (8006e60 <command_send_splash+0x10c>)
 8006d9a:	4829      	ldr	r0, [pc, #164]	@ (8006e40 <command_send_splash+0xec>)
 8006d9c:	f7fb f896 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      --\r\n");
 8006da0:	4930      	ldr	r1, [pc, #192]	@ (8006e64 <command_send_splash+0x110>)
 8006da2:	4827      	ldr	r0, [pc, #156]	@ (8006e40 <command_send_splash+0xec>)
 8006da4:	f7fb f892 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |___| | | | | | |  __/ (__| | | |     --\r\n");
 8006da8:	492f      	ldr	r1, [pc, #188]	@ (8006e68 <command_send_splash+0x114>)
 8006daa:	4825      	ldr	r0, [pc, #148]	@ (8006e40 <command_send_splash+0xec>)
 8006dac:	f7fb f88e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     --\r\n");
 8006db0:	492e      	ldr	r1, [pc, #184]	@ (8006e6c <command_send_splash+0x118>)
 8006db2:	4823      	ldr	r0, [pc, #140]	@ (8006e40 <command_send_splash+0xec>)
 8006db4:	f7fb f88a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8006db8:	4920      	ldr	r1, [pc, #128]	@ (8006e3c <command_send_splash+0xe8>)
 8006dba:	4821      	ldr	r0, [pc, #132]	@ (8006e40 <command_send_splash+0xec>)
 8006dbc:	f7fb f886 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--           ____ ____   ___   ____           --\r\n");
 8006dc0:	492b      	ldr	r1, [pc, #172]	@ (8006e70 <command_send_splash+0x11c>)
 8006dc2:	481f      	ldr	r0, [pc, #124]	@ (8006e40 <command_send_splash+0xec>)
 8006dc4:	f7fb f882 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          / ___|  _ \\ / _ \\ / ___|          --\r\n");
 8006dc8:	492a      	ldr	r1, [pc, #168]	@ (8006e74 <command_send_splash+0x120>)
 8006dca:	481d      	ldr	r0, [pc, #116]	@ (8006e40 <command_send_splash+0xec>)
 8006dcc:	f7fb f87e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--         | |   | |_) | | | | |              --\r\n");
 8006dd0:	4929      	ldr	r1, [pc, #164]	@ (8006e78 <command_send_splash+0x124>)
 8006dd2:	481b      	ldr	r0, [pc, #108]	@ (8006e40 <command_send_splash+0xec>)
 8006dd4:	f7fb f87a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--         | |___|  __/| |_| | |___           --\r\n");
 8006dd8:	4928      	ldr	r1, [pc, #160]	@ (8006e7c <command_send_splash+0x128>)
 8006dda:	4819      	ldr	r0, [pc, #100]	@ (8006e40 <command_send_splash+0xec>)
 8006ddc:	f7fb f876 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          \\____|_|    \\___/ \\____|          -- \r\n");
 8006de0:	4927      	ldr	r1, [pc, #156]	@ (8006e80 <command_send_splash+0x12c>)
 8006de2:	4817      	ldr	r0, [pc, #92]	@ (8006e40 <command_send_splash+0xec>)
 8006de4:	f7fb f872 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--                  _   ___   ___             --\r\n");
 8006de8:	4926      	ldr	r1, [pc, #152]	@ (8006e84 <command_send_splash+0x130>)
 8006dea:	4815      	ldr	r0, [pc, #84]	@ (8006e40 <command_send_splash+0xec>)
 8006dec:	f7fb f86e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          __   __/ | / _ \\ / _ \\            -- \r\n");
 8006df0:	4925      	ldr	r1, [pc, #148]	@ (8006e88 <command_send_splash+0x134>)
 8006df2:	4813      	ldr	r0, [pc, #76]	@ (8006e40 <command_send_splash+0xec>)
 8006df4:	f7fb f86a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          \\ \\ / /| || | | | | | |           --  \r\n");
 8006df8:	4924      	ldr	r1, [pc, #144]	@ (8006e8c <command_send_splash+0x138>)
 8006dfa:	4811      	ldr	r0, [pc, #68]	@ (8006e40 <command_send_splash+0xec>)
 8006dfc:	f7fb f866 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--           \\ V / | || |_| | |_| |           -- \r\n");
 8006e00:	4923      	ldr	r1, [pc, #140]	@ (8006e90 <command_send_splash+0x13c>)
 8006e02:	480f      	ldr	r0, [pc, #60]	@ (8006e40 <command_send_splash+0xec>)
 8006e04:	f7fb f862 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--            \\_/  |_(_)___(_)___/            -- \r\n");
 8006e08:	4922      	ldr	r1, [pc, #136]	@ (8006e94 <command_send_splash+0x140>)
 8006e0a:	480d      	ldr	r0, [pc, #52]	@ (8006e40 <command_send_splash+0xec>)
 8006e0c:	f7fb f85e 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8006e10:	490a      	ldr	r1, [pc, #40]	@ (8006e3c <command_send_splash+0xe8>)
 8006e12:	480b      	ldr	r0, [pc, #44]	@ (8006e40 <command_send_splash+0xec>)
 8006e14:	f7fb f85a 	bl	8001ecc <Uart_sendstring>

	Uart_sendstring(USART6, "> ");
 8006e18:	491f      	ldr	r1, [pc, #124]	@ (8006e98 <command_send_splash+0x144>)
 8006e1a:	4809      	ldr	r0, [pc, #36]	@ (8006e40 <command_send_splash+0xec>)
 8006e1c:	f7fb f856 	bl	8001ecc <Uart_sendstring>

	Uart_sendstring(UART5, "\r\n");
 8006e20:	491e      	ldr	r1, [pc, #120]	@ (8006e9c <command_send_splash+0x148>)
 8006e22:	481f      	ldr	r0, [pc, #124]	@ (8006ea0 <command_send_splash+0x14c>)
 8006e24:	f7fb f852 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, ">>>>> CPOC V1.2.0 RS422 <<<<<\r\n");
 8006e28:	491e      	ldr	r1, [pc, #120]	@ (8006ea4 <command_send_splash+0x150>)
 8006e2a:	481d      	ldr	r0, [pc, #116]	@ (8006ea0 <command_send_splash+0x14c>)
 8006e2c:	f7fb f84e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "> ");
 8006e30:	4919      	ldr	r1, [pc, #100]	@ (8006e98 <command_send_splash+0x144>)
 8006e32:	481b      	ldr	r0, [pc, #108]	@ (8006ea0 <command_send_splash+0x14c>)
 8006e34:	f7fb f84a 	bl	8001ecc <Uart_sendstring>
}
 8006e38:	bf00      	nop
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	080137e8 	.word	0x080137e8
 8006e40:	40011400 	.word	0x40011400
 8006e44:	0801381c 	.word	0x0801381c
 8006e48:	08013850 	.word	0x08013850
 8006e4c:	08013884 	.word	0x08013884
 8006e50:	080138bc 	.word	0x080138bc
 8006e54:	080138f0 	.word	0x080138f0
 8006e58:	08013928 	.word	0x08013928
 8006e5c:	0801395c 	.word	0x0801395c
 8006e60:	08013990 	.word	0x08013990
 8006e64:	080139c4 	.word	0x080139c4
 8006e68:	080139f8 	.word	0x080139f8
 8006e6c:	08013a2c 	.word	0x08013a2c
 8006e70:	08013a60 	.word	0x08013a60
 8006e74:	08013a94 	.word	0x08013a94
 8006e78:	08013ac8 	.word	0x08013ac8
 8006e7c:	08013afc 	.word	0x08013afc
 8006e80:	08013b30 	.word	0x08013b30
 8006e84:	08013b64 	.word	0x08013b64
 8006e88:	08013b98 	.word	0x08013b98
 8006e8c:	08013bcc 	.word	0x08013bcc
 8006e90:	08013c04 	.word	0x08013c04
 8006e94:	08013c38 	.word	0x08013c38
 8006e98:	08013360 	.word	0x08013360
 8006e9c:	080132ec 	.word	0x080132ec
 8006ea0:	40005000 	.word	0x40005000
 8006ea4:	08013c6c 	.word	0x08013c6c

08006ea8 <LL_GPIO_SetOutputPin>:
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	619a      	str	r2, [r3, #24]
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <LL_GPIO_ResetOutputPin>:
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	041a      	lsls	r2, r3, #16
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	619a      	str	r2, [r3, #24]
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
	...

08006ee4 <switch_board>:
	}
};



void switch_board(uint8_t board_id) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
    switch (board_id) {
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d837      	bhi.n	8006f64 <switch_board+0x80>
 8006ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8006efc <switch_board+0x18>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f0d 	.word	0x08006f0d
 8006f00:	08006f23 	.word	0x08006f23
 8006f04:	08006f39 	.word	0x08006f39
 8006f08:	08006f4f 	.word	0x08006f4f
        case 0: // PDU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006f0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f10:	4816      	ldr	r0, [pc, #88]	@ (8006f6c <switch_board+0x88>)
 8006f12:	f7ff ffd7 	bl	8006ec4 <LL_GPIO_ResetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006f16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006f1a:	4814      	ldr	r0, [pc, #80]	@ (8006f6c <switch_board+0x88>)
 8006f1c:	f7ff ffd2 	bl	8006ec4 <LL_GPIO_ResetOutputPin>
            break;
 8006f20:	e020      	b.n	8006f64 <switch_board+0x80>
        case 1: // PMU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006f22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f26:	4811      	ldr	r0, [pc, #68]	@ (8006f6c <switch_board+0x88>)
 8006f28:	f7ff ffcc 	bl	8006ec4 <LL_GPIO_ResetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006f2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006f30:	480e      	ldr	r0, [pc, #56]	@ (8006f6c <switch_board+0x88>)
 8006f32:	f7ff ffb9 	bl	8006ea8 <LL_GPIO_SetOutputPin>
            break;
 8006f36:	e015      	b.n	8006f64 <switch_board+0x80>
        case 2: // CAM
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006f38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f3c:	480b      	ldr	r0, [pc, #44]	@ (8006f6c <switch_board+0x88>)
 8006f3e:	f7ff ffb3 	bl	8006ea8 <LL_GPIO_SetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006f42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006f46:	4809      	ldr	r0, [pc, #36]	@ (8006f6c <switch_board+0x88>)
 8006f48:	f7ff ffbc 	bl	8006ec4 <LL_GPIO_ResetOutputPin>
            break;
 8006f4c:	e00a      	b.n	8006f64 <switch_board+0x80>
        case 3: // IOU
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006f4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f52:	4806      	ldr	r0, [pc, #24]	@ (8006f6c <switch_board+0x88>)
 8006f54:	f7ff ffa8 	bl	8006ea8 <LL_GPIO_SetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006f58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006f5c:	4803      	ldr	r0, [pc, #12]	@ (8006f6c <switch_board+0x88>)
 8006f5e:	f7ff ffa3 	bl	8006ea8 <LL_GPIO_SetOutputPin>
            break;
 8006f62:	bf00      	nop
    }
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	40020000 	.word	0x40020000

08006f70 <RS422_periodic_task>:

uint8_t sourceArray[1000];
uint8_t destArray[1000];

volatile uint8_t count_packet = 0;
void RS422_periodic_task(void) {
 8006f70:	b590      	push	{r4, r7, lr}
 8006f72:	b08f      	sub	sp, #60	@ 0x3c
 8006f74:	af04      	add	r7, sp, #16
	if (rs422_report_enable) {
 8006f76:	4b60      	ldr	r3, [pc, #384]	@ (80070f8 <RS422_periodic_task+0x188>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 80b6 	beq.w	80070ee <RS422_periodic_task+0x17e>
		if (SCH_TIM_HasCompleted(SCH_TIM_RS422))
 8006f82:	2004      	movs	r0, #4
 8006f84:	f003 fc8a 	bl	800a89c <SCH_TIM_HasCompleted>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 808f 	beq.w	80070ae <RS422_periodic_task+0x13e>
		{

			sourceArray[0] = 0x02;
 8006f90:	4b5a      	ldr	r3, [pc, #360]	@ (80070fc <RS422_periodic_task+0x18c>)
 8006f92:	2202      	movs	r2, #2
 8006f94:	701a      	strb	r2, [r3, #0]
			sourceArray[ARRAY_SIZE - 1] = 0x03;
 8006f96:	4b5a      	ldr	r3, [pc, #360]	@ (8007100 <RS422_periodic_task+0x190>)
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	4a57      	ldr	r2, [pc, #348]	@ (80070fc <RS422_periodic_task+0x18c>)
 8006f9e:	2103      	movs	r1, #3
 8006fa0:	54d1      	strb	r1, [r2, r3]

		    uint8_t day, date, month, year, hour, min, sec;
		    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8006fa2:	f107 0410 	add.w	r4, r7, #16
 8006fa6:	f107 0211 	add.w	r2, r7, #17
 8006faa:	f107 0112 	add.w	r1, r7, #18
 8006fae:	f107 0013 	add.w	r0, r7, #19
 8006fb2:	f107 030d 	add.w	r3, r7, #13
 8006fb6:	9302      	str	r3, [sp, #8]
 8006fb8:	f107 030e 	add.w	r3, r7, #14
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	f107 030f 	add.w	r3, r7, #15
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	f7fa fa4d 	bl	8001464 <DS3231_GetDateTime>

		    float temp;
		    uint8_t rounded_temp;

		    temp = DS3231_GetTemperature();
 8006fca:	f7fa faf3 	bl	80015b4 <DS3231_GetTemperature>
 8006fce:	ed87 0a06 	vstr	s0, [r7, #24]
		    rounded_temp = (uint8_t)temp;
 8006fd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fda:	edc7 7a01 	vstr	s15, [r7, #4]
 8006fde:	793b      	ldrb	r3, [r7, #4]
 8006fe0:	75fb      	strb	r3, [r7, #23]

		    sourceArray[2] = sec;
 8006fe2:	7b7a      	ldrb	r2, [r7, #13]
 8006fe4:	4b45      	ldr	r3, [pc, #276]	@ (80070fc <RS422_periodic_task+0x18c>)
 8006fe6:	709a      	strb	r2, [r3, #2]
		    sourceArray[3] = min;
 8006fe8:	7bba      	ldrb	r2, [r7, #14]
 8006fea:	4b44      	ldr	r3, [pc, #272]	@ (80070fc <RS422_periodic_task+0x18c>)
 8006fec:	70da      	strb	r2, [r3, #3]
		    sourceArray[4] = hour;
 8006fee:	7bfa      	ldrb	r2, [r7, #15]
 8006ff0:	4b42      	ldr	r3, [pc, #264]	@ (80070fc <RS422_periodic_task+0x18c>)
 8006ff2:	711a      	strb	r2, [r3, #4]
		    sourceArray[5] = date;
 8006ff4:	7cba      	ldrb	r2, [r7, #18]
 8006ff6:	4b41      	ldr	r3, [pc, #260]	@ (80070fc <RS422_periodic_task+0x18c>)
 8006ff8:	715a      	strb	r2, [r3, #5]
		    sourceArray[6] = month;
 8006ffa:	7c7a      	ldrb	r2, [r7, #17]
 8006ffc:	4b3f      	ldr	r3, [pc, #252]	@ (80070fc <RS422_periodic_task+0x18c>)
 8006ffe:	719a      	strb	r2, [r3, #6]
		    sourceArray[7] = rounded_temp;
 8007000:	4a3e      	ldr	r2, [pc, #248]	@ (80070fc <RS422_periodic_task+0x18c>)
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	71d3      	strb	r3, [r2, #7]


			count_packet = 0;
 8007006:	4b3f      	ldr	r3, [pc, #252]	@ (8007104 <RS422_periodic_task+0x194>)
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]

			for (int i = 121; i <= 146; i++) {
 800700c:	2379      	movs	r3, #121	@ 0x79
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007010:	e00b      	b.n	800702a <RS422_periodic_task+0xba>
			    sourceArray[i] = i - 121;
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	b2db      	uxtb	r3, r3
 8007016:	3b79      	subs	r3, #121	@ 0x79
 8007018:	b2d9      	uxtb	r1, r3
 800701a:	4a38      	ldr	r2, [pc, #224]	@ (80070fc <RS422_periodic_task+0x18c>)
 800701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701e:	4413      	add	r3, r2
 8007020:	460a      	mov	r2, r1
 8007022:	701a      	strb	r2, [r3, #0]
			for (int i = 121; i <= 146; i++) {
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	3301      	adds	r3, #1
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	2b92      	cmp	r3, #146	@ 0x92
 800702e:	ddf0      	ble.n	8007012 <RS422_periodic_task+0xa2>
			}


			for (int i = 147; i <= ARRAY_SIZE-2; i++) {
 8007030:	2393      	movs	r3, #147	@ 0x93
 8007032:	623b      	str	r3, [r7, #32]
 8007034:	e00b      	b.n	800704e <RS422_periodic_task+0xde>
			    sourceArray[i] = i - 147;
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	336d      	adds	r3, #109	@ 0x6d
 800703c:	b2d9      	uxtb	r1, r3
 800703e:	4a2f      	ldr	r2, [pc, #188]	@ (80070fc <RS422_periodic_task+0x18c>)
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	4413      	add	r3, r2
 8007044:	460a      	mov	r2, r1
 8007046:	701a      	strb	r2, [r3, #0]
			for (int i = 147; i <= ARRAY_SIZE-2; i++) {
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	3301      	adds	r3, #1
 800704c:	623b      	str	r3, [r7, #32]
 800704e:	4b2c      	ldr	r3, [pc, #176]	@ (8007100 <RS422_periodic_task+0x190>)
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	3b01      	subs	r3, #1
 8007054:	6a3a      	ldr	r2, [r7, #32]
 8007056:	429a      	cmp	r2, r3
 8007058:	dbed      	blt.n	8007036 <RS422_periodic_task+0xc6>
			}


			uint16_t crc = crc16_CCITT(0xFFFF, &sourceArray[1], ARRAY_SIZE - 4);
 800705a:	4b29      	ldr	r3, [pc, #164]	@ (8007100 <RS422_periodic_task+0x190>)
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	3b04      	subs	r3, #4
 8007060:	b29b      	uxth	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	4928      	ldr	r1, [pc, #160]	@ (8007108 <RS422_periodic_task+0x198>)
 8007066:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800706a:	f003 fd5f 	bl	800ab2c <crc16_CCITT>
 800706e:	4603      	mov	r3, r0
 8007070:	82bb      	strh	r3, [r7, #20]

			sourceArray[ARRAY_SIZE - 3] = (crc >> 8) & 0xFF;  // CRC#HIGH
 8007072:	8abb      	ldrh	r3, [r7, #20]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	b29a      	uxth	r2, r3
 8007078:	4b21      	ldr	r3, [pc, #132]	@ (8007100 <RS422_periodic_task+0x190>)
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	3b03      	subs	r3, #3
 800707e:	b2d1      	uxtb	r1, r2
 8007080:	4a1e      	ldr	r2, [pc, #120]	@ (80070fc <RS422_periodic_task+0x18c>)
 8007082:	54d1      	strb	r1, [r2, r3]
			sourceArray[ARRAY_SIZE - 2] = crc & 0xFF;         // CRC#LOW
 8007084:	4b1e      	ldr	r3, [pc, #120]	@ (8007100 <RS422_periodic_task+0x190>)
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	3b02      	subs	r3, #2
 800708a:	8aba      	ldrh	r2, [r7, #20]
 800708c:	b2d1      	uxtb	r1, r2
 800708e:	4a1b      	ldr	r2, [pc, #108]	@ (80070fc <RS422_periodic_task+0x18c>)
 8007090:	54d1      	strb	r1, [r2, r3]


			memcpy(destArray, sourceArray, sizeof(sourceArray));
 8007092:	4a1e      	ldr	r2, [pc, #120]	@ (800710c <RS422_periodic_task+0x19c>)
 8007094:	4b19      	ldr	r3, [pc, #100]	@ (80070fc <RS422_periodic_task+0x18c>)
 8007096:	4610      	mov	r0, r2
 8007098:	4619      	mov	r1, r3
 800709a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800709e:	461a      	mov	r2, r3
 80070a0:	f007 fc37 	bl	800e912 <memcpy>
			SCH_TIM_Start(SCH_TIM_RS422, RS422_PERIOD);
 80070a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80070a8:	2004      	movs	r0, #4
 80070aa:	f003 fbe1 	bl	800a870 <SCH_TIM_Start>
		}
		destArray[1] = count_packet;
 80070ae:	4b15      	ldr	r3, [pc, #84]	@ (8007104 <RS422_periodic_task+0x194>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	4b15      	ldr	r3, [pc, #84]	@ (800710c <RS422_periodic_task+0x19c>)
 80070b6:	705a      	strb	r2, [r3, #1]

        for (int i = 0; i < ARRAY_SIZE; i++) {
 80070b8:	2300      	movs	r3, #0
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	e00a      	b.n	80070d4 <RS422_periodic_task+0x164>
            Uart_write(UART5, destArray[i]);
 80070be:	4a13      	ldr	r2, [pc, #76]	@ (800710c <RS422_periodic_task+0x19c>)
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	4619      	mov	r1, r3
 80070c8:	4811      	ldr	r0, [pc, #68]	@ (8007110 <RS422_periodic_task+0x1a0>)
 80070ca:	f7fa fdf3 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < ARRAY_SIZE; i++) {
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3301      	adds	r3, #1
 80070d2:	61fb      	str	r3, [r7, #28]
 80070d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <RS422_periodic_task+0x190>)
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4293      	cmp	r3, r2
 80070de:	dbee      	blt.n	80070be <RS422_periodic_task+0x14e>
        }

        count_packet++;
 80070e0:	4b08      	ldr	r3, [pc, #32]	@ (8007104 <RS422_periodic_task+0x194>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	3301      	adds	r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <RS422_periodic_task+0x194>)
 80070ec:	701a      	strb	r2, [r3, #0]
	}
}
 80070ee:	bf00      	nop
 80070f0:	372c      	adds	r7, #44	@ 0x2c
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd90      	pop	{r4, r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20004979 	.word	0x20004979
 80070fc:	2000497c 	.word	0x2000497c
 8007100:	200003a0 	.word	0x200003a0
 8007104:	2000514c 	.word	0x2000514c
 8007108:	2000497d 	.word	0x2000497d
 800710c:	20004d64 	.word	0x20004d64
 8007110:	40005000 	.word	0x40005000

08007114 <frame_processing_rs422>:

void frame_processing_rs422(fsp_packet_t *fsp_pkt){
 8007114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007118:	f5ad 6db9 	sub.w	sp, sp, #1480	@ 0x5c8
 800711c:	af2c      	add	r7, sp, #176	@ 0xb0
 800711e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007122:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007126:	6018      	str	r0, [r3, #0]
	switch(fsp_pkt->payload[0])
 8007128:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800712c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	795b      	ldrb	r3, [r3, #5]
 8007134:	2b13      	cmp	r3, #19
 8007136:	f000 85c7 	beq.w	8007cc8 <frame_processing_rs422+0xbb4>
 800713a:	2b13      	cmp	r3, #19
 800713c:	f301 81ed 	bgt.w	800851a <frame_processing_rs422+0x1406>
 8007140:	2b06      	cmp	r3, #6
 8007142:	f000 82b9 	beq.w	80076b8 <frame_processing_rs422+0x5a4>
 8007146:	2b08      	cmp	r3, #8
 8007148:	f041 81e7 	bne.w	800851a <frame_processing_rs422+0x1406>
	{
		case 0x08:
	    {
			if(!rs422_report_enable){
 800714c:	4bb9      	ldr	r3, [pc, #740]	@ (8007434 <frame_processing_rs422+0x320>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 827e 	bne.w	8007654 <frame_processing_rs422+0x540>
				Uart_sendstring(UART5, "\nPMU:\n");
 8007158:	49b7      	ldr	r1, [pc, #732]	@ (8007438 <frame_processing_rs422+0x324>)
 800715a:	48b8      	ldr	r0, [pc, #736]	@ (800743c <frame_processing_rs422+0x328>)
 800715c:	f7fa feb6 	bl	8001ecc <Uart_sendstring>
				int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8007160:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007164:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	799b      	ldrb	r3, [r3, #6]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	b21a      	sxth	r2, r3
 8007170:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007174:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	79db      	ldrb	r3, [r3, #7]
 800717c:	b21b      	sxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
				int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8007184:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007188:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	7a1b      	ldrb	r3, [r3, #8]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	b21a      	sxth	r2, r3
 8007194:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007198:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	7a5b      	ldrb	r3, [r3, #9]
 80071a0:	b21b      	sxth	r3, r3
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4
				int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 80071a8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80071ac:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	7a9b      	ldrb	r3, [r3, #10]
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	b21a      	sxth	r2, r3
 80071b8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80071bc:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	7adb      	ldrb	r3, [r3, #11]
 80071c4:	b21b      	sxth	r3, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
				int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 80071cc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80071d0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	7b1b      	ldrb	r3, [r3, #12]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	b21a      	sxth	r2, r3
 80071dc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80071e0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	7b5b      	ldrb	r3, [r3, #13]
 80071e8:	b21b      	sxth	r3, r3
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0

				uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 80071f0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80071f4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	7b9b      	ldrb	r3, [r3, #14]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	b21a      	sxth	r2, r3
 8007200:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007204:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	7bdb      	ldrb	r3, [r3, #15]
 800720c:	b21b      	sxth	r3, r3
 800720e:	4313      	orrs	r3, r2
 8007210:	b21b      	sxth	r3, r3
 8007212:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
				uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8007216:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800721a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	7c1b      	ldrb	r3, [r3, #16]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	b21a      	sxth	r2, r3
 8007226:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800722a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	7c5b      	ldrb	r3, [r3, #17]
 8007232:	b21b      	sxth	r3, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	b21b      	sxth	r3, r3
 8007238:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
				uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800723c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007240:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	7c9b      	ldrb	r3, [r3, #18]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	b21a      	sxth	r2, r3
 800724c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007250:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	7cdb      	ldrb	r3, [r3, #19]
 8007258:	b21b      	sxth	r3, r3
 800725a:	4313      	orrs	r3, r2
 800725c:	b21b      	sxth	r3, r3
 800725e:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
				uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8007262:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007266:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	7d1b      	ldrb	r3, [r3, #20]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	b21a      	sxth	r2, r3
 8007272:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007276:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	7d5b      	ldrb	r3, [r3, #21]
 800727e:	b21b      	sxth	r3, r3
 8007280:	4313      	orrs	r3, r2
 8007282:	b21b      	sxth	r3, r3
 8007284:	f8a7 34d8 	strh.w	r3, [r7, #1240]	@ 0x4d8

				uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8007288:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800728c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	7d9b      	ldrb	r3, [r3, #22]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	b21a      	sxth	r2, r3
 8007298:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800729c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	7ddb      	ldrb	r3, [r3, #23]
 80072a4:	b21b      	sxth	r3, r3
 80072a6:	4313      	orrs	r3, r2
 80072a8:	b21b      	sxth	r3, r3
 80072aa:	f8a7 34d6 	strh.w	r3, [r7, #1238]	@ 0x4d6
				uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 80072ae:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80072b2:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	7e1b      	ldrb	r3, [r3, #24]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	b21a      	sxth	r2, r3
 80072be:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80072c2:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	7e5b      	ldrb	r3, [r3, #25]
 80072ca:	b21b      	sxth	r3, r3
 80072cc:	4313      	orrs	r3, r2
 80072ce:	b21b      	sxth	r3, r3
 80072d0:	f8a7 34d4 	strh.w	r3, [r7, #1236]	@ 0x4d4

				uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 80072d4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80072d8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	7e9b      	ldrb	r3, [r3, #26]
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	b21a      	sxth	r2, r3
 80072e4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80072e8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	7edb      	ldrb	r3, [r3, #27]
 80072f0:	b21b      	sxth	r3, r3
 80072f2:	4313      	orrs	r3, r2
 80072f4:	b21b      	sxth	r3, r3
 80072f6:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
				uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 80072fa:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80072fe:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	7f1b      	ldrb	r3, [r3, #28]
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	b21a      	sxth	r2, r3
 800730a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800730e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	7f5b      	ldrb	r3, [r3, #29]
 8007316:	b21b      	sxth	r3, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	b21b      	sxth	r3, r3
 800731c:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0

				char buffer_0x08[500];
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8007320:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 8007324:	2b00      	cmp	r3, #0
 8007326:	da03      	bge.n	8007330 <frame_processing_rs422+0x21c>
 8007328:	4b45      	ldr	r3, [pc, #276]	@ (8007440 <frame_processing_rs422+0x32c>)
 800732a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800732e:	e002      	b.n	8007336 <frame_processing_rs422+0x222>
 8007330:	4b44      	ldr	r3, [pc, #272]	@ (8007444 <frame_processing_rs422+0x330>)
 8007332:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8007336:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 800733a:	2b00      	cmp	r3, #0
 800733c:	bfb8      	it	lt
 800733e:	425b      	neglt	r3, r3
 8007340:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8007342:	4a41      	ldr	r2, [pc, #260]	@ (8007448 <frame_processing_rs422+0x334>)
 8007344:	fb82 1203 	smull	r1, r2, r2, r3
 8007348:	1152      	asrs	r2, r2, #5
 800734a:	17db      	asrs	r3, r3, #31
 800734c:	eba2 0c03 	sub.w	ip, r2, r3
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8007350:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 8007354:	2b00      	cmp	r3, #0
 8007356:	bfb8      	it	lt
 8007358:	425b      	neglt	r3, r3
 800735a:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800735c:	4a3a      	ldr	r2, [pc, #232]	@ (8007448 <frame_processing_rs422+0x334>)
 800735e:	fb82 1203 	smull	r1, r2, r2, r3
 8007362:	1151      	asrs	r1, r2, #5
 8007364:	17da      	asrs	r2, r3, #31
 8007366:	1a8a      	subs	r2, r1, r2
 8007368:	4611      	mov	r1, r2
 800736a:	2264      	movs	r2, #100	@ 0x64
 800736c:	fb01 f202 	mul.w	r2, r1, r2
 8007370:	1a9b      	subs	r3, r3, r2
 8007372:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007376:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 800737a:	2b00      	cmp	r3, #0
 800737c:	da03      	bge.n	8007386 <frame_processing_rs422+0x272>
 800737e:	4b30      	ldr	r3, [pc, #192]	@ (8007440 <frame_processing_rs422+0x32c>)
 8007380:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007384:	e002      	b.n	800738c <frame_processing_rs422+0x278>
 8007386:	4b2f      	ldr	r3, [pc, #188]	@ (8007444 <frame_processing_rs422+0x330>)
 8007388:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800738c:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 8007390:	2b00      	cmp	r3, #0
 8007392:	bfb8      	it	lt
 8007394:	425b      	neglt	r3, r3
 8007396:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8007398:	4a2b      	ldr	r2, [pc, #172]	@ (8007448 <frame_processing_rs422+0x334>)
 800739a:	fb82 1203 	smull	r1, r2, r2, r3
 800739e:	1152      	asrs	r2, r2, #5
 80073a0:	17db      	asrs	r3, r3, #31
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 80073a8:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bfb8      	it	lt
 80073b0:	425b      	neglt	r3, r3
 80073b2:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80073b4:	4a24      	ldr	r2, [pc, #144]	@ (8007448 <frame_processing_rs422+0x334>)
 80073b6:	fb82 1203 	smull	r1, r2, r2, r3
 80073ba:	1151      	asrs	r1, r2, #5
 80073bc:	17da      	asrs	r2, r3, #31
 80073be:	1a8a      	subs	r2, r1, r2
 80073c0:	4611      	mov	r1, r2
 80073c2:	2264      	movs	r2, #100	@ 0x64
 80073c4:	fb01 f202 	mul.w	r2, r1, r2
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073ce:	f9b7 34e2 	ldrsh.w	r3, [r7, #1250]	@ 0x4e2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da03      	bge.n	80073de <frame_processing_rs422+0x2ca>
 80073d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <frame_processing_rs422+0x32c>)
 80073d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073dc:	e002      	b.n	80073e4 <frame_processing_rs422+0x2d0>
 80073de:	4b19      	ldr	r3, [pc, #100]	@ (8007444 <frame_processing_rs422+0x330>)
 80073e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 80073e4:	f9b7 34e2 	ldrsh.w	r3, [r7, #1250]	@ 0x4e2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bfb8      	it	lt
 80073ec:	425b      	neglt	r3, r3
 80073ee:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80073f0:	4a15      	ldr	r2, [pc, #84]	@ (8007448 <frame_processing_rs422+0x334>)
 80073f2:	fb82 1203 	smull	r1, r2, r2, r3
 80073f6:	1152      	asrs	r2, r2, #5
 80073f8:	17db      	asrs	r3, r3, #31
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 80073fe:	f9b7 34e2 	ldrsh.w	r3, [r7, #1250]	@ 0x4e2
 8007402:	2b00      	cmp	r3, #0
 8007404:	bfb8      	it	lt
 8007406:	425b      	neglt	r3, r3
 8007408:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800740a:	4a0f      	ldr	r2, [pc, #60]	@ (8007448 <frame_processing_rs422+0x334>)
 800740c:	fb82 1203 	smull	r1, r2, r2, r3
 8007410:	1151      	asrs	r1, r2, #5
 8007412:	17da      	asrs	r2, r3, #31
 8007414:	1a8a      	subs	r2, r1, r2
 8007416:	4611      	mov	r1, r2
 8007418:	2264      	movs	r2, #100	@ 0x64
 800741a:	fb01 f202 	mul.w	r2, r1, r2
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007422:	f9b7 34e0 	ldrsh.w	r3, [r7, #1248]	@ 0x4e0
 8007426:	2b00      	cmp	r3, #0
 8007428:	da10      	bge.n	800744c <frame_processing_rs422+0x338>
 800742a:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <frame_processing_rs422+0x32c>)
 800742c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007430:	e00f      	b.n	8007452 <frame_processing_rs422+0x33e>
 8007432:	bf00      	nop
 8007434:	20004979 	.word	0x20004979
 8007438:	08013c8c 	.word	0x08013c8c
 800743c:	40005000 	.word	0x40005000
 8007440:	08013c94 	.word	0x08013c94
 8007444:	08013c98 	.word	0x08013c98
 8007448:	51eb851f 	.word	0x51eb851f
 800744c:	4b93      	ldr	r3, [pc, #588]	@ (800769c <frame_processing_rs422+0x588>)
 800744e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 8007452:	f9b7 34e0 	ldrsh.w	r3, [r7, #1248]	@ 0x4e0
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfb8      	it	lt
 800745a:	425b      	neglt	r3, r3
 800745c:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800745e:	4a90      	ldr	r2, [pc, #576]	@ (80076a0 <frame_processing_rs422+0x58c>)
 8007460:	fb82 1203 	smull	r1, r2, r2, r3
 8007464:	1152      	asrs	r2, r2, #5
 8007466:	17db      	asrs	r3, r3, #31
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	677b      	str	r3, [r7, #116]	@ 0x74
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800746c:	f9b7 34e0 	ldrsh.w	r3, [r7, #1248]	@ 0x4e0
 8007470:	2b00      	cmp	r3, #0
 8007472:	bfb8      	it	lt
 8007474:	425b      	neglt	r3, r3
 8007476:	b29b      	uxth	r3, r3
 8007478:	4619      	mov	r1, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800747a:	4b89      	ldr	r3, [pc, #548]	@ (80076a0 <frame_processing_rs422+0x58c>)
 800747c:	fb83 2301 	smull	r2, r3, r3, r1
 8007480:	115a      	asrs	r2, r3, #5
 8007482:	17cb      	asrs	r3, r1, #31
 8007484:	1ad6      	subs	r6, r2, r3
 8007486:	2364      	movs	r3, #100	@ 0x64
 8007488:	fb06 f303 	mul.w	r3, r6, r3
 800748c:	1ace      	subs	r6, r1, r3
 800748e:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8007492:	4a83      	ldr	r2, [pc, #524]	@ (80076a0 <frame_processing_rs422+0x58c>)
 8007494:	fba2 2303 	umull	r2, r3, r2, r3
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	b29b      	uxth	r3, r3
 800749c:	673b      	str	r3, [r7, #112]	@ 0x70
 800749e:	f8b7 14de 	ldrh.w	r1, [r7, #1246]	@ 0x4de
 80074a2:	4b7f      	ldr	r3, [pc, #508]	@ (80076a0 <frame_processing_rs422+0x58c>)
 80074a4:	fba3 2301 	umull	r2, r3, r3, r1
 80074a8:	095a      	lsrs	r2, r3, #5
 80074aa:	2364      	movs	r3, #100	@ 0x64
 80074ac:	fb02 f303 	mul.w	r3, r2, r3
 80074b0:	1acb      	subs	r3, r1, r3
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074b6:	f8b7 24dc 	ldrh.w	r2, [r7, #1244]	@ 0x4dc
 80074ba:	4b79      	ldr	r3, [pc, #484]	@ (80076a0 <frame_processing_rs422+0x58c>)
 80074bc:	fba3 2302 	umull	r2, r3, r3, r2
 80074c0:	095b      	lsrs	r3, r3, #5
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074c6:	f8b7 14dc 	ldrh.w	r1, [r7, #1244]	@ 0x4dc
 80074ca:	4b75      	ldr	r3, [pc, #468]	@ (80076a0 <frame_processing_rs422+0x58c>)
 80074cc:	fba3 2301 	umull	r2, r3, r3, r1
 80074d0:	095a      	lsrs	r2, r3, #5
 80074d2:	2364      	movs	r3, #100	@ 0x64
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
 80074d8:	1acb      	subs	r3, r1, r3
 80074da:	b29b      	uxth	r3, r3
 80074dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80074de:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 80074e2:	4b6f      	ldr	r3, [pc, #444]	@ (80076a0 <frame_processing_rs422+0x58c>)
 80074e4:	fba3 2302 	umull	r2, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80074ee:	f8b7 14da 	ldrh.w	r1, [r7, #1242]	@ 0x4da
 80074f2:	4b6b      	ldr	r3, [pc, #428]	@ (80076a0 <frame_processing_rs422+0x58c>)
 80074f4:	fba3 2301 	umull	r2, r3, r3, r1
 80074f8:	095a      	lsrs	r2, r3, #5
 80074fa:	2364      	movs	r3, #100	@ 0x64
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
 8007500:	1acb      	subs	r3, r1, r3
 8007502:	b29b      	uxth	r3, r3
 8007504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007506:	f8b7 24d8 	ldrh.w	r2, [r7, #1240]	@ 0x4d8
 800750a:	4b65      	ldr	r3, [pc, #404]	@ (80076a0 <frame_processing_rs422+0x58c>)
 800750c:	fba3 2302 	umull	r2, r3, r3, r2
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	b29b      	uxth	r3, r3
 8007514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007516:	f8b7 14d8 	ldrh.w	r1, [r7, #1240]	@ 0x4d8
 800751a:	4b61      	ldr	r3, [pc, #388]	@ (80076a0 <frame_processing_rs422+0x58c>)
 800751c:	fba3 2301 	umull	r2, r3, r3, r1
 8007520:	095a      	lsrs	r2, r3, #5
 8007522:	2364      	movs	r3, #100	@ 0x64
 8007524:	fb02 f303 	mul.w	r3, r2, r3
 8007528:	1acb      	subs	r3, r1, r3
 800752a:	b29b      	uxth	r3, r3
 800752c:	657b      	str	r3, [r7, #84]	@ 0x54
 800752e:	f8b7 24d6 	ldrh.w	r2, [r7, #1238]	@ 0x4d6
 8007532:	4b5b      	ldr	r3, [pc, #364]	@ (80076a0 <frame_processing_rs422+0x58c>)
 8007534:	fba3 2302 	umull	r2, r3, r3, r2
 8007538:	095b      	lsrs	r3, r3, #5
 800753a:	b29b      	uxth	r3, r3
 800753c:	653b      	str	r3, [r7, #80]	@ 0x50
 800753e:	f8b7 14d6 	ldrh.w	r1, [r7, #1238]	@ 0x4d6
 8007542:	4b57      	ldr	r3, [pc, #348]	@ (80076a0 <frame_processing_rs422+0x58c>)
 8007544:	fba3 2301 	umull	r2, r3, r3, r1
 8007548:	095a      	lsrs	r2, r3, #5
 800754a:	2364      	movs	r3, #100	@ 0x64
 800754c:	fb02 f303 	mul.w	r3, r2, r3
 8007550:	1acb      	subs	r3, r1, r3
 8007552:	b29b      	uxth	r3, r3
 8007554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007556:	f8b7 24d4 	ldrh.w	r2, [r7, #1236]	@ 0x4d4
 800755a:	4b51      	ldr	r3, [pc, #324]	@ (80076a0 <frame_processing_rs422+0x58c>)
 800755c:	fba3 2302 	umull	r2, r3, r3, r2
 8007560:	095b      	lsrs	r3, r3, #5
 8007562:	b29b      	uxth	r3, r3
 8007564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007566:	f8b7 14d4 	ldrh.w	r1, [r7, #1236]	@ 0x4d4
 800756a:	4b4d      	ldr	r3, [pc, #308]	@ (80076a0 <frame_processing_rs422+0x58c>)
 800756c:	fba3 2301 	umull	r2, r3, r3, r1
 8007570:	095a      	lsrs	r2, r3, #5
 8007572:	2364      	movs	r3, #100	@ 0x64
 8007574:	fb02 f303 	mul.w	r3, r2, r3
 8007578:	1acb      	subs	r3, r1, r3
 800757a:	b29b      	uxth	r3, r3
 800757c:	647b      	str	r3, [r7, #68]	@ 0x44
 800757e:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8007582:	4b47      	ldr	r3, [pc, #284]	@ (80076a0 <frame_processing_rs422+0x58c>)
 8007584:	fba3 2302 	umull	r2, r3, r3, r2
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	b29b      	uxth	r3, r3
 800758c:	643b      	str	r3, [r7, #64]	@ 0x40
 800758e:	f8b7 14d2 	ldrh.w	r1, [r7, #1234]	@ 0x4d2
 8007592:	4b43      	ldr	r3, [pc, #268]	@ (80076a0 <frame_processing_rs422+0x58c>)
 8007594:	fba3 2301 	umull	r2, r3, r3, r1
 8007598:	095a      	lsrs	r2, r3, #5
 800759a:	2364      	movs	r3, #100	@ 0x64
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	1acb      	subs	r3, r1, r3
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	461d      	mov	r5, r3
 80075a6:	f8b7 24d0 	ldrh.w	r2, [r7, #1232]	@ 0x4d0
 80075aa:	4b3d      	ldr	r3, [pc, #244]	@ (80076a0 <frame_processing_rs422+0x58c>)
 80075ac:	fba3 2302 	umull	r2, r3, r3, r2
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	461c      	mov	r4, r3
 80075b6:	f8b7 14d0 	ldrh.w	r1, [r7, #1232]	@ 0x4d0
 80075ba:	4b39      	ldr	r3, [pc, #228]	@ (80076a0 <frame_processing_rs422+0x58c>)
 80075bc:	fba3 2301 	umull	r2, r3, r3, r1
 80075c0:	095a      	lsrs	r2, r3, #5
 80075c2:	2364      	movs	r3, #100	@ 0x64
 80075c4:	fb02 f303 	mul.w	r3, r2, r3
 80075c8:	1acb      	subs	r3, r1, r3
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80075d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80075d2:	9418      	str	r4, [sp, #96]	@ 0x60
 80075d4:	9517      	str	r5, [sp, #92]	@ 0x5c
 80075d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075d8:	9216      	str	r2, [sp, #88]	@ 0x58
 80075da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075dc:	9215      	str	r2, [sp, #84]	@ 0x54
 80075de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e0:	9214      	str	r2, [sp, #80]	@ 0x50
 80075e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075e4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80075e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80075e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80075ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075ec:	9211      	str	r2, [sp, #68]	@ 0x44
 80075ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075f0:	9210      	str	r2, [sp, #64]	@ 0x40
 80075f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80075f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80075f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80075fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075fc:	920d      	str	r2, [sp, #52]	@ 0x34
 80075fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007600:	920c      	str	r2, [sp, #48]	@ 0x30
 8007602:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007604:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007606:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007608:	920a      	str	r2, [sp, #40]	@ 0x28
 800760a:	9609      	str	r6, [sp, #36]	@ 0x24
 800760c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800760e:	9308      	str	r3, [sp, #32]
 8007610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007614:	9307      	str	r3, [sp, #28]
 8007616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007618:	9306      	str	r3, [sp, #24]
 800761a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800761c:	9305      	str	r3, [sp, #20]
 800761e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007628:	9303      	str	r3, [sp, #12]
 800762a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800762e:	9302      	str	r3, [sp, #8]
 8007630:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	4663      	mov	r3, ip
 800763e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007642:	4918      	ldr	r1, [pc, #96]	@ (80076a4 <frame_processing_rs422+0x590>)
 8007644:	f007 f882 	bl	800e74c <siprintf>
						bat0 / 100, bat0 % 100, bat1 / 100, bat1 % 100,
						bat2 / 100, bat2 % 100, bat3 / 100, bat3 % 100,
						vin / 100, vin % 100, iin / 100, iin % 100,
						vout / 100, vout % 100, iout / 100, iout % 100);
				Uart_sendstring(UART5, buffer_0x08);
 8007648:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800764c:	4619      	mov	r1, r3
 800764e:	4816      	ldr	r0, [pc, #88]	@ (80076a8 <frame_processing_rs422+0x594>)
 8007650:	f7fa fc3c 	bl	8001ecc <Uart_sendstring>
			}
			receive_pmuFlag = 1;
 8007654:	4b15      	ldr	r3, [pc, #84]	@ (80076ac <frame_processing_rs422+0x598>)
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 24; i++) {
 800765a:	2301      	movs	r3, #1
 800765c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 8007660:	e013      	b.n	800768a <frame_processing_rs422+0x576>
			    sourceArray[i + 96] = fsp_pkt->payload[i]; //97   pay1    + 98 pay2    120    pay24
 8007662:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8007666:	3360      	adds	r3, #96	@ 0x60
 8007668:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 800766c:	f2a2 427c 	subw	r2, r2, #1148	@ 0x47c
 8007670:	6811      	ldr	r1, [r2, #0]
 8007672:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 8007676:	440a      	add	r2, r1
 8007678:	3205      	adds	r2, #5
 800767a:	7811      	ldrb	r1, [r2, #0]
 800767c:	4a0c      	ldr	r2, [pc, #48]	@ (80076b0 <frame_processing_rs422+0x59c>)
 800767e:	54d1      	strb	r1, [r2, r3]
			for (int i = 1; i <= 24; i++) {
 8007680:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8007684:	3301      	adds	r3, #1
 8007686:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 800768a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800768e:	2b18      	cmp	r3, #24
 8007690:	dde7      	ble.n	8007662 <frame_processing_rs422+0x54e>
			}
			disconnect_counter_pmu = 0;
 8007692:	4b08      	ldr	r3, [pc, #32]	@ (80076b4 <frame_processing_rs422+0x5a0>)
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]

	    }
	    break;
 8007698:	f000 bf44 	b.w	8008524 <frame_processing_rs422+0x1410>
 800769c:	08013c98 	.word	0x08013c98
 80076a0:	51eb851f 	.word	0x51eb851f
 80076a4:	08013c9c 	.word	0x08013c9c
 80076a8:	40005000 	.word	0x40005000
 80076ac:	2000003d 	.word	0x2000003d
 80076b0:	2000497c 	.word	0x2000497c
 80076b4:	2000484d 	.word	0x2000484d

		case 0x06:
		{
			if(!rs422_report_enable){
 80076b8:	4bc9      	ldr	r3, [pc, #804]	@ (80079e0 <frame_processing_rs422+0x8cc>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f040 82de 	bne.w	8007c80 <frame_processing_rs422+0xb6c>
				Uart_sendstring(UART5, "\nPDU:\n");
 80076c4:	49c7      	ldr	r1, [pc, #796]	@ (80079e4 <frame_processing_rs422+0x8d0>)
 80076c6:	48c8      	ldr	r0, [pc, #800]	@ (80079e8 <frame_processing_rs422+0x8d4>)
 80076c8:	f7fa fc00 	bl	8001ecc <Uart_sendstring>
				uint8_t tec1buck_status = fsp_pkt->payload[1];
 80076cc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80076d0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	799b      	ldrb	r3, [r3, #6]
 80076d8:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
				uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 80076dc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80076e0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	79db      	ldrb	r3, [r3, #7]
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	b21a      	sxth	r2, r3
 80076ec:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80076f0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	7a1b      	ldrb	r3, [r3, #8]
 80076f8:	b21b      	sxth	r3, r3
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b21b      	sxth	r3, r3
 80076fe:	f8a7 34cc 	strh.w	r3, [r7, #1228]	@ 0x4cc

				uint8_t tec2buck_status = fsp_pkt->payload[4];
 8007702:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007706:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	7a5b      	ldrb	r3, [r3, #9]
 800770e:	f887 34cb 	strb.w	r3, [r7, #1227]	@ 0x4cb
				uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 8007712:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007716:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	7a9b      	ldrb	r3, [r3, #10]
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	b21a      	sxth	r2, r3
 8007722:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007726:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	7adb      	ldrb	r3, [r3, #11]
 800772e:	b21b      	sxth	r3, r3
 8007730:	4313      	orrs	r3, r2
 8007732:	b21b      	sxth	r3, r3
 8007734:	f8a7 34c8 	strh.w	r3, [r7, #1224]	@ 0x4c8

				uint8_t tec3buck_status = fsp_pkt->payload[7];
 8007738:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800773c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	7b1b      	ldrb	r3, [r3, #12]
 8007744:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 8007748:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800774c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	7b5b      	ldrb	r3, [r3, #13]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	b21a      	sxth	r2, r3
 8007758:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800775c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	7b9b      	ldrb	r3, [r3, #14]
 8007764:	b21b      	sxth	r3, r3
 8007766:	4313      	orrs	r3, r2
 8007768:	b21b      	sxth	r3, r3
 800776a:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4

				uint8_t tec4buck_status = fsp_pkt->payload[10];
 800776e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007772:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	7bdb      	ldrb	r3, [r3, #15]
 800777a:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3
				uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800777e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007782:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	7c1b      	ldrb	r3, [r3, #16]
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	b21a      	sxth	r2, r3
 800778e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007792:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	7c5b      	ldrb	r3, [r3, #17]
 800779a:	b21b      	sxth	r3, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	b21b      	sxth	r3, r3
 80077a0:	f8a7 34c0 	strh.w	r3, [r7, #1216]	@ 0x4c0

				uint8_t mcubuck_status = fsp_pkt->payload[13];
 80077a4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80077a8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	7c9b      	ldrb	r3, [r3, #18]
 80077b0:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
				uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 80077b4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80077b8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	7cdb      	ldrb	r3, [r3, #19]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	b21a      	sxth	r2, r3
 80077c4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80077c8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	7d1b      	ldrb	r3, [r3, #20]
 80077d0:	b21b      	sxth	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b21b      	sxth	r3, r3
 80077d6:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc

				uint8_t ledbuck_status = fsp_pkt->payload[16];
 80077da:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80077de:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	7d5b      	ldrb	r3, [r3, #21]
 80077e6:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
				uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 80077ea:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80077ee:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	7d9b      	ldrb	r3, [r3, #22]
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	b21a      	sxth	r2, r3
 80077fa:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80077fe:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	7ddb      	ldrb	r3, [r3, #23]
 8007806:	b21b      	sxth	r3, r3
 8007808:	4313      	orrs	r3, r2
 800780a:	b21b      	sxth	r3, r3
 800780c:	f8a7 34b8 	strh.w	r3, [r7, #1208]	@ 0x4b8

				uint8_t cm4buck_status = fsp_pkt->payload[19];
 8007810:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007814:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	7e1b      	ldrb	r3, [r3, #24]
 800781c:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
				uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 8007820:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007824:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	7e5b      	ldrb	r3, [r3, #25]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	b21a      	sxth	r2, r3
 8007830:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007834:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	7e9b      	ldrb	r3, [r3, #26]
 800783c:	b21b      	sxth	r3, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	b21b      	sxth	r3, r3
 8007842:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4

				uint8_t tec1_status = fsp_pkt->payload[22];
 8007846:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800784a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	7edb      	ldrb	r3, [r3, #27]
 8007852:	f887 34b3 	strb.w	r3, [r7, #1203]	@ 0x4b3
				uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 8007856:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800785a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	7f1b      	ldrb	r3, [r3, #28]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	b21a      	sxth	r2, r3
 8007866:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800786a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	7f5b      	ldrb	r3, [r3, #29]
 8007872:	b21b      	sxth	r3, r3
 8007874:	4313      	orrs	r3, r2
 8007876:	b21b      	sxth	r3, r3
 8007878:	f8a7 34b0 	strh.w	r3, [r7, #1200]	@ 0x4b0

				uint8_t tec2_status = fsp_pkt->payload[25];
 800787c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007880:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	7f9b      	ldrb	r3, [r3, #30]
 8007888:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
				uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800788c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007890:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	7fdb      	ldrb	r3, [r3, #31]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	b21a      	sxth	r2, r3
 800789c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80078a0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078aa:	b21b      	sxth	r3, r3
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b21b      	sxth	r3, r3
 80078b0:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac

				uint8_t tec3_status = fsp_pkt->payload[28];
 80078b4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80078b8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80078c2:	f887 34ab 	strb.w	r3, [r7, #1195]	@ 0x4ab
				uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 80078c6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80078ca:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80078d4:	021b      	lsls	r3, r3, #8
 80078d6:	b21a      	sxth	r2, r3
 80078d8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80078dc:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80078e6:	b21b      	sxth	r3, r3
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	f8a7 34a8 	strh.w	r3, [r7, #1192]	@ 0x4a8

				uint8_t tec4_status = fsp_pkt->payload[31];
 80078f0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80078f4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078fe:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
				uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 8007902:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007906:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	b21a      	sxth	r2, r3
 8007914:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007918:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007922:	b21b      	sxth	r3, r3
 8007924:	4313      	orrs	r3, r2
 8007926:	b21b      	sxth	r3, r3
 8007928:	f8a7 34a4 	strh.w	r3, [r7, #1188]	@ 0x4a4

				uint8_t copc_status = fsp_pkt->payload[34];
 800792c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007930:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800793a:	f887 34a3 	strb.w	r3, [r7, #1187]	@ 0x4a3
				uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800793e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007942:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	b21a      	sxth	r2, r3
 8007950:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007954:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800795e:	b21b      	sxth	r3, r3
 8007960:	4313      	orrs	r3, r2
 8007962:	b21b      	sxth	r3, r3
 8007964:	f8a7 34a0 	strh.w	r3, [r7, #1184]	@ 0x4a0

				uint8_t iou_status = fsp_pkt->payload[37];
 8007968:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800796c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8007976:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
				uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800797a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800797e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	b21a      	sxth	r2, r3
 800798c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007990:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800799a:	b21b      	sxth	r3, r3
 800799c:	4313      	orrs	r3, r2
 800799e:	b21b      	sxth	r3, r3
 80079a0:	f8a7 349c 	strh.w	r3, [r7, #1180]	@ 0x49c

				uint8_t rgb_status = fsp_pkt->payload[40];
 80079a4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80079a8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80079b2:	f887 349b 	strb.w	r3, [r7, #1179]	@ 0x49b
				uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 80079b6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80079ba:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	b21a      	sxth	r2, r3
 80079c8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80079cc:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80079d6:	b21b      	sxth	r3, r3
 80079d8:	4313      	orrs	r3, r2
 80079da:	b21b      	sxth	r3, r3
 80079dc:	e006      	b.n	80079ec <frame_processing_rs422+0x8d8>
 80079de:	bf00      	nop
 80079e0:	20004979 	.word	0x20004979
 80079e4:	08013d8c 	.word	0x08013d8c
 80079e8:	40005000 	.word	0x40005000
 80079ec:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498

				uint8_t ir_status = fsp_pkt->payload[43];
 80079f0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80079f4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079fe:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
				uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 8007a02:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007a06:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	b21a      	sxth	r2, r3
 8007a14:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007a18:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007a22:	b21b      	sxth	r3, r3
 8007a24:	4313      	orrs	r3, r2
 8007a26:	b21b      	sxth	r3, r3
 8007a28:	f8a7 3494 	strh.w	r3, [r7, #1172]	@ 0x494

				uint8_t cm4_status = fsp_pkt->payload[46];
 8007a2c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007a30:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8007a3a:	f887 3493 	strb.w	r3, [r7, #1171]	@ 0x493
				uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 8007a3e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007a42:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	b21a      	sxth	r2, r3
 8007a50:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007a54:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a5e:	b21b      	sxth	r3, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	b21b      	sxth	r3, r3
 8007a64:	f8a7 3490 	strh.w	r3, [r7, #1168]	@ 0x490

				uint8_t vin_status = fsp_pkt->payload[49];
 8007a68:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007a6c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007a76:	f887 348f 	strb.w	r3, [r7, #1167]	@ 0x48f
				uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 8007a7a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007a7e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	b21a      	sxth	r2, r3
 8007a8c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007a90:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	b21b      	sxth	r3, r3
 8007aa0:	f8a7 348c 	strh.w	r3, [r7, #1164]	@ 0x48c

				uint8_t vbus_status = fsp_pkt->payload[52];
 8007aa4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007aa8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007ab2:	f887 348b 	strb.w	r3, [r7, #1163]	@ 0x48b
				uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 8007ab6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007aba:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	b21a      	sxth	r2, r3
 8007ac8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007acc:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007ad6:	b21b      	sxth	r3, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	b21b      	sxth	r3, r3
 8007adc:	f8a7 3488 	strh.w	r3, [r7, #1160]	@ 0x488


						char buffer_0x06[1000];
						sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 8007ae0:	f897 e4cf 	ldrb.w	lr, [r7, #1231]	@ 0x4cf
 8007ae4:	f8b7 84cc 	ldrh.w	r8, [r7, #1228]	@ 0x4cc
 8007ae8:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 8007aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007af0:	f8b7 24c8 	ldrh.w	r2, [r7, #1224]	@ 0x4c8
 8007af4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007af8:	f897 14c7 	ldrb.w	r1, [r7, #1223]	@ 0x4c7
 8007afc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8007b00:	f8b7 04c4 	ldrh.w	r0, [r7, #1220]	@ 0x4c4
 8007b04:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8007b08:	f897 44c3 	ldrb.w	r4, [r7, #1219]	@ 0x4c3
 8007b0c:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8007b10:	f8b7 54c0 	ldrh.w	r5, [r7, #1216]	@ 0x4c0
 8007b14:	f8c7 5084 	str.w	r5, [r7, #132]	@ 0x84
 8007b18:	f897 64bf 	ldrb.w	r6, [r7, #1215]	@ 0x4bf
 8007b1c:	f8c7 6080 	str.w	r6, [r7, #128]	@ 0x80
 8007b20:	f8b7 c4bc 	ldrh.w	ip, [r7, #1212]	@ 0x4bc
 8007b24:	4663      	mov	r3, ip
 8007b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b28:	f897 c4bb 	ldrb.w	ip, [r7, #1211]	@ 0x4bb
 8007b2c:	4662      	mov	r2, ip
 8007b2e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007b30:	f8b7 c4b8 	ldrh.w	ip, [r7, #1208]	@ 0x4b8
 8007b34:	4661      	mov	r1, ip
 8007b36:	6779      	str	r1, [r7, #116]	@ 0x74
 8007b38:	f897 c4b7 	ldrb.w	ip, [r7, #1207]	@ 0x4b7
 8007b3c:	4660      	mov	r0, ip
 8007b3e:	6738      	str	r0, [r7, #112]	@ 0x70
 8007b40:	f8b7 c4b4 	ldrh.w	ip, [r7, #1204]	@ 0x4b4
 8007b44:	4664      	mov	r4, ip
 8007b46:	66fc      	str	r4, [r7, #108]	@ 0x6c
 8007b48:	f897 c4b3 	ldrb.w	ip, [r7, #1203]	@ 0x4b3
 8007b4c:	4665      	mov	r5, ip
 8007b4e:	66bd      	str	r5, [r7, #104]	@ 0x68
 8007b50:	f8b7 c4b0 	ldrh.w	ip, [r7, #1200]	@ 0x4b0
 8007b54:	4666      	mov	r6, ip
 8007b56:	667e      	str	r6, [r7, #100]	@ 0x64
 8007b58:	f897 c4af 	ldrb.w	ip, [r7, #1199]	@ 0x4af
 8007b5c:	4663      	mov	r3, ip
 8007b5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b60:	f8b7 c4ac 	ldrh.w	ip, [r7, #1196]	@ 0x4ac
 8007b64:	4662      	mov	r2, ip
 8007b66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007b68:	f897 c4ab 	ldrb.w	ip, [r7, #1195]	@ 0x4ab
 8007b6c:	4661      	mov	r1, ip
 8007b6e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b70:	f8b7 c4a8 	ldrh.w	ip, [r7, #1192]	@ 0x4a8
 8007b74:	4660      	mov	r0, ip
 8007b76:	6578      	str	r0, [r7, #84]	@ 0x54
 8007b78:	f897 c4a7 	ldrb.w	ip, [r7, #1191]	@ 0x4a7
 8007b7c:	4664      	mov	r4, ip
 8007b7e:	653c      	str	r4, [r7, #80]	@ 0x50
 8007b80:	f8b7 c4a4 	ldrh.w	ip, [r7, #1188]	@ 0x4a4
 8007b84:	4665      	mov	r5, ip
 8007b86:	64fd      	str	r5, [r7, #76]	@ 0x4c
 8007b88:	f897 c4a3 	ldrb.w	ip, [r7, #1187]	@ 0x4a3
 8007b8c:	4666      	mov	r6, ip
 8007b8e:	64be      	str	r6, [r7, #72]	@ 0x48
 8007b90:	f8b7 c4a0 	ldrh.w	ip, [r7, #1184]	@ 0x4a0
 8007b94:	4663      	mov	r3, ip
 8007b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b98:	f897 c49f 	ldrb.w	ip, [r7, #1183]	@ 0x49f
 8007b9c:	4662      	mov	r2, ip
 8007b9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ba0:	f8b7 c49c 	ldrh.w	ip, [r7, #1180]	@ 0x49c
 8007ba4:	4661      	mov	r1, ip
 8007ba6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007ba8:	f897 c49b 	ldrb.w	ip, [r7, #1179]	@ 0x49b
 8007bac:	4660      	mov	r0, ip
 8007bae:	63b8      	str	r0, [r7, #56]	@ 0x38
 8007bb0:	f8b7 c498 	ldrh.w	ip, [r7, #1176]	@ 0x498
 8007bb4:	4664      	mov	r4, ip
 8007bb6:	637c      	str	r4, [r7, #52]	@ 0x34
 8007bb8:	f897 c497 	ldrb.w	ip, [r7, #1175]	@ 0x497
 8007bbc:	4665      	mov	r5, ip
 8007bbe:	633d      	str	r5, [r7, #48]	@ 0x30
 8007bc0:	f8b7 6494 	ldrh.w	r6, [r7, #1172]	@ 0x494
 8007bc4:	f897 5493 	ldrb.w	r5, [r7, #1171]	@ 0x493
 8007bc8:	f8b7 4490 	ldrh.w	r4, [r7, #1168]	@ 0x490
 8007bcc:	f897 048f 	ldrb.w	r0, [r7, #1167]	@ 0x48f
 8007bd0:	f8b7 148c 	ldrh.w	r1, [r7, #1164]	@ 0x48c
 8007bd4:	f897 248b 	ldrb.w	r2, [r7, #1163]	@ 0x48b
 8007bd8:	f8b7 3488 	ldrh.w	r3, [r7, #1160]	@ 0x488
 8007bdc:	f107 0ca0 	add.w	ip, r7, #160	@ 0xa0
 8007be0:	9321      	str	r3, [sp, #132]	@ 0x84
 8007be2:	9220      	str	r2, [sp, #128]	@ 0x80
 8007be4:	911f      	str	r1, [sp, #124]	@ 0x7c
 8007be6:	901e      	str	r0, [sp, #120]	@ 0x78
 8007be8:	941d      	str	r4, [sp, #116]	@ 0x74
 8007bea:	951c      	str	r5, [sp, #112]	@ 0x70
 8007bec:	961b      	str	r6, [sp, #108]	@ 0x6c
 8007bee:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8007bf0:	951a      	str	r5, [sp, #104]	@ 0x68
 8007bf2:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8007bf4:	9419      	str	r4, [sp, #100]	@ 0x64
 8007bf6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bf8:	9018      	str	r0, [sp, #96]	@ 0x60
 8007bfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bfc:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007bfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c00:	9216      	str	r2, [sp, #88]	@ 0x58
 8007c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c04:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c06:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 8007c08:	9614      	str	r6, [sp, #80]	@ 0x50
 8007c0a:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8007c0c:	9513      	str	r5, [sp, #76]	@ 0x4c
 8007c0e:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8007c10:	9412      	str	r4, [sp, #72]	@ 0x48
 8007c12:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007c14:	9011      	str	r0, [sp, #68]	@ 0x44
 8007c16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c18:	9110      	str	r1, [sp, #64]	@ 0x40
 8007c1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007c1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c20:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c22:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 8007c24:	960d      	str	r6, [sp, #52]	@ 0x34
 8007c26:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 8007c28:	950c      	str	r5, [sp, #48]	@ 0x30
 8007c2a:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8007c2c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c2e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8007c30:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c32:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8007c34:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c36:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007c38:	9208      	str	r2, [sp, #32]
 8007c3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c3c:	9307      	str	r3, [sp, #28]
 8007c3e:	f8d7 6080 	ldr.w	r6, [r7, #128]	@ 0x80
 8007c42:	9606      	str	r6, [sp, #24]
 8007c44:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 8007c48:	9505      	str	r5, [sp, #20]
 8007c4a:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 8007c4e:	9404      	str	r4, [sp, #16]
 8007c50:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007c54:	9003      	str	r0, [sp, #12]
 8007c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c5a:	9102      	str	r1, [sp, #8]
 8007c5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c60:	9201      	str	r2, [sp, #4]
 8007c62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4643      	mov	r3, r8
 8007c6a:	4672      	mov	r2, lr
 8007c6c:	49c1      	ldr	r1, [pc, #772]	@ (8007f74 <frame_processing_rs422+0xe60>)
 8007c6e:	4660      	mov	r0, ip
 8007c70:	f006 fd6c 	bl	800e74c <siprintf>
							ir_status, ir_current,
							cm4_status, cm4_current,
							vin_status, vin_voltage,
							vbus_status, vbus_voltage);

						Uart_sendstring(UART5, buffer_0x06);
 8007c74:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8007c78:	4619      	mov	r1, r3
 8007c7a:	48bf      	ldr	r0, [pc, #764]	@ (8007f78 <frame_processing_rs422+0xe64>)
 8007c7c:	f7fa f926 	bl	8001ecc <Uart_sendstring>
			}

					receive_pduFlag = 1;
 8007c80:	4bbe      	ldr	r3, [pc, #760]	@ (8007f7c <frame_processing_rs422+0xe68>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	701a      	strb	r2, [r3, #0]

					for (int i = 1; i <= 54; i++) {
 8007c86:	2301      	movs	r3, #1
 8007c88:	f8c7 3510 	str.w	r3, [r7, #1296]	@ 0x510
 8007c8c:	e013      	b.n	8007cb6 <frame_processing_rs422+0xba2>
					    sourceArray[i + 42] = fsp_pkt->payload[i]; //43   pay1    + 44  pay2        96-<54
 8007c8e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8007c92:	332a      	adds	r3, #42	@ 0x2a
 8007c94:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8007c98:	f2a2 427c 	subw	r2, r2, #1148	@ 0x47c
 8007c9c:	6811      	ldr	r1, [r2, #0]
 8007c9e:	f8d7 2510 	ldr.w	r2, [r7, #1296]	@ 0x510
 8007ca2:	440a      	add	r2, r1
 8007ca4:	3205      	adds	r2, #5
 8007ca6:	7811      	ldrb	r1, [r2, #0]
 8007ca8:	4ab5      	ldr	r2, [pc, #724]	@ (8007f80 <frame_processing_rs422+0xe6c>)
 8007caa:	54d1      	strb	r1, [r2, r3]
					for (int i = 1; i <= 54; i++) {
 8007cac:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c7 3510 	str.w	r3, [r7, #1296]	@ 0x510
 8007cb6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8007cba:	2b36      	cmp	r3, #54	@ 0x36
 8007cbc:	dde7      	ble.n	8007c8e <frame_processing_rs422+0xb7a>
					}
					disconnect_counter_pdu = 0;
 8007cbe:	4bb1      	ldr	r3, [pc, #708]	@ (8007f84 <frame_processing_rs422+0xe70>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007cc4:	f000 bc2e 	b.w	8008524 <frame_processing_rs422+0x1410>


		case 0x13:
		{
			if(!rs422_report_enable){
 8007cc8:	4baf      	ldr	r3, [pc, #700]	@ (8007f88 <frame_processing_rs422+0xe74>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f040 8400 	bne.w	80084d4 <frame_processing_rs422+0x13c0>
			Uart_sendstring(UART5, "\nIOU:\n");
 8007cd4:	49ad      	ldr	r1, [pc, #692]	@ (8007f8c <frame_processing_rs422+0xe78>)
 8007cd6:	48a8      	ldr	r0, [pc, #672]	@ (8007f78 <frame_processing_rs422+0xe64>)
 8007cd8:	f7fa f8f8 	bl	8001ecc <Uart_sendstring>
			int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8007cdc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007ce0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	799b      	ldrb	r3, [r3, #6]
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	b21a      	sxth	r2, r3
 8007cec:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007cf0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	79db      	ldrb	r3, [r3, #7]
 8007cf8:	b21b      	sxth	r3, r3
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8a7 350a 	strh.w	r3, [r7, #1290]	@ 0x50a
			int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8007d00:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d04:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	7a1b      	ldrb	r3, [r3, #8]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	b21a      	sxth	r2, r3
 8007d10:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d14:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	7a5b      	ldrb	r3, [r3, #9]
 8007d1c:	b21b      	sxth	r3, r3
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8a7 3508 	strh.w	r3, [r7, #1288]	@ 0x508
			int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8007d24:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d28:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	7a9b      	ldrb	r3, [r3, #10]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	b21a      	sxth	r2, r3
 8007d34:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d38:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	7adb      	ldrb	r3, [r3, #11]
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8a7 3506 	strh.w	r3, [r7, #1286]	@ 0x506
			int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 8007d48:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d4c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	7b1b      	ldrb	r3, [r3, #12]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	b21a      	sxth	r2, r3
 8007d58:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d5c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	7b5b      	ldrb	r3, [r3, #13]
 8007d64:	b21b      	sxth	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8a7 3504 	strh.w	r3, [r7, #1284]	@ 0x504

			int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8007d6c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d70:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	7b9b      	ldrb	r3, [r3, #14]
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	b21a      	sxth	r2, r3
 8007d7c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d80:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	7bdb      	ldrb	r3, [r3, #15]
 8007d88:	b21b      	sxth	r3, r3
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8a7 3502 	strh.w	r3, [r7, #1282]	@ 0x502
			int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8007d90:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007d94:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	7c1b      	ldrb	r3, [r3, #16]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	b21a      	sxth	r2, r3
 8007da0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007da4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	7c5b      	ldrb	r3, [r3, #17]
 8007dac:	b21b      	sxth	r3, r3
 8007dae:	4313      	orrs	r3, r2
 8007db0:	f8a7 3500 	strh.w	r3, [r7, #1280]	@ 0x500

			int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8007db4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007db8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	7c9b      	ldrb	r3, [r3, #18]
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	b21a      	sxth	r2, r3
 8007dc4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007dc8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	7cdb      	ldrb	r3, [r3, #19]
 8007dd0:	b21b      	sxth	r3, r3
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8a7 34fe 	strh.w	r3, [r7, #1278]	@ 0x4fe

			int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8007dd8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007ddc:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	7d1b      	ldrb	r3, [r3, #20]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	b21a      	sxth	r2, r3
 8007de8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007dec:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	7d5b      	ldrb	r3, [r3, #21]
 8007df4:	b21b      	sxth	r3, r3
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f8a7 34fc 	strh.w	r3, [r7, #1276]	@ 0x4fc
			int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8007dfc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e00:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	7d9b      	ldrb	r3, [r3, #22]
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	b21a      	sxth	r2, r3
 8007e0c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e10:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	7ddb      	ldrb	r3, [r3, #23]
 8007e18:	b21b      	sxth	r3, r3
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8a7 34fa 	strh.w	r3, [r7, #1274]	@ 0x4fa
			int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 8007e20:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e24:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	7e1b      	ldrb	r3, [r3, #24]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	b21a      	sxth	r2, r3
 8007e30:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e34:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	7e5b      	ldrb	r3, [r3, #25]
 8007e3c:	b21b      	sxth	r3, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	f8a7 34f8 	strh.w	r3, [r7, #1272]	@ 0x4f8
			int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8007e44:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e48:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	7e9b      	ldrb	r3, [r3, #26]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	b21a      	sxth	r2, r3
 8007e54:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e58:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	7edb      	ldrb	r3, [r3, #27]
 8007e60:	b21b      	sxth	r3, r3
 8007e62:	4313      	orrs	r3, r2
 8007e64:	f8a7 34f6 	strh.w	r3, [r7, #1270]	@ 0x4f6

			uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 8007e68:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e6c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	7f1b      	ldrb	r3, [r3, #28]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	b21a      	sxth	r2, r3
 8007e78:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e7c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	7f5b      	ldrb	r3, [r3, #29]
 8007e84:	b21b      	sxth	r3, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	b21b      	sxth	r3, r3
 8007e8a:	f8a7 34f4 	strh.w	r3, [r7, #1268]	@ 0x4f4
			uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 8007e8e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007e92:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	7f9b      	ldrb	r3, [r3, #30]
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	b21a      	sxth	r2, r3
 8007e9e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007ea2:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	7fdb      	ldrb	r3, [r3, #31]
 8007eaa:	b21b      	sxth	r3, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b21b      	sxth	r3, r3
 8007eb0:	f8a7 34f2 	strh.w	r3, [r7, #1266]	@ 0x4f2
			uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 8007eb4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007eb8:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	b21a      	sxth	r2, r3
 8007ec6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007eca:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b21b      	sxth	r3, r3
 8007eda:	f8a7 34f0 	strh.w	r3, [r7, #1264]	@ 0x4f0
			uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 8007ede:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007ee2:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	b21a      	sxth	r2, r3
 8007ef0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007ef4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007efe:	b21b      	sxth	r3, r3
 8007f00:	4313      	orrs	r3, r2
 8007f02:	b21b      	sxth	r3, r3
 8007f04:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

			uint8_t neo_led_r = fsp_pkt->payload[31];
 8007f08:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007f0c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f16:	f887 34ed 	strb.w	r3, [r7, #1261]	@ 0x4ed
			uint8_t neo_led_g = fsp_pkt->payload[32];
 8007f1a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007f1e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f28:	f887 34ec 	strb.w	r3, [r7, #1260]	@ 0x4ec
			uint8_t neo_led_b = fsp_pkt->payload[33];
 8007f2c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007f30:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007f3a:	f887 34eb 	strb.w	r3, [r7, #1259]	@ 0x4eb
			uint8_t neo_led_w = fsp_pkt->payload[34];
 8007f3e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007f42:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007f4c:	f887 34ea 	strb.w	r3, [r7, #1258]	@ 0x4ea

			uint8_t ir_led_duty = fsp_pkt->payload[35];
 8007f50:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8007f54:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f5e:	f887 34e9 	strb.w	r3, [r7, #1257]	@ 0x4e9

			char buffer_0x13[1000];
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007f62:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da14      	bge.n	8007f94 <frame_processing_rs422+0xe80>
 8007f6a:	4b09      	ldr	r3, [pc, #36]	@ (8007f90 <frame_processing_rs422+0xe7c>)
 8007f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f70:	e013      	b.n	8007f9a <frame_processing_rs422+0xe86>
 8007f72:	bf00      	nop
 8007f74:	08013d94 	.word	0x08013d94
 8007f78:	40005000 	.word	0x40005000
 8007f7c:	2000003c 	.word	0x2000003c
 8007f80:	2000497c 	.word	0x2000497c
 8007f84:	2000484c 	.word	0x2000484c
 8007f88:	20004979 	.word	0x20004979
 8007f8c:	08013fdc 	.word	0x08013fdc
 8007f90:	08013c94 	.word	0x08013c94
 8007f94:	4bb0      	ldr	r3, [pc, #704]	@ (8008258 <frame_processing_rs422+0x1144>)
 8007f96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			                     "Sensor Temp: %s%d.%d\n"
			                     "Setpoint Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
			                     "TEC Voltage: Ch0=%d.%02d, Ch1=%d.%02d, Ch2=%d.%02d, Ch3=%d.%02d\n"
			                     "Neo LED: R=%u, G=%u, B=%u, W=%u\n"
			                     "IR LED Duty: %u%%]\n",
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 8007f9a:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bfb8      	it	lt
 8007fa2:	425b      	neglt	r3, r3
 8007fa4:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007fa6:	4aad      	ldr	r2, [pc, #692]	@ (800825c <frame_processing_rs422+0x1148>)
 8007fa8:	fb82 1203 	smull	r1, r2, r2, r3
 8007fac:	1092      	asrs	r2, r2, #2
 8007fae:	17db      	asrs	r3, r3, #31
 8007fb0:	eba2 0e03 	sub.w	lr, r2, r3
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 8007fb4:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bfb8      	it	lt
 8007fbc:	425b      	neglt	r3, r3
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007fc2:	4ba6      	ldr	r3, [pc, #664]	@ (800825c <frame_processing_rs422+0x1148>)
 8007fc4:	fb83 1302 	smull	r1, r3, r3, r2
 8007fc8:	1099      	asrs	r1, r3, #2
 8007fca:	17d3      	asrs	r3, r2, #31
 8007fcc:	1acb      	subs	r3, r1, r3
 8007fce:	4619      	mov	r1, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	440b      	add	r3, r1
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fdc:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	da03      	bge.n	8007fec <frame_processing_rs422+0xed8>
 8007fe4:	4b9e      	ldr	r3, [pc, #632]	@ (8008260 <frame_processing_rs422+0x114c>)
 8007fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fea:	e002      	b.n	8007ff2 <frame_processing_rs422+0xede>
 8007fec:	4b9a      	ldr	r3, [pc, #616]	@ (8008258 <frame_processing_rs422+0x1144>)
 8007fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8007ff2:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bfb8      	it	lt
 8007ffa:	425b      	neglt	r3, r3
 8007ffc:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007ffe:	4a97      	ldr	r2, [pc, #604]	@ (800825c <frame_processing_rs422+0x1148>)
 8008000:	fb82 1203 	smull	r1, r2, r2, r3
 8008004:	1092      	asrs	r2, r2, #2
 8008006:	17db      	asrs	r3, r3, #31
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	66bb      	str	r3, [r7, #104]	@ 0x68
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800800c:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 8008010:	2b00      	cmp	r3, #0
 8008012:	bfb8      	it	lt
 8008014:	425b      	neglt	r3, r3
 8008016:	b29b      	uxth	r3, r3
 8008018:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800801a:	4b90      	ldr	r3, [pc, #576]	@ (800825c <frame_processing_rs422+0x1148>)
 800801c:	fb83 1302 	smull	r1, r3, r3, r2
 8008020:	1099      	asrs	r1, r3, #2
 8008022:	17d3      	asrs	r3, r2, #31
 8008024:	1acb      	subs	r3, r1, r3
 8008026:	4619      	mov	r1, r3
 8008028:	460b      	mov	r3, r1
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	440b      	add	r3, r1
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	667b      	str	r3, [r7, #100]	@ 0x64
 8008034:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 8008038:	2b00      	cmp	r3, #0
 800803a:	da03      	bge.n	8008044 <frame_processing_rs422+0xf30>
 800803c:	4b88      	ldr	r3, [pc, #544]	@ (8008260 <frame_processing_rs422+0x114c>)
 800803e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008042:	e002      	b.n	800804a <frame_processing_rs422+0xf36>
 8008044:	4b84      	ldr	r3, [pc, #528]	@ (8008258 <frame_processing_rs422+0x1144>)
 8008046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800804a:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 800804e:	2b00      	cmp	r3, #0
 8008050:	bfb8      	it	lt
 8008052:	425b      	neglt	r3, r3
 8008054:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008056:	4a81      	ldr	r2, [pc, #516]	@ (800825c <frame_processing_rs422+0x1148>)
 8008058:	fb82 1203 	smull	r1, r2, r2, r3
 800805c:	1092      	asrs	r2, r2, #2
 800805e:	17db      	asrs	r3, r3, #31
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	663b      	str	r3, [r7, #96]	@ 0x60
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 8008064:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfb8      	it	lt
 800806c:	425b      	neglt	r3, r3
 800806e:	b29b      	uxth	r3, r3
 8008070:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008072:	4b7a      	ldr	r3, [pc, #488]	@ (800825c <frame_processing_rs422+0x1148>)
 8008074:	fb83 1302 	smull	r1, r3, r3, r2
 8008078:	1099      	asrs	r1, r3, #2
 800807a:	17d3      	asrs	r3, r2, #31
 800807c:	1acb      	subs	r3, r1, r3
 800807e:	4619      	mov	r1, r3
 8008080:	460b      	mov	r3, r1
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	440b      	add	r3, r1
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800808c:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 8008090:	2b00      	cmp	r3, #0
 8008092:	da03      	bge.n	800809c <frame_processing_rs422+0xf88>
 8008094:	4b72      	ldr	r3, [pc, #456]	@ (8008260 <frame_processing_rs422+0x114c>)
 8008096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800809a:	e002      	b.n	80080a2 <frame_processing_rs422+0xf8e>
 800809c:	4b6e      	ldr	r3, [pc, #440]	@ (8008258 <frame_processing_rs422+0x1144>)
 800809e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 80080a2:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bfb8      	it	lt
 80080aa:	425b      	neglt	r3, r3
 80080ac:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80080ae:	4a6b      	ldr	r2, [pc, #428]	@ (800825c <frame_processing_rs422+0x1148>)
 80080b0:	fb82 1203 	smull	r1, r2, r2, r3
 80080b4:	1092      	asrs	r2, r2, #2
 80080b6:	17db      	asrs	r3, r3, #31
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	65bb      	str	r3, [r7, #88]	@ 0x58
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 80080bc:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bfb8      	it	lt
 80080c4:	425b      	neglt	r3, r3
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80080ca:	4b64      	ldr	r3, [pc, #400]	@ (800825c <frame_processing_rs422+0x1148>)
 80080cc:	fb83 2301 	smull	r2, r3, r3, r1
 80080d0:	109a      	asrs	r2, r3, #2
 80080d2:	17cb      	asrs	r3, r1, #31
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	1acb      	subs	r3, r1, r3
 80080e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80080e4:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da03      	bge.n	80080f4 <frame_processing_rs422+0xfe0>
 80080ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008260 <frame_processing_rs422+0x114c>)
 80080ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080f2:	e002      	b.n	80080fa <frame_processing_rs422+0xfe6>
 80080f4:	4b58      	ldr	r3, [pc, #352]	@ (8008258 <frame_processing_rs422+0x1144>)
 80080f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 80080fa:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bfb8      	it	lt
 8008102:	425b      	neglt	r3, r3
 8008104:	b29b      	uxth	r3, r3
 8008106:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008108:	4b54      	ldr	r3, [pc, #336]	@ (800825c <frame_processing_rs422+0x1148>)
 800810a:	fb83 2301 	smull	r2, r3, r3, r1
 800810e:	109a      	asrs	r2, r3, #2
 8008110:	17cb      	asrs	r3, r1, #31
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	653b      	str	r3, [r7, #80]	@ 0x50
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 8008116:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 800811a:	2b00      	cmp	r3, #0
 800811c:	bfb8      	it	lt
 800811e:	425b      	neglt	r3, r3
 8008120:	b29b      	uxth	r3, r3
 8008122:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008124:	4b4d      	ldr	r3, [pc, #308]	@ (800825c <frame_processing_rs422+0x1148>)
 8008126:	fb83 2301 	smull	r2, r3, r3, r1
 800812a:	109a      	asrs	r2, r3, #2
 800812c:	17cb      	asrs	r3, r1, #31
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	461a      	mov	r2, r3
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	1acb      	subs	r3, r1, r3
 800813c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800813e:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8008142:	2b00      	cmp	r3, #0
 8008144:	da03      	bge.n	800814e <frame_processing_rs422+0x103a>
 8008146:	4b46      	ldr	r3, [pc, #280]	@ (8008260 <frame_processing_rs422+0x114c>)
 8008148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800814c:	e002      	b.n	8008154 <frame_processing_rs422+0x1040>
 800814e:	4b42      	ldr	r3, [pc, #264]	@ (8008258 <frame_processing_rs422+0x1144>)
 8008150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8008154:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8008158:	2b00      	cmp	r3, #0
 800815a:	bfb8      	it	lt
 800815c:	425b      	neglt	r3, r3
 800815e:	b29b      	uxth	r3, r3
 8008160:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008162:	4b3e      	ldr	r3, [pc, #248]	@ (800825c <frame_processing_rs422+0x1148>)
 8008164:	fb83 2301 	smull	r2, r3, r3, r1
 8008168:	109a      	asrs	r2, r3, #2
 800816a:	17cb      	asrs	r3, r1, #31
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	64bb      	str	r3, [r7, #72]	@ 0x48
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8008170:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8008174:	2b00      	cmp	r3, #0
 8008176:	bfb8      	it	lt
 8008178:	425b      	neglt	r3, r3
 800817a:	b29b      	uxth	r3, r3
 800817c:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800817e:	4b37      	ldr	r3, [pc, #220]	@ (800825c <frame_processing_rs422+0x1148>)
 8008180:	fb83 2301 	smull	r2, r3, r3, r1
 8008184:	109a      	asrs	r2, r3, #2
 8008186:	17cb      	asrs	r3, r1, #31
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	461a      	mov	r2, r3
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	1acb      	subs	r3, r1, r3
 8008196:	647b      	str	r3, [r7, #68]	@ 0x44
 8008198:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 800819c:	2b00      	cmp	r3, #0
 800819e:	da03      	bge.n	80081a8 <frame_processing_rs422+0x1094>
 80081a0:	4b2f      	ldr	r3, [pc, #188]	@ (8008260 <frame_processing_rs422+0x114c>)
 80081a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081a6:	e002      	b.n	80081ae <frame_processing_rs422+0x109a>
 80081a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008258 <frame_processing_rs422+0x1144>)
 80081aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 80081ae:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bfb8      	it	lt
 80081b6:	425b      	neglt	r3, r3
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80081bc:	4b27      	ldr	r3, [pc, #156]	@ (800825c <frame_processing_rs422+0x1148>)
 80081be:	fb83 2301 	smull	r2, r3, r3, r1
 80081c2:	109a      	asrs	r2, r3, #2
 80081c4:	17cb      	asrs	r3, r1, #31
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	643b      	str	r3, [r7, #64]	@ 0x40
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 80081ca:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bfb8      	it	lt
 80081d2:	425b      	neglt	r3, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80081d8:	4b20      	ldr	r3, [pc, #128]	@ (800825c <frame_processing_rs422+0x1148>)
 80081da:	fb83 2301 	smull	r2, r3, r3, r1
 80081de:	109a      	asrs	r2, r3, #2
 80081e0:	17cb      	asrs	r3, r1, #31
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	1acb      	subs	r3, r1, r3
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f2:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	da02      	bge.n	8008200 <frame_processing_rs422+0x10ec>
 80081fa:	4b19      	ldr	r3, [pc, #100]	@ (8008260 <frame_processing_rs422+0x114c>)
 80081fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081fe:	e001      	b.n	8008204 <frame_processing_rs422+0x10f0>
 8008200:	4b15      	ldr	r3, [pc, #84]	@ (8008258 <frame_processing_rs422+0x1144>)
 8008202:	67fb      	str	r3, [r7, #124]	@ 0x7c
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 8008204:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 8008208:	2b00      	cmp	r3, #0
 800820a:	bfb8      	it	lt
 800820c:	425b      	neglt	r3, r3
 800820e:	b29b      	uxth	r3, r3
 8008210:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <frame_processing_rs422+0x1148>)
 8008214:	fb83 2301 	smull	r2, r3, r3, r1
 8008218:	109a      	asrs	r2, r3, #2
 800821a:	17cb      	asrs	r3, r1, #31
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	63bb      	str	r3, [r7, #56]	@ 0x38
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 8008220:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfb8      	it	lt
 8008228:	425b      	neglt	r3, r3
 800822a:	b29b      	uxth	r3, r3
 800822c:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800822e:	4b0b      	ldr	r3, [pc, #44]	@ (800825c <frame_processing_rs422+0x1148>)
 8008230:	fb83 2301 	smull	r2, r3, r3, r1
 8008234:	109a      	asrs	r2, r3, #2
 8008236:	17cb      	asrs	r3, r1, #31
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	461a      	mov	r2, r3
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	1acb      	subs	r3, r1, r3
 8008246:	637b      	str	r3, [r7, #52]	@ 0x34
 8008248:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 800824c:	2b00      	cmp	r3, #0
 800824e:	da09      	bge.n	8008264 <frame_processing_rs422+0x1150>
 8008250:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <frame_processing_rs422+0x114c>)
 8008252:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008254:	e008      	b.n	8008268 <frame_processing_rs422+0x1154>
 8008256:	bf00      	nop
 8008258:	08013c98 	.word	0x08013c98
 800825c:	66666667 	.word	0x66666667
 8008260:	08013c94 	.word	0x08013c94
 8008264:	4bb2      	ldr	r3, [pc, #712]	@ (8008530 <frame_processing_rs422+0x141c>)
 8008266:	67bb      	str	r3, [r7, #120]	@ 0x78
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 8008268:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 800826c:	2b00      	cmp	r3, #0
 800826e:	bfb8      	it	lt
 8008270:	425b      	neglt	r3, r3
 8008272:	b29b      	uxth	r3, r3
 8008274:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008276:	4baf      	ldr	r3, [pc, #700]	@ (8008534 <frame_processing_rs422+0x1420>)
 8008278:	fb83 2301 	smull	r2, r3, r3, r1
 800827c:	109a      	asrs	r2, r3, #2
 800827e:	17cb      	asrs	r3, r1, #31
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	633b      	str	r3, [r7, #48]	@ 0x30
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 8008284:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfb8      	it	lt
 800828c:	425b      	neglt	r3, r3
 800828e:	b29b      	uxth	r3, r3
 8008290:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008292:	4ba8      	ldr	r3, [pc, #672]	@ (8008534 <frame_processing_rs422+0x1420>)
 8008294:	fb83 2301 	smull	r2, r3, r3, r1
 8008298:	109a      	asrs	r2, r3, #2
 800829a:	17cb      	asrs	r3, r1, #31
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	1acb      	subs	r3, r1, r3
 80082aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082ac:	f9b7 34f8 	ldrsh.w	r3, [r7, #1272]	@ 0x4f8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da02      	bge.n	80082ba <frame_processing_rs422+0x11a6>
 80082b4:	4ba0      	ldr	r3, [pc, #640]	@ (8008538 <frame_processing_rs422+0x1424>)
 80082b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80082b8:	e001      	b.n	80082be <frame_processing_rs422+0x11aa>
 80082ba:	4b9d      	ldr	r3, [pc, #628]	@ (8008530 <frame_processing_rs422+0x141c>)
 80082bc:	677b      	str	r3, [r7, #116]	@ 0x74
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 80082be:	f9b7 34f8 	ldrsh.w	r3, [r7, #1272]	@ 0x4f8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfb8      	it	lt
 80082c6:	425b      	neglt	r3, r3
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80082cc:	4b99      	ldr	r3, [pc, #612]	@ (8008534 <frame_processing_rs422+0x1420>)
 80082ce:	fb83 2301 	smull	r2, r3, r3, r1
 80082d2:	109a      	asrs	r2, r3, #2
 80082d4:	17cb      	asrs	r3, r1, #31
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	62bb      	str	r3, [r7, #40]	@ 0x28
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 80082da:	f9b7 34f8 	ldrsh.w	r3, [r7, #1272]	@ 0x4f8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfb8      	it	lt
 80082e2:	425b      	neglt	r3, r3
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80082e8:	4b92      	ldr	r3, [pc, #584]	@ (8008534 <frame_processing_rs422+0x1420>)
 80082ea:	fb83 2301 	smull	r2, r3, r3, r1
 80082ee:	109a      	asrs	r2, r3, #2
 80082f0:	17cb      	asrs	r3, r1, #31
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	1acb      	subs	r3, r1, r3
 8008300:	627b      	str	r3, [r7, #36]	@ 0x24
 8008302:	f9b7 34f6 	ldrsh.w	r3, [r7, #1270]	@ 0x4f6
 8008306:	2b00      	cmp	r3, #0
 8008308:	da02      	bge.n	8008310 <frame_processing_rs422+0x11fc>
 800830a:	4b8b      	ldr	r3, [pc, #556]	@ (8008538 <frame_processing_rs422+0x1424>)
 800830c:	673b      	str	r3, [r7, #112]	@ 0x70
 800830e:	e001      	b.n	8008314 <frame_processing_rs422+0x1200>
 8008310:	4b87      	ldr	r3, [pc, #540]	@ (8008530 <frame_processing_rs422+0x141c>)
 8008312:	673b      	str	r3, [r7, #112]	@ 0x70
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8008314:	f9b7 34f6 	ldrsh.w	r3, [r7, #1270]	@ 0x4f6
 8008318:	2b00      	cmp	r3, #0
 800831a:	bfb8      	it	lt
 800831c:	425b      	neglt	r3, r3
 800831e:	b29b      	uxth	r3, r3
 8008320:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008322:	4b84      	ldr	r3, [pc, #528]	@ (8008534 <frame_processing_rs422+0x1420>)
 8008324:	fb83 2301 	smull	r2, r3, r3, r1
 8008328:	109a      	asrs	r2, r3, #2
 800832a:	17cb      	asrs	r3, r1, #31
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	623b      	str	r3, [r7, #32]
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8008330:	f9b7 34f6 	ldrsh.w	r3, [r7, #1270]	@ 0x4f6
 8008334:	2b00      	cmp	r3, #0
 8008336:	bfb8      	it	lt
 8008338:	425b      	neglt	r3, r3
 800833a:	b29b      	uxth	r3, r3
 800833c:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800833e:	4b7d      	ldr	r3, [pc, #500]	@ (8008534 <frame_processing_rs422+0x1420>)
 8008340:	fb83 2301 	smull	r2, r3, r3, r1
 8008344:	109a      	asrs	r2, r3, #2
 8008346:	17cb      	asrs	r3, r1, #31
 8008348:	1ad6      	subs	r6, r2, r3
 800834a:	4633      	mov	r3, r6
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4433      	add	r3, r6
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	1ace      	subs	r6, r1, r3
 8008354:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	@ 0x4f4
 8008358:	4b78      	ldr	r3, [pc, #480]	@ (800853c <frame_processing_rs422+0x1428>)
 800835a:	fba3 2302 	umull	r2, r3, r3, r2
 800835e:	095b      	lsrs	r3, r3, #5
 8008360:	b29b      	uxth	r3, r3
 8008362:	61fb      	str	r3, [r7, #28]
 8008364:	f8b7 14f4 	ldrh.w	r1, [r7, #1268]	@ 0x4f4
 8008368:	4b74      	ldr	r3, [pc, #464]	@ (800853c <frame_processing_rs422+0x1428>)
 800836a:	fba3 2301 	umull	r2, r3, r3, r1
 800836e:	095a      	lsrs	r2, r3, #5
 8008370:	2364      	movs	r3, #100	@ 0x64
 8008372:	fb02 f303 	mul.w	r3, r2, r3
 8008376:	1acb      	subs	r3, r1, r3
 8008378:	b29b      	uxth	r3, r3
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	f8b7 24f2 	ldrh.w	r2, [r7, #1266]	@ 0x4f2
 8008380:	4b6e      	ldr	r3, [pc, #440]	@ (800853c <frame_processing_rs422+0x1428>)
 8008382:	fba3 2302 	umull	r2, r3, r3, r2
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	b29b      	uxth	r3, r3
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	f8b7 14f2 	ldrh.w	r1, [r7, #1266]	@ 0x4f2
 8008390:	4b6a      	ldr	r3, [pc, #424]	@ (800853c <frame_processing_rs422+0x1428>)
 8008392:	fba3 2301 	umull	r2, r3, r3, r1
 8008396:	095a      	lsrs	r2, r3, #5
 8008398:	2364      	movs	r3, #100	@ 0x64
 800839a:	fb02 f303 	mul.w	r3, r2, r3
 800839e:	1acb      	subs	r3, r1, r3
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	f8b7 24f0 	ldrh.w	r2, [r7, #1264]	@ 0x4f0
 80083a8:	4b64      	ldr	r3, [pc, #400]	@ (800853c <frame_processing_rs422+0x1428>)
 80083aa:	fba3 2302 	umull	r2, r3, r3, r2
 80083ae:	095b      	lsrs	r3, r3, #5
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	f8b7 14f0 	ldrh.w	r1, [r7, #1264]	@ 0x4f0
 80083b8:	4b60      	ldr	r3, [pc, #384]	@ (800853c <frame_processing_rs422+0x1428>)
 80083ba:	fba3 2301 	umull	r2, r3, r3, r1
 80083be:	095a      	lsrs	r2, r3, #5
 80083c0:	2364      	movs	r3, #100	@ 0x64
 80083c2:	fb02 f303 	mul.w	r3, r2, r3
 80083c6:	1acb      	subs	r3, r1, r3
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	60bb      	str	r3, [r7, #8]
 80083cc:	f8b7 24ee 	ldrh.w	r2, [r7, #1262]	@ 0x4ee
 80083d0:	4b5a      	ldr	r3, [pc, #360]	@ (800853c <frame_processing_rs422+0x1428>)
 80083d2:	fba3 2302 	umull	r2, r3, r3, r2
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	b29b      	uxth	r3, r3
 80083da:	607b      	str	r3, [r7, #4]
 80083dc:	f8b7 14ee 	ldrh.w	r1, [r7, #1262]	@ 0x4ee
 80083e0:	4b56      	ldr	r3, [pc, #344]	@ (800853c <frame_processing_rs422+0x1428>)
 80083e2:	fba3 2301 	umull	r2, r3, r3, r1
 80083e6:	095a      	lsrs	r2, r3, #5
 80083e8:	2364      	movs	r3, #100	@ 0x64
 80083ea:	fb02 f303 	mul.w	r3, r2, r3
 80083ee:	1acb      	subs	r3, r1, r3
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	461d      	mov	r5, r3
 80083f4:	f897 44ed 	ldrb.w	r4, [r7, #1261]	@ 0x4ed
 80083f8:	f897 04ec 	ldrb.w	r0, [r7, #1260]	@ 0x4ec
 80083fc:	f897 14eb 	ldrb.w	r1, [r7, #1259]	@ 0x4eb
 8008400:	f897 24ea 	ldrb.w	r2, [r7, #1258]	@ 0x4ea
 8008404:	f897 34e9 	ldrb.w	r3, [r7, #1257]	@ 0x4e9
 8008408:	f107 0ca0 	add.w	ip, r7, #160	@ 0xa0
 800840c:	932b      	str	r3, [sp, #172]	@ 0xac
 800840e:	922a      	str	r2, [sp, #168]	@ 0xa8
 8008410:	9129      	str	r1, [sp, #164]	@ 0xa4
 8008412:	9028      	str	r0, [sp, #160]	@ 0xa0
 8008414:	9427      	str	r4, [sp, #156]	@ 0x9c
 8008416:	9526      	str	r5, [sp, #152]	@ 0x98
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	9225      	str	r2, [sp, #148]	@ 0x94
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	9224      	str	r2, [sp, #144]	@ 0x90
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	9222      	str	r2, [sp, #136]	@ 0x88
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	9221      	str	r2, [sp, #132]	@ 0x84
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	9220      	str	r2, [sp, #128]	@ 0x80
 8008430:	69fa      	ldr	r2, [r7, #28]
 8008432:	921f      	str	r2, [sp, #124]	@ 0x7c
 8008434:	961e      	str	r6, [sp, #120]	@ 0x78
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	931d      	str	r3, [sp, #116]	@ 0x74
 800843a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800843c:	931c      	str	r3, [sp, #112]	@ 0x70
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008444:	931a      	str	r3, [sp, #104]	@ 0x68
 8008446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008448:	9319      	str	r3, [sp, #100]	@ 0x64
 800844a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844c:	9318      	str	r3, [sp, #96]	@ 0x60
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008452:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008454:	9316      	str	r3, [sp, #88]	@ 0x58
 8008456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008458:	9315      	str	r3, [sp, #84]	@ 0x54
 800845a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845c:	9314      	str	r3, [sp, #80]	@ 0x50
 800845e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008464:	9312      	str	r3, [sp, #72]	@ 0x48
 8008466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008468:	9311      	str	r3, [sp, #68]	@ 0x44
 800846a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800846e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008472:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008476:	930e      	str	r3, [sp, #56]	@ 0x38
 8008478:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800847c:	930d      	str	r3, [sp, #52]	@ 0x34
 800847e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008480:	930c      	str	r3, [sp, #48]	@ 0x30
 8008482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008486:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800848a:	930a      	str	r3, [sp, #40]	@ 0x28
 800848c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800848e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008490:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008492:	9308      	str	r3, [sp, #32]
 8008494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008498:	9307      	str	r3, [sp, #28]
 800849a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800849c:	9306      	str	r3, [sp, #24]
 800849e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084a0:	9305      	str	r3, [sp, #20]
 80084a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	4673      	mov	r3, lr
 80084bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80084c0:	491f      	ldr	r1, [pc, #124]	@ (8008540 <frame_processing_rs422+0x142c>)
 80084c2:	4660      	mov	r0, ip
 80084c4:	f006 f942 	bl	800e74c <siprintf>
			        voltage_out_tec_channel2 / 100, voltage_out_tec_channel2 % 100,
			        voltage_out_tec_channel3 / 100, voltage_out_tec_channel3 % 100,
			        neo_led_r, neo_led_g, neo_led_b, neo_led_w,
			        ir_led_duty);

			Uart_sendstring(UART5, buffer_0x13);
 80084c8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80084cc:	4619      	mov	r1, r3
 80084ce:	481d      	ldr	r0, [pc, #116]	@ (8008544 <frame_processing_rs422+0x1430>)
 80084d0:	f7f9 fcfc 	bl	8001ecc <Uart_sendstring>
			}
			receive_iouFlag = 1;
 80084d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008548 <frame_processing_rs422+0x1434>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	701a      	strb	r2, [r3, #0]


			for (int i = 1; i <= 35; i++) {
 80084da:	2301      	movs	r3, #1
 80084dc:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 80084e0:	e013      	b.n	800850a <frame_processing_rs422+0x13f6>
					    sourceArray[i + 7] = fsp_pkt->payload[i]; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 80084e2:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 80084e6:	3307      	adds	r3, #7
 80084e8:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 80084ec:	f2a2 427c 	subw	r2, r2, #1148	@ 0x47c
 80084f0:	6811      	ldr	r1, [r2, #0]
 80084f2:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 80084f6:	440a      	add	r2, r1
 80084f8:	3205      	adds	r2, #5
 80084fa:	7811      	ldrb	r1, [r2, #0]
 80084fc:	4a13      	ldr	r2, [pc, #76]	@ (800854c <frame_processing_rs422+0x1438>)
 80084fe:	54d1      	strb	r1, [r2, r3]
			for (int i = 1; i <= 35; i++) {
 8008500:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8008504:	3301      	adds	r3, #1
 8008506:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 800850a:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 800850e:	2b23      	cmp	r3, #35	@ 0x23
 8008510:	dde7      	ble.n	80084e2 <frame_processing_rs422+0x13ce>
			}

			disconnect_counter_iou = 0;
 8008512:	4b0f      	ldr	r3, [pc, #60]	@ (8008550 <frame_processing_rs422+0x143c>)
 8008514:	2200      	movs	r2, #0
 8008516:	701a      	strb	r2, [r3, #0]

		}
		break;
 8008518:	e004      	b.n	8008524 <frame_processing_rs422+0x1410>


		default:
			Uart_sendstring(USART6, "Failed to get all");
 800851a:	490e      	ldr	r1, [pc, #56]	@ (8008554 <frame_processing_rs422+0x1440>)
 800851c:	480e      	ldr	r0, [pc, #56]	@ (8008558 <frame_processing_rs422+0x1444>)
 800851e:	f7f9 fcd5 	bl	8001ecc <Uart_sendstring>
			break;
 8008522:	bf00      	nop
	}

}
 8008524:	bf00      	nop
 8008526:	f507 67a3 	add.w	r7, r7, #1304	@ 0x518
 800852a:	46bd      	mov	sp, r7
 800852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008530:	08013c98 	.word	0x08013c98
 8008534:	66666667 	.word	0x66666667
 8008538:	08013c94 	.word	0x08013c94
 800853c:	51eb851f 	.word	0x51eb851f
 8008540:	08013fe4 	.word	0x08013fe4
 8008544:	40005000 	.word	0x40005000
 8008548:	2000003e 	.word	0x2000003e
 800854c:	2000497c 	.word	0x2000497c
 8008550:	2000484b 	.word	0x2000484b
 8008554:	0801412c 	.word	0x0801412c
 8008558:	40011400 	.word	0x40011400

0800855c <rs422_create_task>:

void	rs422_create_task(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&RS422_task_context.taskHandle, &RS422_task_context.taskProperty);
 8008560:	4903      	ldr	r1, [pc, #12]	@ (8008570 <rs422_create_task+0x14>)
 8008562:	4804      	ldr	r0, [pc, #16]	@ (8008574 <rs422_create_task+0x18>)
 8008564:	f002 f9b0 	bl	800a8c8 <SCH_TASK_CreateTask>
	Ringbuf_init();
 8008568:	f7f9 fa48 	bl	80019fc <Ringbuf_init>
}
 800856c:	bf00      	nop
 800856e:	bd80      	pop	{r7, pc}
 8008570:	200003a8 	.word	0x200003a8
 8008574:	200003a4 	.word	0x200003a4

08008578 <COPC_init>:
		COPC_task_update                // taskFunction;
	}
};

void	COPC_init(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
	Ringbuf_init();
 800857c:	f7f9 fa3e 	bl	80019fc <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 8008580:	2001      	movs	r0, #1
 8008582:	f002 fb0f 	bl	800aba4 <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 8008586:	4b02      	ldr	r3, [pc, #8]	@ (8008590 <COPC_init+0x18>)
 8008588:	4a02      	ldr	r2, [pc, #8]	@ (8008594 <COPC_init+0x1c>)
 800858a:	601a      	str	r2, [r3, #0]
}
 800858c:	bf00      	nop
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20005250 	.word	0x20005250
 8008594:	20005155 	.word	0x20005155

08008598 <COPC_task_update>:
volatile uint8_t receiving = 0;
volatile uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
volatile uint8_t receive_index = 0;

static void COPC_task_update(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b0d0      	sub	sp, #320	@ 0x140
 800859c:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 800859e:	e074      	b.n	800868a <COPC_task_update+0xf2>
    {
        rxData = Uart_read(USART1);
 80085a0:	4840      	ldr	r0, [pc, #256]	@ (80086a4 <COPC_task_update+0x10c>)
 80085a2:	f7f9 fae9 	bl	8001b78 <Uart_read>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

//		char pos_str2[10];
//		sprintf(pos_str2, "%d", rxData);
//		Uart_sendstring(UART5, pos_str2);

        if (!receiving) {
 80085ac:	4b3e      	ldr	r3, [pc, #248]	@ (80086a8 <COPC_task_update+0x110>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <COPC_task_update+0x34>
            if (rxData == FSP_PKT_SOD) {
 80085b6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80085ba:	2bca      	cmp	r3, #202	@ 0xca
 80085bc:	d165      	bne.n	800868a <COPC_task_update+0xf2>
                receiving = 1;
 80085be:	4b3a      	ldr	r3, [pc, #232]	@ (80086a8 <COPC_task_update+0x110>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
                receive_index = 0;
 80085c4:	4b39      	ldr	r3, [pc, #228]	@ (80086ac <COPC_task_update+0x114>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	e05e      	b.n	800868a <COPC_task_update+0xf2>
            }
        } else {

            if (rxData == FSP_PKT_EOF) {
 80085cc:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80085d0:	2bef      	cmp	r3, #239	@ 0xef
 80085d2:	d146      	bne.n	8008662 <COPC_task_update+0xca>
                receiving = 0;
 80085d4:	4b34      	ldr	r3, [pc, #208]	@ (80086a8 <COPC_task_update+0x110>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]
                fsp_packet_t fsp_pkt;
                if(send_rs422){
 80085da:	4b35      	ldr	r3, [pc, #212]	@ (80086b0 <COPC_task_update+0x118>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01a      	beq.n	800861a <COPC_task_update+0x82>
					frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80085e4:	4b31      	ldr	r3, [pc, #196]	@ (80086ac <COPC_task_update+0x114>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80085ee:	4619      	mov	r1, r3
 80085f0:	4830      	ldr	r0, [pc, #192]	@ (80086b4 <COPC_task_update+0x11c>)
 80085f2:	f002 ff01 	bl	800b3f8 <frame_decode_rs422>
					frame_processing_rs422(&fsp_pkt);
 80085f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fd8a 	bl	8007114 <frame_processing_rs422>
					receive_pduFlag = 1;
 8008600:	4b2d      	ldr	r3, [pc, #180]	@ (80086b8 <COPC_task_update+0x120>)
 8008602:	2201      	movs	r2, #1
 8008604:	701a      	strb	r2, [r3, #0]
					receive_pmuFlag = 1;
 8008606:	4b2d      	ldr	r3, [pc, #180]	@ (80086bc <COPC_task_update+0x124>)
 8008608:	2201      	movs	r2, #1
 800860a:	701a      	strb	r2, [r3, #0]
					receive_iouFlag = 1;
 800860c:	4b2c      	ldr	r3, [pc, #176]	@ (80086c0 <COPC_task_update+0x128>)
 800860e:	2201      	movs	r2, #1
 8008610:	701a      	strb	r2, [r3, #0]
					send_rs422 = 0;
 8008612:	4b27      	ldr	r3, [pc, #156]	@ (80086b0 <COPC_task_update+0x118>)
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	e02f      	b.n	800867a <COPC_task_update+0xe2>
                }else{
                    int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 800861a:	4b24      	ldr	r3, [pc, #144]	@ (80086ac <COPC_task_update+0x114>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8008624:	4619      	mov	r1, r3
 8008626:	4823      	ldr	r0, [pc, #140]	@ (80086b4 <COPC_task_update+0x11c>)
 8008628:	f002 fd84 	bl	800b134 <frame_decode>
 800862c:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                    if (ret > 0) {
 8008630:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008634:	2b00      	cmp	r3, #0
 8008636:	dd20      	ble.n	800867a <COPC_task_update+0xe2>
                        char error_msg[50];
                        sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 8008638:	4a22      	ldr	r2, [pc, #136]	@ (80086c4 <COPC_task_update+0x12c>)
 800863a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800863e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008642:	1d3b      	adds	r3, r7, #4
 8008644:	4920      	ldr	r1, [pc, #128]	@ (80086c8 <COPC_task_update+0x130>)
 8008646:	4618      	mov	r0, r3
 8008648:	f006 f880 	bl	800e74c <siprintf>
                        Uart_sendstring(UART5, error_msg);
 800864c:	1d3b      	adds	r3, r7, #4
 800864e:	4619      	mov	r1, r3
 8008650:	481e      	ldr	r0, [pc, #120]	@ (80086cc <COPC_task_update+0x134>)
 8008652:	f7f9 fc3b 	bl	8001ecc <Uart_sendstring>
                        Uart_sendstring(USART6, error_msg);
 8008656:	1d3b      	adds	r3, r7, #4
 8008658:	4619      	mov	r1, r3
 800865a:	481d      	ldr	r0, [pc, #116]	@ (80086d0 <COPC_task_update+0x138>)
 800865c:	f7f9 fc36 	bl	8001ecc <Uart_sendstring>
 8008660:	e00b      	b.n	800867a <COPC_task_update+0xe2>
                }



            }else{
            	receive_buffer[receive_index++] = rxData;
 8008662:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <COPC_task_update+0x114>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	b2d1      	uxtb	r1, r2
 800866c:	4a0f      	ldr	r2, [pc, #60]	@ (80086ac <COPC_task_update+0x114>)
 800866e:	7011      	strb	r1, [r2, #0]
 8008670:	4619      	mov	r1, r3
 8008672:	4a10      	ldr	r2, [pc, #64]	@ (80086b4 <COPC_task_update+0x11c>)
 8008674:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8008678:	5453      	strb	r3, [r2, r1]
            }

            if (receive_index >= FSP_PKT_MAX_LENGTH) {
 800867a:	4b0c      	ldr	r3, [pc, #48]	@ (80086ac <COPC_task_update+0x114>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2bff      	cmp	r3, #255	@ 0xff
 8008682:	d102      	bne.n	800868a <COPC_task_update+0xf2>
                // Frame quá dài, reset lại

                receiving = 0;
 8008684:	4b08      	ldr	r3, [pc, #32]	@ (80086a8 <COPC_task_update+0x110>)
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 800868a:	4806      	ldr	r0, [pc, #24]	@ (80086a4 <COPC_task_update+0x10c>)
 800868c:	f7f9 fbd8 	bl	8001e40 <IsDataAvailable>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d184      	bne.n	80085a0 <COPC_task_update+0x8>
            }
    }
}

}
 8008696:	bf00      	nop
 8008698:	bf00      	nop
 800869a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40011000 	.word	0x40011000
 80086a8:	20005254 	.word	0x20005254
 80086ac:	20005357 	.word	0x20005357
 80086b0:	2000484e 	.word	0x2000484e
 80086b4:	20005258 	.word	0x20005258
 80086b8:	2000003c 	.word	0x2000003c
 80086bc:	2000003d 	.word	0x2000003d
 80086c0:	2000003e 	.word	0x2000003e
 80086c4:	200003b4 	.word	0x200003b4
 80086c8:	080141cc 	.word	0x080141cc
 80086cc:	40005000 	.word	0x40005000
 80086d0:	40011400 	.word	0x40011400

080086d4 <COPC_create_task>:
void	COPC_create_task(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
	COPC_init();
 80086d8:	f7ff ff4e 	bl	8008578 <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 80086dc:	4902      	ldr	r1, [pc, #8]	@ (80086e8 <COPC_create_task+0x14>)
 80086de:	4803      	ldr	r0, [pc, #12]	@ (80086ec <COPC_create_task+0x18>)
 80086e0:	f002 f8f2 	bl	800a8c8 <SCH_TASK_CreateTask>
}
 80086e4:	bf00      	nop
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	200003d4 	.word	0x200003d4
 80086ec:	200003d0 	.word	0x200003d0

080086f0 <LL_GPIO_SetOutputPin>:
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	619a      	str	r2, [r3, #24]
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <LL_GPIO_ResetOutputPin>:
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	041a      	lsls	r2, r3, #16
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	619a      	str	r2, [r3, #24]
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
	...

0800872c <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 8008730:	4a06      	ldr	r2, [pc, #24]	@ (800874c <status_led_init+0x20>)
 8008732:	7813      	ldrb	r3, [r2, #0]
 8008734:	f36f 0300 	bfc	r3, #0, #1
 8008738:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 800873a:	4a04      	ldr	r2, [pc, #16]	@ (800874c <status_led_init+0x20>)
 800873c:	7813      	ldrb	r3, [r2, #0]
 800873e:	f36f 0347 	bfc	r3, #1, #7
 8008742:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 8008744:	f000 f804 	bl	8008750 <status_led_off>
}
 8008748:	bf00      	nop
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20005358 	.word	0x20005358

08008750 <status_led_off>:

static void status_led_off(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 8008754:	2120      	movs	r1, #32
 8008756:	4802      	ldr	r0, [pc, #8]	@ (8008760 <status_led_off+0x10>)
 8008758:	f7ff ffd8 	bl	800870c <LL_GPIO_ResetOutputPin>
}
 800875c:	bf00      	nop
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40020800 	.word	0x40020800

08008764 <status_led_on>:

static void status_led_on(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 8008768:	2120      	movs	r1, #32
 800876a:	4802      	ldr	r0, [pc, #8]	@ (8008774 <status_led_on+0x10>)
 800876c:	f7ff ffc0 	bl	80086f0 <LL_GPIO_SetOutputPin>
}
 8008770:	bf00      	nop
 8008772:	bd80      	pop	{r7, pc}
 8008774:	40020800 	.word	0x40020800

08008778 <status_led_update>:

void	status_led_update(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 800877c:	4b0d      	ldr	r3, [pc, #52]	@ (80087b4 <status_led_update+0x3c>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b03      	cmp	r3, #3
 8008788:	d811      	bhi.n	80087ae <status_led_update+0x36>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <status_led_update+0x18>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a7 	.word	0x080087a7
 8008798:	080087ad 	.word	0x080087ad
 800879c:	080087ad 	.word	0x080087ad
	case POWERUP:
		status_led_powerup();
 80087a0:	f000 f80a 	bl	80087b8 <status_led_powerup>
		break;
 80087a4:	e003      	b.n	80087ae <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 80087a6:	f000 f841 	bl	800882c <status_led_normal>
		break;
 80087aa:	e000      	b.n	80087ae <status_led_update+0x36>
	case POWERING_SUB:
		break;
 80087ac:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 80087ae:	bf00      	nop
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20005358 	.word	0x20005358

080087b8 <status_led_powerup>:

static void status_led_powerup(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 80087bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008828 <status_led_powerup+0x70>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d012      	beq.n	80087f0 <status_led_powerup+0x38>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 80087ca:	2000      	movs	r0, #0
 80087cc:	f002 f866 	bl	800a89c <SCH_TIM_HasCompleted>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d025      	beq.n	8008822 <status_led_powerup+0x6a>
        {
            s_led_display_status.led = 0;
 80087d6:	4a14      	ldr	r2, [pc, #80]	@ (8008828 <status_led_powerup+0x70>)
 80087d8:	7813      	ldrb	r3, [r2, #0]
 80087da:	f36f 0300 	bfc	r3, #0, #1
 80087de:	7013      	strb	r3, [r2, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 80087e0:	f7ff ffb6 	bl	8008750 <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 80087e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80087e8:	2000      	movs	r0, #0
 80087ea:	f002 f841 	bl	800a870 <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 80087ee:	e018      	b.n	8008822 <status_led_powerup+0x6a>
    else if (s_led_display_status.led == 0) // LED is OFF
 80087f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008828 <status_led_powerup+0x70>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d111      	bne.n	8008822 <status_led_powerup+0x6a>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 80087fe:	2000      	movs	r0, #0
 8008800:	f002 f84c 	bl	800a89c <SCH_TIM_HasCompleted>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <status_led_powerup+0x6a>
            s_led_display_status.led = 1;
 800880a:	4a07      	ldr	r2, [pc, #28]	@ (8008828 <status_led_powerup+0x70>)
 800880c:	7813      	ldrb	r3, [r2, #0]
 800880e:	f043 0301 	orr.w	r3, r3, #1
 8008812:	7013      	strb	r3, [r2, #0]
            status_led_on();
 8008814:	f7ff ffa6 	bl	8008764 <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8008818:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800881c:	2000      	movs	r0, #0
 800881e:	f002 f827 	bl	800a870 <SCH_TIM_Start>
}
 8008822:	bf00      	nop
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20005358 	.word	0x20005358

0800882c <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 8008830:	bf00      	nop
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
	...

0800883c <status_led_create_task>:

void	status_led_create_task(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8008840:	4902      	ldr	r1, [pc, #8]	@ (800884c <status_led_create_task+0x10>)
 8008842:	4803      	ldr	r0, [pc, #12]	@ (8008850 <status_led_create_task+0x14>)
 8008844:	f002 f840 	bl	800a8c8 <SCH_TASK_CreateTask>
}
 8008848:	bf00      	nop
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200003e4 	.word	0x200003e4
 8008850:	200003e0 	.word	0x200003e0

08008854 <__NVIC_SetPriorityGrouping>:
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008864:	4b0c      	ldr	r3, [pc, #48]	@ (8008898 <__NVIC_SetPriorityGrouping+0x44>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008870:	4013      	ands	r3, r2
 8008872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800887c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008886:	4a04      	ldr	r2, [pc, #16]	@ (8008898 <__NVIC_SetPriorityGrouping+0x44>)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	60d3      	str	r3, [r2, #12]
}
 800888c:	bf00      	nop
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	e000ed00 	.word	0xe000ed00

0800889c <__NVIC_GetPriorityGrouping>:
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088a0:	4b04      	ldr	r3, [pc, #16]	@ (80088b4 <__NVIC_GetPriorityGrouping+0x18>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	f003 0307 	and.w	r3, r3, #7
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	e000ed00 	.word	0xe000ed00

080088b8 <__NVIC_EnableIRQ>:
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	db0b      	blt.n	80088e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	f003 021f 	and.w	r2, r3, #31
 80088d0:	4907      	ldr	r1, [pc, #28]	@ (80088f0 <__NVIC_EnableIRQ+0x38>)
 80088d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	2001      	movs	r0, #1
 80088da:	fa00 f202 	lsl.w	r2, r0, r2
 80088de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000e100 	.word	0xe000e100

080088f4 <__NVIC_SetPriority>:
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	6039      	str	r1, [r7, #0]
 80088fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008904:	2b00      	cmp	r3, #0
 8008906:	db0a      	blt.n	800891e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	b2da      	uxtb	r2, r3
 800890c:	490c      	ldr	r1, [pc, #48]	@ (8008940 <__NVIC_SetPriority+0x4c>)
 800890e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008912:	0112      	lsls	r2, r2, #4
 8008914:	b2d2      	uxtb	r2, r2
 8008916:	440b      	add	r3, r1
 8008918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800891c:	e00a      	b.n	8008934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	4908      	ldr	r1, [pc, #32]	@ (8008944 <__NVIC_SetPriority+0x50>)
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	f003 030f 	and.w	r3, r3, #15
 800892a:	3b04      	subs	r3, #4
 800892c:	0112      	lsls	r2, r2, #4
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	440b      	add	r3, r1
 8008932:	761a      	strb	r2, [r3, #24]
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	e000e100 	.word	0xe000e100
 8008944:	e000ed00 	.word	0xe000ed00

08008948 <NVIC_EncodePriority>:
{
 8008948:	b480      	push	{r7}
 800894a:	b089      	sub	sp, #36	@ 0x24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f1c3 0307 	rsb	r3, r3, #7
 8008962:	2b04      	cmp	r3, #4
 8008964:	bf28      	it	cs
 8008966:	2304      	movcs	r3, #4
 8008968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	3304      	adds	r3, #4
 800896e:	2b06      	cmp	r3, #6
 8008970:	d902      	bls.n	8008978 <NVIC_EncodePriority+0x30>
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	3b03      	subs	r3, #3
 8008976:	e000      	b.n	800897a <NVIC_EncodePriority+0x32>
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	fa02 f303 	lsl.w	r3, r2, r3
 8008986:	43da      	mvns	r2, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	401a      	ands	r2, r3
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008990:	f04f 31ff 	mov.w	r1, #4294967295
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	fa01 f303 	lsl.w	r3, r1, r3
 800899a:	43d9      	mvns	r1, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089a0:	4313      	orrs	r3, r2
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3724      	adds	r7, #36	@ 0x24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <LL_I2C_EnableClockStretching>:
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	601a      	str	r2, [r3, #0]
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <LL_I2C_DisableGeneralCall>:
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	601a      	str	r2, [r3, #0]
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <LL_I2C_SetOwnAddress2>:
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60da      	str	r2, [r3, #12]
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <LL_I2C_DisableOwnAddress2>:
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f023 0201 	bic.w	r2, r3, #1
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60da      	str	r2, [r3, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008a38:	4b05      	ldr	r3, [pc, #20]	@ (8008a50 <LL_RCC_HSE_Enable+0x1c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a04      	ldr	r2, [pc, #16]	@ (8008a50 <LL_RCC_HSE_Enable+0x1c>)
 8008a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a42:	6013      	str	r3, [r2, #0]
}
 8008a44:	bf00      	nop
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	40023800 	.word	0x40023800

08008a54 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8008a58:	4b07      	ldr	r3, [pc, #28]	@ (8008a78 <LL_RCC_HSE_IsReady+0x24>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a64:	bf0c      	ite	eq
 8008a66:	2301      	moveq	r3, #1
 8008a68:	2300      	movne	r3, #0
 8008a6a:	b2db      	uxtb	r3, r3
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40023800 	.word	0x40023800

08008a7c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008a84:	4b06      	ldr	r3, [pc, #24]	@ (8008aa0 <LL_RCC_SetSysClkSource+0x24>)
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f023 0203 	bic.w	r2, r3, #3
 8008a8c:	4904      	ldr	r1, [pc, #16]	@ (8008aa0 <LL_RCC_SetSysClkSource+0x24>)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	608b      	str	r3, [r1, #8]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	40023800 	.word	0x40023800

08008aa4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008aa8:	4b04      	ldr	r3, [pc, #16]	@ (8008abc <LL_RCC_GetSysClkSource+0x18>)
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 030c 	and.w	r3, r3, #12
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	40023800 	.word	0x40023800

08008ac0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008ac8:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <LL_RCC_SetAHBPrescaler+0x24>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ad0:	4904      	ldr	r1, [pc, #16]	@ (8008ae4 <LL_RCC_SetAHBPrescaler+0x24>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	608b      	str	r3, [r1, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	40023800 	.word	0x40023800

08008ae8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008af0:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008af8:	4904      	ldr	r1, [pc, #16]	@ (8008b0c <LL_RCC_SetAPB1Prescaler+0x24>)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	608b      	str	r3, [r1, #8]
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	40023800 	.word	0x40023800

08008b10 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008b18:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b20:	4904      	ldr	r1, [pc, #16]	@ (8008b34 <LL_RCC_SetAPB2Prescaler+0x24>)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	608b      	str	r3, [r1, #8]
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	40023800 	.word	0x40023800

08008b38 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008b3c:	4b05      	ldr	r3, [pc, #20]	@ (8008b54 <LL_RCC_PLL_Enable+0x1c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a04      	ldr	r2, [pc, #16]	@ (8008b54 <LL_RCC_PLL_Enable+0x1c>)
 8008b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b46:	6013      	str	r3, [r2, #0]
}
 8008b48:	bf00      	nop
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	40023800 	.word	0x40023800

08008b58 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8008b5c:	4b07      	ldr	r3, [pc, #28]	@ (8008b7c <LL_RCC_PLL_IsReady+0x24>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b68:	bf0c      	ite	eq
 8008b6a:	2301      	moveq	r3, #1
 8008b6c:	2300      	movne	r3, #0
 8008b6e:	b2db      	uxtb	r3, r3
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40023800 	.word	0x40023800

08008b80 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8008b94:	4013      	ands	r3, r2
 8008b96:	68f9      	ldr	r1, [r7, #12]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4311      	orrs	r1, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	0192      	lsls	r2, r2, #6
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	4908      	ldr	r1, [pc, #32]	@ (8008bc4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8008ba8:	4b06      	ldr	r3, [pc, #24]	@ (8008bc4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008bb0:	4904      	ldr	r1, [pc, #16]	@ (8008bc4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8008bb8:	bf00      	nop
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	40023800 	.word	0x40023800
 8008bc8:	ffbf8000 	.word	0xffbf8000

08008bcc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008bd4:	4b08      	ldr	r3, [pc, #32]	@ (8008bf8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008bd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bd8:	4907      	ldr	r1, [pc, #28]	@ (8008bf8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008be0:	4b05      	ldr	r3, [pc, #20]	@ (8008bf8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4013      	ands	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	40023800 	.word	0x40023800

08008bfc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8008c04:	4b08      	ldr	r3, [pc, #32]	@ (8008c28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008c06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c08:	4907      	ldr	r1, [pc, #28]	@ (8008c28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008c12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4013      	ands	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
}
 8008c1c:	bf00      	nop
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	40023800 	.word	0x40023800

08008c2c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008c34:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008c36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c38:	4907      	ldr	r1, [pc, #28]	@ (8008c58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008c40:	4b05      	ldr	r3, [pc, #20]	@ (8008c58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008c42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4013      	ands	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
}
 8008c4c:	bf00      	nop
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	40023800 	.word	0x40023800

08008c5c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8008c64:	4b06      	ldr	r3, [pc, #24]	@ (8008c80 <LL_FLASH_SetLatency+0x24>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f023 0207 	bic.w	r2, r3, #7
 8008c6c:	4904      	ldr	r1, [pc, #16]	@ (8008c80 <LL_FLASH_SetLatency+0x24>)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	600b      	str	r3, [r1, #0]
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	40023c00 	.word	0x40023c00

08008c84 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8008c88:	4b04      	ldr	r3, [pc, #16]	@ (8008c9c <LL_FLASH_GetLatency+0x18>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0307 	and.w	r3, r3, #7
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40023c00 	.word	0x40023c00

08008ca0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8008ca8:	4b06      	ldr	r3, [pc, #24]	@ (8008cc4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008cb0:	4904      	ldr	r1, [pc, #16]	@ (8008cc4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	600b      	str	r3, [r1, #0]
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	40007000 	.word	0x40007000

08008cc8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8008ccc:	4b07      	ldr	r3, [pc, #28]	@ (8008cec <LL_PWR_IsActiveFlag_VOS+0x24>)
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cd8:	bf0c      	ite	eq
 8008cda:	2301      	moveq	r3, #1
 8008cdc:	2300      	movne	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40007000 	.word	0x40007000

08008cf0 <LL_USART_Enable>:
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	60da      	str	r2, [r3, #12]
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <LL_USART_ConfigAsyncMode>:
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	615a      	str	r2, [r3, #20]
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <LL_GPIO_ResetOutputPin>:
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	041a      	lsls	r2, r3, #16
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	619a      	str	r2, [r3, #24]
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8008d60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008d64:	f7ff ff62 	bl	8008c2c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8008d68:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8008d6c:	f7ff ff46 	bl	8008bfc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d70:	2003      	movs	r0, #3
 8008d72:	f7ff fd6f 	bl	8008854 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8008d76:	f7ff fd91 	bl	800889c <__NVIC_GetPriorityGrouping>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	210f      	movs	r1, #15
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fde1 	bl	8008948 <NVIC_EncodePriority>
 8008d86:	4603      	mov	r3, r0
 8008d88:	4619      	mov	r1, r3
 8008d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8e:	f7ff fdb1 	bl	80088f4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008d92:	f000 f83d 	bl	8008e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008d96:	f000 fba9 	bl	80094ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8008d9a:	f000 f883 	bl	8008ea4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8008d9e:	f000 fb45 	bl	800942c <MX_USART6_UART_Init>
  MX_UART5_Init();
 8008da2:	f000 f9a9 	bl	80090f8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8008da6:	f000 fa1f 	bl	80091e8 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8008daa:	f000 f943 	bl	8009034 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8008dae:	f000 fadb 	bl	8009368 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8008db2:	f000 f8cf 	bl	8008f54 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8008db6:	f000 fa77 	bl	80092a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 8008dba:	f7fd f917 	bl	8005fec <command_init>

  fsp_init(FSP_ADR_CPOC);
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	f001 fef0 	bl	800aba4 <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 8008dc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008dc8:	4810      	ldr	r0, [pc, #64]	@ (8008e0c <main+0xb0>)
 8008dca:	f7ff ffb7 	bl	8008d3c <LL_GPIO_ResetOutputPin>

  status_led_init();
 8008dce:	f7ff fcad 	bl	800872c <status_led_init>



  WDT_init();
 8008dd2:	f000 fd8d 	bl	80098f0 <WDT_init>

  SCH_Initialize();
 8008dd6:	f001 fd21 	bl	800a81c <SCH_Initialize>

  status_led_create_task();
 8008dda:	f7ff fd2f 	bl	800883c <status_led_create_task>

  send_packet_init();
 8008dde:	f7f9 f979 	bl	80020d4 <send_packet_init>
  send_packet_create_task();
 8008de2:	f7f9 f9d5 	bl	8002190 <send_packet_create_task>


  command_create_task();
 8008de6:	f7fd ffa9 	bl	8006d3c <command_create_task>

  COPC_create_task();
 8008dea:	f7ff fc73 	bl	80086d4 <COPC_create_task>

  WDT_create_task();
 8008dee:	f000 fd8b 	bl	8009908 <WDT_create_task>

  IOU_create_task();
 8008df2:	f7f9 fa63 	bl	80022bc <IOU_create_task>
  PMU_create_task();
 8008df6:	f7fc f93f 	bl	8005078 <PMU_create_task>
  PDU_create_task();
 8008dfa:	f7fb fb39 	bl	8004470 <PDU_create_task>
  rs422_create_task();
 8008dfe:	f7ff fbad 	bl	800855c <rs422_create_task>
  SCH_StartSchedular();
 8008e02:	f001 fe33 	bl	800aa6c <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8008e06:	f001 fe37 	bl	800aa78 <SCH_HandleScheduledTask>
 8008e0a:	e7fc      	b.n	8008e06 <main+0xaa>
 8008e0c:	40020800 	.word	0x40020800

08008e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8008e14:	2001      	movs	r0, #1
 8008e16:	f7ff ff21 	bl	8008c5c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8008e1a:	bf00      	nop
 8008e1c:	f7ff ff32 	bl	8008c84 <LL_FLASH_GetLatency>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d1fa      	bne.n	8008e1c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8008e26:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008e2a:	f7ff ff39 	bl	8008ca0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8008e2e:	f7ff fe01 	bl	8008a34 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8008e32:	bf00      	nop
 8008e34:	f7ff fe0e 	bl	8008a54 <LL_RCC_HSE_IsReady>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d1fa      	bne.n	8008e34 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 8008e3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008e42:	22c0      	movs	r2, #192	@ 0xc0
 8008e44:	2104      	movs	r1, #4
 8008e46:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8008e4a:	f7ff fe99 	bl	8008b80 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8008e4e:	f7ff fe73 	bl	8008b38 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8008e52:	bf00      	nop
 8008e54:	f7ff fe80 	bl	8008b58 <LL_RCC_PLL_IsReady>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d1fa      	bne.n	8008e54 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8008e5e:	bf00      	nop
 8008e60:	f7ff ff32 	bl	8008cc8 <LL_PWR_IsActiveFlag_VOS>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0fa      	beq.n	8008e60 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8008e6a:	2080      	movs	r0, #128	@ 0x80
 8008e6c:	f7ff fe28 	bl	8008ac0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8008e70:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008e74:	f7ff fe38 	bl	8008ae8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8008e78:	2000      	movs	r0, #0
 8008e7a:	f7ff fe49 	bl	8008b10 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8008e7e:	2002      	movs	r0, #2
 8008e80:	f7ff fdfc 	bl	8008a7c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8008e84:	bf00      	nop
 8008e86:	f7ff fe0d 	bl	8008aa4 <LL_RCC_GetSysClkSource>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d1fa      	bne.n	8008e86 <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(48000000);
 8008e90:	4803      	ldr	r0, [pc, #12]	@ (8008ea0 <SystemClock_Config+0x90>)
 8008e92:	f001 fca5 	bl	800a7e0 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8008e96:	4802      	ldr	r0, [pc, #8]	@ (8008ea0 <SystemClock_Config+0x90>)
 8008e98:	f001 fcb0 	bl	800a7fc <LL_SetSystemCoreClock>
}
 8008e9c:	bf00      	nop
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	02dc6c00 	.word	0x02dc6c00

08008ea4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08c      	sub	sp, #48	@ 0x30
 8008ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8008eaa:	f107 0318 	add.w	r3, r7, #24
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	605a      	str	r2, [r3, #4]
 8008eb4:	609a      	str	r2, [r3, #8]
 8008eb6:	60da      	str	r2, [r3, #12]
 8008eb8:	611a      	str	r2, [r3, #16]
 8008eba:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	605a      	str	r2, [r3, #4]
 8008ec4:	609a      	str	r2, [r3, #8]
 8008ec6:	60da      	str	r2, [r3, #12]
 8008ec8:	611a      	str	r2, [r3, #16]
 8008eca:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008ecc:	2002      	movs	r0, #2
 8008ece:	f7ff fe7d 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8008ed2:	23c0      	movs	r3, #192	@ 0xc0
 8008ed4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008eda:	2303      	movs	r3, #3
 8008edc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8008ee6:	2304      	movs	r3, #4
 8008ee8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eea:	463b      	mov	r3, r7
 8008eec:	4619      	mov	r1, r3
 8008eee:	4816      	ldr	r0, [pc, #88]	@ (8008f48 <MX_I2C1_Init+0xa4>)
 8008ef0:	f000 fe91 	bl	8009c16 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8008ef4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008ef8:	f7ff fe80 	bl	8008bfc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8008efc:	4813      	ldr	r0, [pc, #76]	@ (8008f4c <MX_I2C1_Init+0xa8>)
 8008efe:	f7ff fd89 	bl	8008a14 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8008f02:	4812      	ldr	r0, [pc, #72]	@ (8008f4c <MX_I2C1_Init+0xa8>)
 8008f04:	f7ff fd63 	bl	80089ce <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8008f08:	4810      	ldr	r0, [pc, #64]	@ (8008f4c <MX_I2C1_Init+0xa8>)
 8008f0a:	f7ff fd50 	bl	80089ae <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8008f12:	4b0f      	ldr	r3, [pc, #60]	@ (8008f50 <MX_I2C1_Init+0xac>)
 8008f14:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8008f16:	2300      	movs	r3, #0
 8008f18:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8008f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8008f24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8008f2a:	f107 0318 	add.w	r3, r7, #24
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4806      	ldr	r0, [pc, #24]	@ (8008f4c <MX_I2C1_Init+0xa8>)
 8008f32:	f000 ffe7 	bl	8009f04 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8008f36:	2100      	movs	r1, #0
 8008f38:	4804      	ldr	r0, [pc, #16]	@ (8008f4c <MX_I2C1_Init+0xa8>)
 8008f3a:	f7ff fd58 	bl	80089ee <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008f3e:	bf00      	nop
 8008f40:	3730      	adds	r7, #48	@ 0x30
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40020400 	.word	0x40020400
 8008f4c:	40005400 	.word	0x40005400
 8008f50:	000186a0 	.word	0x000186a0

08008f54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08c      	sub	sp, #48	@ 0x30
 8008f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8008f5a:	f107 0318 	add.w	r3, r7, #24
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	605a      	str	r2, [r3, #4]
 8008f64:	609a      	str	r2, [r3, #8]
 8008f66:	60da      	str	r2, [r3, #12]
 8008f68:	611a      	str	r2, [r3, #16]
 8008f6a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f6c:	463b      	mov	r3, r7
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	609a      	str	r2, [r3, #8]
 8008f76:	60da      	str	r2, [r3, #12]
 8008f78:	611a      	str	r2, [r3, #16]
 8008f7a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008f7c:	2004      	movs	r0, #4
 8008f7e:	f7ff fe25 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008f82:	2001      	movs	r0, #1
 8008f84:	f7ff fe22 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8008f88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008f92:	2303      	movs	r3, #3
 8008f94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8008f96:	2301      	movs	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8008f9e:	2304      	movs	r3, #4
 8008fa0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	481f      	ldr	r0, [pc, #124]	@ (8009024 <MX_I2C3_Init+0xd0>)
 8008fa8:	f000 fe35 	bl	8009c16 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8008fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008fb0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4817      	ldr	r0, [pc, #92]	@ (8009028 <MX_I2C3_Init+0xd4>)
 8008fcc:	f000 fe23 	bl	8009c16 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8008fd0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8008fd4:	f7ff fe12 	bl	8008bfc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8008fd8:	4814      	ldr	r0, [pc, #80]	@ (800902c <MX_I2C3_Init+0xd8>)
 8008fda:	f7ff fd1b 	bl	8008a14 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8008fde:	4813      	ldr	r0, [pc, #76]	@ (800902c <MX_I2C3_Init+0xd8>)
 8008fe0:	f7ff fcf5 	bl	80089ce <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8008fe4:	4811      	ldr	r0, [pc, #68]	@ (800902c <MX_I2C3_Init+0xd8>)
 8008fe6:	f7ff fce2 	bl	80089ae <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8008fea:	2300      	movs	r3, #0
 8008fec:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8008fee:	4b10      	ldr	r3, [pc, #64]	@ (8009030 <MX_I2C3_Init+0xdc>)
 8008ff0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8008ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8009000:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8009006:	f107 0318 	add.w	r3, r7, #24
 800900a:	4619      	mov	r1, r3
 800900c:	4807      	ldr	r0, [pc, #28]	@ (800902c <MX_I2C3_Init+0xd8>)
 800900e:	f000 ff79 	bl	8009f04 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8009012:	2100      	movs	r1, #0
 8009014:	4805      	ldr	r0, [pc, #20]	@ (800902c <MX_I2C3_Init+0xd8>)
 8009016:	f7ff fcea 	bl	80089ee <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800901a:	bf00      	nop
 800901c:	3730      	adds	r7, #48	@ 0x30
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40020800 	.word	0x40020800
 8009028:	40020000 	.word	0x40020000
 800902c:	40005c00 	.word	0x40005c00
 8009030:	000186a0 	.word	0x000186a0

08009034 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08e      	sub	sp, #56	@ 0x38
 8009038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800903a:	f107 031c 	add.w	r3, r7, #28
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	605a      	str	r2, [r3, #4]
 8009044:	609a      	str	r2, [r3, #8]
 8009046:	60da      	str	r2, [r3, #12]
 8009048:	611a      	str	r2, [r3, #16]
 800904a:	615a      	str	r2, [r3, #20]
 800904c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800904e:	1d3b      	adds	r3, r7, #4
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	605a      	str	r2, [r3, #4]
 8009056:	609a      	str	r2, [r3, #8]
 8009058:	60da      	str	r2, [r3, #12]
 800905a:	611a      	str	r2, [r3, #16]
 800905c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800905e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009062:	f7ff fdcb 	bl	8008bfc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8009066:	2004      	movs	r0, #4
 8009068:	f7ff fdb0 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800906c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009070:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009072:	2302      	movs	r3, #2
 8009074:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009076:	2303      	movs	r3, #3
 8009078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800907a:	2300      	movs	r3, #0
 800907c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8009082:	2308      	movs	r3, #8
 8009084:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009086:	1d3b      	adds	r3, r7, #4
 8009088:	4619      	mov	r1, r3
 800908a:	4819      	ldr	r0, [pc, #100]	@ (80090f0 <MX_UART4_Init+0xbc>)
 800908c:	f000 fdc3 	bl	8009c16 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009090:	f7ff fc04 	bl	800889c <__NVIC_GetPriorityGrouping>
 8009094:	4603      	mov	r3, r0
 8009096:	2200      	movs	r2, #0
 8009098:	2100      	movs	r1, #0
 800909a:	4618      	mov	r0, r3
 800909c:	f7ff fc54 	bl	8008948 <NVIC_EncodePriority>
 80090a0:	4603      	mov	r3, r0
 80090a2:	4619      	mov	r1, r3
 80090a4:	2034      	movs	r0, #52	@ 0x34
 80090a6:	f7ff fc25 	bl	80088f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80090aa:	2034      	movs	r0, #52	@ 0x34
 80090ac:	f7ff fc04 	bl	80088b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80090b0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80090b4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80090b6:	2300      	movs	r3, #0
 80090b8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80090ba:	2300      	movs	r3, #0
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80090be:	2300      	movs	r3, #0
 80090c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80090c2:	230c      	movs	r3, #12
 80090c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80090ca:	2300      	movs	r3, #0
 80090cc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80090ce:	f107 031c 	add.w	r3, r7, #28
 80090d2:	4619      	mov	r1, r3
 80090d4:	4807      	ldr	r0, [pc, #28]	@ (80090f4 <MX_UART4_Init+0xc0>)
 80090d6:	f001 fae9 	bl	800a6ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80090da:	4806      	ldr	r0, [pc, #24]	@ (80090f4 <MX_UART4_Init+0xc0>)
 80090dc:	f7ff fe18 	bl	8008d10 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80090e0:	4804      	ldr	r0, [pc, #16]	@ (80090f4 <MX_UART4_Init+0xc0>)
 80090e2:	f7ff fe05 	bl	8008cf0 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80090e6:	bf00      	nop
 80090e8:	3738      	adds	r7, #56	@ 0x38
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	40020800 	.word	0x40020800
 80090f4:	40004c00 	.word	0x40004c00

080090f8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08e      	sub	sp, #56	@ 0x38
 80090fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80090fe:	f107 031c 	add.w	r3, r7, #28
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	605a      	str	r2, [r3, #4]
 8009108:	609a      	str	r2, [r3, #8]
 800910a:	60da      	str	r2, [r3, #12]
 800910c:	611a      	str	r2, [r3, #16]
 800910e:	615a      	str	r2, [r3, #20]
 8009110:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009112:	1d3b      	adds	r3, r7, #4
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	611a      	str	r2, [r3, #16]
 8009120:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8009122:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009126:	f7ff fd69 	bl	8008bfc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800912a:	2004      	movs	r0, #4
 800912c:	f7ff fd4e 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8009130:	2008      	movs	r0, #8
 8009132:	f7ff fd4b 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8009136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800913a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800913c:	2302      	movs	r3, #2
 800913e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009140:	2303      	movs	r3, #3
 8009142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009144:	2300      	movs	r3, #0
 8009146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800914c:	2308      	movs	r3, #8
 800914e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009150:	1d3b      	adds	r3, r7, #4
 8009152:	4619      	mov	r1, r3
 8009154:	4821      	ldr	r0, [pc, #132]	@ (80091dc <MX_UART5_Init+0xe4>)
 8009156:	f000 fd5e 	bl	8009c16 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800915a:	2304      	movs	r3, #4
 800915c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800915e:	2302      	movs	r3, #2
 8009160:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009162:	2303      	movs	r3, #3
 8009164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800916e:	2308      	movs	r3, #8
 8009170:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009172:	1d3b      	adds	r3, r7, #4
 8009174:	4619      	mov	r1, r3
 8009176:	481a      	ldr	r0, [pc, #104]	@ (80091e0 <MX_UART5_Init+0xe8>)
 8009178:	f000 fd4d 	bl	8009c16 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800917c:	f7ff fb8e 	bl	800889c <__NVIC_GetPriorityGrouping>
 8009180:	4603      	mov	r3, r0
 8009182:	2200      	movs	r2, #0
 8009184:	2100      	movs	r1, #0
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff fbde 	bl	8008948 <NVIC_EncodePriority>
 800918c:	4603      	mov	r3, r0
 800918e:	4619      	mov	r1, r3
 8009190:	2035      	movs	r0, #53	@ 0x35
 8009192:	f7ff fbaf 	bl	80088f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8009196:	2035      	movs	r0, #53	@ 0x35
 8009198:	f7ff fb8e 	bl	80088b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800919c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80091a0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80091a2:	2300      	movs	r3, #0
 80091a4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80091a6:	2300      	movs	r3, #0
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80091aa:	2300      	movs	r3, #0
 80091ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80091ae:	230c      	movs	r3, #12
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80091b6:	2300      	movs	r3, #0
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80091ba:	f107 031c 	add.w	r3, r7, #28
 80091be:	4619      	mov	r1, r3
 80091c0:	4808      	ldr	r0, [pc, #32]	@ (80091e4 <MX_UART5_Init+0xec>)
 80091c2:	f001 fa73 	bl	800a6ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80091c6:	4807      	ldr	r0, [pc, #28]	@ (80091e4 <MX_UART5_Init+0xec>)
 80091c8:	f7ff fda2 	bl	8008d10 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80091cc:	4805      	ldr	r0, [pc, #20]	@ (80091e4 <MX_UART5_Init+0xec>)
 80091ce:	f7ff fd8f 	bl	8008cf0 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80091d2:	bf00      	nop
 80091d4:	3738      	adds	r7, #56	@ 0x38
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	40020800 	.word	0x40020800
 80091e0:	40020c00 	.word	0x40020c00
 80091e4:	40005000 	.word	0x40005000

080091e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	@ 0x38
 80091ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80091ee:	f107 031c 	add.w	r3, r7, #28
 80091f2:	2200      	movs	r2, #0
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	605a      	str	r2, [r3, #4]
 80091f8:	609a      	str	r2, [r3, #8]
 80091fa:	60da      	str	r2, [r3, #12]
 80091fc:	611a      	str	r2, [r3, #16]
 80091fe:	615a      	str	r2, [r3, #20]
 8009200:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009202:	1d3b      	adds	r3, r7, #4
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	605a      	str	r2, [r3, #4]
 800920a:	609a      	str	r2, [r3, #8]
 800920c:	60da      	str	r2, [r3, #12]
 800920e:	611a      	str	r2, [r3, #16]
 8009210:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8009212:	2010      	movs	r0, #16
 8009214:	f7ff fd0a 	bl	8008c2c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8009218:	2001      	movs	r0, #1
 800921a:	f7ff fcd7 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800921e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009222:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009224:	2302      	movs	r3, #2
 8009226:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009228:	2303      	movs	r3, #3
 800922a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800922c:	2300      	movs	r3, #0
 800922e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8009234:	2307      	movs	r3, #7
 8009236:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009238:	1d3b      	adds	r3, r7, #4
 800923a:	4619      	mov	r1, r3
 800923c:	4818      	ldr	r0, [pc, #96]	@ (80092a0 <MX_USART1_UART_Init+0xb8>)
 800923e:	f000 fcea 	bl	8009c16 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009242:	f7ff fb2b 	bl	800889c <__NVIC_GetPriorityGrouping>
 8009246:	4603      	mov	r3, r0
 8009248:	2200      	movs	r2, #0
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff fb7b 	bl	8008948 <NVIC_EncodePriority>
 8009252:	4603      	mov	r3, r0
 8009254:	4619      	mov	r1, r3
 8009256:	2025      	movs	r0, #37	@ 0x25
 8009258:	f7ff fb4c 	bl	80088f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800925c:	2025      	movs	r0, #37	@ 0x25
 800925e:	f7ff fb2b 	bl	80088b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8009262:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8009266:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8009268:	2300      	movs	r3, #0
 800926a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800926c:	2300      	movs	r3, #0
 800926e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8009270:	2300      	movs	r3, #0
 8009272:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8009274:	230c      	movs	r3, #12
 8009276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8009278:	2300      	movs	r3, #0
 800927a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800927c:	2300      	movs	r3, #0
 800927e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8009280:	f107 031c 	add.w	r3, r7, #28
 8009284:	4619      	mov	r1, r3
 8009286:	4807      	ldr	r0, [pc, #28]	@ (80092a4 <MX_USART1_UART_Init+0xbc>)
 8009288:	f001 fa10 	bl	800a6ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800928c:	4805      	ldr	r0, [pc, #20]	@ (80092a4 <MX_USART1_UART_Init+0xbc>)
 800928e:	f7ff fd3f 	bl	8008d10 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8009292:	4804      	ldr	r0, [pc, #16]	@ (80092a4 <MX_USART1_UART_Init+0xbc>)
 8009294:	f7ff fd2c 	bl	8008cf0 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009298:	bf00      	nop
 800929a:	3738      	adds	r7, #56	@ 0x38
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	40020000 	.word	0x40020000
 80092a4:	40011000 	.word	0x40011000

080092a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08e      	sub	sp, #56	@ 0x38
 80092ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80092ae:	f107 031c 	add.w	r3, r7, #28
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	605a      	str	r2, [r3, #4]
 80092b8:	609a      	str	r2, [r3, #8]
 80092ba:	60da      	str	r2, [r3, #12]
 80092bc:	611a      	str	r2, [r3, #16]
 80092be:	615a      	str	r2, [r3, #20]
 80092c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092c2:	1d3b      	adds	r3, r7, #4
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	605a      	str	r2, [r3, #4]
 80092ca:	609a      	str	r2, [r3, #8]
 80092cc:	60da      	str	r2, [r3, #12]
 80092ce:	611a      	str	r2, [r3, #16]
 80092d0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80092d2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80092d6:	f7ff fc91 	bl	8008bfc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80092da:	2001      	movs	r0, #1
 80092dc:	f7ff fc76 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80092e0:	230c      	movs	r3, #12
 80092e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80092e4:	2302      	movs	r3, #2
 80092e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80092e8:	2303      	movs	r3, #3
 80092ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80092ec:	2300      	movs	r3, #0
 80092ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80092f0:	2300      	movs	r3, #0
 80092f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80092f4:	2307      	movs	r3, #7
 80092f6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092f8:	1d3b      	adds	r3, r7, #4
 80092fa:	4619      	mov	r1, r3
 80092fc:	4818      	ldr	r0, [pc, #96]	@ (8009360 <MX_USART2_UART_Init+0xb8>)
 80092fe:	f000 fc8a 	bl	8009c16 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009302:	f7ff facb 	bl	800889c <__NVIC_GetPriorityGrouping>
 8009306:	4603      	mov	r3, r0
 8009308:	2200      	movs	r2, #0
 800930a:	2100      	movs	r1, #0
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff fb1b 	bl	8008948 <NVIC_EncodePriority>
 8009312:	4603      	mov	r3, r0
 8009314:	4619      	mov	r1, r3
 8009316:	2026      	movs	r0, #38	@ 0x26
 8009318:	f7ff faec 	bl	80088f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800931c:	2026      	movs	r0, #38	@ 0x26
 800931e:	f7ff facb 	bl	80088b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8009322:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8009326:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8009328:	2300      	movs	r3, #0
 800932a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800932c:	2300      	movs	r3, #0
 800932e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8009330:	2300      	movs	r3, #0
 8009332:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8009334:	230c      	movs	r3, #12
 8009336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8009338:	2300      	movs	r3, #0
 800933a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800933c:	2300      	movs	r3, #0
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8009340:	f107 031c 	add.w	r3, r7, #28
 8009344:	4619      	mov	r1, r3
 8009346:	4807      	ldr	r0, [pc, #28]	@ (8009364 <MX_USART2_UART_Init+0xbc>)
 8009348:	f001 f9b0 	bl	800a6ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800934c:	4805      	ldr	r0, [pc, #20]	@ (8009364 <MX_USART2_UART_Init+0xbc>)
 800934e:	f7ff fcdf 	bl	8008d10 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8009352:	4804      	ldr	r0, [pc, #16]	@ (8009364 <MX_USART2_UART_Init+0xbc>)
 8009354:	f7ff fccc 	bl	8008cf0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009358:	bf00      	nop
 800935a:	3738      	adds	r7, #56	@ 0x38
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40020000 	.word	0x40020000
 8009364:	40004400 	.word	0x40004400

08009368 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08e      	sub	sp, #56	@ 0x38
 800936c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800936e:	f107 031c 	add.w	r3, r7, #28
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
 8009376:	605a      	str	r2, [r3, #4]
 8009378:	609a      	str	r2, [r3, #8]
 800937a:	60da      	str	r2, [r3, #12]
 800937c:	611a      	str	r2, [r3, #16]
 800937e:	615a      	str	r2, [r3, #20]
 8009380:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009382:	1d3b      	adds	r3, r7, #4
 8009384:	2200      	movs	r2, #0
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	605a      	str	r2, [r3, #4]
 800938a:	609a      	str	r2, [r3, #8]
 800938c:	60da      	str	r2, [r3, #12]
 800938e:	611a      	str	r2, [r3, #16]
 8009390:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8009392:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009396:	f7ff fc31 	bl	8008bfc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800939a:	2002      	movs	r0, #2
 800939c:	f7ff fc16 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80093a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80093a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80093a6:	2302      	movs	r3, #2
 80093a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80093aa:	2303      	movs	r3, #3
 80093ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80093b2:	2300      	movs	r3, #0
 80093b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80093b6:	2307      	movs	r3, #7
 80093b8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093ba:	1d3b      	adds	r3, r7, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4819      	ldr	r0, [pc, #100]	@ (8009424 <MX_USART3_UART_Init+0xbc>)
 80093c0:	f000 fc29 	bl	8009c16 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80093c4:	f7ff fa6a 	bl	800889c <__NVIC_GetPriorityGrouping>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2200      	movs	r2, #0
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff faba 	bl	8008948 <NVIC_EncodePriority>
 80093d4:	4603      	mov	r3, r0
 80093d6:	4619      	mov	r1, r3
 80093d8:	2027      	movs	r0, #39	@ 0x27
 80093da:	f7ff fa8b 	bl	80088f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80093de:	2027      	movs	r0, #39	@ 0x27
 80093e0:	f7ff fa6a 	bl	80088b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80093e4:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80093e8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80093ea:	2300      	movs	r3, #0
 80093ec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80093ee:	2300      	movs	r3, #0
 80093f0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80093f2:	2300      	movs	r3, #0
 80093f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80093f6:	230c      	movs	r3, #12
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80093fa:	2300      	movs	r3, #0
 80093fc:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80093fe:	2300      	movs	r3, #0
 8009400:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8009402:	f107 031c 	add.w	r3, r7, #28
 8009406:	4619      	mov	r1, r3
 8009408:	4807      	ldr	r0, [pc, #28]	@ (8009428 <MX_USART3_UART_Init+0xc0>)
 800940a:	f001 f94f 	bl	800a6ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800940e:	4806      	ldr	r0, [pc, #24]	@ (8009428 <MX_USART3_UART_Init+0xc0>)
 8009410:	f7ff fc7e 	bl	8008d10 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8009414:	4804      	ldr	r0, [pc, #16]	@ (8009428 <MX_USART3_UART_Init+0xc0>)
 8009416:	f7ff fc6b 	bl	8008cf0 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800941a:	bf00      	nop
 800941c:	3738      	adds	r7, #56	@ 0x38
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	40020400 	.word	0x40020400
 8009428:	40004800 	.word	0x40004800

0800942c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08e      	sub	sp, #56	@ 0x38
 8009430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8009432:	f107 031c 	add.w	r3, r7, #28
 8009436:	2200      	movs	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	605a      	str	r2, [r3, #4]
 800943c:	609a      	str	r2, [r3, #8]
 800943e:	60da      	str	r2, [r3, #12]
 8009440:	611a      	str	r2, [r3, #16]
 8009442:	615a      	str	r2, [r3, #20]
 8009444:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009446:	1d3b      	adds	r3, r7, #4
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	605a      	str	r2, [r3, #4]
 800944e:	609a      	str	r2, [r3, #8]
 8009450:	60da      	str	r2, [r3, #12]
 8009452:	611a      	str	r2, [r3, #16]
 8009454:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8009456:	2020      	movs	r0, #32
 8009458:	f7ff fbe8 	bl	8008c2c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800945c:	2004      	movs	r0, #4
 800945e:	f7ff fbb5 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8009462:	23c0      	movs	r3, #192	@ 0xc0
 8009464:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009466:	2302      	movs	r3, #2
 8009468:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800946a:	2303      	movs	r3, #3
 800946c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800946e:	2300      	movs	r3, #0
 8009470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8009476:	2308      	movs	r3, #8
 8009478:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800947a:	1d3b      	adds	r3, r7, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4819      	ldr	r0, [pc, #100]	@ (80094e4 <MX_USART6_UART_Init+0xb8>)
 8009480:	f000 fbc9 	bl	8009c16 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009484:	f7ff fa0a 	bl	800889c <__NVIC_GetPriorityGrouping>
 8009488:	4603      	mov	r3, r0
 800948a:	2200      	movs	r2, #0
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fa5a 	bl	8008948 <NVIC_EncodePriority>
 8009494:	4603      	mov	r3, r0
 8009496:	4619      	mov	r1, r3
 8009498:	2047      	movs	r0, #71	@ 0x47
 800949a:	f7ff fa2b 	bl	80088f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800949e:	2047      	movs	r0, #71	@ 0x47
 80094a0:	f7ff fa0a 	bl	80088b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80094a4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80094a8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80094aa:	2300      	movs	r3, #0
 80094ac:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80094ae:	2300      	movs	r3, #0
 80094b0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80094b2:	2300      	movs	r3, #0
 80094b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80094b6:	230c      	movs	r3, #12
 80094b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80094ba:	2300      	movs	r3, #0
 80094bc:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80094c2:	f107 031c 	add.w	r3, r7, #28
 80094c6:	4619      	mov	r1, r3
 80094c8:	4807      	ldr	r0, [pc, #28]	@ (80094e8 <MX_USART6_UART_Init+0xbc>)
 80094ca:	f001 f8ef 	bl	800a6ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80094ce:	4806      	ldr	r0, [pc, #24]	@ (80094e8 <MX_USART6_UART_Init+0xbc>)
 80094d0:	f7ff fc1e 	bl	8008d10 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80094d4:	4804      	ldr	r0, [pc, #16]	@ (80094e8 <MX_USART6_UART_Init+0xbc>)
 80094d6:	f7ff fc0b 	bl	8008cf0 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80094da:	bf00      	nop
 80094dc:	3738      	adds	r7, #56	@ 0x38
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	40020800 	.word	0x40020800
 80094e8:	40011400 	.word	0x40011400

080094ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094f2:	463b      	mov	r3, r7
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	605a      	str	r2, [r3, #4]
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	60da      	str	r2, [r3, #12]
 80094fe:	611a      	str	r2, [r3, #16]
 8009500:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8009502:	2004      	movs	r0, #4
 8009504:	f7ff fb62 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8009508:	2080      	movs	r0, #128	@ 0x80
 800950a:	f7ff fb5f 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800950e:	2001      	movs	r0, #1
 8009510:	f7ff fb5c 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8009514:	2002      	movs	r0, #2
 8009516:	f7ff fb59 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800951a:	2008      	movs	r0, #8
 800951c:	f7ff fb56 	bl	8008bcc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 8009520:	f641 0102 	movw	r1, #6146	@ 0x1802
 8009524:	4826      	ldr	r0, [pc, #152]	@ (80095c0 <MX_GPIO_Init+0xd4>)
 8009526:	f7ff fc09 	bl	8008d3c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 800952a:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800952e:	4825      	ldr	r0, [pc, #148]	@ (80095c4 <MX_GPIO_Init+0xd8>)
 8009530:	f7ff fc04 	bl	8008d3c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8009534:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009538:	4823      	ldr	r0, [pc, #140]	@ (80095c8 <MX_GPIO_Init+0xdc>)
 800953a:	f7ff fbff 	bl	8008d3c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 800953e:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 8009542:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8009544:	2300      	movs	r3, #0
 8009546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009548:	2300      	movs	r3, #0
 800954a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800954c:	463b      	mov	r3, r7
 800954e:	4619      	mov	r1, r3
 8009550:	481c      	ldr	r0, [pc, #112]	@ (80095c4 <MX_GPIO_Init+0xd8>)
 8009552:	f000 fb60 	bl	8009c16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 8009556:	f641 0302 	movw	r3, #6146	@ 0x1802
 800955a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800955c:	2301      	movs	r3, #1
 800955e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8009560:	2300      	movs	r3, #0
 8009562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009568:	2300      	movs	r3, #0
 800956a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800956c:	463b      	mov	r3, r7
 800956e:	4619      	mov	r1, r3
 8009570:	4813      	ldr	r0, [pc, #76]	@ (80095c0 <MX_GPIO_Init+0xd4>)
 8009572:	f000 fb50 	bl	8009c16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 8009576:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800957a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800957c:	2301      	movs	r3, #1
 800957e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8009580:	2300      	movs	r3, #0
 8009582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009584:	2300      	movs	r3, #0
 8009586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800958c:	463b      	mov	r3, r7
 800958e:	4619      	mov	r1, r3
 8009590:	480c      	ldr	r0, [pc, #48]	@ (80095c4 <MX_GPIO_Init+0xd8>)
 8009592:	f000 fb40 	bl	8009c16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 8009596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800959a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800959c:	2301      	movs	r3, #1
 800959e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80095a4:	2300      	movs	r3, #0
 80095a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80095a8:	2300      	movs	r3, #0
 80095aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 80095ac:	463b      	mov	r3, r7
 80095ae:	4619      	mov	r1, r3
 80095b0:	4805      	ldr	r0, [pc, #20]	@ (80095c8 <MX_GPIO_Init+0xdc>)
 80095b2:	f000 fb30 	bl	8009c16 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80095b6:	bf00      	nop
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	40020000 	.word	0x40020000
 80095c4:	40020800 	.word	0x40020800
 80095c8:	40020400 	.word	0x40020400

080095cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80095d0:	bf00      	nop
 80095d2:	e7fd      	b.n	80095d0 <NMI_Handler+0x4>

080095d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80095d4:	b480      	push	{r7}
 80095d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80095d8:	bf00      	nop
 80095da:	e7fd      	b.n	80095d8 <HardFault_Handler+0x4>

080095dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80095e0:	bf00      	nop
 80095e2:	e7fd      	b.n	80095e0 <MemManage_Handler+0x4>

080095e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80095e8:	bf00      	nop
 80095ea:	e7fd      	b.n	80095e8 <BusFault_Handler+0x4>

080095ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80095ec:	b480      	push	{r7}
 80095ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80095f0:	bf00      	nop
 80095f2:	e7fd      	b.n	80095f0 <UsageFault_Handler+0x4>

080095f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80095f8:	bf00      	nop
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009602:	b480      	push	{r7}
 8009604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009606:	bf00      	nop
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009614:	bf00      	nop
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
	...

08009620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 8009624:	4b04      	ldr	r3, [pc, #16]	@ (8009638 <SysTick_Handler+0x18>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3301      	adds	r3, #1
 800962a:	4a03      	ldr	r2, [pc, #12]	@ (8009638 <SysTick_Handler+0x18>)
 800962c:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800962e:	f001 f989 	bl	800a944 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009632:	bf00      	nop
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	2000535c 	.word	0x2000535c

0800963c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 8009640:	4802      	ldr	r0, [pc, #8]	@ (800964c <USART1_IRQHandler+0x10>)
 8009642:	f7f8 fc9f 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009646:	bf00      	nop
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	40011000 	.word	0x40011000

08009650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (USART2);
 8009654:	4802      	ldr	r0, [pc, #8]	@ (8009660 <USART2_IRQHandler+0x10>)
 8009656:	f7f8 fc95 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800965a:	bf00      	nop
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	40004400 	.word	0x40004400

08009664 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 8009668:	4802      	ldr	r0, [pc, #8]	@ (8009674 <USART3_IRQHandler+0x10>)
 800966a:	f7f8 fc8b 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800966e:	bf00      	nop
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	40004800 	.word	0x40004800

08009678 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 800967c:	4802      	ldr	r0, [pc, #8]	@ (8009688 <UART4_IRQHandler+0x10>)
 800967e:	f7f8 fc81 	bl	8001f84 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8009682:	bf00      	nop
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	40004c00 	.word	0x40004c00

0800968c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 8009690:	4802      	ldr	r0, [pc, #8]	@ (800969c <UART5_IRQHandler+0x10>)
 8009692:	f7f8 fc77 	bl	8001f84 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8009696:	bf00      	nop
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	40005000 	.word	0x40005000

080096a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 80096a4:	4802      	ldr	r0, [pc, #8]	@ (80096b0 <USART6_IRQHandler+0x10>)
 80096a6:	f7f8 fc6d 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80096aa:	bf00      	nop
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40011400 	.word	0x40011400

080096b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80096b4:	b480      	push	{r7}
 80096b6:	af00      	add	r7, sp, #0
  return 1;
 80096b8:	2301      	movs	r3, #1
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <_kill>:

int _kill(int pid, int sig)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80096ce:	f005 f8f3 	bl	800e8b8 <__errno>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2216      	movs	r2, #22
 80096d6:	601a      	str	r2, [r3, #0]
  return -1;
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <_exit>:

void _exit (int status)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80096ec:	f04f 31ff 	mov.w	r1, #4294967295
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff ffe7 	bl	80096c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <_exit+0x12>

080096fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b086      	sub	sp, #24
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	e00a      	b.n	8009722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800970c:	f3af 8000 	nop.w
 8009710:	4601      	mov	r1, r0
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	60ba      	str	r2, [r7, #8]
 8009718:	b2ca      	uxtb	r2, r1
 800971a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	3301      	adds	r3, #1
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	429a      	cmp	r2, r3
 8009728:	dbf0      	blt.n	800970c <_read+0x12>
  }

  return len;
 800972a:	687b      	ldr	r3, [r7, #4]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	e009      	b.n	800975a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	60ba      	str	r2, [r7, #8]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	4618      	mov	r0, r3
 8009750:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	3301      	adds	r3, #1
 8009758:	617b      	str	r3, [r7, #20]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	dbf1      	blt.n	8009746 <_write+0x12>
  }
  return len;
 8009762:	687b      	ldr	r3, [r7, #4]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <_close>:

int _close(int file)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009794:	605a      	str	r2, [r3, #4]
  return 0;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <_isatty>:

int _isatty(int file)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80097ac:	2301      	movs	r3, #1
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b085      	sub	sp, #20
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80097dc:	4a14      	ldr	r2, [pc, #80]	@ (8009830 <_sbrk+0x5c>)
 80097de:	4b15      	ldr	r3, [pc, #84]	@ (8009834 <_sbrk+0x60>)
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80097e8:	4b13      	ldr	r3, [pc, #76]	@ (8009838 <_sbrk+0x64>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80097f0:	4b11      	ldr	r3, [pc, #68]	@ (8009838 <_sbrk+0x64>)
 80097f2:	4a12      	ldr	r2, [pc, #72]	@ (800983c <_sbrk+0x68>)
 80097f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80097f6:	4b10      	ldr	r3, [pc, #64]	@ (8009838 <_sbrk+0x64>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4413      	add	r3, r2
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	429a      	cmp	r2, r3
 8009802:	d207      	bcs.n	8009814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009804:	f005 f858 	bl	800e8b8 <__errno>
 8009808:	4603      	mov	r3, r0
 800980a:	220c      	movs	r2, #12
 800980c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800980e:	f04f 33ff 	mov.w	r3, #4294967295
 8009812:	e009      	b.n	8009828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009814:	4b08      	ldr	r3, [pc, #32]	@ (8009838 <_sbrk+0x64>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800981a:	4b07      	ldr	r3, [pc, #28]	@ (8009838 <_sbrk+0x64>)
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4413      	add	r3, r2
 8009822:	4a05      	ldr	r2, [pc, #20]	@ (8009838 <_sbrk+0x64>)
 8009824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009826:	68fb      	ldr	r3, [r7, #12]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20020000 	.word	0x20020000
 8009834:	00000400 	.word	0x00000400
 8009838:	20005360 	.word	0x20005360
 800983c:	20005608 	.word	0x20005608

08009840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009844:	4b06      	ldr	r3, [pc, #24]	@ (8009860 <SystemInit+0x20>)
 8009846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800984a:	4a05      	ldr	r2, [pc, #20]	@ (8009860 <SystemInit+0x20>)
 800984c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009854:	bf00      	nop
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	e000ed00 	.word	0xe000ed00

08009864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009864:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800989c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009868:	f7ff ffea 	bl	8009840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800986c:	480c      	ldr	r0, [pc, #48]	@ (80098a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800986e:	490d      	ldr	r1, [pc, #52]	@ (80098a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009870:	4a0d      	ldr	r2, [pc, #52]	@ (80098a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009874:	e002      	b.n	800987c <LoopCopyDataInit>

08009876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800987a:	3304      	adds	r3, #4

0800987c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800987c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800987e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009880:	d3f9      	bcc.n	8009876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009882:	4a0a      	ldr	r2, [pc, #40]	@ (80098ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009884:	4c0a      	ldr	r4, [pc, #40]	@ (80098b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009888:	e001      	b.n	800988e <LoopFillZerobss>

0800988a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800988a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800988c:	3204      	adds	r2, #4

0800988e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800988e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009890:	d3fb      	bcc.n	800988a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8009892:	f005 f817 	bl	800e8c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009896:	f7ff fa61 	bl	8008d5c <main>
  bx  lr    
 800989a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800989c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80098a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80098a4:	200005cc 	.word	0x200005cc
  ldr r2, =_sidata
 80098a8:	08014e98 	.word	0x08014e98
  ldr r2, =_sbss
 80098ac:	200005cc 	.word	0x200005cc
  ldr r4, =_ebss
 80098b0:	20005604 	.word	0x20005604

080098b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80098b4:	e7fe      	b.n	80098b4 <ADC_IRQHandler>

080098b6 <LL_GPIO_SetOutputPin>:
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	619a      	str	r2, [r3, #24]
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <LL_GPIO_ResetOutputPin>:
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	041a      	lsls	r2, r3, #16
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	619a      	str	r2, [r3, #24]
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <WDT_init>:




void WDT_init(void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 80098f4:	4b03      	ldr	r3, [pc, #12]	@ (8009904 <WDT_init+0x14>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]

}
 80098fa:	bf00      	nop
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	20005364 	.word	0x20005364

08009908 <WDT_create_task>:

void WDT_create_task(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800990c:	4902      	ldr	r1, [pc, #8]	@ (8009918 <WDT_create_task+0x10>)
 800990e:	4803      	ldr	r0, [pc, #12]	@ (800991c <WDT_create_task+0x14>)
 8009910:	f000 ffda 	bl	800a8c8 <SCH_TASK_CreateTask>

}
 8009914:	bf00      	nop
 8009916:	bd80      	pop	{r7, pc}
 8009918:	200003f8 	.word	0x200003f8
 800991c:	200003f4 	.word	0x200003f4

08009920 <status_wdt_update>:

void	status_wdt_update(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0

		if (WDT_Current){
 8009924:	4b14      	ldr	r3, [pc, #80]	@ (8009978 <status_wdt_update+0x58>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d012      	beq.n	8009952 <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800992c:	2001      	movs	r0, #1
 800992e:	f000 ffb5 	bl	800a89c <SCH_TIM_HasCompleted>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01d      	beq.n	8009974 <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 8009938:	4b0f      	ldr	r3, [pc, #60]	@ (8009978 <status_wdt_update+0x58>)
 800993a:	2200      	movs	r2, #0
 800993c:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800993e:	2102      	movs	r1, #2
 8009940:	480e      	ldr	r0, [pc, #56]	@ (800997c <status_wdt_update+0x5c>)
 8009942:	f7ff ffc6 	bl	80098d2 <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 8009946:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800994a:	2001      	movs	r0, #1
 800994c:	f000 ff90 	bl	800a870 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 8009950:	e010      	b.n	8009974 <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8009952:	2001      	movs	r0, #1
 8009954:	f000 ffa2 	bl	800a89c <SCH_TIM_HasCompleted>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <status_wdt_update+0x54>
				WDT_Current = 1;
 800995e:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <status_wdt_update+0x58>)
 8009960:	2201      	movs	r2, #1
 8009962:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8009964:	2102      	movs	r1, #2
 8009966:	4805      	ldr	r0, [pc, #20]	@ (800997c <status_wdt_update+0x5c>)
 8009968:	f7ff ffa5 	bl	80098b6 <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800996c:	21c8      	movs	r1, #200	@ 0xc8
 800996e:	2001      	movs	r0, #1
 8009970:	f000 ff7e 	bl	800a870 <SCH_TIM_Start>
}
 8009974:	bf00      	nop
 8009976:	bd80      	pop	{r7, pc}
 8009978:	20005364 	.word	0x20005364
 800997c:	40020000 	.word	0x40020000

08009980 <LL_GPIO_SetPinMode>:
{
 8009980:	b480      	push	{r7}
 8009982:	b08b      	sub	sp, #44	@ 0x2c
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	fa93 f3a3 	rbit	r3, r3
 800999a:	613b      	str	r3, [r7, #16]
  return result;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80099a6:	2320      	movs	r3, #32
 80099a8:	e003      	b.n	80099b2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	fab3 f383 	clz	r3, r3
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	2103      	movs	r1, #3
 80099b6:	fa01 f303 	lsl.w	r3, r1, r3
 80099ba:	43db      	mvns	r3, r3
 80099bc:	401a      	ands	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	fa93 f3a3 	rbit	r3, r3
 80099c8:	61fb      	str	r3, [r7, #28]
  return result;
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80099d4:	2320      	movs	r3, #32
 80099d6:	e003      	b.n	80099e0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80099d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099da:	fab3 f383 	clz	r3, r3
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	fa01 f303 	lsl.w	r3, r1, r3
 80099e8:	431a      	orrs	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	601a      	str	r2, [r3, #0]
}
 80099ee:	bf00      	nop
 80099f0:	372c      	adds	r7, #44	@ 0x2c
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <LL_GPIO_SetPinOutputType>:
{
 80099fa:	b480      	push	{r7}
 80099fc:	b085      	sub	sp, #20
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	43db      	mvns	r3, r3
 8009a0e:	401a      	ands	r2, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	431a      	orrs	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	605a      	str	r2, [r3, #4]
}
 8009a1e:	bf00      	nop
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <LL_GPIO_SetPinSpeed>:
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b08b      	sub	sp, #44	@ 0x2c
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	fa93 f3a3 	rbit	r3, r3
 8009a44:	613b      	str	r3, [r7, #16]
  return result;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009a50:	2320      	movs	r3, #32
 8009a52:	e003      	b.n	8009a5c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	fab3 f383 	clz	r3, r3
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	2103      	movs	r1, #3
 8009a60:	fa01 f303 	lsl.w	r3, r1, r3
 8009a64:	43db      	mvns	r3, r3
 8009a66:	401a      	ands	r2, r3
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	fa93 f3a3 	rbit	r3, r3
 8009a72:	61fb      	str	r3, [r7, #28]
  return result;
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009a7e:	2320      	movs	r3, #32
 8009a80:	e003      	b.n	8009a8a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a84:	fab3 f383 	clz	r3, r3
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a92:	431a      	orrs	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	609a      	str	r2, [r3, #8]
}
 8009a98:	bf00      	nop
 8009a9a:	372c      	adds	r7, #44	@ 0x2c
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <LL_GPIO_SetPinPull>:
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b08b      	sub	sp, #44	@ 0x2c
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	fa93 f3a3 	rbit	r3, r3
 8009abe:	613b      	str	r3, [r7, #16]
  return result;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009aca:	2320      	movs	r3, #32
 8009acc:	e003      	b.n	8009ad6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	fab3 f383 	clz	r3, r3
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	2103      	movs	r1, #3
 8009ada:	fa01 f303 	lsl.w	r3, r1, r3
 8009ade:	43db      	mvns	r3, r3
 8009ae0:	401a      	ands	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	fa93 f3a3 	rbit	r3, r3
 8009aec:	61fb      	str	r3, [r7, #28]
  return result;
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009af8:	2320      	movs	r3, #32
 8009afa:	e003      	b.n	8009b04 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afe:	fab3 f383 	clz	r3, r3
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	005b      	lsls	r3, r3, #1
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	fa01 f303 	lsl.w	r3, r1, r3
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	60da      	str	r2, [r3, #12]
}
 8009b12:	bf00      	nop
 8009b14:	372c      	adds	r7, #44	@ 0x2c
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <LL_GPIO_SetAFPin_0_7>:
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b08b      	sub	sp, #44	@ 0x2c
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a1a      	ldr	r2, [r3, #32]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	fa93 f3a3 	rbit	r3, r3
 8009b38:	613b      	str	r3, [r7, #16]
  return result;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009b44:	2320      	movs	r3, #32
 8009b46:	e003      	b.n	8009b50 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	fab3 f383 	clz	r3, r3
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	210f      	movs	r1, #15
 8009b54:	fa01 f303 	lsl.w	r3, r1, r3
 8009b58:	43db      	mvns	r3, r3
 8009b5a:	401a      	ands	r2, r3
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	fa93 f3a3 	rbit	r3, r3
 8009b66:	61fb      	str	r3, [r7, #28]
  return result;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009b72:	2320      	movs	r3, #32
 8009b74:	e003      	b.n	8009b7e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	fab3 f383 	clz	r3, r3
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	6879      	ldr	r1, [r7, #4]
 8009b82:	fa01 f303 	lsl.w	r3, r1, r3
 8009b86:	431a      	orrs	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	621a      	str	r2, [r3, #32]
}
 8009b8c:	bf00      	nop
 8009b8e:	372c      	adds	r7, #44	@ 0x2c
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <LL_GPIO_SetAFPin_8_15>:
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b08b      	sub	sp, #44	@ 0x2c
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	0a1b      	lsrs	r3, r3, #8
 8009bac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	fa93 f3a3 	rbit	r3, r3
 8009bb4:	613b      	str	r3, [r7, #16]
  return result;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009bc0:	2320      	movs	r3, #32
 8009bc2:	e003      	b.n	8009bcc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	fab3 f383 	clz	r3, r3
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	210f      	movs	r1, #15
 8009bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	401a      	ands	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	0a1b      	lsrs	r3, r3, #8
 8009bdc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	fa93 f3a3 	rbit	r3, r3
 8009be4:	61fb      	str	r3, [r7, #28]
  return result;
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	e003      	b.n	8009bfc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	fab3 f383 	clz	r3, r3
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	fa01 f303 	lsl.w	r3, r1, r3
 8009c04:	431a      	orrs	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009c0a:	bf00      	nop
 8009c0c:	372c      	adds	r7, #44	@ 0x2c
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b08a      	sub	sp, #40	@ 0x28
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	fa93 f3a3 	rbit	r3, r3
 8009c34:	617b      	str	r3, [r7, #20]
  return result;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <LL_GPIO_Init+0x2e>
    return 32U;
 8009c40:	2320      	movs	r3, #32
 8009c42:	e003      	b.n	8009c4c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	fab3 f383 	clz	r3, r3
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009c4e:	e057      	b.n	8009d00 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	2101      	movs	r1, #1
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	fa01 f303 	lsl.w	r3, r1, r3
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d049      	beq.n	8009cfa <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d003      	beq.n	8009c76 <LL_GPIO_Init+0x60>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d10d      	bne.n	8009c92 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	6a39      	ldr	r1, [r7, #32]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff fed3 	bl	8009a2a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6a39      	ldr	r1, [r7, #32]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff feb4 	bl	80099fa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	461a      	mov	r2, r3
 8009c98:	6a39      	ldr	r1, [r7, #32]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff ff02 	bl	8009aa4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d121      	bne.n	8009cec <LL_GPIO_Init+0xd6>
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	fa93 f3a3 	rbit	r3, r3
 8009cb2:	60bb      	str	r3, [r7, #8]
  return result;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <LL_GPIO_Init+0xac>
    return 32U;
 8009cbe:	2320      	movs	r3, #32
 8009cc0:	e003      	b.n	8009cca <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	fab3 f383 	clz	r3, r3
 8009cc8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8009cca:	2b07      	cmp	r3, #7
 8009ccc:	d807      	bhi.n	8009cde <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	6a39      	ldr	r1, [r7, #32]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff ff21 	bl	8009b1e <LL_GPIO_SetAFPin_0_7>
 8009cdc:	e006      	b.n	8009cec <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6a39      	ldr	r1, [r7, #32]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7ff ff56 	bl	8009b98 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	6a39      	ldr	r1, [r7, #32]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff fe43 	bl	8009980 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	fa22 f303 	lsr.w	r3, r2, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1a0      	bne.n	8009c50 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3728      	adds	r7, #40	@ 0x28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <LL_I2C_Enable>:
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f043 0201 	orr.w	r2, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	601a      	str	r2, [r3, #0]
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <LL_I2C_Disable>:
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f023 0201 	bic.w	r2, r3, #1
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	601a      	str	r2, [r3, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <LL_I2C_SetOwnAddress1>:
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009d6c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	431a      	orrs	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	609a      	str	r2, [r3, #8]
}
 8009d7c:	bf00      	nop
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <LL_I2C_ConfigSpeed>:
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4a42      	ldr	r2, [pc, #264]	@ (8009eac <LL_I2C_ConfigSpeed+0x124>)
 8009da2:	fba2 2303 	umull	r2, r3, r2, r3
 8009da6:	0c9b      	lsrs	r3, r3, #18
 8009da8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	431a      	orrs	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	493a      	ldr	r1, [pc, #232]	@ (8009eb0 <LL_I2C_ConfigSpeed+0x128>)
 8009dc6:	428b      	cmp	r3, r1
 8009dc8:	d802      	bhi.n	8009dd0 <LL_I2C_ConfigSpeed+0x48>
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	e009      	b.n	8009de4 <LL_I2C_ConfigSpeed+0x5c>
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8009dd6:	fb01 f303 	mul.w	r3, r1, r3
 8009dda:	4936      	ldr	r1, [pc, #216]	@ (8009eb4 <LL_I2C_ConfigSpeed+0x12c>)
 8009ddc:	fba1 1303 	umull	r1, r3, r1, r3
 8009de0:	099b      	lsrs	r3, r3, #6
 8009de2:	3301      	adds	r3, #1
 8009de4:	431a      	orrs	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a30      	ldr	r2, [pc, #192]	@ (8009eb0 <LL_I2C_ConfigSpeed+0x128>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d939      	bls.n	8009e66 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d117      	bne.n	8009e28 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	4413      	add	r3, r2
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	4613      	mov	r3, r2
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	4413      	add	r3, r2
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8009e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e20:	e01d      	b.n	8009e5e <LL_I2C_ConfigSpeed+0xd6>
 8009e22:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009e26:	e01a      	b.n	8009e5e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009a      	lsls	r2, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	009a      	lsls	r2, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8009e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e58:	e001      	b.n	8009e5e <LL_I2C_ConfigSpeed+0xd6>
 8009e5a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	e011      	b.n	8009e8a <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009e74:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d005      	beq.n	8009e86 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e84:	e000      	b.n	8009e88 <LL_I2C_ConfigSpeed+0x100>
 8009e86:	2304      	movs	r3, #4
 8009e88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8009e92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	61da      	str	r2, [r3, #28]
}
 8009e9e:	bf00      	nop
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	431bde83 	.word	0x431bde83
 8009eb0:	000186a0 	.word	0x000186a0
 8009eb4:	10624dd3 	.word	0x10624dd3

08009eb8 <LL_I2C_SetMode>:
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f023 021a 	bic.w	r2, r3, #26
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	601a      	str	r2, [r3, #0]
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <LL_I2C_AcknowledgeNextData>:
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff ff12 	bl	8009d38 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8009f14:	f107 0308 	add.w	r3, r7, #8
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 f895 	bl	800a048 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8009f1e:	6939      	ldr	r1, [r7, #16]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff ff2d 	bl	8009d88 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68d9      	ldr	r1, [r3, #12]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff ff0d 	bl	8009d58 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff ffb7 	bl	8009eb8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fee4 	bl	8009d18 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff ffc1 	bl	8009ede <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <LL_RCC_GetSysClkSource>:
{
 8009f68:	b480      	push	{r7}
 8009f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009f6c:	4b04      	ldr	r3, [pc, #16]	@ (8009f80 <LL_RCC_GetSysClkSource+0x18>)
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	f003 030c 	and.w	r3, r3, #12
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	40023800 	.word	0x40023800

08009f84 <LL_RCC_GetAHBPrescaler>:
{
 8009f84:	b480      	push	{r7}
 8009f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009f88:	4b04      	ldr	r3, [pc, #16]	@ (8009f9c <LL_RCC_GetAHBPrescaler+0x18>)
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	40023800 	.word	0x40023800

08009fa0 <LL_RCC_GetAPB1Prescaler>:
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009fa4:	4b04      	ldr	r3, [pc, #16]	@ (8009fb8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	40023800 	.word	0x40023800

08009fbc <LL_RCC_GetAPB2Prescaler>:
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009fc0:	4b04      	ldr	r3, [pc, #16]	@ (8009fd4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40023800 	.word	0x40023800

08009fd8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009fdc:	4b04      	ldr	r3, [pc, #16]	@ (8009ff0 <LL_RCC_PLL_GetMainSource+0x18>)
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	40023800 	.word	0x40023800

08009ff4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009ff8:	4b04      	ldr	r3, [pc, #16]	@ (800a00c <LL_RCC_PLL_GetN+0x18>)
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	099b      	lsrs	r3, r3, #6
 8009ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800a002:	4618      	mov	r0, r3
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	40023800 	.word	0x40023800

0800a010 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800a010:	b480      	push	{r7}
 800a012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800a014:	4b04      	ldr	r3, [pc, #16]	@ (800a028 <LL_RCC_PLL_GetP+0x18>)
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	40023800 	.word	0x40023800

0800a02c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a030:	4b04      	ldr	r3, [pc, #16]	@ (800a044 <LL_RCC_PLL_GetDivider+0x18>)
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800a038:	4618      	mov	r0, r3
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	40023800 	.word	0x40023800

0800a048 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a050:	f000 f820 	bl	800a094 <RCC_GetSystemClockFreq>
 800a054:	4602      	mov	r2, r0
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 f840 	bl	800a0e4 <RCC_GetHCLKClockFreq>
 800a064:	4602      	mov	r2, r0
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 f84e 	bl	800a110 <RCC_GetPCLK1ClockFreq>
 800a074:	4602      	mov	r2, r0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 f85a 	bl	800a138 <RCC_GetPCLK2ClockFreq>
 800a084:	4602      	mov	r2, r0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	60da      	str	r2, [r3, #12]
}
 800a08a:	bf00      	nop
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a09e:	f7ff ff63 	bl	8009f68 <LL_RCC_GetSysClkSource>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d00c      	beq.n	800a0c2 <RCC_GetSystemClockFreq+0x2e>
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	d80f      	bhi.n	800a0cc <RCC_GetSystemClockFreq+0x38>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <RCC_GetSystemClockFreq+0x22>
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d003      	beq.n	800a0bc <RCC_GetSystemClockFreq+0x28>
 800a0b4:	e00a      	b.n	800a0cc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800a0b6:	4b09      	ldr	r3, [pc, #36]	@ (800a0dc <RCC_GetSystemClockFreq+0x48>)
 800a0b8:	607b      	str	r3, [r7, #4]
      break;
 800a0ba:	e00a      	b.n	800a0d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a0bc:	4b08      	ldr	r3, [pc, #32]	@ (800a0e0 <RCC_GetSystemClockFreq+0x4c>)
 800a0be:	607b      	str	r3, [r7, #4]
      break;
 800a0c0:	e007      	b.n	800a0d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800a0c2:	2008      	movs	r0, #8
 800a0c4:	f000 f84c 	bl	800a160 <RCC_PLL_GetFreqDomain_SYS>
 800a0c8:	6078      	str	r0, [r7, #4]
      break;
 800a0ca:	e002      	b.n	800a0d2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800a0cc:	4b03      	ldr	r3, [pc, #12]	@ (800a0dc <RCC_GetSystemClockFreq+0x48>)
 800a0ce:	607b      	str	r3, [r7, #4]
      break;
 800a0d0:	bf00      	nop
  }

  return frequency;
 800a0d2:	687b      	ldr	r3, [r7, #4]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	00f42400 	.word	0x00f42400
 800a0e0:	007a1200 	.word	0x007a1200

0800a0e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a0ec:	f7ff ff4a 	bl	8009f84 <LL_RCC_GetAHBPrescaler>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	091b      	lsrs	r3, r3, #4
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	4a04      	ldr	r2, [pc, #16]	@ (800a10c <RCC_GetHCLKClockFreq+0x28>)
 800a0fa:	5cd3      	ldrb	r3, [r2, r3]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	40d3      	lsrs	r3, r2
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	08014a44 	.word	0x08014a44

0800a110 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a118:	f7ff ff42 	bl	8009fa0 <LL_RCC_GetAPB1Prescaler>
 800a11c:	4603      	mov	r3, r0
 800a11e:	0a9b      	lsrs	r3, r3, #10
 800a120:	4a04      	ldr	r2, [pc, #16]	@ (800a134 <RCC_GetPCLK1ClockFreq+0x24>)
 800a122:	5cd3      	ldrb	r3, [r2, r3]
 800a124:	461a      	mov	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	40d3      	lsrs	r3, r2
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	08014a54 	.word	0x08014a54

0800a138 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800a140:	f7ff ff3c 	bl	8009fbc <LL_RCC_GetAPB2Prescaler>
 800a144:	4603      	mov	r3, r0
 800a146:	0b5b      	lsrs	r3, r3, #13
 800a148:	4a04      	ldr	r2, [pc, #16]	@ (800a15c <RCC_GetPCLK2ClockFreq+0x24>)
 800a14a:	5cd3      	ldrb	r3, [r2, r3]
 800a14c:	461a      	mov	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	40d3      	lsrs	r3, r2
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	08014a54 	.word	0x08014a54

0800a160 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800a160:	b590      	push	{r4, r7, lr}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	2300      	movs	r3, #0
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a174:	f7ff ff30 	bl	8009fd8 <LL_RCC_PLL_GetMainSource>
 800a178:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a186:	d003      	beq.n	800a190 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800a188:	e005      	b.n	800a196 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a18a:	4b12      	ldr	r3, [pc, #72]	@ (800a1d4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800a18c:	617b      	str	r3, [r7, #20]
      break;
 800a18e:	e005      	b.n	800a19c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a190:	4b11      	ldr	r3, [pc, #68]	@ (800a1d8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800a192:	617b      	str	r3, [r7, #20]
      break;
 800a194:	e002      	b.n	800a19c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800a196:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800a198:	617b      	str	r3, [r7, #20]
      break;
 800a19a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b08      	cmp	r3, #8
 800a1a0:	d113      	bne.n	800a1ca <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a1a2:	f7ff ff43 	bl	800a02c <LL_RCC_PLL_GetDivider>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	fbb3 f4f2 	udiv	r4, r3, r2
 800a1ae:	f7ff ff21 	bl	8009ff4 <LL_RCC_PLL_GetN>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	fb03 f404 	mul.w	r4, r3, r4
 800a1b8:	f7ff ff2a 	bl	800a010 <LL_RCC_PLL_GetP>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	0c1b      	lsrs	r3, r3, #16
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	fbb4 f3f3 	udiv	r3, r4, r3
 800a1c8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800a1ca:	693b      	ldr	r3, [r7, #16]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	371c      	adds	r7, #28
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd90      	pop	{r4, r7, pc}
 800a1d4:	00f42400 	.word	0x00f42400
 800a1d8:	007a1200 	.word	0x007a1200

0800a1dc <LL_USART_IsEnabled>:
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1f0:	bf0c      	ite	eq
 800a1f2:	2301      	moveq	r3, #1
 800a1f4:	2300      	movne	r3, #0
 800a1f6:	b2db      	uxtb	r3, r3
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <LL_USART_SetStopBitsLength>:
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	611a      	str	r2, [r3, #16]
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <LL_USART_SetHWFlowCtrl>:
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	431a      	orrs	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	615a      	str	r2, [r3, #20]
}
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <LL_USART_SetBaudRate>:
{
 800a250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a254:	b0c0      	sub	sp, #256	@ 0x100
 800a256:	af00      	add	r7, sp, #0
 800a258:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a25c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800a260:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800a264:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a26c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a270:	f040 810c 	bne.w	800a48c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800a274:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a278:	2200      	movs	r2, #0
 800a27a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a27e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a282:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a286:	4622      	mov	r2, r4
 800a288:	462b      	mov	r3, r5
 800a28a:	1891      	adds	r1, r2, r2
 800a28c:	6639      	str	r1, [r7, #96]	@ 0x60
 800a28e:	415b      	adcs	r3, r3
 800a290:	667b      	str	r3, [r7, #100]	@ 0x64
 800a292:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a296:	4621      	mov	r1, r4
 800a298:	eb12 0801 	adds.w	r8, r2, r1
 800a29c:	4629      	mov	r1, r5
 800a29e:	eb43 0901 	adc.w	r9, r3, r1
 800a2a2:	f04f 0200 	mov.w	r2, #0
 800a2a6:	f04f 0300 	mov.w	r3, #0
 800a2aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2b6:	4690      	mov	r8, r2
 800a2b8:	4699      	mov	r9, r3
 800a2ba:	4623      	mov	r3, r4
 800a2bc:	eb18 0303 	adds.w	r3, r8, r3
 800a2c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	eb49 0303 	adc.w	r3, r9, r3
 800a2ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	469a      	mov	sl, r3
 800a2d6:	4693      	mov	fp, r2
 800a2d8:	eb1a 030a 	adds.w	r3, sl, sl
 800a2dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2de:	eb4b 030b 	adc.w	r3, fp, fp
 800a2e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a2e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a2ec:	f7f6 fcdc 	bl	8000ca8 <__aeabi_uldivmod>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4b64      	ldr	r3, [pc, #400]	@ (800a488 <LL_USART_SetBaudRate+0x238>)
 800a2f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a2fa:	095b      	lsrs	r3, r3, #5
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	b29c      	uxth	r4, r3
 800a302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a306:	2200      	movs	r2, #0
 800a308:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a30c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a310:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800a314:	4642      	mov	r2, r8
 800a316:	464b      	mov	r3, r9
 800a318:	1891      	adds	r1, r2, r2
 800a31a:	6539      	str	r1, [r7, #80]	@ 0x50
 800a31c:	415b      	adcs	r3, r3
 800a31e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a324:	4641      	mov	r1, r8
 800a326:	1851      	adds	r1, r2, r1
 800a328:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a32a:	4649      	mov	r1, r9
 800a32c:	414b      	adcs	r3, r1
 800a32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a330:	f04f 0200 	mov.w	r2, #0
 800a334:	f04f 0300 	mov.w	r3, #0
 800a338:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800a33c:	4659      	mov	r1, fp
 800a33e:	00cb      	lsls	r3, r1, #3
 800a340:	4651      	mov	r1, sl
 800a342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a346:	4651      	mov	r1, sl
 800a348:	00ca      	lsls	r2, r1, #3
 800a34a:	4610      	mov	r0, r2
 800a34c:	4619      	mov	r1, r3
 800a34e:	4603      	mov	r3, r0
 800a350:	4642      	mov	r2, r8
 800a352:	189b      	adds	r3, r3, r2
 800a354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a358:	464b      	mov	r3, r9
 800a35a:	460a      	mov	r2, r1
 800a35c:	eb42 0303 	adc.w	r3, r2, r3
 800a360:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a364:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a368:	2200      	movs	r2, #0
 800a36a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a36e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800a372:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a376:	460b      	mov	r3, r1
 800a378:	18db      	adds	r3, r3, r3
 800a37a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a37c:	4613      	mov	r3, r2
 800a37e:	eb42 0303 	adc.w	r3, r2, r3
 800a382:	647b      	str	r3, [r7, #68]	@ 0x44
 800a384:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a388:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800a38c:	f7f6 fc8c 	bl	8000ca8 <__aeabi_uldivmod>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4611      	mov	r1, r2
 800a396:	4b3c      	ldr	r3, [pc, #240]	@ (800a488 <LL_USART_SetBaudRate+0x238>)
 800a398:	fba3 2301 	umull	r2, r3, r3, r1
 800a39c:	095b      	lsrs	r3, r3, #5
 800a39e:	2264      	movs	r2, #100	@ 0x64
 800a3a0:	fb02 f303 	mul.w	r3, r2, r3
 800a3a4:	1acb      	subs	r3, r1, r3
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a3ac:	4b36      	ldr	r3, [pc, #216]	@ (800a488 <LL_USART_SetBaudRate+0x238>)
 800a3ae:	fba3 2302 	umull	r2, r3, r3, r2
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	4423      	add	r3, r4
 800a3c2:	b29c      	uxth	r4, r3
 800a3c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3ce:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a3d2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	464b      	mov	r3, r9
 800a3da:	1891      	adds	r1, r2, r2
 800a3dc:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a3de:	415b      	adcs	r3, r3
 800a3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a3e6:	4641      	mov	r1, r8
 800a3e8:	1851      	adds	r1, r2, r1
 800a3ea:	6339      	str	r1, [r7, #48]	@ 0x30
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	414b      	adcs	r3, r1
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f2:	f04f 0200 	mov.w	r2, #0
 800a3f6:	f04f 0300 	mov.w	r3, #0
 800a3fa:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a3fe:	4659      	mov	r1, fp
 800a400:	00cb      	lsls	r3, r1, #3
 800a402:	4651      	mov	r1, sl
 800a404:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a408:	4651      	mov	r1, sl
 800a40a:	00ca      	lsls	r2, r1, #3
 800a40c:	4610      	mov	r0, r2
 800a40e:	4619      	mov	r1, r3
 800a410:	4603      	mov	r3, r0
 800a412:	4642      	mov	r2, r8
 800a414:	189b      	adds	r3, r3, r2
 800a416:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a41a:	464b      	mov	r3, r9
 800a41c:	460a      	mov	r2, r1
 800a41e:	eb42 0303 	adc.w	r3, r2, r3
 800a422:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a426:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a430:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800a434:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a438:	460b      	mov	r3, r1
 800a43a:	18db      	adds	r3, r3, r3
 800a43c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a43e:	4613      	mov	r3, r2
 800a440:	eb42 0303 	adc.w	r3, r2, r3
 800a444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a44a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800a44e:	f7f6 fc2b 	bl	8000ca8 <__aeabi_uldivmod>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4b0c      	ldr	r3, [pc, #48]	@ (800a488 <LL_USART_SetBaudRate+0x238>)
 800a458:	fba3 1302 	umull	r1, r3, r3, r2
 800a45c:	095b      	lsrs	r3, r3, #5
 800a45e:	2164      	movs	r1, #100	@ 0x64
 800a460:	fb01 f303 	mul.w	r3, r1, r3
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	3332      	adds	r3, #50	@ 0x32
 800a46a:	4a07      	ldr	r2, [pc, #28]	@ (800a488 <LL_USART_SetBaudRate+0x238>)
 800a46c:	fba2 2303 	umull	r2, r3, r2, r3
 800a470:	095b      	lsrs	r3, r3, #5
 800a472:	b29b      	uxth	r3, r3
 800a474:	f003 0307 	and.w	r3, r3, #7
 800a478:	b29b      	uxth	r3, r3
 800a47a:	4423      	add	r3, r4
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	461a      	mov	r2, r3
 800a480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a484:	609a      	str	r2, [r3, #8]
}
 800a486:	e108      	b.n	800a69a <LL_USART_SetBaudRate+0x44a>
 800a488:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800a48c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a490:	2200      	movs	r2, #0
 800a492:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a496:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a49a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800a49e:	4642      	mov	r2, r8
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	1891      	adds	r1, r2, r2
 800a4a4:	6239      	str	r1, [r7, #32]
 800a4a6:	415b      	adcs	r3, r3
 800a4a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4ae:	4641      	mov	r1, r8
 800a4b0:	1854      	adds	r4, r2, r1
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	eb43 0501 	adc.w	r5, r3, r1
 800a4b8:	f04f 0200 	mov.w	r2, #0
 800a4bc:	f04f 0300 	mov.w	r3, #0
 800a4c0:	00eb      	lsls	r3, r5, #3
 800a4c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4c6:	00e2      	lsls	r2, r4, #3
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	461d      	mov	r5, r3
 800a4cc:	4643      	mov	r3, r8
 800a4ce:	18e3      	adds	r3, r4, r3
 800a4d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a4d4:	464b      	mov	r3, r9
 800a4d6:	eb45 0303 	adc.w	r3, r5, r3
 800a4da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a4de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a4ec:	f04f 0200 	mov.w	r2, #0
 800a4f0:	f04f 0300 	mov.w	r3, #0
 800a4f4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	008b      	lsls	r3, r1, #2
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a502:	4621      	mov	r1, r4
 800a504:	008a      	lsls	r2, r1, #2
 800a506:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800a50a:	f7f6 fbcd 	bl	8000ca8 <__aeabi_uldivmod>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4b65      	ldr	r3, [pc, #404]	@ (800a6a8 <LL_USART_SetBaudRate+0x458>)
 800a514:	fba3 2302 	umull	r2, r3, r3, r2
 800a518:	095b      	lsrs	r3, r3, #5
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	b29c      	uxth	r4, r3
 800a520:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a524:	2200      	movs	r2, #0
 800a526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a52a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a52e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800a532:	4642      	mov	r2, r8
 800a534:	464b      	mov	r3, r9
 800a536:	1891      	adds	r1, r2, r2
 800a538:	61b9      	str	r1, [r7, #24]
 800a53a:	415b      	adcs	r3, r3
 800a53c:	61fb      	str	r3, [r7, #28]
 800a53e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a542:	4641      	mov	r1, r8
 800a544:	1851      	adds	r1, r2, r1
 800a546:	6139      	str	r1, [r7, #16]
 800a548:	4649      	mov	r1, r9
 800a54a:	414b      	adcs	r3, r1
 800a54c:	617b      	str	r3, [r7, #20]
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	f04f 0300 	mov.w	r3, #0
 800a556:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a55a:	4659      	mov	r1, fp
 800a55c:	00cb      	lsls	r3, r1, #3
 800a55e:	4651      	mov	r1, sl
 800a560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a564:	4651      	mov	r1, sl
 800a566:	00ca      	lsls	r2, r1, #3
 800a568:	4610      	mov	r0, r2
 800a56a:	4619      	mov	r1, r3
 800a56c:	4603      	mov	r3, r0
 800a56e:	4642      	mov	r2, r8
 800a570:	189b      	adds	r3, r3, r2
 800a572:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a576:	464b      	mov	r3, r9
 800a578:	460a      	mov	r2, r1
 800a57a:	eb42 0303 	adc.w	r3, r2, r3
 800a57e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a582:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a586:	2200      	movs	r2, #0
 800a588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a58c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800a590:	f04f 0200 	mov.w	r2, #0
 800a594:	f04f 0300 	mov.w	r3, #0
 800a598:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800a59c:	4649      	mov	r1, r9
 800a59e:	008b      	lsls	r3, r1, #2
 800a5a0:	4641      	mov	r1, r8
 800a5a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5a6:	4641      	mov	r1, r8
 800a5a8:	008a      	lsls	r2, r1, #2
 800a5aa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800a5ae:	f7f6 fb7b 	bl	8000ca8 <__aeabi_uldivmod>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800a6a8 <LL_USART_SetBaudRate+0x458>)
 800a5ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	2264      	movs	r2, #100	@ 0x64
 800a5c2:	fb02 f303 	mul.w	r3, r2, r3
 800a5c6:	1acb      	subs	r3, r1, r3
 800a5c8:	011b      	lsls	r3, r3, #4
 800a5ca:	3332      	adds	r3, #50	@ 0x32
 800a5cc:	4a36      	ldr	r2, [pc, #216]	@ (800a6a8 <LL_USART_SetBaudRate+0x458>)
 800a5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d2:	095b      	lsrs	r3, r3, #5
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	4423      	add	r3, r4
 800a5de:	b29c      	uxth	r4, r3
 800a5e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a5e8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a5ea:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a5ee:	4642      	mov	r2, r8
 800a5f0:	464b      	mov	r3, r9
 800a5f2:	1891      	adds	r1, r2, r2
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	415b      	adcs	r3, r3
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5fe:	4641      	mov	r1, r8
 800a600:	1851      	adds	r1, r2, r1
 800a602:	6039      	str	r1, [r7, #0]
 800a604:	4649      	mov	r1, r9
 800a606:	414b      	adcs	r3, r1
 800a608:	607b      	str	r3, [r7, #4]
 800a60a:	f04f 0200 	mov.w	r2, #0
 800a60e:	f04f 0300 	mov.w	r3, #0
 800a612:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a616:	4659      	mov	r1, fp
 800a618:	00cb      	lsls	r3, r1, #3
 800a61a:	4651      	mov	r1, sl
 800a61c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a620:	4651      	mov	r1, sl
 800a622:	00ca      	lsls	r2, r1, #3
 800a624:	4610      	mov	r0, r2
 800a626:	4619      	mov	r1, r3
 800a628:	4603      	mov	r3, r0
 800a62a:	4642      	mov	r2, r8
 800a62c:	189b      	adds	r3, r3, r2
 800a62e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a630:	464b      	mov	r3, r9
 800a632:	460a      	mov	r2, r1
 800a634:	eb42 0303 	adc.w	r3, r2, r3
 800a638:	677b      	str	r3, [r7, #116]	@ 0x74
 800a63a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a63e:	2200      	movs	r2, #0
 800a640:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a642:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a644:	f04f 0200 	mov.w	r2, #0
 800a648:	f04f 0300 	mov.w	r3, #0
 800a64c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800a650:	4649      	mov	r1, r9
 800a652:	008b      	lsls	r3, r1, #2
 800a654:	4641      	mov	r1, r8
 800a656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a65a:	4641      	mov	r1, r8
 800a65c:	008a      	lsls	r2, r1, #2
 800a65e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800a662:	f7f6 fb21 	bl	8000ca8 <__aeabi_uldivmod>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a8 <LL_USART_SetBaudRate+0x458>)
 800a66c:	fba3 1302 	umull	r1, r3, r3, r2
 800a670:	095b      	lsrs	r3, r3, #5
 800a672:	2164      	movs	r1, #100	@ 0x64
 800a674:	fb01 f303 	mul.w	r3, r1, r3
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	3332      	adds	r3, #50	@ 0x32
 800a67e:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a8 <LL_USART_SetBaudRate+0x458>)
 800a680:	fba2 2303 	umull	r2, r3, r2, r3
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	b29b      	uxth	r3, r3
 800a688:	f003 030f 	and.w	r3, r3, #15
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	4423      	add	r3, r4
 800a690:	b29b      	uxth	r3, r3
 800a692:	461a      	mov	r2, r3
 800a694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a698:	609a      	str	r2, [r3, #8]
}
 800a69a:	bf00      	nop
 800a69c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6a6:	bf00      	nop
 800a6a8:	51eb851f 	.word	0x51eb851f

0800a6ac <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff fd8c 	bl	800a1dc <LL_USART_IsEnabled>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d15e      	bne.n	800a788 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800a6d2:	f023 030c 	bic.w	r3, r3, #12
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	6851      	ldr	r1, [r2, #4]
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	68d2      	ldr	r2, [r2, #12]
 800a6de:	4311      	orrs	r1, r2
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	6912      	ldr	r2, [r2, #16]
 800a6e4:	4311      	orrs	r1, r2
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	6992      	ldr	r2, [r2, #24]
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff fd83 	bl	800a204 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	4619      	mov	r1, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff fd90 	bl	800a22a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800a70a:	f107 0308 	add.w	r3, r7, #8
 800a70e:	4618      	mov	r0, r3
 800a710:	f7ff fc9a 	bl	800a048 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a1f      	ldr	r2, [pc, #124]	@ (800a794 <LL_USART_Init+0xe8>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d102      	bne.n	800a722 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	61bb      	str	r3, [r7, #24]
 800a720:	e021      	b.n	800a766 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a1c      	ldr	r2, [pc, #112]	@ (800a798 <LL_USART_Init+0xec>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d102      	bne.n	800a730 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	61bb      	str	r3, [r7, #24]
 800a72e:	e01a      	b.n	800a766 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a1a      	ldr	r2, [pc, #104]	@ (800a79c <LL_USART_Init+0xf0>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d102      	bne.n	800a73e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	e013      	b.n	800a766 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a17      	ldr	r2, [pc, #92]	@ (800a7a0 <LL_USART_Init+0xf4>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d102      	bne.n	800a74c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	61bb      	str	r3, [r7, #24]
 800a74a:	e00c      	b.n	800a766 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a15      	ldr	r2, [pc, #84]	@ (800a7a4 <LL_USART_Init+0xf8>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d102      	bne.n	800a75a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	61bb      	str	r3, [r7, #24]
 800a758:	e005      	b.n	800a766 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a12      	ldr	r2, [pc, #72]	@ (800a7a8 <LL_USART_Init+0xfc>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d101      	bne.n	800a766 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00d      	beq.n	800a788 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d009      	beq.n	800a788 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800a774:	2300      	movs	r3, #0
 800a776:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a780:	69b9      	ldr	r1, [r7, #24]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fd64 	bl	800a250 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a788:	7ffb      	ldrb	r3, [r7, #31]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40011000 	.word	0x40011000
 800a798:	40004400 	.word	0x40004400
 800a79c:	40004800 	.word	0x40004800
 800a7a0:	40011400 	.word	0x40011400
 800a7a4:	40004c00 	.word	0x40004c00
 800a7a8:	40005000 	.word	0x40005000

0800a7ac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7be:	4a07      	ldr	r2, [pc, #28]	@ (800a7dc <LL_InitTick+0x30>)
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800a7c4:	4b05      	ldr	r3, [pc, #20]	@ (800a7dc <LL_InitTick+0x30>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a7ca:	4b04      	ldr	r3, [pc, #16]	@ (800a7dc <LL_InitTick+0x30>)
 800a7cc:	2205      	movs	r2, #5
 800a7ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	e000e010 	.word	0xe000e010

0800a7e0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800a7e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff ffdd 	bl	800a7ac <LL_InitTick>
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800a804:	4a04      	ldr	r2, [pc, #16]	@ (800a818 <LL_SetSystemCoreClock+0x1c>)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6013      	str	r3, [r2, #0]
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	200003f0 	.word	0x200003f0

0800a81c <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800a820:	4b0d      	ldr	r3, [pc, #52]	@ (800a858 <SCH_Initialize+0x3c>)
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800a826:	4b0d      	ldr	r3, [pc, #52]	@ (800a85c <SCH_Initialize+0x40>)
 800a828:	2200      	movs	r2, #0
 800a82a:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 800a82c:	4b0c      	ldr	r3, [pc, #48]	@ (800a860 <SCH_Initialize+0x44>)
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800a832:	2290      	movs	r2, #144	@ 0x90
 800a834:	2100      	movs	r1, #0
 800a836:	480b      	ldr	r0, [pc, #44]	@ (800a864 <SCH_Initialize+0x48>)
 800a838:	f003 ffeb 	bl	800e812 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 800a83c:	2290      	movs	r2, #144	@ 0x90
 800a83e:	2100      	movs	r1, #0
 800a840:	4809      	ldr	r0, [pc, #36]	@ (800a868 <SCH_Initialize+0x4c>)
 800a842:	f003 ffe6 	bl	800e812 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800a846:	2220      	movs	r2, #32
 800a848:	2100      	movs	r1, #0
 800a84a:	4808      	ldr	r0, [pc, #32]	@ (800a86c <SCH_Initialize+0x50>)
 800a84c:	f003 ffe1 	bl	800e812 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 800a850:	f7f6 ff3c 	bl	80016cc <systick_timer_init>
}
 800a854:	bf00      	nop
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20005490 	.word	0x20005490
 800a85c:	200053f8 	.word	0x200053f8
 800a860:	2000548c 	.word	0x2000548c
 800a864:	20005368 	.word	0x20005368
 800a868:	200053fc 	.word	0x200053fc
 800a86c:	20005494 	.word	0x20005494

0800a870 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	6039      	str	r1, [r7, #0]
 800a87a:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	2b07      	cmp	r3, #7
 800a880:	d804      	bhi.n	800a88c <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	4904      	ldr	r1, [pc, #16]	@ (800a898 <SCH_TIM_Start+0x28>)
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	20005494 	.word	0x20005494

0800a89c <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	4a06      	ldr	r2, [pc, #24]	@ (800a8c4 <SCH_TIM_HasCompleted+0x28>)
 800a8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bf0c      	ite	eq
 800a8b2:	2301      	moveq	r3, #1
 800a8b4:	2300      	movne	r3, #0
 800a8b6:	b2db      	uxtb	r3, r3
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	20005494 	.word	0x20005494

0800a8c8 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d028      	beq.n	800a92e <SCH_TASK_CreateTask+0x66>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d025      	beq.n	800a92e <SCH_TASK_CreateTask+0x66>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800a8e2:	4b16      	ldr	r3, [pc, #88]	@ (800a93c <SCH_TASK_CreateTask+0x74>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	2b0a      	cmp	r3, #10
 800a8e8:	d821      	bhi.n	800a92e <SCH_TASK_CreateTask+0x66>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800a8ea:	4b14      	ldr	r3, [pc, #80]	@ (800a93c <SCH_TASK_CreateTask+0x74>)
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	4413      	add	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4a11      	ldr	r2, [pc, #68]	@ (800a940 <SCH_TASK_CreateTask+0x78>)
 800a8fa:	4413      	add	r3, r2
 800a8fc:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = RESET;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2200      	movs	r2, #0
 800a90e:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2201      	movs	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 800a916:	4b09      	ldr	r3, [pc, #36]	@ (800a93c <SCH_TASK_CreateTask+0x74>)
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800a91e:	4b07      	ldr	r3, [pc, #28]	@ (800a93c <SCH_TASK_CreateTask+0x74>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	b2da      	uxtb	r2, r3
 800a926:	4b05      	ldr	r3, [pc, #20]	@ (800a93c <SCH_TASK_CreateTask+0x74>)
 800a928:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	200053f8 	.word	0x200053f8
 800a940:	20005368 	.word	0x20005368

0800a944 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800a94a:	4b42      	ldr	r3, [pc, #264]	@ (800aa54 <SCH_RunSystemTickTimer+0x110>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3301      	adds	r3, #1
 800a950:	4a40      	ldr	r2, [pc, #256]	@ (800aa54 <SCH_RunSystemTickTimer+0x110>)
 800a952:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a954:	2300      	movs	r3, #0
 800a956:	73fb      	strb	r3, [r7, #15]
 800a958:	e025      	b.n	800a9a6 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800a95a:	7bfa      	ldrb	r2, [r7, #15]
 800a95c:	4613      	mov	r3, r2
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4a3c      	ldr	r2, [pc, #240]	@ (800aa58 <SCH_RunSystemTickTimer+0x114>)
 800a966:	4413      	add	r3, r2
 800a968:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d115      	bne.n	800a9a0 <SCH_RunSystemTickTimer+0x5c>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d111      	bne.n	800a9a0 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	429a      	cmp	r2, r3
 800a992:	d305      	bcc.n	800a9a0 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	73fb      	strb	r3, [r7, #15]
 800a9a6:	4b2d      	ldr	r3, [pc, #180]	@ (800aa5c <SCH_RunSystemTickTimer+0x118>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	7bfa      	ldrb	r2, [r7, #15]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d3d4      	bcc.n	800a95a <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73bb      	strb	r3, [r7, #14]
 800a9b4:	e02b      	b.n	800aa0e <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800a9b6:	7bba      	ldrb	r2, [r7, #14]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	4413      	add	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4a27      	ldr	r2, [pc, #156]	@ (800aa60 <SCH_RunSystemTickTimer+0x11c>)
 800a9c2:	4413      	add	r3, r2
 800a9c4:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d11c      	bne.n	800aa08 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	1c5a      	adds	r2, r3, #1
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d310      	bcc.n	800aa08 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	bf0c      	ite	eq
 800a9fc:	2301      	moveq	r3, #1
 800a9fe:	2300      	movne	r3, #0
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	461a      	mov	r2, r3
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	73bb      	strb	r3, [r7, #14]
 800aa0e:	4b15      	ldr	r3, [pc, #84]	@ (800aa64 <SCH_RunSystemTickTimer+0x120>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	7bba      	ldrb	r2, [r7, #14]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d3ce      	bcc.n	800a9b6 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73bb      	strb	r3, [r7, #14]
 800aa1c:	e010      	b.n	800aa40 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	4a11      	ldr	r2, [pc, #68]	@ (800aa68 <SCH_RunSystemTickTimer+0x124>)
 800aa22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d007      	beq.n	800aa3a <SCH_RunSystemTickTimer+0xf6>
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	4a0e      	ldr	r2, [pc, #56]	@ (800aa68 <SCH_RunSystemTickTimer+0x124>)
 800aa2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aa32:	3a01      	subs	r2, #1
 800aa34:	490c      	ldr	r1, [pc, #48]	@ (800aa68 <SCH_RunSystemTickTimer+0x124>)
 800aa36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	73bb      	strb	r3, [r7, #14]
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	2b07      	cmp	r3, #7
 800aa44:	d9eb      	bls.n	800aa1e <SCH_RunSystemTickTimer+0xda>
}
 800aa46:	bf00      	nop
 800aa48:	bf00      	nop
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	20005490 	.word	0x20005490
 800aa58:	20005368 	.word	0x20005368
 800aa5c:	200053f8 	.word	0x200053f8
 800aa60:	200053fc 	.word	0x200053fc
 800aa64:	2000548c 	.word	0x2000548c
 800aa68:	20005494 	.word	0x20005494

0800aa6c <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800aa70:	f7f6 fe1c 	bl	80016ac <systick_timer_start>
}
 800aa74:	bf00      	nop
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
 800aa82:	e01e      	b.n	800aac2 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800aa84:	7bfa      	ldrb	r2, [r7, #15]
 800aa86:	4613      	mov	r3, r2
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	4413      	add	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4a23      	ldr	r2, [pc, #140]	@ (800ab1c <SCH_HandleScheduledTask+0xa4>)
 800aa90:	4413      	add	r3, r2
 800aa92:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	885b      	ldrh	r3, [r3, #2]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d10f      	bne.n	800aabc <SCH_HandleScheduledTask+0x44>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d10b      	bne.n	800aabc <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d003      	beq.n	800aabc <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	3301      	adds	r3, #1
 800aac0:	73fb      	strb	r3, [r7, #15]
 800aac2:	4b17      	ldr	r3, [pc, #92]	@ (800ab20 <SCH_HandleScheduledTask+0xa8>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	7bfa      	ldrb	r2, [r7, #15]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d3db      	bcc.n	800aa84 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800aacc:	2300      	movs	r3, #0
 800aace:	73bb      	strb	r3, [r7, #14]
 800aad0:	e01a      	b.n	800ab08 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800aad2:	7bba      	ldrb	r2, [r7, #14]
 800aad4:	4613      	mov	r3, r2
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4a11      	ldr	r2, [pc, #68]	@ (800ab24 <SCH_HandleScheduledTask+0xac>)
 800aade:	4413      	add	r3, r2
 800aae0:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	885b      	ldrh	r3, [r3, #2]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d10b      	bne.n	800ab02 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2200      	movs	r2, #0
 800aaee:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	3301      	adds	r3, #1
 800ab06:	73bb      	strb	r3, [r7, #14]
 800ab08:	4b07      	ldr	r3, [pc, #28]	@ (800ab28 <SCH_HandleScheduledTask+0xb0>)
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	7bba      	ldrb	r2, [r7, #14]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d3df      	bcc.n	800aad2 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	20005368 	.word	0x20005368
 800ab20:	200053f8 	.word	0x200053f8
 800ab24:	200053fc 	.word	0x200053fc
 800ab28:	2000548c 	.word	0x2000548c

0800ab2c <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint16_t size)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	80fb      	strh	r3, [r7, #6]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	80bb      	strh	r3, [r7, #4]
    uint8_t x;
    uint16_t crc = initial_value;
 800ab3c:	88fb      	ldrh	r3, [r7, #6]
 800ab3e:	81fb      	strh	r3, [r7, #14]

    while(size--)
 800ab40:	e023      	b.n	800ab8a <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 800ab42:	89fb      	ldrh	r3, [r7, #14]
 800ab44:	0a1b      	lsrs	r3, r3, #8
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	1c59      	adds	r1, r3, #1
 800ab4e:	6039      	str	r1, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	4053      	eors	r3, r2
 800ab54:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 800ab56:	7b7b      	ldrb	r3, [r7, #13]
 800ab58:	091b      	lsrs	r3, r3, #4
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	7b7b      	ldrb	r3, [r7, #13]
 800ab5e:	4053      	eors	r3, r2
 800ab60:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 800ab62:	89fb      	ldrh	r3, [r7, #14]
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	b21a      	sxth	r2, r3
 800ab68:	7b7b      	ldrb	r3, [r7, #13]
 800ab6a:	b21b      	sxth	r3, r3
 800ab6c:	031b      	lsls	r3, r3, #12
 800ab6e:	b21b      	sxth	r3, r3
 800ab70:	4053      	eors	r3, r2
 800ab72:	b21a      	sxth	r2, r3
 800ab74:	7b7b      	ldrb	r3, [r7, #13]
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	015b      	lsls	r3, r3, #5
 800ab7a:	b21b      	sxth	r3, r3
 800ab7c:	4053      	eors	r3, r2
 800ab7e:	b21a      	sxth	r2, r3
 800ab80:	7b7b      	ldrb	r3, [r7, #13]
 800ab82:	b21b      	sxth	r3, r3
 800ab84:	4053      	eors	r3, r2
 800ab86:	b21b      	sxth	r3, r3
 800ab88:	81fb      	strh	r3, [r7, #14]
    while(size--)
 800ab8a:	88bb      	ldrh	r3, [r7, #4]
 800ab8c:	1e5a      	subs	r2, r3, #1
 800ab8e:	80ba      	strh	r2, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1d6      	bne.n	800ab42 <crc16_CCITT+0x16>
    }

    return crc;
 800ab94:	89fb      	ldrh	r3, [r7, #14]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
	...

0800aba4 <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4603      	mov	r3, r0
 800abac:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 800abae:	4a06      	ldr	r2, [pc, #24]	@ (800abc8 <fsp_init+0x24>)
 800abb0:	79fb      	ldrb	r3, [r7, #7]
 800abb2:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 800abb4:	4b05      	ldr	r3, [pc, #20]	@ (800abcc <fsp_init+0x28>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	701a      	strb	r2, [r3, #0]
}
 800abba:	bf00      	nop
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	200054b4 	.word	0x200054b4
 800abcc:	200054b5 	.word	0x200054b5

0800abd0 <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af02      	add	r7, sp, #8
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	4603      	mov	r3, r0
 800abda:	71fb      	strb	r3, [r7, #7]
 800abdc:	460b      	mov	r3, r1
 800abde:	71bb      	strb	r3, [r7, #6]
 800abe0:	4613      	mov	r3, r2
 800abe2:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800abe4:	797b      	ldrb	r3, [r7, #5]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d10b      	bne.n	800ac02 <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 800abea:	79ba      	ldrb	r2, [r7, #6]
 800abec:	1df8      	adds	r0, r7, #7
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	2304      	movs	r3, #4
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	4613      	mov	r3, r2
 800abf8:	2200      	movs	r2, #0
 800abfa:	2100      	movs	r1, #0
 800abfc:	f000 f83a 	bl	800ac74 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 800ac00:	e00a      	b.n	800ac18 <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 800ac02:	79ba      	ldrb	r2, [r7, #6]
 800ac04:	1df8      	adds	r0, r7, #7
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	2200      	movs	r2, #0
 800ac12:	2100      	movs	r1, #0
 800ac14:	f000 f82e 	bl	800ac74 <fsp_gen_pkt>
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	6039      	str	r1, [r7, #0]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	71fb      	strb	r3, [r7, #7]
 800ac30:	460b      	mov	r3, r1
 800ac32:	71bb      	strb	r3, [r7, #6]
 800ac34:	4613      	mov	r3, r2
 800ac36:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800ac38:	7c3b      	ldrb	r3, [r7, #16]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d10b      	bne.n	800ac56 <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800ac3e:	7979      	ldrb	r1, [r7, #5]
 800ac40:	79ba      	ldrb	r2, [r7, #6]
 800ac42:	1df8      	adds	r0, r7, #7
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	2308      	movs	r3, #8
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	f000 f810 	bl	800ac74 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 800ac54:	e00a      	b.n	800ac6c <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 800ac56:	7979      	ldrb	r1, [r7, #5]
 800ac58:	79ba      	ldrb	r2, [r7, #6]
 800ac5a:	1df8      	adds	r0, r7, #7
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	2307      	movs	r3, #7
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	460b      	mov	r3, r1
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	f000 f804 	bl	800ac74 <fsp_gen_pkt>
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	4611      	mov	r1, r2
 800ac80:	461a      	mov	r2, r3
 800ac82:	460b      	mov	r3, r1
 800ac84:	71fb      	strb	r3, [r7, #7]
 800ac86:	4613      	mov	r3, r2
 800ac88:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	22ca      	movs	r2, #202	@ 0xca
 800ac8e:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 800ac90:	4b25      	ldr	r3, [pc, #148]	@ (800ad28 <fsp_gen_pkt+0xb4>)
 800ac92:	781a      	ldrb	r2, [r3, #0]
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	79ba      	ldrb	r2, [r7, #6]
 800ac9c:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca0:	79fa      	ldrb	r2, [r7, #7]
 800aca2:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800acaa:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00e      	beq.n	800acd8 <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	78db      	ldrb	r3, [r3, #3]
 800acbe:	3301      	adds	r3, #1
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc4:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 800acc6:	7dbb      	ldrb	r3, [r7, #22]
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	75ba      	strb	r2, [r7, #22]
 800accc:	4619      	mov	r1, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	781a      	ldrb	r2, [r3, #0]
 800acd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd4:	440b      	add	r3, r1
 800acd6:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 800acd8:	2300      	movs	r3, #0
 800acda:	75fb      	strb	r3, [r7, #23]
 800acdc:	e00d      	b.n	800acfa <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	441a      	add	r2, r3
 800ace4:	7dbb      	ldrb	r3, [r7, #22]
 800ace6:	1c59      	adds	r1, r3, #1
 800ace8:	75b9      	strb	r1, [r7, #22]
 800acea:	4619      	mov	r1, r3
 800acec:	7812      	ldrb	r2, [r2, #0]
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	440b      	add	r3, r1
 800acf2:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 800acf4:	7dfb      	ldrb	r3, [r7, #23]
 800acf6:	3301      	adds	r3, #1
 800acf8:	75fb      	strb	r3, [r7, #23]
 800acfa:	7dfa      	ldrb	r2, [r7, #23]
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d3ed      	bcc.n	800acde <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 800ad02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad04:	1c59      	adds	r1, r3, #1
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	78db      	ldrb	r3, [r3, #3]
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	461a      	mov	r2, r3
 800ad10:	2000      	movs	r0, #0
 800ad12:	f7ff ff0b 	bl	800ab2c <crc16_CCITT>
 800ad16:	4603      	mov	r3, r0
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 800ad20:	bf00      	nop
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	200054b4 	.word	0x200054b4

0800ad2c <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b0c8      	sub	sp, #288	@ 0x120
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ad36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ad3a:	6018      	str	r0, [r3, #0]
 800ad3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ad40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800ad44:	6019      	str	r1, [r3, #0]
 800ad46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ad4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ad4e:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 800ad56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ad60:	461a      	mov	r2, r3
 800ad62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ad66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	7819      	ldrb	r1, [r3, #0]
 800ad6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ad72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad76:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 800ad78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ad82:	461a      	mov	r2, r3
 800ad84:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ad88:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	7859      	ldrb	r1, [r3, #1]
 800ad90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ad94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad98:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 800ad9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ada4:	461a      	mov	r2, r3
 800ada6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800adaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	7899      	ldrb	r1, [r3, #2]
 800adb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800adb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800adba:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 800adbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800adc6:	461a      	mov	r2, r3
 800adc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800adcc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	78d9      	ldrb	r1, [r3, #3]
 800add4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800add8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800addc:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 800adde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ade8:	461a      	mov	r2, r3
 800adea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800adee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	7919      	ldrb	r1, [r3, #4]
 800adf6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800adfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800adfe:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 800ae00:	2300      	movs	r3, #0
 800ae02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800ae06:	e088      	b.n	800af1a <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 800ae08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ae0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ae16:	4413      	add	r3, r2
 800ae18:	3305      	adds	r3, #5
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2bca      	cmp	r3, #202	@ 0xca
 800ae1e:	d118      	bne.n	800ae52 <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800ae20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ae30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ae34:	21bd      	movs	r1, #189	@ 0xbd
 800ae36:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800ae38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae3c:	1c5a      	adds	r2, r3, #1
 800ae3e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ae42:	461a      	mov	r2, r3
 800ae44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ae48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ae4c:	21dc      	movs	r1, #220	@ 0xdc
 800ae4e:	5499      	strb	r1, [r3, r2]
 800ae50:	e05e      	b.n	800af10 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 800ae52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ae56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ae60:	4413      	add	r3, r2
 800ae62:	3305      	adds	r3, #5
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	2bef      	cmp	r3, #239	@ 0xef
 800ae68:	d118      	bne.n	800ae9c <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800ae6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ae74:	461a      	mov	r2, r3
 800ae76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ae7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ae7e:	21bd      	movs	r1, #189	@ 0xbd
 800ae80:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800ae82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ae92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ae96:	21de      	movs	r1, #222	@ 0xde
 800ae98:	5499      	strb	r1, [r3, r2]
 800ae9a:	e039      	b.n	800af10 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 800ae9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aea0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aeaa:	4413      	add	r3, r2
 800aeac:	3305      	adds	r3, #5
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2bbd      	cmp	r3, #189	@ 0xbd
 800aeb2:	d118      	bne.n	800aee6 <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800aeb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aebe:	461a      	mov	r2, r3
 800aec0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aec4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aec8:	21bd      	movs	r1, #189	@ 0xbd
 800aeca:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800aecc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aed6:	461a      	mov	r2, r3
 800aed8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aedc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aee0:	21db      	movs	r1, #219	@ 0xdb
 800aee2:	5499      	strb	r1, [r3, r2]
 800aee4:	e014      	b.n	800af10 <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 800aee6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aef0:	4619      	mov	r1, r3
 800aef2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aef6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800af00:	4413      	add	r3, r2
 800af02:	3305      	adds	r3, #5
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800af0e:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 800af10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800af14:	3301      	adds	r3, #1
 800af16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800af1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af1e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	78db      	ldrb	r3, [r3, #3]
 800af26:	461a      	mov	r2, r3
 800af28:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800af2c:	4293      	cmp	r3, r2
 800af2e:	f6ff af6b 	blt.w	800ae08 <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 800af32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800af40:	0a1b      	lsrs	r3, r3, #8
 800af42:	b29b      	uxth	r3, r3
 800af44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 800af48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800af56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 800af5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af5e:	2bca      	cmp	r3, #202	@ 0xca
 800af60:	d118      	bne.n	800af94 <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800af62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800af6c:	461a      	mov	r2, r3
 800af6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800af76:	21bd      	movs	r1, #189	@ 0xbd
 800af78:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800af7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800af84:	461a      	mov	r2, r3
 800af86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800af8e:	21dc      	movs	r1, #220	@ 0xdc
 800af90:	5499      	strb	r1, [r3, r2]
 800af92:	e046      	b.n	800b022 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 800af94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af98:	2bef      	cmp	r3, #239	@ 0xef
 800af9a:	d118      	bne.n	800afce <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800af9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800afa6:	461a      	mov	r2, r3
 800afa8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800afac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800afb0:	21bd      	movs	r1, #189	@ 0xbd
 800afb2:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800afb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800afbe:	461a      	mov	r2, r3
 800afc0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800afc4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800afc8:	21de      	movs	r1, #222	@ 0xde
 800afca:	5499      	strb	r1, [r3, r2]
 800afcc:	e029      	b.n	800b022 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 800afce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afd2:	2bbd      	cmp	r3, #189	@ 0xbd
 800afd4:	d118      	bne.n	800b008 <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800afd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800afe0:	461a      	mov	r2, r3
 800afe2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800afe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800afea:	21bd      	movs	r1, #189	@ 0xbd
 800afec:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800afee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aff8:	461a      	mov	r2, r3
 800affa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800affe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b002:	21db      	movs	r1, #219	@ 0xdb
 800b004:	5499      	strb	r1, [r3, r2]
 800b006:	e00c      	b.n	800b022 <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 800b008:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b012:	4619      	mov	r1, r3
 800b014:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b018:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b01c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800b020:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 800b022:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b026:	2bca      	cmp	r3, #202	@ 0xca
 800b028:	d118      	bne.n	800b05c <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800b02a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b034:	461a      	mov	r2, r3
 800b036:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b03a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b03e:	21bd      	movs	r1, #189	@ 0xbd
 800b040:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800b042:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b04c:	461a      	mov	r2, r3
 800b04e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b052:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b056:	21dc      	movs	r1, #220	@ 0xdc
 800b058:	5499      	strb	r1, [r3, r2]
 800b05a:	e046      	b.n	800b0ea <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 800b05c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b060:	2bef      	cmp	r3, #239	@ 0xef
 800b062:	d118      	bne.n	800b096 <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800b064:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b06e:	461a      	mov	r2, r3
 800b070:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b074:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b078:	21bd      	movs	r1, #189	@ 0xbd
 800b07a:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800b07c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b080:	1c5a      	adds	r2, r3, #1
 800b082:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b086:	461a      	mov	r2, r3
 800b088:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b08c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b090:	21de      	movs	r1, #222	@ 0xde
 800b092:	5499      	strb	r1, [r3, r2]
 800b094:	e029      	b.n	800b0ea <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 800b096:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b09a:	2bbd      	cmp	r3, #189	@ 0xbd
 800b09c:	d118      	bne.n	800b0d0 <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800b09e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b0ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b0b2:	21bd      	movs	r1, #189	@ 0xbd
 800b0b4:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800b0b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b0c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b0ca:	21db      	movs	r1, #219	@ 0xdb
 800b0cc:	5499      	strb	r1, [r3, r2]
 800b0ce:	e00c      	b.n	800b0ea <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 800b0d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b0da:	4619      	mov	r1, r3
 800b0dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b0e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b0e4:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800b0e8:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 800b0ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b0fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b0fe:	21ef      	movs	r1, #239	@ 0xef
 800b100:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 800b102:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800b106:	f107 0114 	add.w	r1, r7, #20
 800b10a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b10e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800b112:	6818      	ldr	r0, [r3, #0]
 800b114:	f003 fbfd 	bl	800e912 <memcpy>
    *frame_len = encoded_length;
 800b118:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b11c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800b126:	701a      	strb	r2, [r3, #0]
}
 800b128:	bf00      	nop
 800b12a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800b134:	b580      	push	{r7, lr}
 800b136:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b140:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b144:	6018      	str	r0, [r3, #0]
 800b146:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b14a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b154:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800b158:	460a      	mov	r2, r1
 800b15a:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 800b16e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b172:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b05      	cmp	r3, #5
 800b17a:	d862      	bhi.n	800b242 <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 800b17c:	2302      	movs	r3, #2
 800b17e:	e133      	b.n	800b3e8 <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 800b180:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b18a:	461a      	mov	r2, r3
 800b18c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b190:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4413      	add	r3, r2
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 800b19e:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d038      	beq.n	800b218 <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 800b1a6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800b1aa:	2bdc      	cmp	r3, #220	@ 0xdc
 800b1ac:	d10c      	bne.n	800b1c8 <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800b1ae:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b1be:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b1c2:	21ca      	movs	r1, #202	@ 0xca
 800b1c4:	5499      	strb	r1, [r3, r2]
 800b1c6:	e023      	b.n	800b210 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 800b1c8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800b1cc:	2bde      	cmp	r3, #222	@ 0xde
 800b1ce:	d10c      	bne.n	800b1ea <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800b1d0:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b1e0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b1e4:	21ef      	movs	r1, #239	@ 0xef
 800b1e6:	5499      	strb	r1, [r3, r2]
 800b1e8:	e012      	b.n	800b210 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 800b1ea:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800b1ee:	2bdb      	cmp	r3, #219	@ 0xdb
 800b1f0:	d10c      	bne.n	800b20c <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800b1f2:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b202:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b206:	21bd      	movs	r1, #189	@ 0xbd
 800b208:	5499      	strb	r1, [r3, r2]
 800b20a:	e001      	b.n	800b210 <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 800b20c:	2302      	movs	r3, #2
 800b20e:	e0eb      	b.n	800b3e8 <frame_decode+0x2b4>
            }
            escape = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800b216:	e014      	b.n	800b242 <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 800b218:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800b21c:	2bbd      	cmp	r3, #189	@ 0xbd
 800b21e:	d103      	bne.n	800b228 <frame_decode+0xf4>
        	escape = 1;
 800b220:	2301      	movs	r3, #1
 800b222:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800b226:	e00c      	b.n	800b242 <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 800b228:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b22c:	1c5a      	adds	r2, r3, #1
 800b22e:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b232:	4619      	mov	r1, r3
 800b234:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b238:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b23c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800b240:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800b242:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b246:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800b24a:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d395      	bcc.n	800b180 <frame_decode+0x4c>
        }
	}

    i = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800b25a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b264:	461a      	mov	r2, r3
 800b266:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b26a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b26e:	5c9a      	ldrb	r2, [r3, r2]
 800b270:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b278:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800b27a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b284:	461a      	mov	r2, r3
 800b286:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b28a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b28e:	5c9a      	ldrb	r2, [r3, r2]
 800b290:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b298:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800b29a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b29e:	1c5a      	adds	r2, r3, #1
 800b2a0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b2aa:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b2ae:	5c9a      	ldrb	r2, [r3, r2]
 800b2b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b2b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2b8:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800b2ba:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b2ca:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b2ce:	5c9a      	ldrb	r2, [r3, r2]
 800b2d0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b2d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d8:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 800b2da:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2e2:	78db      	ldrb	r3, [r3, #3]
 800b2e4:	2bf7      	cmp	r3, #247	@ 0xf7
 800b2e6:	d80a      	bhi.n	800b2fe <frame_decode+0x1ca>
 800b2e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b2ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2f0:	78db      	ldrb	r3, [r3, #3]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b2f8:	3b06      	subs	r3, #6
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d001      	beq.n	800b302 <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 800b2fe:	2306      	movs	r3, #6
 800b300:	e072      	b.n	800b3e8 <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800b302:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b306:	f107 0210 	add.w	r2, r7, #16
 800b30a:	18d1      	adds	r1, r2, r3
 800b30c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b314:	78db      	ldrb	r3, [r3, #3]
 800b316:	461a      	mov	r2, r3
 800b318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31c:	3305      	adds	r3, #5
 800b31e:	4618      	mov	r0, r3
 800b320:	f003 faf7 	bl	800e912 <memcpy>
    i += fsp_pkt.length;
 800b324:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b32c:	78da      	ldrb	r2, [r3, #3]
 800b32e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b332:	4413      	add	r3, r2
 800b334:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 800b338:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b33c:	1c5a      	adds	r2, r3, #1
 800b33e:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b342:	461a      	mov	r2, r3
 800b344:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b348:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b34c:	5c9b      	ldrb	r3, [r3, r2]
 800b34e:	021b      	lsls	r3, r3, #8
 800b350:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 800b354:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b35e:	461a      	mov	r2, r3
 800b360:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b364:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800b368:	5c9b      	ldrb	r3, [r3, r2]
 800b36a:	461a      	mov	r2, r3
 800b36c:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800b370:	4313      	orrs	r3, r2
 800b372:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 800b376:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b37a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b37e:	78db      	ldrb	r3, [r3, #3]
 800b380:	3304      	adds	r3, #4
 800b382:	b29a      	uxth	r2, r3
 800b384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b388:	3301      	adds	r3, #1
 800b38a:	4619      	mov	r1, r3
 800b38c:	2000      	movs	r0, #0
 800b38e:	f7ff fbcd 	bl	800ab2c <crc16_CCITT>
 800b392:	4603      	mov	r3, r0
 800b394:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 800b398:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 800b39c:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d001      	beq.n	800b3a8 <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 800b3a4:	2305      	movs	r3, #5
 800b3a6:	e01f      	b.n	800b3e8 <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 800b3a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b0:	789a      	ldrb	r2, [r3, #2]
 800b3b2:	4b10      	ldr	r3, [pc, #64]	@ (800b3f4 <frame_decode+0x2c0>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d001      	beq.n	800b3be <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e014      	b.n	800b3e8 <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 800b3be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b3c2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	23fe      	movs	r3, #254	@ 0xfe
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f003 fa9b 	bl	800e912 <memcpy>


    frame_processing(&fsp_pkt);
 800b3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 f905 	bl	800b5f0 <frame_processing>


    return 0;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	200054b4 	.word	0x200054b4

0800b3f8 <frame_decode_rs422>:



int frame_decode_rs422(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b404:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b408:	6018      	str	r0, [r3, #0]
 800b40a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b40e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b418:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800b41c:	460a      	mov	r2, r1
 800b41e:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800b426:	2300      	movs	r3, #0
 800b428:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
//	if (length < FSP_PKT_MIN_LENGTH - 2) {
//	        return FSP_PKT_INVALID;
//	}


	while (i < length){
 800b432:	e060      	b.n	800b4f6 <frame_decode_rs422+0xfe>
        uint8_t byte = buffer[i++];
 800b434:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b43e:	461a      	mov	r2, r3
 800b440:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b444:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4413      	add	r3, r2
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (escape) {
 800b452:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800b456:	2b00      	cmp	r3, #0
 800b458:	d038      	beq.n	800b4cc <frame_decode_rs422+0xd4>
            if (byte == FSP_PKT_TSOD) {
 800b45a:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800b45e:	2bdc      	cmp	r3, #220	@ 0xdc
 800b460:	d10c      	bne.n	800b47c <frame_decode_rs422+0x84>
                decoded_payload[j++] = FSP_PKT_SOD;
 800b462:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b46c:	461a      	mov	r2, r3
 800b46e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b476:	21ca      	movs	r1, #202	@ 0xca
 800b478:	5499      	strb	r1, [r3, r2]
 800b47a:	e023      	b.n	800b4c4 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TEOF) {
 800b47c:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800b480:	2bde      	cmp	r3, #222	@ 0xde
 800b482:	d10c      	bne.n	800b49e <frame_decode_rs422+0xa6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800b484:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b488:	1c5a      	adds	r2, r3, #1
 800b48a:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b48e:	461a      	mov	r2, r3
 800b490:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b494:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b498:	21ef      	movs	r1, #239	@ 0xef
 800b49a:	5499      	strb	r1, [r3, r2]
 800b49c:	e012      	b.n	800b4c4 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TESC) {
 800b49e:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800b4a2:	2bdb      	cmp	r3, #219	@ 0xdb
 800b4a4:	d10c      	bne.n	800b4c0 <frame_decode_rs422+0xc8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800b4a6:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b4b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b4ba:	21bd      	movs	r1, #189	@ 0xbd
 800b4bc:	5499      	strb	r1, [r3, r2]
 800b4be:	e001      	b.n	800b4c4 <frame_decode_rs422+0xcc>
            } else {
            	return FSP_PKT_INVALID;
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	e08f      	b.n	800b5e4 <frame_decode_rs422+0x1ec>
            }
            escape = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800b4ca:	e014      	b.n	800b4f6 <frame_decode_rs422+0xfe>
        } else if (byte == FSP_PKT_ESC) {
 800b4cc:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800b4d0:	2bbd      	cmp	r3, #189	@ 0xbd
 800b4d2:	d103      	bne.n	800b4dc <frame_decode_rs422+0xe4>
        	escape = 1;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800b4da:	e00c      	b.n	800b4f6 <frame_decode_rs422+0xfe>
        } else {
            decoded_payload[j++] = byte;
 800b4dc:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b4ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b4f0:	f897 220c 	ldrb.w	r2, [r7, #524]	@ 0x20c
 800b4f4:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800b4f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b4fa:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800b4fe:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	d395      	bcc.n	800b434 <frame_decode_rs422+0x3c>
        }
	}

    i = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800b50e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b518:	461a      	mov	r2, r3
 800b51a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b51e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b522:	5c9a      	ldrb	r2, [r3, r2]
 800b524:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b52c:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800b52e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b538:	461a      	mov	r2, r3
 800b53a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b53e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b542:	5c9a      	ldrb	r2, [r3, r2]
 800b544:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b54c:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800b54e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b558:	461a      	mov	r2, r3
 800b55a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b55e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b562:	5c9a      	ldrb	r2, [r3, r2]
 800b564:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b56c:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800b56e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b578:	461a      	mov	r2, r3
 800b57a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b57e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b582:	5c9a      	ldrb	r2, [r3, r2]
 800b584:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b58c:	711a      	strb	r2, [r3, #4]

//    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
//        return FSP_PKT_WRONG_LENGTH;
//    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800b58e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b592:	f107 0214 	add.w	r2, r7, #20
 800b596:	18d1      	adds	r1, r2, r3
 800b598:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b59c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5a0:	78db      	ldrb	r3, [r3, #3]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800b5a8:	3305      	adds	r3, #5
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f003 f9b1 	bl	800e912 <memcpy>
    i += fsp_pkt.length;
 800b5b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b5b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5b8:	78da      	ldrb	r2, [r3, #3]
 800b5ba:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b5be:	4413      	add	r3, r2
 800b5c0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
//    // Address
//    if (fsp_pkt.dst_adr != fsp_my_adr) {
//        return FSP_PKT_WRONG_ADR;
//    }

    *pkt = fsp_pkt;
 800b5c4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b5c8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b5d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4619      	mov	r1, r3
 800b5da:	23fe      	movs	r3, #254	@ 0xfe
 800b5dc:	461a      	mov	r2, r3
 800b5de:	f003 f998 	bl	800e912 <memcpy>


    return 0;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
	...

0800b5f0 <frame_processing>:


char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	f5ad 6dc0 	sub.w	sp, sp, #1536	@ 0x600
 800b5f8:	af2c      	add	r7, sp, #176	@ 0xb0
 800b5fa:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b5fe:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b602:	6018      	str	r0, [r3, #0]


	switch (fsp_pkt->src_adr){
 800b604:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b608:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	785b      	ldrb	r3, [r3, #1]
 800b610:	3b02      	subs	r3, #2
 800b612:	2b03      	cmp	r3, #3
 800b614:	f202 80c7 	bhi.w	800d7a6 <frame_processing+0x21b6>
 800b618:	a201      	add	r2, pc, #4	@ (adr r2, 800b620 <frame_processing+0x30>)
 800b61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61e:	bf00      	nop
 800b620:	0800b631 	.word	0x0800b631
 800b624:	0800c1f3 	.word	0x0800c1f3
 800b628:	0800ca6d 	.word	0x0800ca6d
 800b62c:	0800ca75 	.word	0x0800ca75
		case FSP_ADR_PMU:
			switch (fsp_pkt->type)
 800b630:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b634:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	791b      	ldrb	r3, [r3, #4]
 800b63c:	2b05      	cmp	r3, #5
 800b63e:	d003      	beq.n	800b648 <frame_processing+0x58>
 800b640:	2b07      	cmp	r3, #7
 800b642:	d010      	beq.n	800b666 <frame_processing+0x76>
 800b644:	f000 bdcb 	b.w	800c1de <frame_processing+0xbee>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800b648:	f7f6 fd62 	bl	8002110 <clear_send_flag>

                    if (uart_choose_uart5) {
 800b64c:	4b9d      	ldr	r3, [pc, #628]	@ (800b8c4 <frame_processing+0x2d4>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <frame_processing+0x6e>
                    	Uart_sendstring(UART5, "\nPMU_ACK\r\n> ");
 800b656:	499c      	ldr	r1, [pc, #624]	@ (800b8c8 <frame_processing+0x2d8>)
 800b658:	489c      	ldr	r0, [pc, #624]	@ (800b8cc <frame_processing+0x2dc>)
 800b65a:	f7f6 fc37 	bl	8001ecc <Uart_sendstring>
                    }
					Uart_sendstring(USART6, "\nPMU_ACK\r\n> ");
 800b65e:	499a      	ldr	r1, [pc, #616]	@ (800b8c8 <frame_processing+0x2d8>)
 800b660:	489b      	ldr	r0, [pc, #620]	@ (800b8d0 <frame_processing+0x2e0>)
 800b662:	f7f6 fc33 	bl	8001ecc <Uart_sendstring>

				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800b666:	f7f6 fd53 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800b66a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b66e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	795b      	ldrb	r3, [r3, #5]
 800b676:	2b08      	cmp	r3, #8
 800b678:	dc1a      	bgt.n	800b6b0 <frame_processing+0xc0>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f2c0 85b4 	blt.w	800c1e8 <frame_processing+0xbf8>
 800b680:	2b08      	cmp	r3, #8
 800b682:	f200 85b1 	bhi.w	800c1e8 <frame_processing+0xbf8>
 800b686:	a201      	add	r2, pc, #4	@ (adr r2, 800b68c <frame_processing+0x9c>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6b9 	.word	0x0800b6b9
 800b690:	0800b739 	.word	0x0800b739
 800b694:	0800b98b 	.word	0x0800b98b
 800b698:	0800bb0b 	.word	0x0800bb0b
 800b69c:	0800bbfd 	.word	0x0800bbfd
 800b6a0:	0800c1e9 	.word	0x0800c1e9
 800b6a4:	0800c1e9 	.word	0x0800c1e9
 800b6a8:	0800c1e9 	.word	0x0800c1e9
 800b6ac:	0800bccd 	.word	0x0800bccd
 800b6b0:	2bff      	cmp	r3, #255	@ 0xff
 800b6b2:	d021      	beq.n	800b6f8 <frame_processing+0x108>

							    }
							    break;
					}

					break;
 800b6b4:	f000 bd98 	b.w	800c1e8 <frame_processing+0xbf8>
							sprintf(buffer_0x00, "PMU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800b6b8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b6bc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	799b      	ldrb	r3, [r3, #6]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b6ca:	4982      	ldr	r1, [pc, #520]	@ (800b8d4 <frame_processing+0x2e4>)
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f003 f83d 	bl	800e74c <siprintf>
		                    if (uart_choose_uart5) {
 800b6d2:	4b7c      	ldr	r3, [pc, #496]	@ (800b8c4 <frame_processing+0x2d4>)
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d005      	beq.n	800b6e8 <frame_processing+0xf8>
								Uart_sendstring(UART5, buffer_0x00);
 800b6dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	487a      	ldr	r0, [pc, #488]	@ (800b8cc <frame_processing+0x2dc>)
 800b6e4:	f7f6 fbf2 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x00);
 800b6e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4878      	ldr	r0, [pc, #480]	@ (800b8d0 <frame_processing+0x2e0>)
 800b6f0:	f7f6 fbec 	bl	8001ecc <Uart_sendstring>
							break;
 800b6f4:	f000 bd72 	b.w	800c1dc <frame_processing+0xbec>
							sprintf(buffer_0xFF, "PMU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800b6f8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b6fc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	799b      	ldrb	r3, [r3, #6]
 800b704:	461a      	mov	r2, r3
 800b706:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b70a:	4973      	ldr	r1, [pc, #460]	@ (800b8d8 <frame_processing+0x2e8>)
 800b70c:	4618      	mov	r0, r3
 800b70e:	f003 f81d 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800b712:	4b6c      	ldr	r3, [pc, #432]	@ (800b8c4 <frame_processing+0x2d4>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d005      	beq.n	800b728 <frame_processing+0x138>
								Uart_sendstring(UART5, buffer_0xFF);
 800b71c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b720:	4619      	mov	r1, r3
 800b722:	486a      	ldr	r0, [pc, #424]	@ (800b8cc <frame_processing+0x2dc>)
 800b724:	f7f6 fbd2 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0xFF);
 800b728:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b72c:	4619      	mov	r1, r3
 800b72e:	4868      	ldr	r0, [pc, #416]	@ (800b8d0 <frame_processing+0x2e0>)
 800b730:	f7f6 fbcc 	bl	8001ecc <Uart_sendstring>
							break;
 800b734:	f000 bd52 	b.w	800c1dc <frame_processing+0xbec>
						    int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800b738:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b73c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	799b      	ldrb	r3, [r3, #6]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	b21a      	sxth	r2, r3
 800b748:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b74c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	79db      	ldrb	r3, [r3, #7]
 800b754:	b21b      	sxth	r3, r3
 800b756:	4313      	orrs	r3, r2
 800b758:	f8a7 3494 	strh.w	r3, [r7, #1172]	@ 0x494
						    int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800b75c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b760:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	7a1b      	ldrb	r3, [r3, #8]
 800b768:	021b      	lsls	r3, r3, #8
 800b76a:	b21a      	sxth	r2, r3
 800b76c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b770:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	7a5b      	ldrb	r3, [r3, #9]
 800b778:	b21b      	sxth	r3, r3
 800b77a:	4313      	orrs	r3, r2
 800b77c:	f8a7 3492 	strh.w	r3, [r7, #1170]	@ 0x492
						    int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800b780:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b784:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	7a9b      	ldrb	r3, [r3, #10]
 800b78c:	021b      	lsls	r3, r3, #8
 800b78e:	b21a      	sxth	r2, r3
 800b790:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b794:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	7adb      	ldrb	r3, [r3, #11]
 800b79c:	b21b      	sxth	r3, r3
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	f8a7 3490 	strh.w	r3, [r7, #1168]	@ 0x490
						    int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800b7a4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b7a8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	7b1b      	ldrb	r3, [r3, #12]
 800b7b0:	021b      	lsls	r3, r3, #8
 800b7b2:	b21a      	sxth	r2, r3
 800b7b4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b7b8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	7b5b      	ldrb	r3, [r3, #13]
 800b7c0:	b21b      	sxth	r3, r3
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	f8a7 348e 	strh.w	r3, [r7, #1166]	@ 0x48e
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b7c8:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	da03      	bge.n	800b7d8 <frame_processing+0x1e8>
 800b7d0:	4b42      	ldr	r3, [pc, #264]	@ (800b8dc <frame_processing+0x2ec>)
 800b7d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b7d6:	e002      	b.n	800b7de <frame_processing+0x1ee>
 800b7d8:	4b41      	ldr	r3, [pc, #260]	@ (800b8e0 <frame_processing+0x2f0>)
 800b7da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800b7de:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bfb8      	it	lt
 800b7e6:	425b      	neglt	r3, r3
 800b7e8:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b7ea:	4a3e      	ldr	r2, [pc, #248]	@ (800b8e4 <frame_processing+0x2f4>)
 800b7ec:	fb82 1203 	smull	r1, r2, r2, r3
 800b7f0:	1152      	asrs	r2, r2, #5
 800b7f2:	17db      	asrs	r3, r3, #31
 800b7f4:	eba2 0c03 	sub.w	ip, r2, r3
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800b7f8:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	bfb8      	it	lt
 800b800:	425b      	neglt	r3, r3
 800b802:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b804:	4a37      	ldr	r2, [pc, #220]	@ (800b8e4 <frame_processing+0x2f4>)
 800b806:	fb82 1203 	smull	r1, r2, r2, r3
 800b80a:	1151      	asrs	r1, r2, #5
 800b80c:	17da      	asrs	r2, r3, #31
 800b80e:	1a8c      	subs	r4, r1, r2
 800b810:	2264      	movs	r2, #100	@ 0x64
 800b812:	fb04 f202 	mul.w	r2, r4, r2
 800b816:	1a9c      	subs	r4, r3, r2
 800b818:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	da01      	bge.n	800b824 <frame_processing+0x234>
 800b820:	4e2e      	ldr	r6, [pc, #184]	@ (800b8dc <frame_processing+0x2ec>)
 800b822:	e000      	b.n	800b826 <frame_processing+0x236>
 800b824:	4e2e      	ldr	r6, [pc, #184]	@ (800b8e0 <frame_processing+0x2f0>)
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800b826:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	bfb8      	it	lt
 800b82e:	425b      	neglt	r3, r3
 800b830:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b832:	4a2c      	ldr	r2, [pc, #176]	@ (800b8e4 <frame_processing+0x2f4>)
 800b834:	fb82 1203 	smull	r1, r2, r2, r3
 800b838:	1152      	asrs	r2, r2, #5
 800b83a:	17db      	asrs	r3, r3, #31
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800b842:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800b846:	2b00      	cmp	r3, #0
 800b848:	bfb8      	it	lt
 800b84a:	425b      	neglt	r3, r3
 800b84c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b84e:	4a25      	ldr	r2, [pc, #148]	@ (800b8e4 <frame_processing+0x2f4>)
 800b850:	fb82 1203 	smull	r1, r2, r2, r3
 800b854:	1151      	asrs	r1, r2, #5
 800b856:	17da      	asrs	r2, r3, #31
 800b858:	1a8d      	subs	r5, r1, r2
 800b85a:	2264      	movs	r2, #100	@ 0x64
 800b85c:	fb05 f202 	mul.w	r2, r5, r2
 800b860:	1a9d      	subs	r5, r3, r2
 800b862:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800b866:	2b00      	cmp	r3, #0
 800b868:	da03      	bge.n	800b872 <frame_processing+0x282>
 800b86a:	4b1c      	ldr	r3, [pc, #112]	@ (800b8dc <frame_processing+0x2ec>)
 800b86c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b870:	e002      	b.n	800b878 <frame_processing+0x288>
 800b872:	4b1b      	ldr	r3, [pc, #108]	@ (800b8e0 <frame_processing+0x2f0>)
 800b874:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800b878:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bfb8      	it	lt
 800b880:	425b      	neglt	r3, r3
 800b882:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b884:	4a17      	ldr	r2, [pc, #92]	@ (800b8e4 <frame_processing+0x2f4>)
 800b886:	fb82 1203 	smull	r1, r2, r2, r3
 800b88a:	1152      	asrs	r2, r2, #5
 800b88c:	17db      	asrs	r3, r3, #31
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800b894:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bfb8      	it	lt
 800b89c:	425b      	neglt	r3, r3
 800b89e:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b8a0:	4a10      	ldr	r2, [pc, #64]	@ (800b8e4 <frame_processing+0x2f4>)
 800b8a2:	fb82 1203 	smull	r1, r2, r2, r3
 800b8a6:	1151      	asrs	r1, r2, #5
 800b8a8:	17da      	asrs	r2, r3, #31
 800b8aa:	1a89      	subs	r1, r1, r2
 800b8ac:	2264      	movs	r2, #100	@ 0x64
 800b8ae:	fb01 f202 	mul.w	r2, r1, r2
 800b8b2:	1a99      	subs	r1, r3, r2
 800b8b4:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	da15      	bge.n	800b8e8 <frame_processing+0x2f8>
 800b8bc:	4b07      	ldr	r3, [pc, #28]	@ (800b8dc <frame_processing+0x2ec>)
 800b8be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b8c2:	e014      	b.n	800b8ee <frame_processing+0x2fe>
 800b8c4:	20004850 	.word	0x20004850
 800b8c8:	080141d8 	.word	0x080141d8
 800b8cc:	40005000 	.word	0x40005000
 800b8d0:	40011400 	.word	0x40011400
 800b8d4:	080141e8 	.word	0x080141e8
 800b8d8:	08014204 	.word	0x08014204
 800b8dc:	08014220 	.word	0x08014220
 800b8e0:	08014224 	.word	0x08014224
 800b8e4:	51eb851f 	.word	0x51eb851f
 800b8e8:	4bbc      	ldr	r3, [pc, #752]	@ (800bbdc <frame_processing+0x5ec>)
 800b8ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800b8ee:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bfb8      	it	lt
 800b8f6:	425b      	neglt	r3, r3
 800b8f8:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b8fa:	4ab9      	ldr	r2, [pc, #740]	@ (800bbe0 <frame_processing+0x5f0>)
 800b8fc:	fb82 0203 	smull	r0, r2, r2, r3
 800b900:	1152      	asrs	r2, r2, #5
 800b902:	17db      	asrs	r3, r3, #31
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800b90a:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfb8      	it	lt
 800b912:	425b      	neglt	r3, r3
 800b914:	b29b      	uxth	r3, r3
 800b916:	4618      	mov	r0, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b918:	4bb1      	ldr	r3, [pc, #708]	@ (800bbe0 <frame_processing+0x5f0>)
 800b91a:	fb83 2300 	smull	r2, r3, r3, r0
 800b91e:	115a      	asrs	r2, r3, #5
 800b920:	17c3      	asrs	r3, r0, #31
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	2264      	movs	r2, #100	@ 0x64
 800b926:	fb02 f303 	mul.w	r3, r2, r3
 800b92a:	1ac3      	subs	r3, r0, r3
 800b92c:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800b930:	9309      	str	r3, [sp, #36]	@ 0x24
 800b932:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b936:	9308      	str	r3, [sp, #32]
 800b938:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b93c:	9307      	str	r3, [sp, #28]
 800b93e:	9106      	str	r1, [sp, #24]
 800b940:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b944:	9305      	str	r3, [sp, #20]
 800b946:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	9503      	str	r5, [sp, #12]
 800b94e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b952:	9302      	str	r3, [sp, #8]
 800b954:	9601      	str	r6, [sp, #4]
 800b956:	9400      	str	r4, [sp, #0]
 800b958:	4663      	mov	r3, ip
 800b95a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b95e:	49a1      	ldr	r1, [pc, #644]	@ (800bbe4 <frame_processing+0x5f4>)
 800b960:	f002 fef4 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800b964:	4ba0      	ldr	r3, [pc, #640]	@ (800bbe8 <frame_processing+0x5f8>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d005      	beq.n	800b97a <frame_processing+0x38a>
								Uart_sendstring(UART5, buffer_0x01);
 800b96e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b972:	4619      	mov	r1, r3
 800b974:	489d      	ldr	r0, [pc, #628]	@ (800bbec <frame_processing+0x5fc>)
 800b976:	f7f6 faa9 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x01);
 800b97a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b97e:	4619      	mov	r1, r3
 800b980:	489b      	ldr	r0, [pc, #620]	@ (800bbf0 <frame_processing+0x600>)
 800b982:	f7f6 faa3 	bl	8001ecc <Uart_sendstring>
						break;
 800b986:	f000 bc29 	b.w	800c1dc <frame_processing+0xbec>
					        uint16_t bat0 = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800b98a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b98e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	799b      	ldrb	r3, [r3, #6]
 800b996:	021b      	lsls	r3, r3, #8
 800b998:	b21a      	sxth	r2, r3
 800b99a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b99e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	79db      	ldrb	r3, [r3, #7]
 800b9a6:	b21b      	sxth	r3, r3
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	b21b      	sxth	r3, r3
 800b9ac:	f8a7 349c 	strh.w	r3, [r7, #1180]	@ 0x49c
					        uint16_t bat1 = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800b9b0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b9b4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	7a1b      	ldrb	r3, [r3, #8]
 800b9bc:	021b      	lsls	r3, r3, #8
 800b9be:	b21a      	sxth	r2, r3
 800b9c0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b9c4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	7a5b      	ldrb	r3, [r3, #9]
 800b9cc:	b21b      	sxth	r3, r3
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	b21b      	sxth	r3, r3
 800b9d2:	f8a7 349a 	strh.w	r3, [r7, #1178]	@ 0x49a
					        uint16_t bat2 = (uint16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800b9d6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b9da:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	7a9b      	ldrb	r3, [r3, #10]
 800b9e2:	021b      	lsls	r3, r3, #8
 800b9e4:	b21a      	sxth	r2, r3
 800b9e6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b9ea:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	7adb      	ldrb	r3, [r3, #11]
 800b9f2:	b21b      	sxth	r3, r3
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	b21b      	sxth	r3, r3
 800b9f8:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498
					        uint16_t bat3 = (uint16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800b9fc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ba00:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	7b1b      	ldrb	r3, [r3, #12]
 800ba08:	021b      	lsls	r3, r3, #8
 800ba0a:	b21a      	sxth	r2, r3
 800ba0c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ba10:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	7b5b      	ldrb	r3, [r3, #13]
 800ba18:	b21b      	sxth	r3, r3
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	b21b      	sxth	r3, r3
 800ba1e:	f8a7 3496 	strh.w	r3, [r7, #1174]	@ 0x496
					        sprintf(buffer_0x02, "PMU_Res: CMDcode 0x02 [BAT0: %d.%02d V, BAT1: %d.%02d V, BAT2: %d.%02d V, BAT3: %d.%02d V]\n",
 800ba22:	f8b7 349c 	ldrh.w	r3, [r7, #1180]	@ 0x49c
 800ba26:	4a6e      	ldr	r2, [pc, #440]	@ (800bbe0 <frame_processing+0x5f0>)
 800ba28:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2c:	095b      	lsrs	r3, r3, #5
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	469c      	mov	ip, r3
 800ba32:	f8b7 349c 	ldrh.w	r3, [r7, #1180]	@ 0x49c
 800ba36:	4a6a      	ldr	r2, [pc, #424]	@ (800bbe0 <frame_processing+0x5f0>)
 800ba38:	fba2 1203 	umull	r1, r2, r2, r3
 800ba3c:	0952      	lsrs	r2, r2, #5
 800ba3e:	2164      	movs	r1, #100	@ 0x64
 800ba40:	fb01 f202 	mul.w	r2, r1, r2
 800ba44:	1a9b      	subs	r3, r3, r2
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	469e      	mov	lr, r3
 800ba4a:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 800ba4e:	4a64      	ldr	r2, [pc, #400]	@ (800bbe0 <frame_processing+0x5f0>)
 800ba50:	fba2 2303 	umull	r2, r3, r2, r3
 800ba54:	095b      	lsrs	r3, r3, #5
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	461c      	mov	r4, r3
 800ba5a:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 800ba5e:	4a60      	ldr	r2, [pc, #384]	@ (800bbe0 <frame_processing+0x5f0>)
 800ba60:	fba2 1203 	umull	r1, r2, r2, r3
 800ba64:	0952      	lsrs	r2, r2, #5
 800ba66:	2164      	movs	r1, #100	@ 0x64
 800ba68:	fb01 f202 	mul.w	r2, r1, r2
 800ba6c:	1a9b      	subs	r3, r3, r2
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	461d      	mov	r5, r3
 800ba72:	f8b7 3498 	ldrh.w	r3, [r7, #1176]	@ 0x498
 800ba76:	4a5a      	ldr	r2, [pc, #360]	@ (800bbe0 <frame_processing+0x5f0>)
 800ba78:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7c:	095b      	lsrs	r3, r3, #5
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	461e      	mov	r6, r3
 800ba82:	f8b7 3498 	ldrh.w	r3, [r7, #1176]	@ 0x498
 800ba86:	4a56      	ldr	r2, [pc, #344]	@ (800bbe0 <frame_processing+0x5f0>)
 800ba88:	fba2 1203 	umull	r1, r2, r2, r3
 800ba8c:	0952      	lsrs	r2, r2, #5
 800ba8e:	2164      	movs	r1, #100	@ 0x64
 800ba90:	fb01 f202 	mul.w	r2, r1, r2
 800ba94:	1a9b      	subs	r3, r3, r2
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ba9c:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	@ 0x496
 800baa0:	4a4f      	ldr	r2, [pc, #316]	@ (800bbe0 <frame_processing+0x5f0>)
 800baa2:	fba2 2303 	umull	r2, r3, r2, r3
 800baa6:	095b      	lsrs	r3, r3, #5
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800baae:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	@ 0x496
 800bab2:	4a4b      	ldr	r2, [pc, #300]	@ (800bbe0 <frame_processing+0x5f0>)
 800bab4:	fba2 1203 	umull	r1, r2, r2, r3
 800bab8:	0952      	lsrs	r2, r2, #5
 800baba:	2164      	movs	r1, #100	@ 0x64
 800babc:	fb01 f202 	mul.w	r2, r1, r2
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bac8:	9305      	str	r3, [sp, #20]
 800baca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bace:	9204      	str	r2, [sp, #16]
 800bad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bad4:	9303      	str	r3, [sp, #12]
 800bad6:	9602      	str	r6, [sp, #8]
 800bad8:	9501      	str	r5, [sp, #4]
 800bada:	9400      	str	r4, [sp, #0]
 800badc:	4673      	mov	r3, lr
 800bade:	4662      	mov	r2, ip
 800bae0:	4944      	ldr	r1, [pc, #272]	@ (800bbf4 <frame_processing+0x604>)
 800bae2:	f002 fe33 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800bae6:	4b40      	ldr	r3, [pc, #256]	@ (800bbe8 <frame_processing+0x5f8>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <frame_processing+0x50c>
								Uart_sendstring(UART5, buffer_0x02);
 800baf0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800baf4:	4619      	mov	r1, r3
 800baf6:	483d      	ldr	r0, [pc, #244]	@ (800bbec <frame_processing+0x5fc>)
 800baf8:	f7f6 f9e8 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x02);
 800bafc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bb00:	4619      	mov	r1, r3
 800bb02:	483b      	ldr	r0, [pc, #236]	@ (800bbf0 <frame_processing+0x600>)
 800bb04:	f7f6 f9e2 	bl	8001ecc <Uart_sendstring>
							break;
 800bb08:	e368      	b.n	800c1dc <frame_processing+0xbec>
						    uint16_t vin = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800bb0a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bb0e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	799b      	ldrb	r3, [r3, #6]
 800bb16:	021b      	lsls	r3, r3, #8
 800bb18:	b21a      	sxth	r2, r3
 800bb1a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bb1e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	79db      	ldrb	r3, [r3, #7]
 800bb26:	b21b      	sxth	r3, r3
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	b21b      	sxth	r3, r3
 800bb2c:	f8a7 34a0 	strh.w	r3, [r7, #1184]	@ 0x4a0
						    uint16_t iin = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800bb30:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bb34:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	7a1b      	ldrb	r3, [r3, #8]
 800bb3c:	021b      	lsls	r3, r3, #8
 800bb3e:	b21a      	sxth	r2, r3
 800bb40:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bb44:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	7a5b      	ldrb	r3, [r3, #9]
 800bb4c:	b21b      	sxth	r3, r3
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	b21b      	sxth	r3, r3
 800bb52:	f8a7 349e 	strh.w	r3, [r7, #1182]	@ 0x49e
						    sprintf(buffer_0x03, "PMU_Res: CMDcode 0x03 [VIN: %d.%02d V, IIN: %d.%02d A]\n",
 800bb56:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800bb5a:	4a21      	ldr	r2, [pc, #132]	@ (800bbe0 <frame_processing+0x5f0>)
 800bb5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb60:	095b      	lsrs	r3, r3, #5
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	461d      	mov	r5, r3
 800bb66:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800bb6a:	4a1d      	ldr	r2, [pc, #116]	@ (800bbe0 <frame_processing+0x5f0>)
 800bb6c:	fba2 1203 	umull	r1, r2, r2, r3
 800bb70:	0952      	lsrs	r2, r2, #5
 800bb72:	2164      	movs	r1, #100	@ 0x64
 800bb74:	fb01 f202 	mul.w	r2, r1, r2
 800bb78:	1a9b      	subs	r3, r3, r2
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	461e      	mov	r6, r3
 800bb7e:	f8b7 349e 	ldrh.w	r3, [r7, #1182]	@ 0x49e
 800bb82:	4a17      	ldr	r2, [pc, #92]	@ (800bbe0 <frame_processing+0x5f0>)
 800bb84:	fba2 2303 	umull	r2, r3, r2, r3
 800bb88:	095b      	lsrs	r3, r3, #5
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	461c      	mov	r4, r3
 800bb8e:	f8b7 349e 	ldrh.w	r3, [r7, #1182]	@ 0x49e
 800bb92:	4a13      	ldr	r2, [pc, #76]	@ (800bbe0 <frame_processing+0x5f0>)
 800bb94:	fba2 1203 	umull	r1, r2, r2, r3
 800bb98:	0952      	lsrs	r2, r2, #5
 800bb9a:	2164      	movs	r1, #100	@ 0x64
 800bb9c:	fb01 f202 	mul.w	r2, r1, r2
 800bba0:	1a9b      	subs	r3, r3, r2
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bba8:	9301      	str	r3, [sp, #4]
 800bbaa:	9400      	str	r4, [sp, #0]
 800bbac:	4633      	mov	r3, r6
 800bbae:	462a      	mov	r2, r5
 800bbb0:	4911      	ldr	r1, [pc, #68]	@ (800bbf8 <frame_processing+0x608>)
 800bbb2:	f002 fdcb 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800bbb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe8 <frame_processing+0x5f8>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <frame_processing+0x5dc>
								Uart_sendstring(UART5, buffer_0x03);
 800bbc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4809      	ldr	r0, [pc, #36]	@ (800bbec <frame_processing+0x5fc>)
 800bbc8:	f7f6 f980 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x03);
 800bbcc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4807      	ldr	r0, [pc, #28]	@ (800bbf0 <frame_processing+0x600>)
 800bbd4:	f7f6 f97a 	bl	8001ecc <Uart_sendstring>
						    break;
 800bbd8:	e300      	b.n	800c1dc <frame_processing+0xbec>
 800bbda:	bf00      	nop
 800bbdc:	08014224 	.word	0x08014224
 800bbe0:	51eb851f 	.word	0x51eb851f
 800bbe4:	08014228 	.word	0x08014228
 800bbe8:	20004850 	.word	0x20004850
 800bbec:	40005000 	.word	0x40005000
 800bbf0:	40011400 	.word	0x40011400
 800bbf4:	08014288 	.word	0x08014288
 800bbf8:	080142e4 	.word	0x080142e4
						    uint16_t vout = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800bbfc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bc00:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	799b      	ldrb	r3, [r3, #6]
 800bc08:	021b      	lsls	r3, r3, #8
 800bc0a:	b21a      	sxth	r2, r3
 800bc0c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bc10:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	79db      	ldrb	r3, [r3, #7]
 800bc18:	b21b      	sxth	r3, r3
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	b21b      	sxth	r3, r3
 800bc1e:	f8a7 34a4 	strh.w	r3, [r7, #1188]	@ 0x4a4
						    uint16_t iout = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800bc22:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bc26:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	7a1b      	ldrb	r3, [r3, #8]
 800bc2e:	021b      	lsls	r3, r3, #8
 800bc30:	b21a      	sxth	r2, r3
 800bc32:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bc36:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	7a5b      	ldrb	r3, [r3, #9]
 800bc3e:	b21b      	sxth	r3, r3
 800bc40:	4313      	orrs	r3, r2
 800bc42:	b21b      	sxth	r3, r3
 800bc44:	f8a7 34a2 	strh.w	r3, [r7, #1186]	@ 0x4a2
						    sprintf(buffer_0x04_pmu, "PMU_Res: CMDcode 0x04 [VOUT: %d.%02d V, IOUT: %d.%02d A]\n",
 800bc48:	f8b7 34a4 	ldrh.w	r3, [r7, #1188]	@ 0x4a4
 800bc4c:	4abf      	ldr	r2, [pc, #764]	@ (800bf4c <frame_processing+0x95c>)
 800bc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc52:	095b      	lsrs	r3, r3, #5
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	461d      	mov	r5, r3
 800bc58:	f8b7 34a4 	ldrh.w	r3, [r7, #1188]	@ 0x4a4
 800bc5c:	4abb      	ldr	r2, [pc, #748]	@ (800bf4c <frame_processing+0x95c>)
 800bc5e:	fba2 1203 	umull	r1, r2, r2, r3
 800bc62:	0952      	lsrs	r2, r2, #5
 800bc64:	2164      	movs	r1, #100	@ 0x64
 800bc66:	fb01 f202 	mul.w	r2, r1, r2
 800bc6a:	1a9b      	subs	r3, r3, r2
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	461e      	mov	r6, r3
 800bc70:	f8b7 34a2 	ldrh.w	r3, [r7, #1186]	@ 0x4a2
 800bc74:	4ab5      	ldr	r2, [pc, #724]	@ (800bf4c <frame_processing+0x95c>)
 800bc76:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7a:	095b      	lsrs	r3, r3, #5
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	461c      	mov	r4, r3
 800bc80:	f8b7 34a2 	ldrh.w	r3, [r7, #1186]	@ 0x4a2
 800bc84:	4ab1      	ldr	r2, [pc, #708]	@ (800bf4c <frame_processing+0x95c>)
 800bc86:	fba2 1203 	umull	r1, r2, r2, r3
 800bc8a:	0952      	lsrs	r2, r2, #5
 800bc8c:	2164      	movs	r1, #100	@ 0x64
 800bc8e:	fb01 f202 	mul.w	r2, r1, r2
 800bc92:	1a9b      	subs	r3, r3, r2
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	9400      	str	r4, [sp, #0]
 800bc9e:	4633      	mov	r3, r6
 800bca0:	462a      	mov	r2, r5
 800bca2:	49ab      	ldr	r1, [pc, #684]	@ (800bf50 <frame_processing+0x960>)
 800bca4:	f002 fd52 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800bca8:	4baa      	ldr	r3, [pc, #680]	@ (800bf54 <frame_processing+0x964>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d005      	beq.n	800bcbe <frame_processing+0x6ce>
							    Uart_sendstring(UART5, buffer_0x04_pmu);
 800bcb2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	48a7      	ldr	r0, [pc, #668]	@ (800bf58 <frame_processing+0x968>)
 800bcba:	f7f6 f907 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x04_pmu);
 800bcbe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	48a5      	ldr	r0, [pc, #660]	@ (800bf5c <frame_processing+0x96c>)
 800bcc6:	f7f6 f901 	bl	8001ecc <Uart_sendstring>
							break;
 800bcca:	e287      	b.n	800c1dc <frame_processing+0xbec>
							    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800bccc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bcd0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	799b      	ldrb	r3, [r3, #6]
 800bcd8:	021b      	lsls	r3, r3, #8
 800bcda:	b21a      	sxth	r2, r3
 800bcdc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bce0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	79db      	ldrb	r3, [r3, #7]
 800bce8:	b21b      	sxth	r3, r3
 800bcea:	4313      	orrs	r3, r2
 800bcec:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc
							    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800bcf0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bcf4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	7a1b      	ldrb	r3, [r3, #8]
 800bcfc:	021b      	lsls	r3, r3, #8
 800bcfe:	b21a      	sxth	r2, r3
 800bd00:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd04:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	7a5b      	ldrb	r3, [r3, #9]
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	f8a7 34ba 	strh.w	r3, [r7, #1210]	@ 0x4ba
							    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800bd14:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd18:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	7a9b      	ldrb	r3, [r3, #10]
 800bd20:	021b      	lsls	r3, r3, #8
 800bd22:	b21a      	sxth	r2, r3
 800bd24:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd28:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	7adb      	ldrb	r3, [r3, #11]
 800bd30:	b21b      	sxth	r3, r3
 800bd32:	4313      	orrs	r3, r2
 800bd34:	f8a7 34b8 	strh.w	r3, [r7, #1208]	@ 0x4b8
							    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800bd38:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd3c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	7b1b      	ldrb	r3, [r3, #12]
 800bd44:	021b      	lsls	r3, r3, #8
 800bd46:	b21a      	sxth	r2, r3
 800bd48:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd4c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	7b5b      	ldrb	r3, [r3, #13]
 800bd54:	b21b      	sxth	r3, r3
 800bd56:	4313      	orrs	r3, r2
 800bd58:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
							    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800bd5c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd60:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	7b9b      	ldrb	r3, [r3, #14]
 800bd68:	021b      	lsls	r3, r3, #8
 800bd6a:	b21a      	sxth	r2, r3
 800bd6c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd70:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	7bdb      	ldrb	r3, [r3, #15]
 800bd78:	b21b      	sxth	r3, r3
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	b21b      	sxth	r3, r3
 800bd7e:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
							    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800bd82:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd86:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	7c1b      	ldrb	r3, [r3, #16]
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	b21a      	sxth	r2, r3
 800bd92:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd96:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	7c5b      	ldrb	r3, [r3, #17]
 800bd9e:	b21b      	sxth	r3, r3
 800bda0:	4313      	orrs	r3, r2
 800bda2:	b21b      	sxth	r3, r3
 800bda4:	f8a7 34b2 	strh.w	r3, [r7, #1202]	@ 0x4b2
							    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800bda8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bdac:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	7c9b      	ldrb	r3, [r3, #18]
 800bdb4:	021b      	lsls	r3, r3, #8
 800bdb6:	b21a      	sxth	r2, r3
 800bdb8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bdbc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	7cdb      	ldrb	r3, [r3, #19]
 800bdc4:	b21b      	sxth	r3, r3
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	b21b      	sxth	r3, r3
 800bdca:	f8a7 34b0 	strh.w	r3, [r7, #1200]	@ 0x4b0
							    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800bdce:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bdd2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	7d1b      	ldrb	r3, [r3, #20]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	b21a      	sxth	r2, r3
 800bdde:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bde2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	7d5b      	ldrb	r3, [r3, #21]
 800bdea:	b21b      	sxth	r3, r3
 800bdec:	4313      	orrs	r3, r2
 800bdee:	b21b      	sxth	r3, r3
 800bdf0:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
							    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800bdf4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bdf8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	7d9b      	ldrb	r3, [r3, #22]
 800be00:	021b      	lsls	r3, r3, #8
 800be02:	b21a      	sxth	r2, r3
 800be04:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be08:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	7ddb      	ldrb	r3, [r3, #23]
 800be10:	b21b      	sxth	r3, r3
 800be12:	4313      	orrs	r3, r2
 800be14:	b21b      	sxth	r3, r3
 800be16:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
							    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800be1a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be1e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	7e1b      	ldrb	r3, [r3, #24]
 800be26:	021b      	lsls	r3, r3, #8
 800be28:	b21a      	sxth	r2, r3
 800be2a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be2e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	7e5b      	ldrb	r3, [r3, #25]
 800be36:	b21b      	sxth	r3, r3
 800be38:	4313      	orrs	r3, r2
 800be3a:	b21b      	sxth	r3, r3
 800be3c:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
							    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800be40:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be44:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	7e9b      	ldrb	r3, [r3, #26]
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	b21a      	sxth	r2, r3
 800be50:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be54:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	7edb      	ldrb	r3, [r3, #27]
 800be5c:	b21b      	sxth	r3, r3
 800be5e:	4313      	orrs	r3, r2
 800be60:	b21b      	sxth	r3, r3
 800be62:	f8a7 34a8 	strh.w	r3, [r7, #1192]	@ 0x4a8
							    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800be66:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be6a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	7f1b      	ldrb	r3, [r3, #28]
 800be72:	021b      	lsls	r3, r3, #8
 800be74:	b21a      	sxth	r2, r3
 800be76:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be7a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	7f5b      	ldrb	r3, [r3, #29]
 800be82:	b21b      	sxth	r3, r3
 800be84:	4313      	orrs	r3, r2
 800be86:	b21b      	sxth	r3, r3
 800be88:	f8a7 34a6 	strh.w	r3, [r7, #1190]	@ 0x4a6
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800be8c:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800be90:	2b00      	cmp	r3, #0
 800be92:	da03      	bge.n	800be9c <frame_processing+0x8ac>
 800be94:	4b32      	ldr	r3, [pc, #200]	@ (800bf60 <frame_processing+0x970>)
 800be96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800be9a:	e002      	b.n	800bea2 <frame_processing+0x8b2>
 800be9c:	4b31      	ldr	r3, [pc, #196]	@ (800bf64 <frame_processing+0x974>)
 800be9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800bea2:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bfb8      	it	lt
 800beaa:	425b      	neglt	r3, r3
 800beac:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800beae:	4a27      	ldr	r2, [pc, #156]	@ (800bf4c <frame_processing+0x95c>)
 800beb0:	fb82 1203 	smull	r1, r2, r2, r3
 800beb4:	1152      	asrs	r2, r2, #5
 800beb6:	17db      	asrs	r3, r3, #31
 800beb8:	eba2 0c03 	sub.w	ip, r2, r3
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800bebc:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	bfb8      	it	lt
 800bec4:	425b      	neglt	r3, r3
 800bec6:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bec8:	4a20      	ldr	r2, [pc, #128]	@ (800bf4c <frame_processing+0x95c>)
 800beca:	fb82 1203 	smull	r1, r2, r2, r3
 800bece:	1151      	asrs	r1, r2, #5
 800bed0:	17da      	asrs	r2, r3, #31
 800bed2:	1a8a      	subs	r2, r1, r2
 800bed4:	4611      	mov	r1, r2
 800bed6:	2264      	movs	r2, #100	@ 0x64
 800bed8:	fb01 f202 	mul.w	r2, r1, r2
 800bedc:	1a9b      	subs	r3, r3, r2
 800bede:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bee2:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	da03      	bge.n	800bef2 <frame_processing+0x902>
 800beea:	4b1d      	ldr	r3, [pc, #116]	@ (800bf60 <frame_processing+0x970>)
 800beec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bef0:	e002      	b.n	800bef8 <frame_processing+0x908>
 800bef2:	4b1c      	ldr	r3, [pc, #112]	@ (800bf64 <frame_processing+0x974>)
 800bef4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800bef8:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800befc:	2b00      	cmp	r3, #0
 800befe:	bfb8      	it	lt
 800bf00:	425b      	neglt	r3, r3
 800bf02:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bf04:	4a11      	ldr	r2, [pc, #68]	@ (800bf4c <frame_processing+0x95c>)
 800bf06:	fb82 1203 	smull	r1, r2, r2, r3
 800bf0a:	1152      	asrs	r2, r2, #5
 800bf0c:	17db      	asrs	r3, r3, #31
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800bf14:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	bfb8      	it	lt
 800bf1c:	425b      	neglt	r3, r3
 800bf1e:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bf20:	4a0a      	ldr	r2, [pc, #40]	@ (800bf4c <frame_processing+0x95c>)
 800bf22:	fb82 1203 	smull	r1, r2, r2, r3
 800bf26:	1151      	asrs	r1, r2, #5
 800bf28:	17da      	asrs	r2, r3, #31
 800bf2a:	1a8a      	subs	r2, r1, r2
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	2264      	movs	r2, #100	@ 0x64
 800bf30:	fb01 f202 	mul.w	r2, r1, r2
 800bf34:	1a9b      	subs	r3, r3, r2
 800bf36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bf3a:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	da12      	bge.n	800bf68 <frame_processing+0x978>
 800bf42:	4b07      	ldr	r3, [pc, #28]	@ (800bf60 <frame_processing+0x970>)
 800bf44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf48:	e011      	b.n	800bf6e <frame_processing+0x97e>
 800bf4a:	bf00      	nop
 800bf4c:	51eb851f 	.word	0x51eb851f
 800bf50:	0801431c 	.word	0x0801431c
 800bf54:	20004850 	.word	0x20004850
 800bf58:	40005000 	.word	0x40005000
 800bf5c:	40011400 	.word	0x40011400
 800bf60:	08014220 	.word	0x08014220
 800bf64:	08014224 	.word	0x08014224
 800bf68:	4bb0      	ldr	r3, [pc, #704]	@ (800c22c <frame_processing+0xc3c>)
 800bf6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800bf6e:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	bfb8      	it	lt
 800bf76:	425b      	neglt	r3, r3
 800bf78:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bf7a:	4aad      	ldr	r2, [pc, #692]	@ (800c230 <frame_processing+0xc40>)
 800bf7c:	fb82 1203 	smull	r1, r2, r2, r3
 800bf80:	1152      	asrs	r2, r2, #5
 800bf82:	17db      	asrs	r3, r3, #31
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	67fb      	str	r3, [r7, #124]	@ 0x7c
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800bf88:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	bfb8      	it	lt
 800bf90:	425b      	neglt	r3, r3
 800bf92:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bf94:	4aa6      	ldr	r2, [pc, #664]	@ (800c230 <frame_processing+0xc40>)
 800bf96:	fb82 1203 	smull	r1, r2, r2, r3
 800bf9a:	1151      	asrs	r1, r2, #5
 800bf9c:	17da      	asrs	r2, r3, #31
 800bf9e:	1a8a      	subs	r2, r1, r2
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	2264      	movs	r2, #100	@ 0x64
 800bfa4:	fb01 f202 	mul.w	r2, r1, r2
 800bfa8:	1a9b      	subs	r3, r3, r2
 800bfaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bfac:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	da03      	bge.n	800bfbc <frame_processing+0x9cc>
 800bfb4:	4b9f      	ldr	r3, [pc, #636]	@ (800c234 <frame_processing+0xc44>)
 800bfb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bfba:	e002      	b.n	800bfc2 <frame_processing+0x9d2>
 800bfbc:	4b9b      	ldr	r3, [pc, #620]	@ (800c22c <frame_processing+0xc3c>)
 800bfbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800bfc2:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	bfb8      	it	lt
 800bfca:	425b      	neglt	r3, r3
 800bfcc:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bfce:	4a98      	ldr	r2, [pc, #608]	@ (800c230 <frame_processing+0xc40>)
 800bfd0:	fb82 1203 	smull	r1, r2, r2, r3
 800bfd4:	1152      	asrs	r2, r2, #5
 800bfd6:	17db      	asrs	r3, r3, #31
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	677b      	str	r3, [r7, #116]	@ 0x74
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800bfdc:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bfb8      	it	lt
 800bfe4:	425b      	neglt	r3, r3
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	4619      	mov	r1, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bfea:	4b91      	ldr	r3, [pc, #580]	@ (800c230 <frame_processing+0xc40>)
 800bfec:	fb83 2301 	smull	r2, r3, r3, r1
 800bff0:	115a      	asrs	r2, r3, #5
 800bff2:	17cb      	asrs	r3, r1, #31
 800bff4:	1ad6      	subs	r6, r2, r3
 800bff6:	2364      	movs	r3, #100	@ 0x64
 800bff8:	fb06 f303 	mul.w	r3, r6, r3
 800bffc:	1ace      	subs	r6, r1, r3
 800bffe:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800c002:	4a8b      	ldr	r2, [pc, #556]	@ (800c230 <frame_processing+0xc40>)
 800c004:	fba2 2303 	umull	r2, r3, r2, r3
 800c008:	095b      	lsrs	r3, r3, #5
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c00e:	f8b7 14b4 	ldrh.w	r1, [r7, #1204]	@ 0x4b4
 800c012:	4b87      	ldr	r3, [pc, #540]	@ (800c230 <frame_processing+0xc40>)
 800c014:	fba3 2301 	umull	r2, r3, r3, r1
 800c018:	095a      	lsrs	r2, r3, #5
 800c01a:	2364      	movs	r3, #100	@ 0x64
 800c01c:	fb02 f303 	mul.w	r3, r2, r3
 800c020:	1acb      	subs	r3, r1, r3
 800c022:	b29b      	uxth	r3, r3
 800c024:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c026:	f8b7 24b2 	ldrh.w	r2, [r7, #1202]	@ 0x4b2
 800c02a:	4b81      	ldr	r3, [pc, #516]	@ (800c230 <frame_processing+0xc40>)
 800c02c:	fba3 2302 	umull	r2, r3, r3, r2
 800c030:	095b      	lsrs	r3, r3, #5
 800c032:	b29b      	uxth	r3, r3
 800c034:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c036:	f8b7 14b2 	ldrh.w	r1, [r7, #1202]	@ 0x4b2
 800c03a:	4b7d      	ldr	r3, [pc, #500]	@ (800c230 <frame_processing+0xc40>)
 800c03c:	fba3 2301 	umull	r2, r3, r3, r1
 800c040:	095a      	lsrs	r2, r3, #5
 800c042:	2364      	movs	r3, #100	@ 0x64
 800c044:	fb02 f303 	mul.w	r3, r2, r3
 800c048:	1acb      	subs	r3, r1, r3
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c04e:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	@ 0x4b0
 800c052:	4b77      	ldr	r3, [pc, #476]	@ (800c230 <frame_processing+0xc40>)
 800c054:	fba3 2302 	umull	r2, r3, r3, r2
 800c058:	095b      	lsrs	r3, r3, #5
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c05e:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	@ 0x4b0
 800c062:	4b73      	ldr	r3, [pc, #460]	@ (800c230 <frame_processing+0xc40>)
 800c064:	fba3 2301 	umull	r2, r3, r3, r1
 800c068:	095a      	lsrs	r2, r3, #5
 800c06a:	2364      	movs	r3, #100	@ 0x64
 800c06c:	fb02 f303 	mul.w	r3, r2, r3
 800c070:	1acb      	subs	r3, r1, r3
 800c072:	b29b      	uxth	r3, r3
 800c074:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c076:	f8b7 24ae 	ldrh.w	r2, [r7, #1198]	@ 0x4ae
 800c07a:	4b6d      	ldr	r3, [pc, #436]	@ (800c230 <frame_processing+0xc40>)
 800c07c:	fba3 2302 	umull	r2, r3, r3, r2
 800c080:	095b      	lsrs	r3, r3, #5
 800c082:	b29b      	uxth	r3, r3
 800c084:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c086:	f8b7 14ae 	ldrh.w	r1, [r7, #1198]	@ 0x4ae
 800c08a:	4b69      	ldr	r3, [pc, #420]	@ (800c230 <frame_processing+0xc40>)
 800c08c:	fba3 2301 	umull	r2, r3, r3, r1
 800c090:	095a      	lsrs	r2, r3, #5
 800c092:	2364      	movs	r3, #100	@ 0x64
 800c094:	fb02 f303 	mul.w	r3, r2, r3
 800c098:	1acb      	subs	r3, r1, r3
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c09e:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 800c0a2:	4b63      	ldr	r3, [pc, #396]	@ (800c230 <frame_processing+0xc40>)
 800c0a4:	fba3 2302 	umull	r2, r3, r3, r2
 800c0a8:	095b      	lsrs	r3, r3, #5
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0ae:	f8b7 14ac 	ldrh.w	r1, [r7, #1196]	@ 0x4ac
 800c0b2:	4b5f      	ldr	r3, [pc, #380]	@ (800c230 <frame_processing+0xc40>)
 800c0b4:	fba3 2301 	umull	r2, r3, r3, r1
 800c0b8:	095a      	lsrs	r2, r3, #5
 800c0ba:	2364      	movs	r3, #100	@ 0x64
 800c0bc:	fb02 f303 	mul.w	r3, r2, r3
 800c0c0:	1acb      	subs	r3, r1, r3
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0c6:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 800c0ca:	4b59      	ldr	r3, [pc, #356]	@ (800c230 <frame_processing+0xc40>)
 800c0cc:	fba3 2302 	umull	r2, r3, r3, r2
 800c0d0:	095b      	lsrs	r3, r3, #5
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0d6:	f8b7 14aa 	ldrh.w	r1, [r7, #1194]	@ 0x4aa
 800c0da:	4b55      	ldr	r3, [pc, #340]	@ (800c230 <frame_processing+0xc40>)
 800c0dc:	fba3 2301 	umull	r2, r3, r3, r1
 800c0e0:	095a      	lsrs	r2, r3, #5
 800c0e2:	2364      	movs	r3, #100	@ 0x64
 800c0e4:	fb02 f303 	mul.w	r3, r2, r3
 800c0e8:	1acb      	subs	r3, r1, r3
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0ee:	f8b7 24a8 	ldrh.w	r2, [r7, #1192]	@ 0x4a8
 800c0f2:	4b4f      	ldr	r3, [pc, #316]	@ (800c230 <frame_processing+0xc40>)
 800c0f4:	fba3 2302 	umull	r2, r3, r3, r2
 800c0f8:	095b      	lsrs	r3, r3, #5
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0fe:	f8b7 14a8 	ldrh.w	r1, [r7, #1192]	@ 0x4a8
 800c102:	4b4b      	ldr	r3, [pc, #300]	@ (800c230 <frame_processing+0xc40>)
 800c104:	fba3 2301 	umull	r2, r3, r3, r1
 800c108:	095a      	lsrs	r2, r3, #5
 800c10a:	2364      	movs	r3, #100	@ 0x64
 800c10c:	fb02 f303 	mul.w	r3, r2, r3
 800c110:	1acb      	subs	r3, r1, r3
 800c112:	b29b      	uxth	r3, r3
 800c114:	461d      	mov	r5, r3
 800c116:	f8b7 24a6 	ldrh.w	r2, [r7, #1190]	@ 0x4a6
 800c11a:	4b45      	ldr	r3, [pc, #276]	@ (800c230 <frame_processing+0xc40>)
 800c11c:	fba3 2302 	umull	r2, r3, r3, r2
 800c120:	095b      	lsrs	r3, r3, #5
 800c122:	b29b      	uxth	r3, r3
 800c124:	461c      	mov	r4, r3
 800c126:	f8b7 14a6 	ldrh.w	r1, [r7, #1190]	@ 0x4a6
 800c12a:	4b41      	ldr	r3, [pc, #260]	@ (800c230 <frame_processing+0xc40>)
 800c12c:	fba3 2301 	umull	r2, r3, r3, r1
 800c130:	095a      	lsrs	r2, r3, #5
 800c132:	2364      	movs	r3, #100	@ 0x64
 800c134:	fb02 f303 	mul.w	r3, r2, r3
 800c138:	1acb      	subs	r3, r1, r3
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800c140:	9319      	str	r3, [sp, #100]	@ 0x64
 800c142:	9418      	str	r4, [sp, #96]	@ 0x60
 800c144:	9517      	str	r5, [sp, #92]	@ 0x5c
 800c146:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c148:	9216      	str	r2, [sp, #88]	@ 0x58
 800c14a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c14c:	9215      	str	r2, [sp, #84]	@ 0x54
 800c14e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c150:	9214      	str	r2, [sp, #80]	@ 0x50
 800c152:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c154:	9213      	str	r2, [sp, #76]	@ 0x4c
 800c156:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c158:	9212      	str	r2, [sp, #72]	@ 0x48
 800c15a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c15c:	9211      	str	r2, [sp, #68]	@ 0x44
 800c15e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c160:	9210      	str	r2, [sp, #64]	@ 0x40
 800c162:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c164:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c166:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c168:	920e      	str	r2, [sp, #56]	@ 0x38
 800c16a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c16c:	920d      	str	r2, [sp, #52]	@ 0x34
 800c16e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c170:	920c      	str	r2, [sp, #48]	@ 0x30
 800c172:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c174:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c176:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c178:	920a      	str	r2, [sp, #40]	@ 0x28
 800c17a:	9609      	str	r6, [sp, #36]	@ 0x24
 800c17c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c17e:	9308      	str	r3, [sp, #32]
 800c180:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c184:	9307      	str	r3, [sp, #28]
 800c186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c188:	9306      	str	r3, [sp, #24]
 800c18a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c18c:	9305      	str	r3, [sp, #20]
 800c18e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c198:	9303      	str	r3, [sp, #12]
 800c19a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c19e:	9302      	str	r3, [sp, #8]
 800c1a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	4663      	mov	r3, ip
 800c1ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c1b2:	4921      	ldr	r1, [pc, #132]	@ (800c238 <frame_processing+0xc48>)
 800c1b4:	f002 faca 	bl	800e74c <siprintf>
									if (uart_choose_uart5) {
 800c1b8:	4b20      	ldr	r3, [pc, #128]	@ (800c23c <frame_processing+0xc4c>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d005      	beq.n	800c1ce <frame_processing+0xbde>
								    	Uart_sendstring(UART5, buffer_0x08);
 800c1c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	481d      	ldr	r0, [pc, #116]	@ (800c240 <frame_processing+0xc50>)
 800c1ca:	f7f5 fe7f 	bl	8001ecc <Uart_sendstring>
									Uart_sendstring(USART6, buffer_0x08);
 800c1ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	481b      	ldr	r0, [pc, #108]	@ (800c244 <frame_processing+0xc54>)
 800c1d6:	f7f5 fe79 	bl	8001ecc <Uart_sendstring>
							    break;
 800c1da:	bf00      	nop
					break;
 800c1dc:	e004      	b.n	800c1e8 <frame_processing+0xbf8>
				default:
					clear_send_flag();
 800c1de:	f7f5 ff97 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	f001 bae4 	b.w	800d7b0 <frame_processing+0x21c0>
					break;
 800c1e8:	bf00      	nop
					break;
			}
			clear_send_flag();
 800c1ea:	f7f5 ff91 	bl	8002110 <clear_send_flag>
			break;
 800c1ee:	f001 bade 	b.w	800d7ae <frame_processing+0x21be>
		case FSP_ADR_PDU:
			switch (fsp_pkt->type)
 800c1f2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c1f6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	791b      	ldrb	r3, [r3, #4]
 800c1fe:	2b05      	cmp	r3, #5
 800c200:	d003      	beq.n	800c20a <frame_processing+0xc1a>
 800c202:	2b07      	cmp	r3, #7
 800c204:	d022      	beq.n	800c24c <frame_processing+0xc5c>
 800c206:	f000 bc2a 	b.w	800ca5e <frame_processing+0x146e>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800c20a:	f7f5 ff81 	bl	8002110 <clear_send_flag>
					if (uart_choose_uart5) {
 800c20e:	4b0b      	ldr	r3, [pc, #44]	@ (800c23c <frame_processing+0xc4c>)
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <frame_processing+0xc30>
						Uart_sendstring(UART5, "\n> PDU_ACK\r\n> ");
 800c218:	490b      	ldr	r1, [pc, #44]	@ (800c248 <frame_processing+0xc58>)
 800c21a:	4809      	ldr	r0, [pc, #36]	@ (800c240 <frame_processing+0xc50>)
 800c21c:	f7f5 fe56 	bl	8001ecc <Uart_sendstring>
					}
					Uart_sendstring(USART6, "\n> PDU_ACK\r\n> ");
 800c220:	4909      	ldr	r1, [pc, #36]	@ (800c248 <frame_processing+0xc58>)
 800c222:	4808      	ldr	r0, [pc, #32]	@ (800c244 <frame_processing+0xc54>)
 800c224:	f7f5 fe52 	bl	8001ecc <Uart_sendstring>

					break;
 800c228:	f000 bc1e 	b.w	800ca68 <frame_processing+0x1478>
 800c22c:	08014224 	.word	0x08014224
 800c230:	51eb851f 	.word	0x51eb851f
 800c234:	08014220 	.word	0x08014220
 800c238:	08014358 	.word	0x08014358
 800c23c:	20004850 	.word	0x20004850
 800c240:	40005000 	.word	0x40005000
 800c244:	40011400 	.word	0x40011400
 800c248:	08014448 	.word	0x08014448
				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800c24c:	f7f5 ff60 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800c250:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c254:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	795b      	ldrb	r3, [r3, #5]
 800c25c:	2b06      	cmp	r3, #6
 800c25e:	dc17      	bgt.n	800c290 <frame_processing+0xca0>
 800c260:	2b00      	cmp	r3, #0
 800c262:	f2c0 83f4 	blt.w	800ca4e <frame_processing+0x145e>
 800c266:	2b06      	cmp	r3, #6
 800c268:	f200 83f1 	bhi.w	800ca4e <frame_processing+0x145e>
 800c26c:	a201      	add	r2, pc, #4	@ (adr r2, 800c274 <frame_processing+0xc84>)
 800c26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c272:	bf00      	nop
 800c274:	0800c297 	.word	0x0800c297
 800c278:	0800ca4f 	.word	0x0800ca4f
 800c27c:	0800ca4f 	.word	0x0800ca4f
 800c280:	0800ca4f 	.word	0x0800ca4f
 800c284:	0800c313 	.word	0x0800c313
 800c288:	0800c3c5 	.word	0x0800c3c5
 800c28c:	0800c495 	.word	0x0800c495
 800c290:	2bff      	cmp	r3, #255	@ 0xff
 800c292:	d01f      	beq.n	800c2d4 <frame_processing+0xce4>
 800c294:	e3db      	b.n	800ca4e <frame_processing+0x145e>
					{
						case 0x00:
						{
							char buffer_0x00[50];
							sprintf(buffer_0x00, "PDU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800c296:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c29a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	799b      	ldrb	r3, [r3, #6]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c2a8:	4973      	ldr	r1, [pc, #460]	@ (800c478 <frame_processing+0xe88>)
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f002 fa4e 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800c2b0:	4b72      	ldr	r3, [pc, #456]	@ (800c47c <frame_processing+0xe8c>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d005      	beq.n	800c2c6 <frame_processing+0xcd6>
								Uart_sendstring(UART5, buffer_0x00);
 800c2ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c2be:	4619      	mov	r1, r3
 800c2c0:	486f      	ldr	r0, [pc, #444]	@ (800c480 <frame_processing+0xe90>)
 800c2c2:	f7f5 fe03 	bl	8001ecc <Uart_sendstring>
							}
							Uart_sendstring(USART6, buffer_0x00);
 800c2c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	486d      	ldr	r0, [pc, #436]	@ (800c484 <frame_processing+0xe94>)
 800c2ce:	f7f5 fdfd 	bl	8001ecc <Uart_sendstring>

						}
							break;
 800c2d2:	e3c1      	b.n	800ca58 <frame_processing+0x1468>
						case 0xFF:
						{
							char buffer_0xFF[50];
							sprintf(buffer_0xFF, "PDU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800c2d4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c2d8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	799b      	ldrb	r3, [r3, #6]
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c2e6:	4968      	ldr	r1, [pc, #416]	@ (800c488 <frame_processing+0xe98>)
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f002 fa2f 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800c2ee:	4b63      	ldr	r3, [pc, #396]	@ (800c47c <frame_processing+0xe8c>)
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d005      	beq.n	800c304 <frame_processing+0xd14>
								Uart_sendstring(UART5, buffer_0xFF);
 800c2f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4860      	ldr	r0, [pc, #384]	@ (800c480 <frame_processing+0xe90>)
 800c300:	f7f5 fde4 	bl	8001ecc <Uart_sendstring>
							}
							Uart_sendstring(USART6, buffer_0xFF);
 800c304:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c308:	4619      	mov	r1, r3
 800c30a:	485e      	ldr	r0, [pc, #376]	@ (800c484 <frame_processing+0xe94>)
 800c30c:	f7f5 fdde 	bl	8001ecc <Uart_sendstring>

						}
							break;
 800c310:	e3a2      	b.n	800ca58 <frame_processing+0x1468>

						case 0x04:
						{
							        uint8_t channel = fsp_pkt->payload[1];
 800c312:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c316:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	799b      	ldrb	r3, [r3, #6]
 800c31e:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3
							        uint8_t status_0x04 = fsp_pkt->payload[2];
 800c322:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c326:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	79db      	ldrb	r3, [r3, #7]
 800c32e:	f887 34c2 	strb.w	r3, [r7, #1218]	@ 0x4c2
							        uint16_t voltage_0x04 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800c332:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c336:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	7a1b      	ldrb	r3, [r3, #8]
 800c33e:	021b      	lsls	r3, r3, #8
 800c340:	b21a      	sxth	r2, r3
 800c342:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c346:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	7a5b      	ldrb	r3, [r3, #9]
 800c34e:	b21b      	sxth	r3, r3
 800c350:	4313      	orrs	r3, r2
 800c352:	b21b      	sxth	r3, r3
 800c354:	f8a7 34c0 	strh.w	r3, [r7, #1216]	@ 0x4c0
							        uint16_t current_0x04 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800c358:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c35c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	7a9b      	ldrb	r3, [r3, #10]
 800c364:	021b      	lsls	r3, r3, #8
 800c366:	b21a      	sxth	r2, r3
 800c368:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c36c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	7adb      	ldrb	r3, [r3, #11]
 800c374:	b21b      	sxth	r3, r3
 800c376:	4313      	orrs	r3, r2
 800c378:	b21b      	sxth	r3, r3
 800c37a:	f8a7 34be 	strh.w	r3, [r7, #1214]	@ 0x4be

							        char buffer_0x07[100];
							        sprintf(buffer_0x07, "PDU_Res: CMDcode 0x04 [{Channel %u} Status %u, Voltage: %u, Current: %u]\n", channel, status_0x04, voltage_0x04, current_0x04);
 800c37e:	f897 14c3 	ldrb.w	r1, [r7, #1219]	@ 0x4c3
 800c382:	f897 44c2 	ldrb.w	r4, [r7, #1218]	@ 0x4c2
 800c386:	f8b7 34c0 	ldrh.w	r3, [r7, #1216]	@ 0x4c0
 800c38a:	f8b7 24be 	ldrh.w	r2, [r7, #1214]	@ 0x4be
 800c38e:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800c392:	9201      	str	r2, [sp, #4]
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	4623      	mov	r3, r4
 800c398:	460a      	mov	r2, r1
 800c39a:	493c      	ldr	r1, [pc, #240]	@ (800c48c <frame_processing+0xe9c>)
 800c39c:	f002 f9d6 	bl	800e74c <siprintf>
									if (uart_choose_uart5) {
 800c3a0:	4b36      	ldr	r3, [pc, #216]	@ (800c47c <frame_processing+0xe8c>)
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d005      	beq.n	800c3b6 <frame_processing+0xdc6>
										Uart_sendstring(UART5, buffer_0x07);
 800c3aa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4833      	ldr	r0, [pc, #204]	@ (800c480 <frame_processing+0xe90>)
 800c3b2:	f7f5 fd8b 	bl	8001ecc <Uart_sendstring>
									}
									Uart_sendstring(USART6, buffer_0x07);
 800c3b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4831      	ldr	r0, [pc, #196]	@ (800c484 <frame_processing+0xe94>)
 800c3be:	f7f5 fd85 	bl	8001ecc <Uart_sendstring>

						}
									break;
 800c3c2:	e349      	b.n	800ca58 <frame_processing+0x1468>
						case 0x05:
						{
						            uint8_t buck = fsp_pkt->payload[1];
 800c3c4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c3c8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	799b      	ldrb	r3, [r3, #6]
 800c3d0:	f887 34c9 	strb.w	r3, [r7, #1225]	@ 0x4c9
						            uint8_t status_0x05 = fsp_pkt->payload[2];
 800c3d4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c3d8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	79db      	ldrb	r3, [r3, #7]
 800c3e0:	f887 34c8 	strb.w	r3, [r7, #1224]	@ 0x4c8
						            uint16_t voltage_0x05 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800c3e4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c3e8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	7a1b      	ldrb	r3, [r3, #8]
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	b21a      	sxth	r2, r3
 800c3f4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c3f8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	7a5b      	ldrb	r3, [r3, #9]
 800c400:	b21b      	sxth	r3, r3
 800c402:	4313      	orrs	r3, r2
 800c404:	b21b      	sxth	r3, r3
 800c406:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
						            uint16_t current_0x05 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800c40a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c40e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	7a9b      	ldrb	r3, [r3, #10]
 800c416:	021b      	lsls	r3, r3, #8
 800c418:	b21a      	sxth	r2, r3
 800c41a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c41e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	7adb      	ldrb	r3, [r3, #11]
 800c426:	b21b      	sxth	r3, r3
 800c428:	4313      	orrs	r3, r2
 800c42a:	b21b      	sxth	r3, r3
 800c42c:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4

						            char buffer_0x05[100];
						            sprintf(buffer_0x05, "PDU_Res: CMDcode 0x05 [{Buck %u} Status %u, Voltage: %u, Current: %u]\n", buck, status_0x05, voltage_0x05, current_0x05);
 800c430:	f897 14c9 	ldrb.w	r1, [r7, #1225]	@ 0x4c9
 800c434:	f897 44c8 	ldrb.w	r4, [r7, #1224]	@ 0x4c8
 800c438:	f8b7 34c6 	ldrh.w	r3, [r7, #1222]	@ 0x4c6
 800c43c:	f8b7 24c4 	ldrh.w	r2, [r7, #1220]	@ 0x4c4
 800c440:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800c444:	9201      	str	r2, [sp, #4]
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	4623      	mov	r3, r4
 800c44a:	460a      	mov	r2, r1
 800c44c:	4910      	ldr	r1, [pc, #64]	@ (800c490 <frame_processing+0xea0>)
 800c44e:	f002 f97d 	bl	800e74c <siprintf>
									if (uart_choose_uart5) {
 800c452:	4b0a      	ldr	r3, [pc, #40]	@ (800c47c <frame_processing+0xe8c>)
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	b2db      	uxtb	r3, r3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d005      	beq.n	800c468 <frame_processing+0xe78>
										Uart_sendstring(UART5, buffer_0x05);
 800c45c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c460:	4619      	mov	r1, r3
 800c462:	4807      	ldr	r0, [pc, #28]	@ (800c480 <frame_processing+0xe90>)
 800c464:	f7f5 fd32 	bl	8001ecc <Uart_sendstring>
									}
									Uart_sendstring(USART6, buffer_0x05);
 800c468:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c46c:	4619      	mov	r1, r3
 800c46e:	4805      	ldr	r0, [pc, #20]	@ (800c484 <frame_processing+0xe94>)
 800c470:	f7f5 fd2c 	bl	8001ecc <Uart_sendstring>

						}
									break;
 800c474:	e2f0      	b.n	800ca58 <frame_processing+0x1468>
 800c476:	bf00      	nop
 800c478:	08014458 	.word	0x08014458
 800c47c:	20004850 	.word	0x20004850
 800c480:	40005000 	.word	0x40005000
 800c484:	40011400 	.word	0x40011400
 800c488:	08014474 	.word	0x08014474
 800c48c:	08014490 	.word	0x08014490
 800c490:	080144dc 	.word	0x080144dc
						case 0x06:
						{
							uint8_t tec1buck_status = fsp_pkt->payload[1];
 800c494:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c498:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	799b      	ldrb	r3, [r3, #6]
 800c4a0:	f887 3511 	strb.w	r3, [r7, #1297]	@ 0x511
							uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 800c4a4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c4a8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	79db      	ldrb	r3, [r3, #7]
 800c4b0:	021b      	lsls	r3, r3, #8
 800c4b2:	b21a      	sxth	r2, r3
 800c4b4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c4b8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	7a1b      	ldrb	r3, [r3, #8]
 800c4c0:	b21b      	sxth	r3, r3
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	b21b      	sxth	r3, r3
 800c4c6:	f8a7 350e 	strh.w	r3, [r7, #1294]	@ 0x50e

							uint8_t tec2buck_status = fsp_pkt->payload[4];
 800c4ca:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c4ce:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	7a5b      	ldrb	r3, [r3, #9]
 800c4d6:	f887 350d 	strb.w	r3, [r7, #1293]	@ 0x50d
							uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800c4da:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c4de:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	7a9b      	ldrb	r3, [r3, #10]
 800c4e6:	021b      	lsls	r3, r3, #8
 800c4e8:	b21a      	sxth	r2, r3
 800c4ea:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c4ee:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	7adb      	ldrb	r3, [r3, #11]
 800c4f6:	b21b      	sxth	r3, r3
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	b21b      	sxth	r3, r3
 800c4fc:	f8a7 350a 	strh.w	r3, [r7, #1290]	@ 0x50a

							uint8_t tec3buck_status = fsp_pkt->payload[7];
 800c500:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c504:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	7b1b      	ldrb	r3, [r3, #12]
 800c50c:	f887 3509 	strb.w	r3, [r7, #1289]	@ 0x509
							uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800c510:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c514:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	7b5b      	ldrb	r3, [r3, #13]
 800c51c:	021b      	lsls	r3, r3, #8
 800c51e:	b21a      	sxth	r2, r3
 800c520:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c524:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	7b9b      	ldrb	r3, [r3, #14]
 800c52c:	b21b      	sxth	r3, r3
 800c52e:	4313      	orrs	r3, r2
 800c530:	b21b      	sxth	r3, r3
 800c532:	f8a7 3506 	strh.w	r3, [r7, #1286]	@ 0x506

							uint8_t tec4buck_status = fsp_pkt->payload[10];
 800c536:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c53a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	7bdb      	ldrb	r3, [r3, #15]
 800c542:	f887 3505 	strb.w	r3, [r7, #1285]	@ 0x505
							uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800c546:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c54a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	7c1b      	ldrb	r3, [r3, #16]
 800c552:	021b      	lsls	r3, r3, #8
 800c554:	b21a      	sxth	r2, r3
 800c556:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c55a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	7c5b      	ldrb	r3, [r3, #17]
 800c562:	b21b      	sxth	r3, r3
 800c564:	4313      	orrs	r3, r2
 800c566:	b21b      	sxth	r3, r3
 800c568:	f8a7 3502 	strh.w	r3, [r7, #1282]	@ 0x502

							uint8_t mcubuck_status = fsp_pkt->payload[13];
 800c56c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c570:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	7c9b      	ldrb	r3, [r3, #18]
 800c578:	f887 3501 	strb.w	r3, [r7, #1281]	@ 0x501
							uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 800c57c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c580:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	7cdb      	ldrb	r3, [r3, #19]
 800c588:	021b      	lsls	r3, r3, #8
 800c58a:	b21a      	sxth	r2, r3
 800c58c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c590:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	7d1b      	ldrb	r3, [r3, #20]
 800c598:	b21b      	sxth	r3, r3
 800c59a:	4313      	orrs	r3, r2
 800c59c:	b21b      	sxth	r3, r3
 800c59e:	f8a7 34fe 	strh.w	r3, [r7, #1278]	@ 0x4fe

							uint8_t ledbuck_status = fsp_pkt->payload[16];
 800c5a2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c5a6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	7d5b      	ldrb	r3, [r3, #21]
 800c5ae:	f887 34fd 	strb.w	r3, [r7, #1277]	@ 0x4fd
							uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 800c5b2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c5b6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	7d9b      	ldrb	r3, [r3, #22]
 800c5be:	021b      	lsls	r3, r3, #8
 800c5c0:	b21a      	sxth	r2, r3
 800c5c2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c5c6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	7ddb      	ldrb	r3, [r3, #23]
 800c5ce:	b21b      	sxth	r3, r3
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	b21b      	sxth	r3, r3
 800c5d4:	f8a7 34fa 	strh.w	r3, [r7, #1274]	@ 0x4fa

							uint8_t cm4buck_status = fsp_pkt->payload[19];
 800c5d8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c5dc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	7e1b      	ldrb	r3, [r3, #24]
 800c5e4:	f887 34f9 	strb.w	r3, [r7, #1273]	@ 0x4f9
							uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 800c5e8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c5ec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	7e5b      	ldrb	r3, [r3, #25]
 800c5f4:	021b      	lsls	r3, r3, #8
 800c5f6:	b21a      	sxth	r2, r3
 800c5f8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c5fc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	7e9b      	ldrb	r3, [r3, #26]
 800c604:	b21b      	sxth	r3, r3
 800c606:	4313      	orrs	r3, r2
 800c608:	b21b      	sxth	r3, r3
 800c60a:	f8a7 34f6 	strh.w	r3, [r7, #1270]	@ 0x4f6

							uint8_t tec1_status = fsp_pkt->payload[22];
 800c60e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c612:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	7edb      	ldrb	r3, [r3, #27]
 800c61a:	f887 34f5 	strb.w	r3, [r7, #1269]	@ 0x4f5
							uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800c61e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c622:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	7f1b      	ldrb	r3, [r3, #28]
 800c62a:	021b      	lsls	r3, r3, #8
 800c62c:	b21a      	sxth	r2, r3
 800c62e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c632:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	7f5b      	ldrb	r3, [r3, #29]
 800c63a:	b21b      	sxth	r3, r3
 800c63c:	4313      	orrs	r3, r2
 800c63e:	b21b      	sxth	r3, r3
 800c640:	f8a7 34f2 	strh.w	r3, [r7, #1266]	@ 0x4f2

							uint8_t tec2_status = fsp_pkt->payload[25];
 800c644:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c648:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	7f9b      	ldrb	r3, [r3, #30]
 800c650:	f887 34f1 	strb.w	r3, [r7, #1265]	@ 0x4f1
							uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800c654:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c658:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	7fdb      	ldrb	r3, [r3, #31]
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	b21a      	sxth	r2, r3
 800c664:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c668:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c672:	b21b      	sxth	r3, r3
 800c674:	4313      	orrs	r3, r2
 800c676:	b21b      	sxth	r3, r3
 800c678:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

							uint8_t tec3_status = fsp_pkt->payload[28];
 800c67c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c680:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c68a:	f887 34ed 	strb.w	r3, [r7, #1261]	@ 0x4ed
							uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800c68e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c692:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c69c:	021b      	lsls	r3, r3, #8
 800c69e:	b21a      	sxth	r2, r3
 800c6a0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c6a4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c6ae:	b21b      	sxth	r3, r3
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	b21b      	sxth	r3, r3
 800c6b4:	f8a7 34ea 	strh.w	r3, [r7, #1258]	@ 0x4ea

							uint8_t tec4_status = fsp_pkt->payload[31];
 800c6b8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c6bc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c6c6:	f887 34e9 	strb.w	r3, [r7, #1257]	@ 0x4e9
							uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 800c6ca:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c6ce:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c6d8:	021b      	lsls	r3, r3, #8
 800c6da:	b21a      	sxth	r2, r3
 800c6dc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c6e0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800c6ea:	b21b      	sxth	r3, r3
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	b21b      	sxth	r3, r3
 800c6f0:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6

							uint8_t copc_status = fsp_pkt->payload[34];
 800c6f4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c6f8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800c702:	f887 34e5 	strb.w	r3, [r7, #1253]	@ 0x4e5
							uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800c706:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c70a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c714:	021b      	lsls	r3, r3, #8
 800c716:	b21a      	sxth	r2, r3
 800c718:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c71c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c726:	b21b      	sxth	r3, r3
 800c728:	4313      	orrs	r3, r2
 800c72a:	b21b      	sxth	r3, r3
 800c72c:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2

							uint8_t iou_status = fsp_pkt->payload[37];
 800c730:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c734:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c73e:	f887 34e1 	strb.w	r3, [r7, #1249]	@ 0x4e1
							uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800c742:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c746:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800c750:	021b      	lsls	r3, r3, #8
 800c752:	b21a      	sxth	r2, r3
 800c754:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c758:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c762:	b21b      	sxth	r3, r3
 800c764:	4313      	orrs	r3, r2
 800c766:	b21b      	sxth	r3, r3
 800c768:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de

							uint8_t rgb_status = fsp_pkt->payload[40];
 800c76c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c770:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c77a:	f887 34dd 	strb.w	r3, [r7, #1245]	@ 0x4dd
							uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800c77e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c782:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c78c:	021b      	lsls	r3, r3, #8
 800c78e:	b21a      	sxth	r2, r3
 800c790:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c794:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c79e:	b21b      	sxth	r3, r3
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	b21b      	sxth	r3, r3
 800c7a4:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da

							uint8_t ir_status = fsp_pkt->payload[43];
 800c7a8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c7ac:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7b6:	f887 34d9 	strb.w	r3, [r7, #1241]	@ 0x4d9
							uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 800c7ba:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c7be:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c7c8:	021b      	lsls	r3, r3, #8
 800c7ca:	b21a      	sxth	r2, r3
 800c7cc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c7d0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c7da:	b21b      	sxth	r3, r3
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	b21b      	sxth	r3, r3
 800c7e0:	f8a7 34d6 	strh.w	r3, [r7, #1238]	@ 0x4d6

							uint8_t cm4_status = fsp_pkt->payload[46];
 800c7e4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c7e8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800c7f2:	f887 34d5 	strb.w	r3, [r7, #1237]	@ 0x4d5
							uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 800c7f6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c7fa:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c804:	021b      	lsls	r3, r3, #8
 800c806:	b21a      	sxth	r2, r3
 800c808:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c80c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c816:	b21b      	sxth	r3, r3
 800c818:	4313      	orrs	r3, r2
 800c81a:	b21b      	sxth	r3, r3
 800c81c:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2

							uint8_t vin_status = fsp_pkt->payload[49];
 800c820:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c824:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c82e:	f887 34d1 	strb.w	r3, [r7, #1233]	@ 0x4d1
							uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 800c832:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c836:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800c840:	021b      	lsls	r3, r3, #8
 800c842:	b21a      	sxth	r2, r3
 800c844:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c848:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c852:	b21b      	sxth	r3, r3
 800c854:	4313      	orrs	r3, r2
 800c856:	b21b      	sxth	r3, r3
 800c858:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce

							uint8_t vbus_status = fsp_pkt->payload[52];
 800c85c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c860:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c86a:	f887 34cd 	strb.w	r3, [r7, #1229]	@ 0x4cd
							uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 800c86e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c872:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800c87c:	021b      	lsls	r3, r3, #8
 800c87e:	b21a      	sxth	r2, r3
 800c880:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c884:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c88e:	b21b      	sxth	r3, r3
 800c890:	4313      	orrs	r3, r2
 800c892:	b21b      	sxth	r3, r3
 800c894:	f8a7 34ca 	strh.w	r3, [r7, #1226]	@ 0x4ca


						            char buffer_0x06[1000];
						            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 800c898:	f897 e511 	ldrb.w	lr, [r7, #1297]	@ 0x511
 800c89c:	f8b7 850e 	ldrh.w	r8, [r7, #1294]	@ 0x50e
 800c8a0:	f897 350d 	ldrb.w	r3, [r7, #1293]	@ 0x50d
 800c8a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c8a8:	f8b7 250a 	ldrh.w	r2, [r7, #1290]	@ 0x50a
 800c8ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c8b0:	f897 1509 	ldrb.w	r1, [r7, #1289]	@ 0x509
 800c8b4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800c8b8:	f8b7 0506 	ldrh.w	r0, [r7, #1286]	@ 0x506
 800c8bc:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800c8c0:	f897 4505 	ldrb.w	r4, [r7, #1285]	@ 0x505
 800c8c4:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800c8c8:	f8b7 5502 	ldrh.w	r5, [r7, #1282]	@ 0x502
 800c8cc:	f8c7 5084 	str.w	r5, [r7, #132]	@ 0x84
 800c8d0:	f897 6501 	ldrb.w	r6, [r7, #1281]	@ 0x501
 800c8d4:	f8c7 6080 	str.w	r6, [r7, #128]	@ 0x80
 800c8d8:	f8b7 c4fe 	ldrh.w	ip, [r7, #1278]	@ 0x4fe
 800c8dc:	4663      	mov	r3, ip
 800c8de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c8e0:	f897 c4fd 	ldrb.w	ip, [r7, #1277]	@ 0x4fd
 800c8e4:	4662      	mov	r2, ip
 800c8e6:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c8e8:	f8b7 c4fa 	ldrh.w	ip, [r7, #1274]	@ 0x4fa
 800c8ec:	4661      	mov	r1, ip
 800c8ee:	6779      	str	r1, [r7, #116]	@ 0x74
 800c8f0:	f897 c4f9 	ldrb.w	ip, [r7, #1273]	@ 0x4f9
 800c8f4:	4660      	mov	r0, ip
 800c8f6:	6738      	str	r0, [r7, #112]	@ 0x70
 800c8f8:	f8b7 c4f6 	ldrh.w	ip, [r7, #1270]	@ 0x4f6
 800c8fc:	4664      	mov	r4, ip
 800c8fe:	66fc      	str	r4, [r7, #108]	@ 0x6c
 800c900:	f897 c4f5 	ldrb.w	ip, [r7, #1269]	@ 0x4f5
 800c904:	4665      	mov	r5, ip
 800c906:	66bd      	str	r5, [r7, #104]	@ 0x68
 800c908:	f8b7 c4f2 	ldrh.w	ip, [r7, #1266]	@ 0x4f2
 800c90c:	4666      	mov	r6, ip
 800c90e:	667e      	str	r6, [r7, #100]	@ 0x64
 800c910:	f897 c4f1 	ldrb.w	ip, [r7, #1265]	@ 0x4f1
 800c914:	4663      	mov	r3, ip
 800c916:	663b      	str	r3, [r7, #96]	@ 0x60
 800c918:	f8b7 c4ee 	ldrh.w	ip, [r7, #1262]	@ 0x4ee
 800c91c:	4662      	mov	r2, ip
 800c91e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800c920:	f897 c4ed 	ldrb.w	ip, [r7, #1261]	@ 0x4ed
 800c924:	4661      	mov	r1, ip
 800c926:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c928:	f8b7 c4ea 	ldrh.w	ip, [r7, #1258]	@ 0x4ea
 800c92c:	4660      	mov	r0, ip
 800c92e:	6578      	str	r0, [r7, #84]	@ 0x54
 800c930:	f897 c4e9 	ldrb.w	ip, [r7, #1257]	@ 0x4e9
 800c934:	4664      	mov	r4, ip
 800c936:	653c      	str	r4, [r7, #80]	@ 0x50
 800c938:	f8b7 c4e6 	ldrh.w	ip, [r7, #1254]	@ 0x4e6
 800c93c:	4665      	mov	r5, ip
 800c93e:	64fd      	str	r5, [r7, #76]	@ 0x4c
 800c940:	f897 c4e5 	ldrb.w	ip, [r7, #1253]	@ 0x4e5
 800c944:	4666      	mov	r6, ip
 800c946:	64be      	str	r6, [r7, #72]	@ 0x48
 800c948:	f8b7 c4e2 	ldrh.w	ip, [r7, #1250]	@ 0x4e2
 800c94c:	4663      	mov	r3, ip
 800c94e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c950:	f897 c4e1 	ldrb.w	ip, [r7, #1249]	@ 0x4e1
 800c954:	4662      	mov	r2, ip
 800c956:	643a      	str	r2, [r7, #64]	@ 0x40
 800c958:	f8b7 c4de 	ldrh.w	ip, [r7, #1246]	@ 0x4de
 800c95c:	4661      	mov	r1, ip
 800c95e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c960:	f897 c4dd 	ldrb.w	ip, [r7, #1245]	@ 0x4dd
 800c964:	4660      	mov	r0, ip
 800c966:	63b8      	str	r0, [r7, #56]	@ 0x38
 800c968:	f8b7 c4da 	ldrh.w	ip, [r7, #1242]	@ 0x4da
 800c96c:	4664      	mov	r4, ip
 800c96e:	637c      	str	r4, [r7, #52]	@ 0x34
 800c970:	f897 c4d9 	ldrb.w	ip, [r7, #1241]	@ 0x4d9
 800c974:	4665      	mov	r5, ip
 800c976:	633d      	str	r5, [r7, #48]	@ 0x30
 800c978:	f8b7 64d6 	ldrh.w	r6, [r7, #1238]	@ 0x4d6
 800c97c:	f897 54d5 	ldrb.w	r5, [r7, #1237]	@ 0x4d5
 800c980:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 800c984:	f897 04d1 	ldrb.w	r0, [r7, #1233]	@ 0x4d1
 800c988:	f8b7 14ce 	ldrh.w	r1, [r7, #1230]	@ 0x4ce
 800c98c:	f897 24cd 	ldrb.w	r2, [r7, #1229]	@ 0x4cd
 800c990:	f8b7 34ca 	ldrh.w	r3, [r7, #1226]	@ 0x4ca
 800c994:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 800c998:	9321      	str	r3, [sp, #132]	@ 0x84
 800c99a:	9220      	str	r2, [sp, #128]	@ 0x80
 800c99c:	911f      	str	r1, [sp, #124]	@ 0x7c
 800c99e:	901e      	str	r0, [sp, #120]	@ 0x78
 800c9a0:	941d      	str	r4, [sp, #116]	@ 0x74
 800c9a2:	951c      	str	r5, [sp, #112]	@ 0x70
 800c9a4:	961b      	str	r6, [sp, #108]	@ 0x6c
 800c9a6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 800c9a8:	951a      	str	r5, [sp, #104]	@ 0x68
 800c9aa:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800c9ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800c9ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c9b0:	9018      	str	r0, [sp, #96]	@ 0x60
 800c9b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9b4:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c9b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9b8:	9216      	str	r2, [sp, #88]	@ 0x58
 800c9ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c9be:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 800c9c0:	9614      	str	r6, [sp, #80]	@ 0x50
 800c9c2:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 800c9c4:	9513      	str	r5, [sp, #76]	@ 0x4c
 800c9c6:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800c9c8:	9412      	str	r4, [sp, #72]	@ 0x48
 800c9ca:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c9cc:	9011      	str	r0, [sp, #68]	@ 0x44
 800c9ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c9d0:	9110      	str	r1, [sp, #64]	@ 0x40
 800c9d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c9d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c9d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c9da:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 800c9dc:	960d      	str	r6, [sp, #52]	@ 0x34
 800c9de:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 800c9e0:	950c      	str	r5, [sp, #48]	@ 0x30
 800c9e2:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 800c9e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c9e6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800c9e8:	900a      	str	r0, [sp, #40]	@ 0x28
 800c9ea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c9ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800c9ee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c9f0:	9208      	str	r2, [sp, #32]
 800c9f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c9f4:	9307      	str	r3, [sp, #28]
 800c9f6:	f8d7 6080 	ldr.w	r6, [r7, #128]	@ 0x80
 800c9fa:	9606      	str	r6, [sp, #24]
 800c9fc:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 800ca00:	9505      	str	r5, [sp, #20]
 800ca02:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800ca06:	9404      	str	r4, [sp, #16]
 800ca08:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800ca0c:	9003      	str	r0, [sp, #12]
 800ca0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ca12:	9102      	str	r1, [sp, #8]
 800ca14:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ca18:	9201      	str	r2, [sp, #4]
 800ca1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	4643      	mov	r3, r8
 800ca22:	4672      	mov	r2, lr
 800ca24:	49ba      	ldr	r1, [pc, #744]	@ (800cd10 <frame_processing+0x1720>)
 800ca26:	4660      	mov	r0, ip
 800ca28:	f001 fe90 	bl	800e74c <siprintf>
						                rgb_status, rgb_current,
						                ir_status, ir_current,
						                cm4_status, cm4_current,
						                vin_status, vin_voltage,
						                vbus_status, vbus_voltage);
									if (uart_choose_uart5) {
 800ca2c:	4bb9      	ldr	r3, [pc, #740]	@ (800cd14 <frame_processing+0x1724>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d005      	beq.n	800ca42 <frame_processing+0x1452>
										Uart_sendstring(UART5, buffer_0x06);
 800ca36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	48b6      	ldr	r0, [pc, #728]	@ (800cd18 <frame_processing+0x1728>)
 800ca3e:	f7f5 fa45 	bl	8001ecc <Uart_sendstring>
									}
									Uart_sendstring(USART6, buffer_0x06);
 800ca42:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ca46:	4619      	mov	r1, r3
 800ca48:	48b4      	ldr	r0, [pc, #720]	@ (800cd1c <frame_processing+0x172c>)
 800ca4a:	f7f5 fa3f 	bl	8001ecc <Uart_sendstring>

						}

						default:
							clear_send_flag();
 800ca4e:	f7f5 fb5f 	bl	8002110 <clear_send_flag>
							return FSP_PKT_INVALID;
 800ca52:	2302      	movs	r3, #2
 800ca54:	f000 beac 	b.w	800d7b0 <frame_processing+0x21c0>
//													for (int i = 0; i < fsp_pkt->length; i++) {
//													      sprintf(buffer, "\n{%d}", fsp_pkt->payload[i]);
//													      Uart_sendstring(UART5, buffer);
//													}

					clear_send_flag();
 800ca58:	f7f5 fb5a 	bl	8002110 <clear_send_flag>
					break;
 800ca5c:	e004      	b.n	800ca68 <frame_processing+0x1478>
				default:
					clear_send_flag();
 800ca5e:	f7f5 fb57 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800ca62:	2302      	movs	r3, #2
 800ca64:	f000 bea4 	b.w	800d7b0 <frame_processing+0x21c0>
					break;
			}

			break;
 800ca68:	f000 bea1 	b.w	800d7ae <frame_processing+0x21be>
		case FSP_ADR_CAM:
			clear_send_flag();
 800ca6c:	f7f5 fb50 	bl	8002110 <clear_send_flag>

			break;
 800ca70:	f000 be9d 	b.w	800d7ae <frame_processing+0x21be>

		case FSP_ADR_IOU:
			switch (fsp_pkt->type)
 800ca74:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ca78:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	791b      	ldrb	r3, [r3, #4]
 800ca80:	2b05      	cmp	r3, #5
 800ca82:	d003      	beq.n	800ca8c <frame_processing+0x149c>
 800ca84:	2b07      	cmp	r3, #7
 800ca86:	d015      	beq.n	800cab4 <frame_processing+0x14c4>
 800ca88:	f000 be89 	b.w	800d79e <frame_processing+0x21ae>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800ca8c:	f7f5 fb40 	bl	8002110 <clear_send_flag>
					if (uart_choose_uart5) {
 800ca90:	4ba0      	ldr	r3, [pc, #640]	@ (800cd14 <frame_processing+0x1724>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <frame_processing+0x14b2>
						Uart_sendstring(UART5, "\nIOU_ACK\r\n> ");
 800ca9a:	49a1      	ldr	r1, [pc, #644]	@ (800cd20 <frame_processing+0x1730>)
 800ca9c:	489e      	ldr	r0, [pc, #632]	@ (800cd18 <frame_processing+0x1728>)
 800ca9e:	f7f5 fa15 	bl	8001ecc <Uart_sendstring>
					}
					Uart_sendstring(USART6, "\nIOU_ACK\r\n> ");
 800caa2:	499f      	ldr	r1, [pc, #636]	@ (800cd20 <frame_processing+0x1730>)
 800caa4:	489d      	ldr	r0, [pc, #628]	@ (800cd1c <frame_processing+0x172c>)
 800caa6:	f7f5 fa11 	bl	8001ecc <Uart_sendstring>

					break;
 800caaa:	bf00      	nop
				default:
					clear_send_flag();
					return FSP_PKT_INVALID;
					break;
			}
			clear_send_flag();
 800caac:	f7f5 fb30 	bl	8002110 <clear_send_flag>
			break;
 800cab0:	f000 be7d 	b.w	800d7ae <frame_processing+0x21be>
					clear_send_flag();
 800cab4:	f7f5 fb2c 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800cab8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cabc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	795b      	ldrb	r3, [r3, #5]
 800cac4:	2b13      	cmp	r3, #19
 800cac6:	dc31      	bgt.n	800cb2c <frame_processing+0x153c>
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f2c0 8665 	blt.w	800d798 <frame_processing+0x21a8>
 800cace:	2b13      	cmp	r3, #19
 800cad0:	f200 8662 	bhi.w	800d798 <frame_processing+0x21a8>
 800cad4:	a201      	add	r2, pc, #4	@ (adr r2, 800cadc <frame_processing+0x14ec>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800cb35 	.word	0x0800cb35
 800cae0:	0800d799 	.word	0x0800d799
 800cae4:	0800cbb5 	.word	0x0800cbb5
 800cae8:	0800cc71 	.word	0x0800cc71
 800caec:	0800d799 	.word	0x0800d799
 800caf0:	0800d799 	.word	0x0800d799
 800caf4:	0800d799 	.word	0x0800d799
 800caf8:	0800d799 	.word	0x0800d799
 800cafc:	0800d799 	.word	0x0800d799
 800cb00:	0800d799 	.word	0x0800d799
 800cb04:	0800d799 	.word	0x0800d799
 800cb08:	0800d799 	.word	0x0800d799
 800cb0c:	0800d799 	.word	0x0800d799
 800cb10:	0800d799 	.word	0x0800d799
 800cb14:	0800cd39 	.word	0x0800cd39
 800cb18:	0800d799 	.word	0x0800d799
 800cb1c:	0800cdc1 	.word	0x0800cdc1
 800cb20:	0800ce07 	.word	0x0800ce07
 800cb24:	0800cf35 	.word	0x0800cf35
 800cb28:	0800cfad 	.word	0x0800cfad
 800cb2c:	2bff      	cmp	r3, #255	@ 0xff
 800cb2e:	d021      	beq.n	800cb74 <frame_processing+0x1584>
 800cb30:	f000 be32 	b.w	800d798 <frame_processing+0x21a8>
							sprintf(buffer_0x00, "IOU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800cb34:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb38:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	799b      	ldrb	r3, [r3, #6]
 800cb40:	461a      	mov	r2, r3
 800cb42:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cb46:	4977      	ldr	r1, [pc, #476]	@ (800cd24 <frame_processing+0x1734>)
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f001 fdff 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800cb4e:	4b71      	ldr	r3, [pc, #452]	@ (800cd14 <frame_processing+0x1724>)
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d005      	beq.n	800cb64 <frame_processing+0x1574>
								Uart_sendstring(UART5, buffer_0x00);
 800cb58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	486e      	ldr	r0, [pc, #440]	@ (800cd18 <frame_processing+0x1728>)
 800cb60:	f7f5 f9b4 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x00);
 800cb64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cb68:	4619      	mov	r1, r3
 800cb6a:	486c      	ldr	r0, [pc, #432]	@ (800cd1c <frame_processing+0x172c>)
 800cb6c:	f7f5 f9ae 	bl	8001ecc <Uart_sendstring>
							break;
 800cb70:	f000 be15 	b.w	800d79e <frame_processing+0x21ae>
							sprintf(buffer_0xFF, "IOU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800cb74:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb78:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	799b      	ldrb	r3, [r3, #6]
 800cb80:	461a      	mov	r2, r3
 800cb82:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cb86:	4968      	ldr	r1, [pc, #416]	@ (800cd28 <frame_processing+0x1738>)
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f001 fddf 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800cb8e:	4b61      	ldr	r3, [pc, #388]	@ (800cd14 <frame_processing+0x1724>)
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d005      	beq.n	800cba4 <frame_processing+0x15b4>
								Uart_sendstring(UART5, buffer_0xFF);
 800cb98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	485e      	ldr	r0, [pc, #376]	@ (800cd18 <frame_processing+0x1728>)
 800cba0:	f7f5 f994 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0xFF);
 800cba4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cba8:	4619      	mov	r1, r3
 800cbaa:	485c      	ldr	r0, [pc, #368]	@ (800cd1c <frame_processing+0x172c>)
 800cbac:	f7f5 f98e 	bl	8001ecc <Uart_sendstring>
							break;
 800cbb0:	f000 bdf5 	b.w	800d79e <frame_processing+0x21ae>
						    uint8_t device = fsp_pkt->payload[1];
 800cbb4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cbb8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	799b      	ldrb	r3, [r3, #6]
 800cbc0:	f887 3515 	strb.w	r3, [r7, #1301]	@ 0x515
						    uint8_t channel = fsp_pkt->payload[2];
 800cbc4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cbc8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	79db      	ldrb	r3, [r3, #7]
 800cbd0:	f887 3514 	strb.w	r3, [r7, #1300]	@ 0x514
						    int16_t temp = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800cbd4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cbd8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	7a1b      	ldrb	r3, [r3, #8]
 800cbe0:	021b      	lsls	r3, r3, #8
 800cbe2:	b21a      	sxth	r2, r3
 800cbe4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cbe8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	7a5b      	ldrb	r3, [r3, #9]
 800cbf0:	b21b      	sxth	r3, r3
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	f8a7 3512 	strh.w	r3, [r7, #1298]	@ 0x512
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800cbf8:	f897 4515 	ldrb.w	r4, [r7, #1301]	@ 0x515
 800cbfc:	f897 5514 	ldrb.w	r5, [r7, #1300]	@ 0x514
 800cc00:	f9b7 3512 	ldrsh.w	r3, [r7, #1298]	@ 0x512
 800cc04:	4a49      	ldr	r2, [pc, #292]	@ (800cd2c <frame_processing+0x173c>)
 800cc06:	fb82 1203 	smull	r1, r2, r2, r3
 800cc0a:	1092      	asrs	r2, r2, #2
 800cc0c:	17db      	asrs	r3, r3, #31
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	b21b      	sxth	r3, r3
 800cc12:	461e      	mov	r6, r3
						            device, channel, temp / 10, abs(temp % 10));
 800cc14:	f9b7 2512 	ldrsh.w	r2, [r7, #1298]	@ 0x512
 800cc18:	4b44      	ldr	r3, [pc, #272]	@ (800cd2c <frame_processing+0x173c>)
 800cc1a:	fb83 1302 	smull	r1, r3, r3, r2
 800cc1e:	1099      	asrs	r1, r3, #2
 800cc20:	17d3      	asrs	r3, r2, #31
 800cc22:	1ac9      	subs	r1, r1, r3
 800cc24:	460b      	mov	r3, r1
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	440b      	add	r3, r1
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	b21b      	sxth	r3, r3
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	bfb8      	it	lt
 800cc34:	425b      	neglt	r3, r3
 800cc36:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800cc38:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800cc3c:	9301      	str	r3, [sp, #4]
 800cc3e:	9600      	str	r6, [sp, #0]
 800cc40:	462b      	mov	r3, r5
 800cc42:	4622      	mov	r2, r4
 800cc44:	493a      	ldr	r1, [pc, #232]	@ (800cd30 <frame_processing+0x1740>)
 800cc46:	f001 fd81 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800cc4a:	4b32      	ldr	r3, [pc, #200]	@ (800cd14 <frame_processing+0x1724>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d005      	beq.n	800cc60 <frame_processing+0x1670>
								Uart_sendstring(UART5, buffer_0x02);
 800cc54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cc58:	4619      	mov	r1, r3
 800cc5a:	482f      	ldr	r0, [pc, #188]	@ (800cd18 <frame_processing+0x1728>)
 800cc5c:	f7f5 f936 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x02);
 800cc60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cc64:	4619      	mov	r1, r3
 800cc66:	482d      	ldr	r0, [pc, #180]	@ (800cd1c <frame_processing+0x172c>)
 800cc68:	f7f5 f930 	bl	8001ecc <Uart_sendstring>
						break;
 800cc6c:	f000 bd97 	b.w	800d79e <frame_processing+0x21ae>
						    uint8_t channel = fsp_pkt->payload[1];
 800cc70:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc74:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	799b      	ldrb	r3, [r3, #6]
 800cc7c:	f887 3518 	strb.w	r3, [r7, #1304]	@ 0x518
						    int16_t temp = (int16_t)((fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3]);
 800cc80:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc84:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	79db      	ldrb	r3, [r3, #7]
 800cc8c:	021b      	lsls	r3, r3, #8
 800cc8e:	b21a      	sxth	r2, r3
 800cc90:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc94:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	7a1b      	ldrb	r3, [r3, #8]
 800cc9c:	b21b      	sxth	r3, r3
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	f8a7 3516 	strh.w	r3, [r7, #1302]	@ 0x516
						    sprintf(buffer_0x03, "IOU_Res: CMDcode 0x03 [{Channel: %u} Temp: %d.%d]\n",
 800cca4:	f897 4518 	ldrb.w	r4, [r7, #1304]	@ 0x518
 800cca8:	f9b7 3516 	ldrsh.w	r3, [r7, #1302]	@ 0x516
 800ccac:	4a1f      	ldr	r2, [pc, #124]	@ (800cd2c <frame_processing+0x173c>)
 800ccae:	fb82 1203 	smull	r1, r2, r2, r3
 800ccb2:	1092      	asrs	r2, r2, #2
 800ccb4:	17db      	asrs	r3, r3, #31
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	b21b      	sxth	r3, r3
 800ccba:	461d      	mov	r5, r3
 800ccbc:	f9b7 2516 	ldrsh.w	r2, [r7, #1302]	@ 0x516
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd2c <frame_processing+0x173c>)
 800ccc2:	fb83 1302 	smull	r1, r3, r3, r2
 800ccc6:	1099      	asrs	r1, r3, #2
 800ccc8:	17d3      	asrs	r3, r2, #31
 800ccca:	1ac9      	subs	r1, r1, r3
 800cccc:	460b      	mov	r3, r1
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	440b      	add	r3, r1
 800ccd2:	005b      	lsls	r3, r3, #1
 800ccd4:	1ad3      	subs	r3, r2, r3
 800ccd6:	b21b      	sxth	r3, r3
 800ccd8:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	462b      	mov	r3, r5
 800cce0:	4622      	mov	r2, r4
 800cce2:	4914      	ldr	r1, [pc, #80]	@ (800cd34 <frame_processing+0x1744>)
 800cce4:	f001 fd32 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800cce8:	4b0a      	ldr	r3, [pc, #40]	@ (800cd14 <frame_processing+0x1724>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d005      	beq.n	800ccfe <frame_processing+0x170e>
								Uart_sendstring(UART5, buffer_0x03);
 800ccf2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	4807      	ldr	r0, [pc, #28]	@ (800cd18 <frame_processing+0x1728>)
 800ccfa:	f7f5 f8e7 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x03);
 800ccfe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cd02:	4619      	mov	r1, r3
 800cd04:	4805      	ldr	r0, [pc, #20]	@ (800cd1c <frame_processing+0x172c>)
 800cd06:	f7f5 f8e1 	bl	8001ecc <Uart_sendstring>
						break;
 800cd0a:	f000 bd48 	b.w	800d79e <frame_processing+0x21ae>
 800cd0e:	bf00      	nop
 800cd10:	08014524 	.word	0x08014524
 800cd14:	20004850 	.word	0x20004850
 800cd18:	40005000 	.word	0x40005000
 800cd1c:	40011400 	.word	0x40011400
 800cd20:	0801476c 	.word	0x0801476c
 800cd24:	0801477c 	.word	0x0801477c
 800cd28:	08014798 	.word	0x08014798
 800cd2c:	66666667 	.word	0x66666667
 800cd30:	080147b4 	.word	0x080147b4
 800cd34:	080147f4 	.word	0x080147f4
						    uint8_t red = fsp_pkt->payload[1];
 800cd38:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd3c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	799b      	ldrb	r3, [r3, #6]
 800cd44:	f887 351c 	strb.w	r3, [r7, #1308]	@ 0x51c
						    uint8_t blue = fsp_pkt->payload[2];
 800cd48:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd4c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	79db      	ldrb	r3, [r3, #7]
 800cd54:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
						    uint8_t green = fsp_pkt->payload[3];
 800cd58:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd5c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	7a1b      	ldrb	r3, [r3, #8]
 800cd64:	f887 351a 	strb.w	r3, [r7, #1306]	@ 0x51a
						    uint8_t white = fsp_pkt->payload[4];
 800cd68:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd6c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	7a5b      	ldrb	r3, [r3, #9]
 800cd74:	f887 3519 	strb.w	r3, [r7, #1305]	@ 0x519
						    sprintf(buffer_0x0E, "IOU_Res: CMDcode 0x0E [Red: %u, Blue: %u, Green: %u, White: %u]\n",
 800cd78:	f897 151c 	ldrb.w	r1, [r7, #1308]	@ 0x51c
 800cd7c:	f897 451b 	ldrb.w	r4, [r7, #1307]	@ 0x51b
 800cd80:	f897 351a 	ldrb.w	r3, [r7, #1306]	@ 0x51a
 800cd84:	f897 2519 	ldrb.w	r2, [r7, #1305]	@ 0x519
 800cd88:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800cd8c:	9201      	str	r2, [sp, #4]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	4623      	mov	r3, r4
 800cd92:	460a      	mov	r2, r1
 800cd94:	497e      	ldr	r1, [pc, #504]	@ (800cf90 <frame_processing+0x19a0>)
 800cd96:	f001 fcd9 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800cd9a:	4b7e      	ldr	r3, [pc, #504]	@ (800cf94 <frame_processing+0x19a4>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d005      	beq.n	800cdb0 <frame_processing+0x17c0>
								Uart_sendstring(UART5, buffer_0x0E);
 800cda4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cda8:	4619      	mov	r1, r3
 800cdaa:	487b      	ldr	r0, [pc, #492]	@ (800cf98 <frame_processing+0x19a8>)
 800cdac:	f7f5 f88e 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x0E);
 800cdb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4879      	ldr	r0, [pc, #484]	@ (800cf9c <frame_processing+0x19ac>)
 800cdb8:	f7f5 f888 	bl	8001ecc <Uart_sendstring>
						break;
 800cdbc:	f000 bcef 	b.w	800d79e <frame_processing+0x21ae>
						    uint8_t duty = fsp_pkt->payload[1];
 800cdc0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cdc4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	799b      	ldrb	r3, [r3, #6]
 800cdcc:	f887 351d 	strb.w	r3, [r7, #1309]	@ 0x51d
						    sprintf(buffer_0x10, "IOU_Res: CMDcode 0x10 [Duty: %u%%]\n", duty);
 800cdd0:	f897 251d 	ldrb.w	r2, [r7, #1309]	@ 0x51d
 800cdd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cdd8:	4971      	ldr	r1, [pc, #452]	@ (800cfa0 <frame_processing+0x19b0>)
 800cdda:	4618      	mov	r0, r3
 800cddc:	f001 fcb6 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800cde0:	4b6c      	ldr	r3, [pc, #432]	@ (800cf94 <frame_processing+0x19a4>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d005      	beq.n	800cdf6 <frame_processing+0x1806>
								Uart_sendstring(UART5, buffer_0x10);
 800cdea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cdee:	4619      	mov	r1, r3
 800cdf0:	4869      	ldr	r0, [pc, #420]	@ (800cf98 <frame_processing+0x19a8>)
 800cdf2:	f7f5 f86b 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x10);
 800cdf6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4867      	ldr	r0, [pc, #412]	@ (800cf9c <frame_processing+0x19ac>)
 800cdfe:	f7f5 f865 	bl	8001ecc <Uart_sendstring>
						break;
 800ce02:	f000 bccc 	b.w	800d79e <frame_processing+0x21ae>
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ce06:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce0a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	799b      	ldrb	r3, [r3, #6]
 800ce12:	021b      	lsls	r3, r3, #8
 800ce14:	b21a      	sxth	r2, r3
 800ce16:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce1a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	79db      	ldrb	r3, [r3, #7]
 800ce22:	b21b      	sxth	r3, r3
 800ce24:	4313      	orrs	r3, r2
 800ce26:	f8a7 3528 	strh.w	r3, [r7, #1320]	@ 0x528
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ce2a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce2e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	7a1b      	ldrb	r3, [r3, #8]
 800ce36:	021b      	lsls	r3, r3, #8
 800ce38:	b21a      	sxth	r2, r3
 800ce3a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce3e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	7a5b      	ldrb	r3, [r3, #9]
 800ce46:	b21b      	sxth	r3, r3
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	f8a7 3526 	strh.w	r3, [r7, #1318]	@ 0x526
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800ce4e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce52:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	7a9b      	ldrb	r3, [r3, #10]
 800ce5a:	021b      	lsls	r3, r3, #8
 800ce5c:	b21a      	sxth	r2, r3
 800ce5e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce62:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	7adb      	ldrb	r3, [r3, #11]
 800ce6a:	b21b      	sxth	r3, r3
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	f8a7 3524 	strh.w	r3, [r7, #1316]	@ 0x524
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800ce72:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce76:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	7b1b      	ldrb	r3, [r3, #12]
 800ce7e:	021b      	lsls	r3, r3, #8
 800ce80:	b21a      	sxth	r2, r3
 800ce82:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce86:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	7b5b      	ldrb	r3, [r3, #13]
 800ce8e:	b21b      	sxth	r3, r3
 800ce90:	4313      	orrs	r3, r2
 800ce92:	f8a7 3522 	strh.w	r3, [r7, #1314]	@ 0x522
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800ce96:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ce9a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	7b9b      	ldrb	r3, [r3, #14]
 800cea2:	021b      	lsls	r3, r3, #8
 800cea4:	b21a      	sxth	r2, r3
 800cea6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ceaa:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	7bdb      	ldrb	r3, [r3, #15]
 800ceb2:	b21b      	sxth	r3, r3
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	f8a7 3520 	strh.w	r3, [r7, #1312]	@ 0x520
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800ceba:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cebe:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	7c1b      	ldrb	r3, [r3, #16]
 800cec6:	021b      	lsls	r3, r3, #8
 800cec8:	b21a      	sxth	r2, r3
 800ceca:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cece:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	7c5b      	ldrb	r3, [r3, #17]
 800ced6:	b21b      	sxth	r3, r3
 800ced8:	4313      	orrs	r3, r2
 800ceda:	f8a7 351e 	strh.w	r3, [r7, #1310]	@ 0x51e
						    sprintf(buffer_0x11, "IOU_Res: CMDcode 0x11 [Accel: X=%d, Y=%d, Z=%d\nGyro: X=%d, Y=%d, Z=%d]\n",
 800cede:	f9b7 5528 	ldrsh.w	r5, [r7, #1320]	@ 0x528
 800cee2:	f9b7 6526 	ldrsh.w	r6, [r7, #1318]	@ 0x526
 800cee6:	f9b7 3524 	ldrsh.w	r3, [r7, #1316]	@ 0x524
 800ceea:	f9b7 2522 	ldrsh.w	r2, [r7, #1314]	@ 0x522
 800ceee:	f9b7 1520 	ldrsh.w	r1, [r7, #1312]	@ 0x520
 800cef2:	f9b7 051e 	ldrsh.w	r0, [r7, #1310]	@ 0x51e
 800cef6:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800cefa:	9003      	str	r0, [sp, #12]
 800cefc:	9102      	str	r1, [sp, #8]
 800cefe:	9201      	str	r2, [sp, #4]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	4633      	mov	r3, r6
 800cf04:	462a      	mov	r2, r5
 800cf06:	4927      	ldr	r1, [pc, #156]	@ (800cfa4 <frame_processing+0x19b4>)
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f001 fc1f 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800cf0e:	4b21      	ldr	r3, [pc, #132]	@ (800cf94 <frame_processing+0x19a4>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d005      	beq.n	800cf24 <frame_processing+0x1934>
								Uart_sendstring(UART5, buffer_0x11);
 800cf18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	481e      	ldr	r0, [pc, #120]	@ (800cf98 <frame_processing+0x19a8>)
 800cf20:	f7f4 ffd4 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x11);
 800cf24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cf28:	4619      	mov	r1, r3
 800cf2a:	481c      	ldr	r0, [pc, #112]	@ (800cf9c <frame_processing+0x19ac>)
 800cf2c:	f7f4 ffce 	bl	8001ecc <Uart_sendstring>
						break;
 800cf30:	f000 bc35 	b.w	800d79e <frame_processing+0x21ae>
						    uint16_t pressure = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800cf34:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cf38:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	799b      	ldrb	r3, [r3, #6]
 800cf40:	021b      	lsls	r3, r3, #8
 800cf42:	b21a      	sxth	r2, r3
 800cf44:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cf48:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	79db      	ldrb	r3, [r3, #7]
 800cf50:	b21b      	sxth	r3, r3
 800cf52:	4313      	orrs	r3, r2
 800cf54:	b21b      	sxth	r3, r3
 800cf56:	f8a7 352a 	strh.w	r3, [r7, #1322]	@ 0x52a
						    sprintf(buffer_0x12, "IOU_Res: CMDcode 0x12 [Press: %u]\n", pressure);
 800cf5a:	f8b7 252a 	ldrh.w	r2, [r7, #1322]	@ 0x52a
 800cf5e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cf62:	4911      	ldr	r1, [pc, #68]	@ (800cfa8 <frame_processing+0x19b8>)
 800cf64:	4618      	mov	r0, r3
 800cf66:	f001 fbf1 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800cf6a:	4b0a      	ldr	r3, [pc, #40]	@ (800cf94 <frame_processing+0x19a4>)
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d005      	beq.n	800cf80 <frame_processing+0x1990>
								Uart_sendstring(UART5, buffer_0x12);
 800cf74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cf78:	4619      	mov	r1, r3
 800cf7a:	4807      	ldr	r0, [pc, #28]	@ (800cf98 <frame_processing+0x19a8>)
 800cf7c:	f7f4 ffa6 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x12);
 800cf80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cf84:	4619      	mov	r1, r3
 800cf86:	4805      	ldr	r0, [pc, #20]	@ (800cf9c <frame_processing+0x19ac>)
 800cf88:	f7f4 ffa0 	bl	8001ecc <Uart_sendstring>
						break;
 800cf8c:	f000 bc07 	b.w	800d79e <frame_processing+0x21ae>
 800cf90:	08014828 	.word	0x08014828
 800cf94:	20004850 	.word	0x20004850
 800cf98:	40005000 	.word	0x40005000
 800cf9c:	40011400 	.word	0x40011400
 800cfa0:	0801486c 	.word	0x0801486c
 800cfa4:	08014890 	.word	0x08014890
 800cfa8:	080148d8 	.word	0x080148d8
							int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800cfac:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cfb0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	799b      	ldrb	r3, [r3, #6]
 800cfb8:	021b      	lsls	r3, r3, #8
 800cfba:	b21a      	sxth	r2, r3
 800cfbc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cfc0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	79db      	ldrb	r3, [r3, #7]
 800cfc8:	b21b      	sxth	r3, r3
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	f8a7 354e 	strh.w	r3, [r7, #1358]	@ 0x54e
							int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800cfd0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cfd4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	7a1b      	ldrb	r3, [r3, #8]
 800cfdc:	021b      	lsls	r3, r3, #8
 800cfde:	b21a      	sxth	r2, r3
 800cfe0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cfe4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	7a5b      	ldrb	r3, [r3, #9]
 800cfec:	b21b      	sxth	r3, r3
 800cfee:	4313      	orrs	r3, r2
 800cff0:	f8a7 354c 	strh.w	r3, [r7, #1356]	@ 0x54c
							int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800cff4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cff8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	7a9b      	ldrb	r3, [r3, #10]
 800d000:	021b      	lsls	r3, r3, #8
 800d002:	b21a      	sxth	r2, r3
 800d004:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d008:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	7adb      	ldrb	r3, [r3, #11]
 800d010:	b21b      	sxth	r3, r3
 800d012:	4313      	orrs	r3, r2
 800d014:	f8a7 354a 	strh.w	r3, [r7, #1354]	@ 0x54a
							int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800d018:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d01c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	7b1b      	ldrb	r3, [r3, #12]
 800d024:	021b      	lsls	r3, r3, #8
 800d026:	b21a      	sxth	r2, r3
 800d028:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d02c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	7b5b      	ldrb	r3, [r3, #13]
 800d034:	b21b      	sxth	r3, r3
 800d036:	4313      	orrs	r3, r2
 800d038:	f8a7 3548 	strh.w	r3, [r7, #1352]	@ 0x548
							int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800d03c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d040:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	7b9b      	ldrb	r3, [r3, #14]
 800d048:	021b      	lsls	r3, r3, #8
 800d04a:	b21a      	sxth	r2, r3
 800d04c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d050:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	7bdb      	ldrb	r3, [r3, #15]
 800d058:	b21b      	sxth	r3, r3
 800d05a:	4313      	orrs	r3, r2
 800d05c:	f8a7 3546 	strh.w	r3, [r7, #1350]	@ 0x546
							int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800d060:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d064:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	7c1b      	ldrb	r3, [r3, #16]
 800d06c:	021b      	lsls	r3, r3, #8
 800d06e:	b21a      	sxth	r2, r3
 800d070:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d074:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	7c5b      	ldrb	r3, [r3, #17]
 800d07c:	b21b      	sxth	r3, r3
 800d07e:	4313      	orrs	r3, r2
 800d080:	f8a7 3544 	strh.w	r3, [r7, #1348]	@ 0x544
							int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800d084:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d088:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	7c9b      	ldrb	r3, [r3, #18]
 800d090:	021b      	lsls	r3, r3, #8
 800d092:	b21a      	sxth	r2, r3
 800d094:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d098:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	7cdb      	ldrb	r3, [r3, #19]
 800d0a0:	b21b      	sxth	r3, r3
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	f8a7 3542 	strh.w	r3, [r7, #1346]	@ 0x542
							int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800d0a8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d0ac:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	7d1b      	ldrb	r3, [r3, #20]
 800d0b4:	021b      	lsls	r3, r3, #8
 800d0b6:	b21a      	sxth	r2, r3
 800d0b8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d0bc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	7d5b      	ldrb	r3, [r3, #21]
 800d0c4:	b21b      	sxth	r3, r3
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	f8a7 3540 	strh.w	r3, [r7, #1344]	@ 0x540
							int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800d0cc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d0d0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	7d9b      	ldrb	r3, [r3, #22]
 800d0d8:	021b      	lsls	r3, r3, #8
 800d0da:	b21a      	sxth	r2, r3
 800d0dc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d0e0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	7ddb      	ldrb	r3, [r3, #23]
 800d0e8:	b21b      	sxth	r3, r3
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	f8a7 353e 	strh.w	r3, [r7, #1342]	@ 0x53e
							int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800d0f0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d0f4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	7e1b      	ldrb	r3, [r3, #24]
 800d0fc:	021b      	lsls	r3, r3, #8
 800d0fe:	b21a      	sxth	r2, r3
 800d100:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d104:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	7e5b      	ldrb	r3, [r3, #25]
 800d10c:	b21b      	sxth	r3, r3
 800d10e:	4313      	orrs	r3, r2
 800d110:	f8a7 353c 	strh.w	r3, [r7, #1340]	@ 0x53c
							int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800d114:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d118:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	7e9b      	ldrb	r3, [r3, #26]
 800d120:	021b      	lsls	r3, r3, #8
 800d122:	b21a      	sxth	r2, r3
 800d124:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d128:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	7edb      	ldrb	r3, [r3, #27]
 800d130:	b21b      	sxth	r3, r3
 800d132:	4313      	orrs	r3, r2
 800d134:	f8a7 353a 	strh.w	r3, [r7, #1338]	@ 0x53a
							uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800d138:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d13c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	7f1b      	ldrb	r3, [r3, #28]
 800d144:	021b      	lsls	r3, r3, #8
 800d146:	b21a      	sxth	r2, r3
 800d148:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d14c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	7f5b      	ldrb	r3, [r3, #29]
 800d154:	b21b      	sxth	r3, r3
 800d156:	4313      	orrs	r3, r2
 800d158:	b21b      	sxth	r3, r3
 800d15a:	f8a7 3538 	strh.w	r3, [r7, #1336]	@ 0x538
							uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 800d15e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d162:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	7f9b      	ldrb	r3, [r3, #30]
 800d16a:	021b      	lsls	r3, r3, #8
 800d16c:	b21a      	sxth	r2, r3
 800d16e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d172:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	7fdb      	ldrb	r3, [r3, #31]
 800d17a:	b21b      	sxth	r3, r3
 800d17c:	4313      	orrs	r3, r2
 800d17e:	b21b      	sxth	r3, r3
 800d180:	f8a7 3536 	strh.w	r3, [r7, #1334]	@ 0x536
							uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 800d184:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d188:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d192:	021b      	lsls	r3, r3, #8
 800d194:	b21a      	sxth	r2, r3
 800d196:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d19a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d1a4:	b21b      	sxth	r3, r3
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	b21b      	sxth	r3, r3
 800d1aa:	f8a7 3534 	strh.w	r3, [r7, #1332]	@ 0x534
							uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 800d1ae:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d1b2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d1bc:	021b      	lsls	r3, r3, #8
 800d1be:	b21a      	sxth	r2, r3
 800d1c0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d1c4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d1ce:	b21b      	sxth	r3, r3
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	b21b      	sxth	r3, r3
 800d1d4:	f8a7 3532 	strh.w	r3, [r7, #1330]	@ 0x532
							uint8_t neo_led_r = fsp_pkt->payload[31];
 800d1d8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d1dc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d1e6:	f887 3531 	strb.w	r3, [r7, #1329]	@ 0x531
							uint8_t neo_led_g = fsp_pkt->payload[32];
 800d1ea:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d1ee:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d1f8:	f887 3530 	strb.w	r3, [r7, #1328]	@ 0x530
							uint8_t neo_led_b = fsp_pkt->payload[33];
 800d1fc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d200:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800d20a:	f887 352f 	strb.w	r3, [r7, #1327]	@ 0x52f
							uint8_t neo_led_w = fsp_pkt->payload[34];
 800d20e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d212:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800d21c:	f887 352e 	strb.w	r3, [r7, #1326]	@ 0x52e
							uint8_t ir_led_duty = fsp_pkt->payload[35];
 800d220:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800d224:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d22e:	f887 352d 	strb.w	r3, [r7, #1325]	@ 0x52d
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d232:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800d236:	2b00      	cmp	r3, #0
 800d238:	da03      	bge.n	800d242 <frame_processing+0x1c52>
 800d23a:	4bb2      	ldr	r3, [pc, #712]	@ (800d504 <frame_processing+0x1f14>)
 800d23c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d240:	e002      	b.n	800d248 <frame_processing+0x1c58>
 800d242:	4bb1      	ldr	r3, [pc, #708]	@ (800d508 <frame_processing+0x1f18>)
 800d244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800d248:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	bfb8      	it	lt
 800d250:	425b      	neglt	r3, r3
 800d252:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d254:	4aad      	ldr	r2, [pc, #692]	@ (800d50c <frame_processing+0x1f1c>)
 800d256:	fb82 1203 	smull	r1, r2, r2, r3
 800d25a:	1092      	asrs	r2, r2, #2
 800d25c:	17db      	asrs	r3, r3, #31
 800d25e:	eba2 0e03 	sub.w	lr, r2, r3
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800d262:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800d266:	2b00      	cmp	r3, #0
 800d268:	bfb8      	it	lt
 800d26a:	425b      	neglt	r3, r3
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d270:	4ba6      	ldr	r3, [pc, #664]	@ (800d50c <frame_processing+0x1f1c>)
 800d272:	fb83 1302 	smull	r1, r3, r3, r2
 800d276:	1099      	asrs	r1, r3, #2
 800d278:	17d3      	asrs	r3, r2, #31
 800d27a:	1acb      	subs	r3, r1, r3
 800d27c:	4619      	mov	r1, r3
 800d27e:	460b      	mov	r3, r1
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d28a:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800d28e:	2b00      	cmp	r3, #0
 800d290:	da03      	bge.n	800d29a <frame_processing+0x1caa>
 800d292:	4b9c      	ldr	r3, [pc, #624]	@ (800d504 <frame_processing+0x1f14>)
 800d294:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d298:	e002      	b.n	800d2a0 <frame_processing+0x1cb0>
 800d29a:	4b9b      	ldr	r3, [pc, #620]	@ (800d508 <frame_processing+0x1f18>)
 800d29c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800d2a0:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	bfb8      	it	lt
 800d2a8:	425b      	neglt	r3, r3
 800d2aa:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d2ac:	4a97      	ldr	r2, [pc, #604]	@ (800d50c <frame_processing+0x1f1c>)
 800d2ae:	fb82 1203 	smull	r1, r2, r2, r3
 800d2b2:	1092      	asrs	r2, r2, #2
 800d2b4:	17db      	asrs	r3, r3, #31
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	66bb      	str	r3, [r7, #104]	@ 0x68
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800d2ba:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	bfb8      	it	lt
 800d2c2:	425b      	neglt	r3, r3
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d2c8:	4b90      	ldr	r3, [pc, #576]	@ (800d50c <frame_processing+0x1f1c>)
 800d2ca:	fb83 1302 	smull	r1, r3, r3, r2
 800d2ce:	1099      	asrs	r1, r3, #2
 800d2d0:	17d3      	asrs	r3, r2, #31
 800d2d2:	1acb      	subs	r3, r1, r3
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	440b      	add	r3, r1
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2e2:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	da03      	bge.n	800d2f2 <frame_processing+0x1d02>
 800d2ea:	4b86      	ldr	r3, [pc, #536]	@ (800d504 <frame_processing+0x1f14>)
 800d2ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d2f0:	e002      	b.n	800d2f8 <frame_processing+0x1d08>
 800d2f2:	4b85      	ldr	r3, [pc, #532]	@ (800d508 <frame_processing+0x1f18>)
 800d2f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800d2f8:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	bfb8      	it	lt
 800d300:	425b      	neglt	r3, r3
 800d302:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d304:	4a81      	ldr	r2, [pc, #516]	@ (800d50c <frame_processing+0x1f1c>)
 800d306:	fb82 1203 	smull	r1, r2, r2, r3
 800d30a:	1092      	asrs	r2, r2, #2
 800d30c:	17db      	asrs	r3, r3, #31
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	663b      	str	r3, [r7, #96]	@ 0x60
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800d312:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800d316:	2b00      	cmp	r3, #0
 800d318:	bfb8      	it	lt
 800d31a:	425b      	neglt	r3, r3
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d320:	4b7a      	ldr	r3, [pc, #488]	@ (800d50c <frame_processing+0x1f1c>)
 800d322:	fb83 1302 	smull	r1, r3, r3, r2
 800d326:	1099      	asrs	r1, r3, #2
 800d328:	17d3      	asrs	r3, r2, #31
 800d32a:	1acb      	subs	r3, r1, r3
 800d32c:	4619      	mov	r1, r3
 800d32e:	460b      	mov	r3, r1
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	440b      	add	r3, r1
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d33a:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800d33e:	2b00      	cmp	r3, #0
 800d340:	da03      	bge.n	800d34a <frame_processing+0x1d5a>
 800d342:	4b70      	ldr	r3, [pc, #448]	@ (800d504 <frame_processing+0x1f14>)
 800d344:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d348:	e002      	b.n	800d350 <frame_processing+0x1d60>
 800d34a:	4b6f      	ldr	r3, [pc, #444]	@ (800d508 <frame_processing+0x1f18>)
 800d34c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800d350:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800d354:	2b00      	cmp	r3, #0
 800d356:	bfb8      	it	lt
 800d358:	425b      	neglt	r3, r3
 800d35a:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d35c:	4a6b      	ldr	r2, [pc, #428]	@ (800d50c <frame_processing+0x1f1c>)
 800d35e:	fb82 1203 	smull	r1, r2, r2, r3
 800d362:	1092      	asrs	r2, r2, #2
 800d364:	17db      	asrs	r3, r3, #31
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	65bb      	str	r3, [r7, #88]	@ 0x58
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800d36a:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800d36e:	2b00      	cmp	r3, #0
 800d370:	bfb8      	it	lt
 800d372:	425b      	neglt	r3, r3
 800d374:	b29b      	uxth	r3, r3
 800d376:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d378:	4b64      	ldr	r3, [pc, #400]	@ (800d50c <frame_processing+0x1f1c>)
 800d37a:	fb83 2301 	smull	r2, r3, r3, r1
 800d37e:	109a      	asrs	r2, r3, #2
 800d380:	17cb      	asrs	r3, r1, #31
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	461a      	mov	r2, r3
 800d386:	4613      	mov	r3, r2
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	4413      	add	r3, r2
 800d38c:	005b      	lsls	r3, r3, #1
 800d38e:	1acb      	subs	r3, r1, r3
 800d390:	657b      	str	r3, [r7, #84]	@ 0x54
 800d392:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800d396:	2b00      	cmp	r3, #0
 800d398:	da03      	bge.n	800d3a2 <frame_processing+0x1db2>
 800d39a:	4b5a      	ldr	r3, [pc, #360]	@ (800d504 <frame_processing+0x1f14>)
 800d39c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d3a0:	e002      	b.n	800d3a8 <frame_processing+0x1db8>
 800d3a2:	4b59      	ldr	r3, [pc, #356]	@ (800d508 <frame_processing+0x1f18>)
 800d3a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800d3a8:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	bfb8      	it	lt
 800d3b0:	425b      	neglt	r3, r3
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d3b6:	4b55      	ldr	r3, [pc, #340]	@ (800d50c <frame_processing+0x1f1c>)
 800d3b8:	fb83 2301 	smull	r2, r3, r3, r1
 800d3bc:	109a      	asrs	r2, r3, #2
 800d3be:	17cb      	asrs	r3, r1, #31
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	653b      	str	r3, [r7, #80]	@ 0x50
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800d3c4:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bfb8      	it	lt
 800d3cc:	425b      	neglt	r3, r3
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d3d2:	4b4e      	ldr	r3, [pc, #312]	@ (800d50c <frame_processing+0x1f1c>)
 800d3d4:	fb83 2301 	smull	r2, r3, r3, r1
 800d3d8:	109a      	asrs	r2, r3, #2
 800d3da:	17cb      	asrs	r3, r1, #31
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	461a      	mov	r2, r3
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	005b      	lsls	r3, r3, #1
 800d3e8:	1acb      	subs	r3, r1, r3
 800d3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3ec:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	da03      	bge.n	800d3fc <frame_processing+0x1e0c>
 800d3f4:	4b43      	ldr	r3, [pc, #268]	@ (800d504 <frame_processing+0x1f14>)
 800d3f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d3fa:	e002      	b.n	800d402 <frame_processing+0x1e12>
 800d3fc:	4b42      	ldr	r3, [pc, #264]	@ (800d508 <frame_processing+0x1f18>)
 800d3fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800d402:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800d406:	2b00      	cmp	r3, #0
 800d408:	bfb8      	it	lt
 800d40a:	425b      	neglt	r3, r3
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d410:	4b3e      	ldr	r3, [pc, #248]	@ (800d50c <frame_processing+0x1f1c>)
 800d412:	fb83 2301 	smull	r2, r3, r3, r1
 800d416:	109a      	asrs	r2, r3, #2
 800d418:	17cb      	asrs	r3, r1, #31
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	64bb      	str	r3, [r7, #72]	@ 0x48
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800d41e:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800d422:	2b00      	cmp	r3, #0
 800d424:	bfb8      	it	lt
 800d426:	425b      	neglt	r3, r3
 800d428:	b29b      	uxth	r3, r3
 800d42a:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d42c:	4b37      	ldr	r3, [pc, #220]	@ (800d50c <frame_processing+0x1f1c>)
 800d42e:	fb83 2301 	smull	r2, r3, r3, r1
 800d432:	109a      	asrs	r2, r3, #2
 800d434:	17cb      	asrs	r3, r1, #31
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	461a      	mov	r2, r3
 800d43a:	4613      	mov	r3, r2
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	4413      	add	r3, r2
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	1acb      	subs	r3, r1, r3
 800d444:	647b      	str	r3, [r7, #68]	@ 0x44
 800d446:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	da03      	bge.n	800d456 <frame_processing+0x1e66>
 800d44e:	4b2d      	ldr	r3, [pc, #180]	@ (800d504 <frame_processing+0x1f14>)
 800d450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d454:	e002      	b.n	800d45c <frame_processing+0x1e6c>
 800d456:	4b2c      	ldr	r3, [pc, #176]	@ (800d508 <frame_processing+0x1f18>)
 800d458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800d45c:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800d460:	2b00      	cmp	r3, #0
 800d462:	bfb8      	it	lt
 800d464:	425b      	neglt	r3, r3
 800d466:	b29b      	uxth	r3, r3
 800d468:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d46a:	4b28      	ldr	r3, [pc, #160]	@ (800d50c <frame_processing+0x1f1c>)
 800d46c:	fb83 2301 	smull	r2, r3, r3, r1
 800d470:	109a      	asrs	r2, r3, #2
 800d472:	17cb      	asrs	r3, r1, #31
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	643b      	str	r3, [r7, #64]	@ 0x40
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800d478:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	bfb8      	it	lt
 800d480:	425b      	neglt	r3, r3
 800d482:	b29b      	uxth	r3, r3
 800d484:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d486:	4b21      	ldr	r3, [pc, #132]	@ (800d50c <frame_processing+0x1f1c>)
 800d488:	fb83 2301 	smull	r2, r3, r3, r1
 800d48c:	109a      	asrs	r2, r3, #2
 800d48e:	17cb      	asrs	r3, r1, #31
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	461a      	mov	r2, r3
 800d494:	4613      	mov	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	4413      	add	r3, r2
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	1acb      	subs	r3, r1, r3
 800d49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4a0:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	da02      	bge.n	800d4ae <frame_processing+0x1ebe>
 800d4a8:	4b16      	ldr	r3, [pc, #88]	@ (800d504 <frame_processing+0x1f14>)
 800d4aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4ac:	e001      	b.n	800d4b2 <frame_processing+0x1ec2>
 800d4ae:	4b16      	ldr	r3, [pc, #88]	@ (800d508 <frame_processing+0x1f18>)
 800d4b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800d4b2:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	bfb8      	it	lt
 800d4ba:	425b      	neglt	r3, r3
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d4c0:	4b12      	ldr	r3, [pc, #72]	@ (800d50c <frame_processing+0x1f1c>)
 800d4c2:	fb83 2301 	smull	r2, r3, r3, r1
 800d4c6:	109a      	asrs	r2, r3, #2
 800d4c8:	17cb      	asrs	r3, r1, #31
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	63bb      	str	r3, [r7, #56]	@ 0x38
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800d4ce:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	bfb8      	it	lt
 800d4d6:	425b      	neglt	r3, r3
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d50c <frame_processing+0x1f1c>)
 800d4de:	fb83 2301 	smull	r2, r3, r3, r1
 800d4e2:	109a      	asrs	r2, r3, #2
 800d4e4:	17cb      	asrs	r3, r1, #31
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	005b      	lsls	r3, r3, #1
 800d4f2:	1acb      	subs	r3, r1, r3
 800d4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f6:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	da08      	bge.n	800d510 <frame_processing+0x1f20>
 800d4fe:	4b01      	ldr	r3, [pc, #4]	@ (800d504 <frame_processing+0x1f14>)
 800d500:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d502:	e007      	b.n	800d514 <frame_processing+0x1f24>
 800d504:	08014220 	.word	0x08014220
 800d508:	08014224 	.word	0x08014224
 800d50c:	66666667 	.word	0x66666667
 800d510:	4baa      	ldr	r3, [pc, #680]	@ (800d7bc <frame_processing+0x21cc>)
 800d512:	67bb      	str	r3, [r7, #120]	@ 0x78
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800d514:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800d518:	2b00      	cmp	r3, #0
 800d51a:	bfb8      	it	lt
 800d51c:	425b      	neglt	r3, r3
 800d51e:	b29b      	uxth	r3, r3
 800d520:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d522:	4ba7      	ldr	r3, [pc, #668]	@ (800d7c0 <frame_processing+0x21d0>)
 800d524:	fb83 2301 	smull	r2, r3, r3, r1
 800d528:	109a      	asrs	r2, r3, #2
 800d52a:	17cb      	asrs	r3, r1, #31
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	633b      	str	r3, [r7, #48]	@ 0x30
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800d530:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800d534:	2b00      	cmp	r3, #0
 800d536:	bfb8      	it	lt
 800d538:	425b      	neglt	r3, r3
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d53e:	4ba0      	ldr	r3, [pc, #640]	@ (800d7c0 <frame_processing+0x21d0>)
 800d540:	fb83 2301 	smull	r2, r3, r3, r1
 800d544:	109a      	asrs	r2, r3, #2
 800d546:	17cb      	asrs	r3, r1, #31
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	461a      	mov	r2, r3
 800d54c:	4613      	mov	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4413      	add	r3, r2
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	1acb      	subs	r3, r1, r3
 800d556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d558:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	da02      	bge.n	800d566 <frame_processing+0x1f76>
 800d560:	4b98      	ldr	r3, [pc, #608]	@ (800d7c4 <frame_processing+0x21d4>)
 800d562:	677b      	str	r3, [r7, #116]	@ 0x74
 800d564:	e001      	b.n	800d56a <frame_processing+0x1f7a>
 800d566:	4b95      	ldr	r3, [pc, #596]	@ (800d7bc <frame_processing+0x21cc>)
 800d568:	677b      	str	r3, [r7, #116]	@ 0x74
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800d56a:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bfb8      	it	lt
 800d572:	425b      	neglt	r3, r3
 800d574:	b29b      	uxth	r3, r3
 800d576:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d578:	4b91      	ldr	r3, [pc, #580]	@ (800d7c0 <frame_processing+0x21d0>)
 800d57a:	fb83 2301 	smull	r2, r3, r3, r1
 800d57e:	109a      	asrs	r2, r3, #2
 800d580:	17cb      	asrs	r3, r1, #31
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	62bb      	str	r3, [r7, #40]	@ 0x28
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800d586:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	bfb8      	it	lt
 800d58e:	425b      	neglt	r3, r3
 800d590:	b29b      	uxth	r3, r3
 800d592:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d594:	4b8a      	ldr	r3, [pc, #552]	@ (800d7c0 <frame_processing+0x21d0>)
 800d596:	fb83 2301 	smull	r2, r3, r3, r1
 800d59a:	109a      	asrs	r2, r3, #2
 800d59c:	17cb      	asrs	r3, r1, #31
 800d59e:	1ad3      	subs	r3, r2, r3
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	4413      	add	r3, r2
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	1acb      	subs	r3, r1, r3
 800d5ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5ae:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	da02      	bge.n	800d5bc <frame_processing+0x1fcc>
 800d5b6:	4b83      	ldr	r3, [pc, #524]	@ (800d7c4 <frame_processing+0x21d4>)
 800d5b8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5ba:	e001      	b.n	800d5c0 <frame_processing+0x1fd0>
 800d5bc:	4b7f      	ldr	r3, [pc, #508]	@ (800d7bc <frame_processing+0x21cc>)
 800d5be:	673b      	str	r3, [r7, #112]	@ 0x70
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800d5c0:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	bfb8      	it	lt
 800d5c8:	425b      	neglt	r3, r3
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d5ce:	4b7c      	ldr	r3, [pc, #496]	@ (800d7c0 <frame_processing+0x21d0>)
 800d5d0:	fb83 2301 	smull	r2, r3, r3, r1
 800d5d4:	109a      	asrs	r2, r3, #2
 800d5d6:	17cb      	asrs	r3, r1, #31
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	623b      	str	r3, [r7, #32]
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800d5dc:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	bfb8      	it	lt
 800d5e4:	425b      	neglt	r3, r3
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d5ea:	4b75      	ldr	r3, [pc, #468]	@ (800d7c0 <frame_processing+0x21d0>)
 800d5ec:	fb83 2301 	smull	r2, r3, r3, r1
 800d5f0:	109a      	asrs	r2, r3, #2
 800d5f2:	17cb      	asrs	r3, r1, #31
 800d5f4:	1ad6      	subs	r6, r2, r3
 800d5f6:	4633      	mov	r3, r6
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4433      	add	r3, r6
 800d5fc:	005b      	lsls	r3, r3, #1
 800d5fe:	1ace      	subs	r6, r1, r3
 800d600:	f8b7 2538 	ldrh.w	r2, [r7, #1336]	@ 0x538
 800d604:	4b70      	ldr	r3, [pc, #448]	@ (800d7c8 <frame_processing+0x21d8>)
 800d606:	fba3 2302 	umull	r2, r3, r3, r2
 800d60a:	095b      	lsrs	r3, r3, #5
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	61fb      	str	r3, [r7, #28]
 800d610:	f8b7 1538 	ldrh.w	r1, [r7, #1336]	@ 0x538
 800d614:	4b6c      	ldr	r3, [pc, #432]	@ (800d7c8 <frame_processing+0x21d8>)
 800d616:	fba3 2301 	umull	r2, r3, r3, r1
 800d61a:	095a      	lsrs	r2, r3, #5
 800d61c:	2364      	movs	r3, #100	@ 0x64
 800d61e:	fb02 f303 	mul.w	r3, r2, r3
 800d622:	1acb      	subs	r3, r1, r3
 800d624:	b29b      	uxth	r3, r3
 800d626:	61bb      	str	r3, [r7, #24]
 800d628:	f8b7 2536 	ldrh.w	r2, [r7, #1334]	@ 0x536
 800d62c:	4b66      	ldr	r3, [pc, #408]	@ (800d7c8 <frame_processing+0x21d8>)
 800d62e:	fba3 2302 	umull	r2, r3, r3, r2
 800d632:	095b      	lsrs	r3, r3, #5
 800d634:	b29b      	uxth	r3, r3
 800d636:	617b      	str	r3, [r7, #20]
 800d638:	f8b7 1536 	ldrh.w	r1, [r7, #1334]	@ 0x536
 800d63c:	4b62      	ldr	r3, [pc, #392]	@ (800d7c8 <frame_processing+0x21d8>)
 800d63e:	fba3 2301 	umull	r2, r3, r3, r1
 800d642:	095a      	lsrs	r2, r3, #5
 800d644:	2364      	movs	r3, #100	@ 0x64
 800d646:	fb02 f303 	mul.w	r3, r2, r3
 800d64a:	1acb      	subs	r3, r1, r3
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	613b      	str	r3, [r7, #16]
 800d650:	f8b7 2534 	ldrh.w	r2, [r7, #1332]	@ 0x534
 800d654:	4b5c      	ldr	r3, [pc, #368]	@ (800d7c8 <frame_processing+0x21d8>)
 800d656:	fba3 2302 	umull	r2, r3, r3, r2
 800d65a:	095b      	lsrs	r3, r3, #5
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	60fb      	str	r3, [r7, #12]
 800d660:	f8b7 1534 	ldrh.w	r1, [r7, #1332]	@ 0x534
 800d664:	4b58      	ldr	r3, [pc, #352]	@ (800d7c8 <frame_processing+0x21d8>)
 800d666:	fba3 2301 	umull	r2, r3, r3, r1
 800d66a:	095a      	lsrs	r2, r3, #5
 800d66c:	2364      	movs	r3, #100	@ 0x64
 800d66e:	fb02 f303 	mul.w	r3, r2, r3
 800d672:	1acb      	subs	r3, r1, r3
 800d674:	b29b      	uxth	r3, r3
 800d676:	60bb      	str	r3, [r7, #8]
 800d678:	f8b7 2532 	ldrh.w	r2, [r7, #1330]	@ 0x532
 800d67c:	4b52      	ldr	r3, [pc, #328]	@ (800d7c8 <frame_processing+0x21d8>)
 800d67e:	fba3 2302 	umull	r2, r3, r3, r2
 800d682:	095b      	lsrs	r3, r3, #5
 800d684:	b29b      	uxth	r3, r3
 800d686:	607b      	str	r3, [r7, #4]
 800d688:	f8b7 1532 	ldrh.w	r1, [r7, #1330]	@ 0x532
 800d68c:	4b4e      	ldr	r3, [pc, #312]	@ (800d7c8 <frame_processing+0x21d8>)
 800d68e:	fba3 2301 	umull	r2, r3, r3, r1
 800d692:	095a      	lsrs	r2, r3, #5
 800d694:	2364      	movs	r3, #100	@ 0x64
 800d696:	fb02 f303 	mul.w	r3, r2, r3
 800d69a:	1acb      	subs	r3, r1, r3
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	461d      	mov	r5, r3
 800d6a0:	f897 4531 	ldrb.w	r4, [r7, #1329]	@ 0x531
 800d6a4:	f897 0530 	ldrb.w	r0, [r7, #1328]	@ 0x530
 800d6a8:	f897 152f 	ldrb.w	r1, [r7, #1327]	@ 0x52f
 800d6ac:	f897 252e 	ldrb.w	r2, [r7, #1326]	@ 0x52e
 800d6b0:	f897 352d 	ldrb.w	r3, [r7, #1325]	@ 0x52d
 800d6b4:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 800d6b8:	932b      	str	r3, [sp, #172]	@ 0xac
 800d6ba:	922a      	str	r2, [sp, #168]	@ 0xa8
 800d6bc:	9129      	str	r1, [sp, #164]	@ 0xa4
 800d6be:	9028      	str	r0, [sp, #160]	@ 0xa0
 800d6c0:	9427      	str	r4, [sp, #156]	@ 0x9c
 800d6c2:	9526      	str	r5, [sp, #152]	@ 0x98
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	9225      	str	r2, [sp, #148]	@ 0x94
 800d6c8:	68ba      	ldr	r2, [r7, #8]
 800d6ca:	9224      	str	r2, [sp, #144]	@ 0x90
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	9223      	str	r2, [sp, #140]	@ 0x8c
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	9222      	str	r2, [sp, #136]	@ 0x88
 800d6d4:	697a      	ldr	r2, [r7, #20]
 800d6d6:	9221      	str	r2, [sp, #132]	@ 0x84
 800d6d8:	69ba      	ldr	r2, [r7, #24]
 800d6da:	9220      	str	r2, [sp, #128]	@ 0x80
 800d6dc:	69fa      	ldr	r2, [r7, #28]
 800d6de:	921f      	str	r2, [sp, #124]	@ 0x7c
 800d6e0:	961e      	str	r6, [sp, #120]	@ 0x78
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	931d      	str	r3, [sp, #116]	@ 0x74
 800d6e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6e8:	931c      	str	r3, [sp, #112]	@ 0x70
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d6f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f8:	9318      	str	r3, [sp, #96]	@ 0x60
 800d6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fc:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d6fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d700:	9316      	str	r3, [sp, #88]	@ 0x58
 800d702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d704:	9315      	str	r3, [sp, #84]	@ 0x54
 800d706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d708:	9314      	str	r3, [sp, #80]	@ 0x50
 800d70a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d70c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d710:	9312      	str	r3, [sp, #72]	@ 0x48
 800d712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d714:	9311      	str	r3, [sp, #68]	@ 0x44
 800d716:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d71a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d71c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d71e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d722:	930e      	str	r3, [sp, #56]	@ 0x38
 800d724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d728:	930d      	str	r3, [sp, #52]	@ 0x34
 800d72a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d72c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d72e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d730:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d732:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d736:	930a      	str	r3, [sp, #40]	@ 0x28
 800d738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d73c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d73e:	9308      	str	r3, [sp, #32]
 800d740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d744:	9307      	str	r3, [sp, #28]
 800d746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d748:	9306      	str	r3, [sp, #24]
 800d74a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d74c:	9305      	str	r3, [sp, #20]
 800d74e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d752:	9304      	str	r3, [sp, #16]
 800d754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d756:	9303      	str	r3, [sp, #12]
 800d758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d75a:	9302      	str	r3, [sp, #8]
 800d75c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d760:	9301      	str	r3, [sp, #4]
 800d762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d764:	9300      	str	r3, [sp, #0]
 800d766:	4673      	mov	r3, lr
 800d768:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d76c:	4917      	ldr	r1, [pc, #92]	@ (800d7cc <frame_processing+0x21dc>)
 800d76e:	4660      	mov	r0, ip
 800d770:	f000 ffec 	bl	800e74c <siprintf>
							if (uart_choose_uart5) {
 800d774:	4b16      	ldr	r3, [pc, #88]	@ (800d7d0 <frame_processing+0x21e0>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d005      	beq.n	800d78a <frame_processing+0x219a>
								Uart_sendstring(UART5, buffer_0x13);
 800d77e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d782:	4619      	mov	r1, r3
 800d784:	4813      	ldr	r0, [pc, #76]	@ (800d7d4 <frame_processing+0x21e4>)
 800d786:	f7f4 fba1 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x13);
 800d78a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d78e:	4619      	mov	r1, r3
 800d790:	4811      	ldr	r0, [pc, #68]	@ (800d7d8 <frame_processing+0x21e8>)
 800d792:	f7f4 fb9b 	bl	8001ecc <Uart_sendstring>
						break;
 800d796:	e002      	b.n	800d79e <frame_processing+0x21ae>
							clear_send_flag();
 800d798:	f7f4 fcba 	bl	8002110 <clear_send_flag>
							break;
 800d79c:	bf00      	nop
					clear_send_flag();
 800d79e:	f7f4 fcb7 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800d7a2:	2302      	movs	r3, #2
 800d7a4:	e004      	b.n	800d7b0 <frame_processing+0x21c0>
		default:
			clear_send_flag();
 800d7a6:	f7f4 fcb3 	bl	8002110 <clear_send_flag>
			return FSP_PKT_WRONG_ADR;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	e000      	b.n	800d7b0 <frame_processing+0x21c0>
			break;

	}
	return 0;
 800d7ae:	2300      	movs	r3, #0

}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f507 67aa 	add.w	r7, r7, #1360	@ 0x550
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7bc:	08014224 	.word	0x08014224
 800d7c0:	66666667 	.word	0x66666667
 800d7c4:	08014220 	.word	0x08014220
 800d7c8:	51eb851f 	.word	0x51eb851f
 800d7cc:	080148fc 	.word	0x080148fc
 800d7d0:	20004850 	.word	0x20004850
 800d7d4:	40005000 	.word	0x40005000
 800d7d8:	40011400 	.word	0x40011400

0800d7dc <atoi>:
 800d7dc:	220a      	movs	r2, #10
 800d7de:	2100      	movs	r1, #0
 800d7e0:	f000 b87c 	b.w	800d8dc <strtol>

0800d7e4 <_strtol_l.constprop.0>:
 800d7e4:	2b24      	cmp	r3, #36	@ 0x24
 800d7e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7ea:	4686      	mov	lr, r0
 800d7ec:	4690      	mov	r8, r2
 800d7ee:	d801      	bhi.n	800d7f4 <_strtol_l.constprop.0+0x10>
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d106      	bne.n	800d802 <_strtol_l.constprop.0+0x1e>
 800d7f4:	f001 f860 	bl	800e8b8 <__errno>
 800d7f8:	2316      	movs	r3, #22
 800d7fa:	6003      	str	r3, [r0, #0]
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d802:	4834      	ldr	r0, [pc, #208]	@ (800d8d4 <_strtol_l.constprop.0+0xf0>)
 800d804:	460d      	mov	r5, r1
 800d806:	462a      	mov	r2, r5
 800d808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d80c:	5d06      	ldrb	r6, [r0, r4]
 800d80e:	f016 0608 	ands.w	r6, r6, #8
 800d812:	d1f8      	bne.n	800d806 <_strtol_l.constprop.0+0x22>
 800d814:	2c2d      	cmp	r4, #45	@ 0x2d
 800d816:	d12d      	bne.n	800d874 <_strtol_l.constprop.0+0x90>
 800d818:	782c      	ldrb	r4, [r5, #0]
 800d81a:	2601      	movs	r6, #1
 800d81c:	1c95      	adds	r5, r2, #2
 800d81e:	f033 0210 	bics.w	r2, r3, #16
 800d822:	d109      	bne.n	800d838 <_strtol_l.constprop.0+0x54>
 800d824:	2c30      	cmp	r4, #48	@ 0x30
 800d826:	d12a      	bne.n	800d87e <_strtol_l.constprop.0+0x9a>
 800d828:	782a      	ldrb	r2, [r5, #0]
 800d82a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d82e:	2a58      	cmp	r2, #88	@ 0x58
 800d830:	d125      	bne.n	800d87e <_strtol_l.constprop.0+0x9a>
 800d832:	786c      	ldrb	r4, [r5, #1]
 800d834:	2310      	movs	r3, #16
 800d836:	3502      	adds	r5, #2
 800d838:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d83c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d840:	2200      	movs	r2, #0
 800d842:	fbbc f9f3 	udiv	r9, ip, r3
 800d846:	4610      	mov	r0, r2
 800d848:	fb03 ca19 	mls	sl, r3, r9, ip
 800d84c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d850:	2f09      	cmp	r7, #9
 800d852:	d81b      	bhi.n	800d88c <_strtol_l.constprop.0+0xa8>
 800d854:	463c      	mov	r4, r7
 800d856:	42a3      	cmp	r3, r4
 800d858:	dd27      	ble.n	800d8aa <_strtol_l.constprop.0+0xc6>
 800d85a:	1c57      	adds	r7, r2, #1
 800d85c:	d007      	beq.n	800d86e <_strtol_l.constprop.0+0x8a>
 800d85e:	4581      	cmp	r9, r0
 800d860:	d320      	bcc.n	800d8a4 <_strtol_l.constprop.0+0xc0>
 800d862:	d101      	bne.n	800d868 <_strtol_l.constprop.0+0x84>
 800d864:	45a2      	cmp	sl, r4
 800d866:	db1d      	blt.n	800d8a4 <_strtol_l.constprop.0+0xc0>
 800d868:	fb00 4003 	mla	r0, r0, r3, r4
 800d86c:	2201      	movs	r2, #1
 800d86e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d872:	e7eb      	b.n	800d84c <_strtol_l.constprop.0+0x68>
 800d874:	2c2b      	cmp	r4, #43	@ 0x2b
 800d876:	bf04      	itt	eq
 800d878:	782c      	ldrbeq	r4, [r5, #0]
 800d87a:	1c95      	addeq	r5, r2, #2
 800d87c:	e7cf      	b.n	800d81e <_strtol_l.constprop.0+0x3a>
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1da      	bne.n	800d838 <_strtol_l.constprop.0+0x54>
 800d882:	2c30      	cmp	r4, #48	@ 0x30
 800d884:	bf0c      	ite	eq
 800d886:	2308      	moveq	r3, #8
 800d888:	230a      	movne	r3, #10
 800d88a:	e7d5      	b.n	800d838 <_strtol_l.constprop.0+0x54>
 800d88c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d890:	2f19      	cmp	r7, #25
 800d892:	d801      	bhi.n	800d898 <_strtol_l.constprop.0+0xb4>
 800d894:	3c37      	subs	r4, #55	@ 0x37
 800d896:	e7de      	b.n	800d856 <_strtol_l.constprop.0+0x72>
 800d898:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d89c:	2f19      	cmp	r7, #25
 800d89e:	d804      	bhi.n	800d8aa <_strtol_l.constprop.0+0xc6>
 800d8a0:	3c57      	subs	r4, #87	@ 0x57
 800d8a2:	e7d8      	b.n	800d856 <_strtol_l.constprop.0+0x72>
 800d8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a8:	e7e1      	b.n	800d86e <_strtol_l.constprop.0+0x8a>
 800d8aa:	1c53      	adds	r3, r2, #1
 800d8ac:	d108      	bne.n	800d8c0 <_strtol_l.constprop.0+0xdc>
 800d8ae:	2322      	movs	r3, #34	@ 0x22
 800d8b0:	f8ce 3000 	str.w	r3, [lr]
 800d8b4:	4660      	mov	r0, ip
 800d8b6:	f1b8 0f00 	cmp.w	r8, #0
 800d8ba:	d0a0      	beq.n	800d7fe <_strtol_l.constprop.0+0x1a>
 800d8bc:	1e69      	subs	r1, r5, #1
 800d8be:	e006      	b.n	800d8ce <_strtol_l.constprop.0+0xea>
 800d8c0:	b106      	cbz	r6, 800d8c4 <_strtol_l.constprop.0+0xe0>
 800d8c2:	4240      	negs	r0, r0
 800d8c4:	f1b8 0f00 	cmp.w	r8, #0
 800d8c8:	d099      	beq.n	800d7fe <_strtol_l.constprop.0+0x1a>
 800d8ca:	2a00      	cmp	r2, #0
 800d8cc:	d1f6      	bne.n	800d8bc <_strtol_l.constprop.0+0xd8>
 800d8ce:	f8c8 1000 	str.w	r1, [r8]
 800d8d2:	e794      	b.n	800d7fe <_strtol_l.constprop.0+0x1a>
 800d8d4:	08014a5d 	.word	0x08014a5d

0800d8d8 <_strtol_r>:
 800d8d8:	f7ff bf84 	b.w	800d7e4 <_strtol_l.constprop.0>

0800d8dc <strtol>:
 800d8dc:	4613      	mov	r3, r2
 800d8de:	460a      	mov	r2, r1
 800d8e0:	4601      	mov	r1, r0
 800d8e2:	4802      	ldr	r0, [pc, #8]	@ (800d8ec <strtol+0x10>)
 800d8e4:	6800      	ldr	r0, [r0, #0]
 800d8e6:	f7ff bf7d 	b.w	800d7e4 <_strtol_l.constprop.0>
 800d8ea:	bf00      	nop
 800d8ec:	20000410 	.word	0x20000410

0800d8f0 <__cvt>:
 800d8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f4:	ec57 6b10 	vmov	r6, r7, d0
 800d8f8:	2f00      	cmp	r7, #0
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	463b      	mov	r3, r7
 800d900:	bfbb      	ittet	lt
 800d902:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d906:	461f      	movlt	r7, r3
 800d908:	2300      	movge	r3, #0
 800d90a:	232d      	movlt	r3, #45	@ 0x2d
 800d90c:	700b      	strb	r3, [r1, #0]
 800d90e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d910:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d914:	4691      	mov	r9, r2
 800d916:	f023 0820 	bic.w	r8, r3, #32
 800d91a:	bfbc      	itt	lt
 800d91c:	4632      	movlt	r2, r6
 800d91e:	4616      	movlt	r6, r2
 800d920:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d924:	d005      	beq.n	800d932 <__cvt+0x42>
 800d926:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d92a:	d100      	bne.n	800d92e <__cvt+0x3e>
 800d92c:	3401      	adds	r4, #1
 800d92e:	2102      	movs	r1, #2
 800d930:	e000      	b.n	800d934 <__cvt+0x44>
 800d932:	2103      	movs	r1, #3
 800d934:	ab03      	add	r3, sp, #12
 800d936:	9301      	str	r3, [sp, #4]
 800d938:	ab02      	add	r3, sp, #8
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	ec47 6b10 	vmov	d0, r6, r7
 800d940:	4653      	mov	r3, sl
 800d942:	4622      	mov	r2, r4
 800d944:	f001 f884 	bl	800ea50 <_dtoa_r>
 800d948:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d94c:	4605      	mov	r5, r0
 800d94e:	d119      	bne.n	800d984 <__cvt+0x94>
 800d950:	f019 0f01 	tst.w	r9, #1
 800d954:	d00e      	beq.n	800d974 <__cvt+0x84>
 800d956:	eb00 0904 	add.w	r9, r0, r4
 800d95a:	2200      	movs	r2, #0
 800d95c:	2300      	movs	r3, #0
 800d95e:	4630      	mov	r0, r6
 800d960:	4639      	mov	r1, r7
 800d962:	f7f3 f8c1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d966:	b108      	cbz	r0, 800d96c <__cvt+0x7c>
 800d968:	f8cd 900c 	str.w	r9, [sp, #12]
 800d96c:	2230      	movs	r2, #48	@ 0x30
 800d96e:	9b03      	ldr	r3, [sp, #12]
 800d970:	454b      	cmp	r3, r9
 800d972:	d31e      	bcc.n	800d9b2 <__cvt+0xc2>
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d978:	1b5b      	subs	r3, r3, r5
 800d97a:	4628      	mov	r0, r5
 800d97c:	6013      	str	r3, [r2, #0]
 800d97e:	b004      	add	sp, #16
 800d980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d984:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d988:	eb00 0904 	add.w	r9, r0, r4
 800d98c:	d1e5      	bne.n	800d95a <__cvt+0x6a>
 800d98e:	7803      	ldrb	r3, [r0, #0]
 800d990:	2b30      	cmp	r3, #48	@ 0x30
 800d992:	d10a      	bne.n	800d9aa <__cvt+0xba>
 800d994:	2200      	movs	r2, #0
 800d996:	2300      	movs	r3, #0
 800d998:	4630      	mov	r0, r6
 800d99a:	4639      	mov	r1, r7
 800d99c:	f7f3 f8a4 	bl	8000ae8 <__aeabi_dcmpeq>
 800d9a0:	b918      	cbnz	r0, 800d9aa <__cvt+0xba>
 800d9a2:	f1c4 0401 	rsb	r4, r4, #1
 800d9a6:	f8ca 4000 	str.w	r4, [sl]
 800d9aa:	f8da 3000 	ldr.w	r3, [sl]
 800d9ae:	4499      	add	r9, r3
 800d9b0:	e7d3      	b.n	800d95a <__cvt+0x6a>
 800d9b2:	1c59      	adds	r1, r3, #1
 800d9b4:	9103      	str	r1, [sp, #12]
 800d9b6:	701a      	strb	r2, [r3, #0]
 800d9b8:	e7d9      	b.n	800d96e <__cvt+0x7e>

0800d9ba <__exponent>:
 800d9ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9bc:	2900      	cmp	r1, #0
 800d9be:	bfba      	itte	lt
 800d9c0:	4249      	neglt	r1, r1
 800d9c2:	232d      	movlt	r3, #45	@ 0x2d
 800d9c4:	232b      	movge	r3, #43	@ 0x2b
 800d9c6:	2909      	cmp	r1, #9
 800d9c8:	7002      	strb	r2, [r0, #0]
 800d9ca:	7043      	strb	r3, [r0, #1]
 800d9cc:	dd29      	ble.n	800da22 <__exponent+0x68>
 800d9ce:	f10d 0307 	add.w	r3, sp, #7
 800d9d2:	461d      	mov	r5, r3
 800d9d4:	270a      	movs	r7, #10
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	fbb1 f6f7 	udiv	r6, r1, r7
 800d9dc:	fb07 1416 	mls	r4, r7, r6, r1
 800d9e0:	3430      	adds	r4, #48	@ 0x30
 800d9e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	2c63      	cmp	r4, #99	@ 0x63
 800d9ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800d9ee:	4631      	mov	r1, r6
 800d9f0:	dcf1      	bgt.n	800d9d6 <__exponent+0x1c>
 800d9f2:	3130      	adds	r1, #48	@ 0x30
 800d9f4:	1e94      	subs	r4, r2, #2
 800d9f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d9fa:	1c41      	adds	r1, r0, #1
 800d9fc:	4623      	mov	r3, r4
 800d9fe:	42ab      	cmp	r3, r5
 800da00:	d30a      	bcc.n	800da18 <__exponent+0x5e>
 800da02:	f10d 0309 	add.w	r3, sp, #9
 800da06:	1a9b      	subs	r3, r3, r2
 800da08:	42ac      	cmp	r4, r5
 800da0a:	bf88      	it	hi
 800da0c:	2300      	movhi	r3, #0
 800da0e:	3302      	adds	r3, #2
 800da10:	4403      	add	r3, r0
 800da12:	1a18      	subs	r0, r3, r0
 800da14:	b003      	add	sp, #12
 800da16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da18:	f813 6b01 	ldrb.w	r6, [r3], #1
 800da1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800da20:	e7ed      	b.n	800d9fe <__exponent+0x44>
 800da22:	2330      	movs	r3, #48	@ 0x30
 800da24:	3130      	adds	r1, #48	@ 0x30
 800da26:	7083      	strb	r3, [r0, #2]
 800da28:	70c1      	strb	r1, [r0, #3]
 800da2a:	1d03      	adds	r3, r0, #4
 800da2c:	e7f1      	b.n	800da12 <__exponent+0x58>
	...

0800da30 <_printf_float>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	b08d      	sub	sp, #52	@ 0x34
 800da36:	460c      	mov	r4, r1
 800da38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800da3c:	4616      	mov	r6, r2
 800da3e:	461f      	mov	r7, r3
 800da40:	4605      	mov	r5, r0
 800da42:	f000 feef 	bl	800e824 <_localeconv_r>
 800da46:	6803      	ldr	r3, [r0, #0]
 800da48:	9304      	str	r3, [sp, #16]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7f2 fc20 	bl	8000290 <strlen>
 800da50:	2300      	movs	r3, #0
 800da52:	930a      	str	r3, [sp, #40]	@ 0x28
 800da54:	f8d8 3000 	ldr.w	r3, [r8]
 800da58:	9005      	str	r0, [sp, #20]
 800da5a:	3307      	adds	r3, #7
 800da5c:	f023 0307 	bic.w	r3, r3, #7
 800da60:	f103 0208 	add.w	r2, r3, #8
 800da64:	f894 a018 	ldrb.w	sl, [r4, #24]
 800da68:	f8d4 b000 	ldr.w	fp, [r4]
 800da6c:	f8c8 2000 	str.w	r2, [r8]
 800da70:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800da78:	9307      	str	r3, [sp, #28]
 800da7a:	f8cd 8018 	str.w	r8, [sp, #24]
 800da7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800da82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da86:	4b9c      	ldr	r3, [pc, #624]	@ (800dcf8 <_printf_float+0x2c8>)
 800da88:	f04f 32ff 	mov.w	r2, #4294967295
 800da8c:	f7f3 f85e 	bl	8000b4c <__aeabi_dcmpun>
 800da90:	bb70      	cbnz	r0, 800daf0 <_printf_float+0xc0>
 800da92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da96:	4b98      	ldr	r3, [pc, #608]	@ (800dcf8 <_printf_float+0x2c8>)
 800da98:	f04f 32ff 	mov.w	r2, #4294967295
 800da9c:	f7f3 f838 	bl	8000b10 <__aeabi_dcmple>
 800daa0:	bb30      	cbnz	r0, 800daf0 <_printf_float+0xc0>
 800daa2:	2200      	movs	r2, #0
 800daa4:	2300      	movs	r3, #0
 800daa6:	4640      	mov	r0, r8
 800daa8:	4649      	mov	r1, r9
 800daaa:	f7f3 f827 	bl	8000afc <__aeabi_dcmplt>
 800daae:	b110      	cbz	r0, 800dab6 <_printf_float+0x86>
 800dab0:	232d      	movs	r3, #45	@ 0x2d
 800dab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dab6:	4a91      	ldr	r2, [pc, #580]	@ (800dcfc <_printf_float+0x2cc>)
 800dab8:	4b91      	ldr	r3, [pc, #580]	@ (800dd00 <_printf_float+0x2d0>)
 800daba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dabe:	bf94      	ite	ls
 800dac0:	4690      	movls	r8, r2
 800dac2:	4698      	movhi	r8, r3
 800dac4:	2303      	movs	r3, #3
 800dac6:	6123      	str	r3, [r4, #16]
 800dac8:	f02b 0304 	bic.w	r3, fp, #4
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	f04f 0900 	mov.w	r9, #0
 800dad2:	9700      	str	r7, [sp, #0]
 800dad4:	4633      	mov	r3, r6
 800dad6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dad8:	4621      	mov	r1, r4
 800dada:	4628      	mov	r0, r5
 800dadc:	f000 f9d2 	bl	800de84 <_printf_common>
 800dae0:	3001      	adds	r0, #1
 800dae2:	f040 808d 	bne.w	800dc00 <_printf_float+0x1d0>
 800dae6:	f04f 30ff 	mov.w	r0, #4294967295
 800daea:	b00d      	add	sp, #52	@ 0x34
 800daec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf0:	4642      	mov	r2, r8
 800daf2:	464b      	mov	r3, r9
 800daf4:	4640      	mov	r0, r8
 800daf6:	4649      	mov	r1, r9
 800daf8:	f7f3 f828 	bl	8000b4c <__aeabi_dcmpun>
 800dafc:	b140      	cbz	r0, 800db10 <_printf_float+0xe0>
 800dafe:	464b      	mov	r3, r9
 800db00:	2b00      	cmp	r3, #0
 800db02:	bfbc      	itt	lt
 800db04:	232d      	movlt	r3, #45	@ 0x2d
 800db06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800db0a:	4a7e      	ldr	r2, [pc, #504]	@ (800dd04 <_printf_float+0x2d4>)
 800db0c:	4b7e      	ldr	r3, [pc, #504]	@ (800dd08 <_printf_float+0x2d8>)
 800db0e:	e7d4      	b.n	800daba <_printf_float+0x8a>
 800db10:	6863      	ldr	r3, [r4, #4]
 800db12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800db16:	9206      	str	r2, [sp, #24]
 800db18:	1c5a      	adds	r2, r3, #1
 800db1a:	d13b      	bne.n	800db94 <_printf_float+0x164>
 800db1c:	2306      	movs	r3, #6
 800db1e:	6063      	str	r3, [r4, #4]
 800db20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800db24:	2300      	movs	r3, #0
 800db26:	6022      	str	r2, [r4, #0]
 800db28:	9303      	str	r3, [sp, #12]
 800db2a:	ab0a      	add	r3, sp, #40	@ 0x28
 800db2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800db30:	ab09      	add	r3, sp, #36	@ 0x24
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	6861      	ldr	r1, [r4, #4]
 800db36:	ec49 8b10 	vmov	d0, r8, r9
 800db3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800db3e:	4628      	mov	r0, r5
 800db40:	f7ff fed6 	bl	800d8f0 <__cvt>
 800db44:	9b06      	ldr	r3, [sp, #24]
 800db46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db48:	2b47      	cmp	r3, #71	@ 0x47
 800db4a:	4680      	mov	r8, r0
 800db4c:	d129      	bne.n	800dba2 <_printf_float+0x172>
 800db4e:	1cc8      	adds	r0, r1, #3
 800db50:	db02      	blt.n	800db58 <_printf_float+0x128>
 800db52:	6863      	ldr	r3, [r4, #4]
 800db54:	4299      	cmp	r1, r3
 800db56:	dd41      	ble.n	800dbdc <_printf_float+0x1ac>
 800db58:	f1aa 0a02 	sub.w	sl, sl, #2
 800db5c:	fa5f fa8a 	uxtb.w	sl, sl
 800db60:	3901      	subs	r1, #1
 800db62:	4652      	mov	r2, sl
 800db64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800db68:	9109      	str	r1, [sp, #36]	@ 0x24
 800db6a:	f7ff ff26 	bl	800d9ba <__exponent>
 800db6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db70:	1813      	adds	r3, r2, r0
 800db72:	2a01      	cmp	r2, #1
 800db74:	4681      	mov	r9, r0
 800db76:	6123      	str	r3, [r4, #16]
 800db78:	dc02      	bgt.n	800db80 <_printf_float+0x150>
 800db7a:	6822      	ldr	r2, [r4, #0]
 800db7c:	07d2      	lsls	r2, r2, #31
 800db7e:	d501      	bpl.n	800db84 <_printf_float+0x154>
 800db80:	3301      	adds	r3, #1
 800db82:	6123      	str	r3, [r4, #16]
 800db84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d0a2      	beq.n	800dad2 <_printf_float+0xa2>
 800db8c:	232d      	movs	r3, #45	@ 0x2d
 800db8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db92:	e79e      	b.n	800dad2 <_printf_float+0xa2>
 800db94:	9a06      	ldr	r2, [sp, #24]
 800db96:	2a47      	cmp	r2, #71	@ 0x47
 800db98:	d1c2      	bne.n	800db20 <_printf_float+0xf0>
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d1c0      	bne.n	800db20 <_printf_float+0xf0>
 800db9e:	2301      	movs	r3, #1
 800dba0:	e7bd      	b.n	800db1e <_printf_float+0xee>
 800dba2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dba6:	d9db      	bls.n	800db60 <_printf_float+0x130>
 800dba8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dbac:	d118      	bne.n	800dbe0 <_printf_float+0x1b0>
 800dbae:	2900      	cmp	r1, #0
 800dbb0:	6863      	ldr	r3, [r4, #4]
 800dbb2:	dd0b      	ble.n	800dbcc <_printf_float+0x19c>
 800dbb4:	6121      	str	r1, [r4, #16]
 800dbb6:	b913      	cbnz	r3, 800dbbe <_printf_float+0x18e>
 800dbb8:	6822      	ldr	r2, [r4, #0]
 800dbba:	07d0      	lsls	r0, r2, #31
 800dbbc:	d502      	bpl.n	800dbc4 <_printf_float+0x194>
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	440b      	add	r3, r1
 800dbc2:	6123      	str	r3, [r4, #16]
 800dbc4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dbc6:	f04f 0900 	mov.w	r9, #0
 800dbca:	e7db      	b.n	800db84 <_printf_float+0x154>
 800dbcc:	b913      	cbnz	r3, 800dbd4 <_printf_float+0x1a4>
 800dbce:	6822      	ldr	r2, [r4, #0]
 800dbd0:	07d2      	lsls	r2, r2, #31
 800dbd2:	d501      	bpl.n	800dbd8 <_printf_float+0x1a8>
 800dbd4:	3302      	adds	r3, #2
 800dbd6:	e7f4      	b.n	800dbc2 <_printf_float+0x192>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	e7f2      	b.n	800dbc2 <_printf_float+0x192>
 800dbdc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dbe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbe2:	4299      	cmp	r1, r3
 800dbe4:	db05      	blt.n	800dbf2 <_printf_float+0x1c2>
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	6121      	str	r1, [r4, #16]
 800dbea:	07d8      	lsls	r0, r3, #31
 800dbec:	d5ea      	bpl.n	800dbc4 <_printf_float+0x194>
 800dbee:	1c4b      	adds	r3, r1, #1
 800dbf0:	e7e7      	b.n	800dbc2 <_printf_float+0x192>
 800dbf2:	2900      	cmp	r1, #0
 800dbf4:	bfd4      	ite	le
 800dbf6:	f1c1 0202 	rsble	r2, r1, #2
 800dbfa:	2201      	movgt	r2, #1
 800dbfc:	4413      	add	r3, r2
 800dbfe:	e7e0      	b.n	800dbc2 <_printf_float+0x192>
 800dc00:	6823      	ldr	r3, [r4, #0]
 800dc02:	055a      	lsls	r2, r3, #21
 800dc04:	d407      	bmi.n	800dc16 <_printf_float+0x1e6>
 800dc06:	6923      	ldr	r3, [r4, #16]
 800dc08:	4642      	mov	r2, r8
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	47b8      	blx	r7
 800dc10:	3001      	adds	r0, #1
 800dc12:	d12b      	bne.n	800dc6c <_printf_float+0x23c>
 800dc14:	e767      	b.n	800dae6 <_printf_float+0xb6>
 800dc16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc1a:	f240 80dd 	bls.w	800ddd8 <_printf_float+0x3a8>
 800dc1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dc22:	2200      	movs	r2, #0
 800dc24:	2300      	movs	r3, #0
 800dc26:	f7f2 ff5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d033      	beq.n	800dc96 <_printf_float+0x266>
 800dc2e:	4a37      	ldr	r2, [pc, #220]	@ (800dd0c <_printf_float+0x2dc>)
 800dc30:	2301      	movs	r3, #1
 800dc32:	4631      	mov	r1, r6
 800dc34:	4628      	mov	r0, r5
 800dc36:	47b8      	blx	r7
 800dc38:	3001      	adds	r0, #1
 800dc3a:	f43f af54 	beq.w	800dae6 <_printf_float+0xb6>
 800dc3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dc42:	4543      	cmp	r3, r8
 800dc44:	db02      	blt.n	800dc4c <_printf_float+0x21c>
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	07d8      	lsls	r0, r3, #31
 800dc4a:	d50f      	bpl.n	800dc6c <_printf_float+0x23c>
 800dc4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc50:	4631      	mov	r1, r6
 800dc52:	4628      	mov	r0, r5
 800dc54:	47b8      	blx	r7
 800dc56:	3001      	adds	r0, #1
 800dc58:	f43f af45 	beq.w	800dae6 <_printf_float+0xb6>
 800dc5c:	f04f 0900 	mov.w	r9, #0
 800dc60:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc64:	f104 0a1a 	add.w	sl, r4, #26
 800dc68:	45c8      	cmp	r8, r9
 800dc6a:	dc09      	bgt.n	800dc80 <_printf_float+0x250>
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	079b      	lsls	r3, r3, #30
 800dc70:	f100 8103 	bmi.w	800de7a <_printf_float+0x44a>
 800dc74:	68e0      	ldr	r0, [r4, #12]
 800dc76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc78:	4298      	cmp	r0, r3
 800dc7a:	bfb8      	it	lt
 800dc7c:	4618      	movlt	r0, r3
 800dc7e:	e734      	b.n	800daea <_printf_float+0xba>
 800dc80:	2301      	movs	r3, #1
 800dc82:	4652      	mov	r2, sl
 800dc84:	4631      	mov	r1, r6
 800dc86:	4628      	mov	r0, r5
 800dc88:	47b8      	blx	r7
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	f43f af2b 	beq.w	800dae6 <_printf_float+0xb6>
 800dc90:	f109 0901 	add.w	r9, r9, #1
 800dc94:	e7e8      	b.n	800dc68 <_printf_float+0x238>
 800dc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dc39      	bgt.n	800dd10 <_printf_float+0x2e0>
 800dc9c:	4a1b      	ldr	r2, [pc, #108]	@ (800dd0c <_printf_float+0x2dc>)
 800dc9e:	2301      	movs	r3, #1
 800dca0:	4631      	mov	r1, r6
 800dca2:	4628      	mov	r0, r5
 800dca4:	47b8      	blx	r7
 800dca6:	3001      	adds	r0, #1
 800dca8:	f43f af1d 	beq.w	800dae6 <_printf_float+0xb6>
 800dcac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dcb0:	ea59 0303 	orrs.w	r3, r9, r3
 800dcb4:	d102      	bne.n	800dcbc <_printf_float+0x28c>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	07d9      	lsls	r1, r3, #31
 800dcba:	d5d7      	bpl.n	800dc6c <_printf_float+0x23c>
 800dcbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcc0:	4631      	mov	r1, r6
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	47b8      	blx	r7
 800dcc6:	3001      	adds	r0, #1
 800dcc8:	f43f af0d 	beq.w	800dae6 <_printf_float+0xb6>
 800dccc:	f04f 0a00 	mov.w	sl, #0
 800dcd0:	f104 0b1a 	add.w	fp, r4, #26
 800dcd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcd6:	425b      	negs	r3, r3
 800dcd8:	4553      	cmp	r3, sl
 800dcda:	dc01      	bgt.n	800dce0 <_printf_float+0x2b0>
 800dcdc:	464b      	mov	r3, r9
 800dcde:	e793      	b.n	800dc08 <_printf_float+0x1d8>
 800dce0:	2301      	movs	r3, #1
 800dce2:	465a      	mov	r2, fp
 800dce4:	4631      	mov	r1, r6
 800dce6:	4628      	mov	r0, r5
 800dce8:	47b8      	blx	r7
 800dcea:	3001      	adds	r0, #1
 800dcec:	f43f aefb 	beq.w	800dae6 <_printf_float+0xb6>
 800dcf0:	f10a 0a01 	add.w	sl, sl, #1
 800dcf4:	e7ee      	b.n	800dcd4 <_printf_float+0x2a4>
 800dcf6:	bf00      	nop
 800dcf8:	7fefffff 	.word	0x7fefffff
 800dcfc:	08014b5d 	.word	0x08014b5d
 800dd00:	08014b61 	.word	0x08014b61
 800dd04:	08014b65 	.word	0x08014b65
 800dd08:	08014b69 	.word	0x08014b69
 800dd0c:	08014b6d 	.word	0x08014b6d
 800dd10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd16:	4553      	cmp	r3, sl
 800dd18:	bfa8      	it	ge
 800dd1a:	4653      	movge	r3, sl
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	4699      	mov	r9, r3
 800dd20:	dc36      	bgt.n	800dd90 <_printf_float+0x360>
 800dd22:	f04f 0b00 	mov.w	fp, #0
 800dd26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd2a:	f104 021a 	add.w	r2, r4, #26
 800dd2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd30:	9306      	str	r3, [sp, #24]
 800dd32:	eba3 0309 	sub.w	r3, r3, r9
 800dd36:	455b      	cmp	r3, fp
 800dd38:	dc31      	bgt.n	800dd9e <_printf_float+0x36e>
 800dd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd3c:	459a      	cmp	sl, r3
 800dd3e:	dc3a      	bgt.n	800ddb6 <_printf_float+0x386>
 800dd40:	6823      	ldr	r3, [r4, #0]
 800dd42:	07da      	lsls	r2, r3, #31
 800dd44:	d437      	bmi.n	800ddb6 <_printf_float+0x386>
 800dd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd48:	ebaa 0903 	sub.w	r9, sl, r3
 800dd4c:	9b06      	ldr	r3, [sp, #24]
 800dd4e:	ebaa 0303 	sub.w	r3, sl, r3
 800dd52:	4599      	cmp	r9, r3
 800dd54:	bfa8      	it	ge
 800dd56:	4699      	movge	r9, r3
 800dd58:	f1b9 0f00 	cmp.w	r9, #0
 800dd5c:	dc33      	bgt.n	800ddc6 <_printf_float+0x396>
 800dd5e:	f04f 0800 	mov.w	r8, #0
 800dd62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd66:	f104 0b1a 	add.w	fp, r4, #26
 800dd6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd6c:	ebaa 0303 	sub.w	r3, sl, r3
 800dd70:	eba3 0309 	sub.w	r3, r3, r9
 800dd74:	4543      	cmp	r3, r8
 800dd76:	f77f af79 	ble.w	800dc6c <_printf_float+0x23c>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	465a      	mov	r2, fp
 800dd7e:	4631      	mov	r1, r6
 800dd80:	4628      	mov	r0, r5
 800dd82:	47b8      	blx	r7
 800dd84:	3001      	adds	r0, #1
 800dd86:	f43f aeae 	beq.w	800dae6 <_printf_float+0xb6>
 800dd8a:	f108 0801 	add.w	r8, r8, #1
 800dd8e:	e7ec      	b.n	800dd6a <_printf_float+0x33a>
 800dd90:	4642      	mov	r2, r8
 800dd92:	4631      	mov	r1, r6
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b8      	blx	r7
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d1c2      	bne.n	800dd22 <_printf_float+0x2f2>
 800dd9c:	e6a3      	b.n	800dae6 <_printf_float+0xb6>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	4631      	mov	r1, r6
 800dda2:	4628      	mov	r0, r5
 800dda4:	9206      	str	r2, [sp, #24]
 800dda6:	47b8      	blx	r7
 800dda8:	3001      	adds	r0, #1
 800ddaa:	f43f ae9c 	beq.w	800dae6 <_printf_float+0xb6>
 800ddae:	9a06      	ldr	r2, [sp, #24]
 800ddb0:	f10b 0b01 	add.w	fp, fp, #1
 800ddb4:	e7bb      	b.n	800dd2e <_printf_float+0x2fe>
 800ddb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddba:	4631      	mov	r1, r6
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	47b8      	blx	r7
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d1c0      	bne.n	800dd46 <_printf_float+0x316>
 800ddc4:	e68f      	b.n	800dae6 <_printf_float+0xb6>
 800ddc6:	9a06      	ldr	r2, [sp, #24]
 800ddc8:	464b      	mov	r3, r9
 800ddca:	4442      	add	r2, r8
 800ddcc:	4631      	mov	r1, r6
 800ddce:	4628      	mov	r0, r5
 800ddd0:	47b8      	blx	r7
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	d1c3      	bne.n	800dd5e <_printf_float+0x32e>
 800ddd6:	e686      	b.n	800dae6 <_printf_float+0xb6>
 800ddd8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dddc:	f1ba 0f01 	cmp.w	sl, #1
 800dde0:	dc01      	bgt.n	800dde6 <_printf_float+0x3b6>
 800dde2:	07db      	lsls	r3, r3, #31
 800dde4:	d536      	bpl.n	800de54 <_printf_float+0x424>
 800dde6:	2301      	movs	r3, #1
 800dde8:	4642      	mov	r2, r8
 800ddea:	4631      	mov	r1, r6
 800ddec:	4628      	mov	r0, r5
 800ddee:	47b8      	blx	r7
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	f43f ae78 	beq.w	800dae6 <_printf_float+0xb6>
 800ddf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	f43f ae70 	beq.w	800dae6 <_printf_float+0xb6>
 800de06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800de0a:	2200      	movs	r2, #0
 800de0c:	2300      	movs	r3, #0
 800de0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de12:	f7f2 fe69 	bl	8000ae8 <__aeabi_dcmpeq>
 800de16:	b9c0      	cbnz	r0, 800de4a <_printf_float+0x41a>
 800de18:	4653      	mov	r3, sl
 800de1a:	f108 0201 	add.w	r2, r8, #1
 800de1e:	4631      	mov	r1, r6
 800de20:	4628      	mov	r0, r5
 800de22:	47b8      	blx	r7
 800de24:	3001      	adds	r0, #1
 800de26:	d10c      	bne.n	800de42 <_printf_float+0x412>
 800de28:	e65d      	b.n	800dae6 <_printf_float+0xb6>
 800de2a:	2301      	movs	r3, #1
 800de2c:	465a      	mov	r2, fp
 800de2e:	4631      	mov	r1, r6
 800de30:	4628      	mov	r0, r5
 800de32:	47b8      	blx	r7
 800de34:	3001      	adds	r0, #1
 800de36:	f43f ae56 	beq.w	800dae6 <_printf_float+0xb6>
 800de3a:	f108 0801 	add.w	r8, r8, #1
 800de3e:	45d0      	cmp	r8, sl
 800de40:	dbf3      	blt.n	800de2a <_printf_float+0x3fa>
 800de42:	464b      	mov	r3, r9
 800de44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800de48:	e6df      	b.n	800dc0a <_printf_float+0x1da>
 800de4a:	f04f 0800 	mov.w	r8, #0
 800de4e:	f104 0b1a 	add.w	fp, r4, #26
 800de52:	e7f4      	b.n	800de3e <_printf_float+0x40e>
 800de54:	2301      	movs	r3, #1
 800de56:	4642      	mov	r2, r8
 800de58:	e7e1      	b.n	800de1e <_printf_float+0x3ee>
 800de5a:	2301      	movs	r3, #1
 800de5c:	464a      	mov	r2, r9
 800de5e:	4631      	mov	r1, r6
 800de60:	4628      	mov	r0, r5
 800de62:	47b8      	blx	r7
 800de64:	3001      	adds	r0, #1
 800de66:	f43f ae3e 	beq.w	800dae6 <_printf_float+0xb6>
 800de6a:	f108 0801 	add.w	r8, r8, #1
 800de6e:	68e3      	ldr	r3, [r4, #12]
 800de70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de72:	1a5b      	subs	r3, r3, r1
 800de74:	4543      	cmp	r3, r8
 800de76:	dcf0      	bgt.n	800de5a <_printf_float+0x42a>
 800de78:	e6fc      	b.n	800dc74 <_printf_float+0x244>
 800de7a:	f04f 0800 	mov.w	r8, #0
 800de7e:	f104 0919 	add.w	r9, r4, #25
 800de82:	e7f4      	b.n	800de6e <_printf_float+0x43e>

0800de84 <_printf_common>:
 800de84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de88:	4616      	mov	r6, r2
 800de8a:	4698      	mov	r8, r3
 800de8c:	688a      	ldr	r2, [r1, #8]
 800de8e:	690b      	ldr	r3, [r1, #16]
 800de90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de94:	4293      	cmp	r3, r2
 800de96:	bfb8      	it	lt
 800de98:	4613      	movlt	r3, r2
 800de9a:	6033      	str	r3, [r6, #0]
 800de9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dea0:	4607      	mov	r7, r0
 800dea2:	460c      	mov	r4, r1
 800dea4:	b10a      	cbz	r2, 800deaa <_printf_common+0x26>
 800dea6:	3301      	adds	r3, #1
 800dea8:	6033      	str	r3, [r6, #0]
 800deaa:	6823      	ldr	r3, [r4, #0]
 800deac:	0699      	lsls	r1, r3, #26
 800deae:	bf42      	ittt	mi
 800deb0:	6833      	ldrmi	r3, [r6, #0]
 800deb2:	3302      	addmi	r3, #2
 800deb4:	6033      	strmi	r3, [r6, #0]
 800deb6:	6825      	ldr	r5, [r4, #0]
 800deb8:	f015 0506 	ands.w	r5, r5, #6
 800debc:	d106      	bne.n	800decc <_printf_common+0x48>
 800debe:	f104 0a19 	add.w	sl, r4, #25
 800dec2:	68e3      	ldr	r3, [r4, #12]
 800dec4:	6832      	ldr	r2, [r6, #0]
 800dec6:	1a9b      	subs	r3, r3, r2
 800dec8:	42ab      	cmp	r3, r5
 800deca:	dc26      	bgt.n	800df1a <_printf_common+0x96>
 800decc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ded0:	6822      	ldr	r2, [r4, #0]
 800ded2:	3b00      	subs	r3, #0
 800ded4:	bf18      	it	ne
 800ded6:	2301      	movne	r3, #1
 800ded8:	0692      	lsls	r2, r2, #26
 800deda:	d42b      	bmi.n	800df34 <_printf_common+0xb0>
 800dedc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dee0:	4641      	mov	r1, r8
 800dee2:	4638      	mov	r0, r7
 800dee4:	47c8      	blx	r9
 800dee6:	3001      	adds	r0, #1
 800dee8:	d01e      	beq.n	800df28 <_printf_common+0xa4>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	6922      	ldr	r2, [r4, #16]
 800deee:	f003 0306 	and.w	r3, r3, #6
 800def2:	2b04      	cmp	r3, #4
 800def4:	bf02      	ittt	eq
 800def6:	68e5      	ldreq	r5, [r4, #12]
 800def8:	6833      	ldreq	r3, [r6, #0]
 800defa:	1aed      	subeq	r5, r5, r3
 800defc:	68a3      	ldr	r3, [r4, #8]
 800defe:	bf0c      	ite	eq
 800df00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df04:	2500      	movne	r5, #0
 800df06:	4293      	cmp	r3, r2
 800df08:	bfc4      	itt	gt
 800df0a:	1a9b      	subgt	r3, r3, r2
 800df0c:	18ed      	addgt	r5, r5, r3
 800df0e:	2600      	movs	r6, #0
 800df10:	341a      	adds	r4, #26
 800df12:	42b5      	cmp	r5, r6
 800df14:	d11a      	bne.n	800df4c <_printf_common+0xc8>
 800df16:	2000      	movs	r0, #0
 800df18:	e008      	b.n	800df2c <_printf_common+0xa8>
 800df1a:	2301      	movs	r3, #1
 800df1c:	4652      	mov	r2, sl
 800df1e:	4641      	mov	r1, r8
 800df20:	4638      	mov	r0, r7
 800df22:	47c8      	blx	r9
 800df24:	3001      	adds	r0, #1
 800df26:	d103      	bne.n	800df30 <_printf_common+0xac>
 800df28:	f04f 30ff 	mov.w	r0, #4294967295
 800df2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df30:	3501      	adds	r5, #1
 800df32:	e7c6      	b.n	800dec2 <_printf_common+0x3e>
 800df34:	18e1      	adds	r1, r4, r3
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	2030      	movs	r0, #48	@ 0x30
 800df3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df3e:	4422      	add	r2, r4
 800df40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df48:	3302      	adds	r3, #2
 800df4a:	e7c7      	b.n	800dedc <_printf_common+0x58>
 800df4c:	2301      	movs	r3, #1
 800df4e:	4622      	mov	r2, r4
 800df50:	4641      	mov	r1, r8
 800df52:	4638      	mov	r0, r7
 800df54:	47c8      	blx	r9
 800df56:	3001      	adds	r0, #1
 800df58:	d0e6      	beq.n	800df28 <_printf_common+0xa4>
 800df5a:	3601      	adds	r6, #1
 800df5c:	e7d9      	b.n	800df12 <_printf_common+0x8e>
	...

0800df60 <_printf_i>:
 800df60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df64:	7e0f      	ldrb	r7, [r1, #24]
 800df66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df68:	2f78      	cmp	r7, #120	@ 0x78
 800df6a:	4691      	mov	r9, r2
 800df6c:	4680      	mov	r8, r0
 800df6e:	460c      	mov	r4, r1
 800df70:	469a      	mov	sl, r3
 800df72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df76:	d807      	bhi.n	800df88 <_printf_i+0x28>
 800df78:	2f62      	cmp	r7, #98	@ 0x62
 800df7a:	d80a      	bhi.n	800df92 <_printf_i+0x32>
 800df7c:	2f00      	cmp	r7, #0
 800df7e:	f000 80d2 	beq.w	800e126 <_printf_i+0x1c6>
 800df82:	2f58      	cmp	r7, #88	@ 0x58
 800df84:	f000 80b9 	beq.w	800e0fa <_printf_i+0x19a>
 800df88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df90:	e03a      	b.n	800e008 <_printf_i+0xa8>
 800df92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df96:	2b15      	cmp	r3, #21
 800df98:	d8f6      	bhi.n	800df88 <_printf_i+0x28>
 800df9a:	a101      	add	r1, pc, #4	@ (adr r1, 800dfa0 <_printf_i+0x40>)
 800df9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfa0:	0800dff9 	.word	0x0800dff9
 800dfa4:	0800e00d 	.word	0x0800e00d
 800dfa8:	0800df89 	.word	0x0800df89
 800dfac:	0800df89 	.word	0x0800df89
 800dfb0:	0800df89 	.word	0x0800df89
 800dfb4:	0800df89 	.word	0x0800df89
 800dfb8:	0800e00d 	.word	0x0800e00d
 800dfbc:	0800df89 	.word	0x0800df89
 800dfc0:	0800df89 	.word	0x0800df89
 800dfc4:	0800df89 	.word	0x0800df89
 800dfc8:	0800df89 	.word	0x0800df89
 800dfcc:	0800e10d 	.word	0x0800e10d
 800dfd0:	0800e037 	.word	0x0800e037
 800dfd4:	0800e0c7 	.word	0x0800e0c7
 800dfd8:	0800df89 	.word	0x0800df89
 800dfdc:	0800df89 	.word	0x0800df89
 800dfe0:	0800e12f 	.word	0x0800e12f
 800dfe4:	0800df89 	.word	0x0800df89
 800dfe8:	0800e037 	.word	0x0800e037
 800dfec:	0800df89 	.word	0x0800df89
 800dff0:	0800df89 	.word	0x0800df89
 800dff4:	0800e0cf 	.word	0x0800e0cf
 800dff8:	6833      	ldr	r3, [r6, #0]
 800dffa:	1d1a      	adds	r2, r3, #4
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	6032      	str	r2, [r6, #0]
 800e000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e008:	2301      	movs	r3, #1
 800e00a:	e09d      	b.n	800e148 <_printf_i+0x1e8>
 800e00c:	6833      	ldr	r3, [r6, #0]
 800e00e:	6820      	ldr	r0, [r4, #0]
 800e010:	1d19      	adds	r1, r3, #4
 800e012:	6031      	str	r1, [r6, #0]
 800e014:	0606      	lsls	r6, r0, #24
 800e016:	d501      	bpl.n	800e01c <_printf_i+0xbc>
 800e018:	681d      	ldr	r5, [r3, #0]
 800e01a:	e003      	b.n	800e024 <_printf_i+0xc4>
 800e01c:	0645      	lsls	r5, r0, #25
 800e01e:	d5fb      	bpl.n	800e018 <_printf_i+0xb8>
 800e020:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e024:	2d00      	cmp	r5, #0
 800e026:	da03      	bge.n	800e030 <_printf_i+0xd0>
 800e028:	232d      	movs	r3, #45	@ 0x2d
 800e02a:	426d      	negs	r5, r5
 800e02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e030:	4859      	ldr	r0, [pc, #356]	@ (800e198 <_printf_i+0x238>)
 800e032:	230a      	movs	r3, #10
 800e034:	e011      	b.n	800e05a <_printf_i+0xfa>
 800e036:	6821      	ldr	r1, [r4, #0]
 800e038:	6833      	ldr	r3, [r6, #0]
 800e03a:	0608      	lsls	r0, r1, #24
 800e03c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e040:	d402      	bmi.n	800e048 <_printf_i+0xe8>
 800e042:	0649      	lsls	r1, r1, #25
 800e044:	bf48      	it	mi
 800e046:	b2ad      	uxthmi	r5, r5
 800e048:	2f6f      	cmp	r7, #111	@ 0x6f
 800e04a:	4853      	ldr	r0, [pc, #332]	@ (800e198 <_printf_i+0x238>)
 800e04c:	6033      	str	r3, [r6, #0]
 800e04e:	bf14      	ite	ne
 800e050:	230a      	movne	r3, #10
 800e052:	2308      	moveq	r3, #8
 800e054:	2100      	movs	r1, #0
 800e056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e05a:	6866      	ldr	r6, [r4, #4]
 800e05c:	60a6      	str	r6, [r4, #8]
 800e05e:	2e00      	cmp	r6, #0
 800e060:	bfa2      	ittt	ge
 800e062:	6821      	ldrge	r1, [r4, #0]
 800e064:	f021 0104 	bicge.w	r1, r1, #4
 800e068:	6021      	strge	r1, [r4, #0]
 800e06a:	b90d      	cbnz	r5, 800e070 <_printf_i+0x110>
 800e06c:	2e00      	cmp	r6, #0
 800e06e:	d04b      	beq.n	800e108 <_printf_i+0x1a8>
 800e070:	4616      	mov	r6, r2
 800e072:	fbb5 f1f3 	udiv	r1, r5, r3
 800e076:	fb03 5711 	mls	r7, r3, r1, r5
 800e07a:	5dc7      	ldrb	r7, [r0, r7]
 800e07c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e080:	462f      	mov	r7, r5
 800e082:	42bb      	cmp	r3, r7
 800e084:	460d      	mov	r5, r1
 800e086:	d9f4      	bls.n	800e072 <_printf_i+0x112>
 800e088:	2b08      	cmp	r3, #8
 800e08a:	d10b      	bne.n	800e0a4 <_printf_i+0x144>
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	07df      	lsls	r7, r3, #31
 800e090:	d508      	bpl.n	800e0a4 <_printf_i+0x144>
 800e092:	6923      	ldr	r3, [r4, #16]
 800e094:	6861      	ldr	r1, [r4, #4]
 800e096:	4299      	cmp	r1, r3
 800e098:	bfde      	ittt	le
 800e09a:	2330      	movle	r3, #48	@ 0x30
 800e09c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0a4:	1b92      	subs	r2, r2, r6
 800e0a6:	6122      	str	r2, [r4, #16]
 800e0a8:	f8cd a000 	str.w	sl, [sp]
 800e0ac:	464b      	mov	r3, r9
 800e0ae:	aa03      	add	r2, sp, #12
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	4640      	mov	r0, r8
 800e0b4:	f7ff fee6 	bl	800de84 <_printf_common>
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	d14a      	bne.n	800e152 <_printf_i+0x1f2>
 800e0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c0:	b004      	add	sp, #16
 800e0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c6:	6823      	ldr	r3, [r4, #0]
 800e0c8:	f043 0320 	orr.w	r3, r3, #32
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	4833      	ldr	r0, [pc, #204]	@ (800e19c <_printf_i+0x23c>)
 800e0d0:	2778      	movs	r7, #120	@ 0x78
 800e0d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	6831      	ldr	r1, [r6, #0]
 800e0da:	061f      	lsls	r7, r3, #24
 800e0dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800e0e0:	d402      	bmi.n	800e0e8 <_printf_i+0x188>
 800e0e2:	065f      	lsls	r7, r3, #25
 800e0e4:	bf48      	it	mi
 800e0e6:	b2ad      	uxthmi	r5, r5
 800e0e8:	6031      	str	r1, [r6, #0]
 800e0ea:	07d9      	lsls	r1, r3, #31
 800e0ec:	bf44      	itt	mi
 800e0ee:	f043 0320 	orrmi.w	r3, r3, #32
 800e0f2:	6023      	strmi	r3, [r4, #0]
 800e0f4:	b11d      	cbz	r5, 800e0fe <_printf_i+0x19e>
 800e0f6:	2310      	movs	r3, #16
 800e0f8:	e7ac      	b.n	800e054 <_printf_i+0xf4>
 800e0fa:	4827      	ldr	r0, [pc, #156]	@ (800e198 <_printf_i+0x238>)
 800e0fc:	e7e9      	b.n	800e0d2 <_printf_i+0x172>
 800e0fe:	6823      	ldr	r3, [r4, #0]
 800e100:	f023 0320 	bic.w	r3, r3, #32
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	e7f6      	b.n	800e0f6 <_printf_i+0x196>
 800e108:	4616      	mov	r6, r2
 800e10a:	e7bd      	b.n	800e088 <_printf_i+0x128>
 800e10c:	6833      	ldr	r3, [r6, #0]
 800e10e:	6825      	ldr	r5, [r4, #0]
 800e110:	6961      	ldr	r1, [r4, #20]
 800e112:	1d18      	adds	r0, r3, #4
 800e114:	6030      	str	r0, [r6, #0]
 800e116:	062e      	lsls	r6, r5, #24
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	d501      	bpl.n	800e120 <_printf_i+0x1c0>
 800e11c:	6019      	str	r1, [r3, #0]
 800e11e:	e002      	b.n	800e126 <_printf_i+0x1c6>
 800e120:	0668      	lsls	r0, r5, #25
 800e122:	d5fb      	bpl.n	800e11c <_printf_i+0x1bc>
 800e124:	8019      	strh	r1, [r3, #0]
 800e126:	2300      	movs	r3, #0
 800e128:	6123      	str	r3, [r4, #16]
 800e12a:	4616      	mov	r6, r2
 800e12c:	e7bc      	b.n	800e0a8 <_printf_i+0x148>
 800e12e:	6833      	ldr	r3, [r6, #0]
 800e130:	1d1a      	adds	r2, r3, #4
 800e132:	6032      	str	r2, [r6, #0]
 800e134:	681e      	ldr	r6, [r3, #0]
 800e136:	6862      	ldr	r2, [r4, #4]
 800e138:	2100      	movs	r1, #0
 800e13a:	4630      	mov	r0, r6
 800e13c:	f7f2 f858 	bl	80001f0 <memchr>
 800e140:	b108      	cbz	r0, 800e146 <_printf_i+0x1e6>
 800e142:	1b80      	subs	r0, r0, r6
 800e144:	6060      	str	r0, [r4, #4]
 800e146:	6863      	ldr	r3, [r4, #4]
 800e148:	6123      	str	r3, [r4, #16]
 800e14a:	2300      	movs	r3, #0
 800e14c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e150:	e7aa      	b.n	800e0a8 <_printf_i+0x148>
 800e152:	6923      	ldr	r3, [r4, #16]
 800e154:	4632      	mov	r2, r6
 800e156:	4649      	mov	r1, r9
 800e158:	4640      	mov	r0, r8
 800e15a:	47d0      	blx	sl
 800e15c:	3001      	adds	r0, #1
 800e15e:	d0ad      	beq.n	800e0bc <_printf_i+0x15c>
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	079b      	lsls	r3, r3, #30
 800e164:	d413      	bmi.n	800e18e <_printf_i+0x22e>
 800e166:	68e0      	ldr	r0, [r4, #12]
 800e168:	9b03      	ldr	r3, [sp, #12]
 800e16a:	4298      	cmp	r0, r3
 800e16c:	bfb8      	it	lt
 800e16e:	4618      	movlt	r0, r3
 800e170:	e7a6      	b.n	800e0c0 <_printf_i+0x160>
 800e172:	2301      	movs	r3, #1
 800e174:	4632      	mov	r2, r6
 800e176:	4649      	mov	r1, r9
 800e178:	4640      	mov	r0, r8
 800e17a:	47d0      	blx	sl
 800e17c:	3001      	adds	r0, #1
 800e17e:	d09d      	beq.n	800e0bc <_printf_i+0x15c>
 800e180:	3501      	adds	r5, #1
 800e182:	68e3      	ldr	r3, [r4, #12]
 800e184:	9903      	ldr	r1, [sp, #12]
 800e186:	1a5b      	subs	r3, r3, r1
 800e188:	42ab      	cmp	r3, r5
 800e18a:	dcf2      	bgt.n	800e172 <_printf_i+0x212>
 800e18c:	e7eb      	b.n	800e166 <_printf_i+0x206>
 800e18e:	2500      	movs	r5, #0
 800e190:	f104 0619 	add.w	r6, r4, #25
 800e194:	e7f5      	b.n	800e182 <_printf_i+0x222>
 800e196:	bf00      	nop
 800e198:	08014b6f 	.word	0x08014b6f
 800e19c:	08014b80 	.word	0x08014b80

0800e1a0 <_scanf_float>:
 800e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	b087      	sub	sp, #28
 800e1a6:	4617      	mov	r7, r2
 800e1a8:	9303      	str	r3, [sp, #12]
 800e1aa:	688b      	ldr	r3, [r1, #8]
 800e1ac:	1e5a      	subs	r2, r3, #1
 800e1ae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e1b2:	bf81      	itttt	hi
 800e1b4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e1b8:	eb03 0b05 	addhi.w	fp, r3, r5
 800e1bc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e1c0:	608b      	strhi	r3, [r1, #8]
 800e1c2:	680b      	ldr	r3, [r1, #0]
 800e1c4:	460a      	mov	r2, r1
 800e1c6:	f04f 0500 	mov.w	r5, #0
 800e1ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e1ce:	f842 3b1c 	str.w	r3, [r2], #28
 800e1d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e1d6:	4680      	mov	r8, r0
 800e1d8:	460c      	mov	r4, r1
 800e1da:	bf98      	it	ls
 800e1dc:	f04f 0b00 	movls.w	fp, #0
 800e1e0:	9201      	str	r2, [sp, #4]
 800e1e2:	4616      	mov	r6, r2
 800e1e4:	46aa      	mov	sl, r5
 800e1e6:	46a9      	mov	r9, r5
 800e1e8:	9502      	str	r5, [sp, #8]
 800e1ea:	68a2      	ldr	r2, [r4, #8]
 800e1ec:	b152      	cbz	r2, 800e204 <_scanf_float+0x64>
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	2b4e      	cmp	r3, #78	@ 0x4e
 800e1f4:	d864      	bhi.n	800e2c0 <_scanf_float+0x120>
 800e1f6:	2b40      	cmp	r3, #64	@ 0x40
 800e1f8:	d83c      	bhi.n	800e274 <_scanf_float+0xd4>
 800e1fa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e1fe:	b2c8      	uxtb	r0, r1
 800e200:	280e      	cmp	r0, #14
 800e202:	d93a      	bls.n	800e27a <_scanf_float+0xda>
 800e204:	f1b9 0f00 	cmp.w	r9, #0
 800e208:	d003      	beq.n	800e212 <_scanf_float+0x72>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e210:	6023      	str	r3, [r4, #0]
 800e212:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e216:	f1ba 0f01 	cmp.w	sl, #1
 800e21a:	f200 8117 	bhi.w	800e44c <_scanf_float+0x2ac>
 800e21e:	9b01      	ldr	r3, [sp, #4]
 800e220:	429e      	cmp	r6, r3
 800e222:	f200 8108 	bhi.w	800e436 <_scanf_float+0x296>
 800e226:	2001      	movs	r0, #1
 800e228:	b007      	add	sp, #28
 800e22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e232:	2a0d      	cmp	r2, #13
 800e234:	d8e6      	bhi.n	800e204 <_scanf_float+0x64>
 800e236:	a101      	add	r1, pc, #4	@ (adr r1, 800e23c <_scanf_float+0x9c>)
 800e238:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e23c:	0800e383 	.word	0x0800e383
 800e240:	0800e205 	.word	0x0800e205
 800e244:	0800e205 	.word	0x0800e205
 800e248:	0800e205 	.word	0x0800e205
 800e24c:	0800e3e3 	.word	0x0800e3e3
 800e250:	0800e3bb 	.word	0x0800e3bb
 800e254:	0800e205 	.word	0x0800e205
 800e258:	0800e205 	.word	0x0800e205
 800e25c:	0800e391 	.word	0x0800e391
 800e260:	0800e205 	.word	0x0800e205
 800e264:	0800e205 	.word	0x0800e205
 800e268:	0800e205 	.word	0x0800e205
 800e26c:	0800e205 	.word	0x0800e205
 800e270:	0800e349 	.word	0x0800e349
 800e274:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e278:	e7db      	b.n	800e232 <_scanf_float+0x92>
 800e27a:	290e      	cmp	r1, #14
 800e27c:	d8c2      	bhi.n	800e204 <_scanf_float+0x64>
 800e27e:	a001      	add	r0, pc, #4	@ (adr r0, 800e284 <_scanf_float+0xe4>)
 800e280:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e284:	0800e339 	.word	0x0800e339
 800e288:	0800e205 	.word	0x0800e205
 800e28c:	0800e339 	.word	0x0800e339
 800e290:	0800e3cf 	.word	0x0800e3cf
 800e294:	0800e205 	.word	0x0800e205
 800e298:	0800e2e1 	.word	0x0800e2e1
 800e29c:	0800e31f 	.word	0x0800e31f
 800e2a0:	0800e31f 	.word	0x0800e31f
 800e2a4:	0800e31f 	.word	0x0800e31f
 800e2a8:	0800e31f 	.word	0x0800e31f
 800e2ac:	0800e31f 	.word	0x0800e31f
 800e2b0:	0800e31f 	.word	0x0800e31f
 800e2b4:	0800e31f 	.word	0x0800e31f
 800e2b8:	0800e31f 	.word	0x0800e31f
 800e2bc:	0800e31f 	.word	0x0800e31f
 800e2c0:	2b6e      	cmp	r3, #110	@ 0x6e
 800e2c2:	d809      	bhi.n	800e2d8 <_scanf_float+0x138>
 800e2c4:	2b60      	cmp	r3, #96	@ 0x60
 800e2c6:	d8b2      	bhi.n	800e22e <_scanf_float+0x8e>
 800e2c8:	2b54      	cmp	r3, #84	@ 0x54
 800e2ca:	d07b      	beq.n	800e3c4 <_scanf_float+0x224>
 800e2cc:	2b59      	cmp	r3, #89	@ 0x59
 800e2ce:	d199      	bne.n	800e204 <_scanf_float+0x64>
 800e2d0:	2d07      	cmp	r5, #7
 800e2d2:	d197      	bne.n	800e204 <_scanf_float+0x64>
 800e2d4:	2508      	movs	r5, #8
 800e2d6:	e02c      	b.n	800e332 <_scanf_float+0x192>
 800e2d8:	2b74      	cmp	r3, #116	@ 0x74
 800e2da:	d073      	beq.n	800e3c4 <_scanf_float+0x224>
 800e2dc:	2b79      	cmp	r3, #121	@ 0x79
 800e2de:	e7f6      	b.n	800e2ce <_scanf_float+0x12e>
 800e2e0:	6821      	ldr	r1, [r4, #0]
 800e2e2:	05c8      	lsls	r0, r1, #23
 800e2e4:	d51b      	bpl.n	800e31e <_scanf_float+0x17e>
 800e2e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e2ea:	6021      	str	r1, [r4, #0]
 800e2ec:	f109 0901 	add.w	r9, r9, #1
 800e2f0:	f1bb 0f00 	cmp.w	fp, #0
 800e2f4:	d003      	beq.n	800e2fe <_scanf_float+0x15e>
 800e2f6:	3201      	adds	r2, #1
 800e2f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e2fc:	60a2      	str	r2, [r4, #8]
 800e2fe:	68a3      	ldr	r3, [r4, #8]
 800e300:	3b01      	subs	r3, #1
 800e302:	60a3      	str	r3, [r4, #8]
 800e304:	6923      	ldr	r3, [r4, #16]
 800e306:	3301      	adds	r3, #1
 800e308:	6123      	str	r3, [r4, #16]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	3b01      	subs	r3, #1
 800e30e:	2b00      	cmp	r3, #0
 800e310:	607b      	str	r3, [r7, #4]
 800e312:	f340 8087 	ble.w	800e424 <_scanf_float+0x284>
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	3301      	adds	r3, #1
 800e31a:	603b      	str	r3, [r7, #0]
 800e31c:	e765      	b.n	800e1ea <_scanf_float+0x4a>
 800e31e:	eb1a 0105 	adds.w	r1, sl, r5
 800e322:	f47f af6f 	bne.w	800e204 <_scanf_float+0x64>
 800e326:	6822      	ldr	r2, [r4, #0]
 800e328:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e32c:	6022      	str	r2, [r4, #0]
 800e32e:	460d      	mov	r5, r1
 800e330:	468a      	mov	sl, r1
 800e332:	f806 3b01 	strb.w	r3, [r6], #1
 800e336:	e7e2      	b.n	800e2fe <_scanf_float+0x15e>
 800e338:	6822      	ldr	r2, [r4, #0]
 800e33a:	0610      	lsls	r0, r2, #24
 800e33c:	f57f af62 	bpl.w	800e204 <_scanf_float+0x64>
 800e340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e344:	6022      	str	r2, [r4, #0]
 800e346:	e7f4      	b.n	800e332 <_scanf_float+0x192>
 800e348:	f1ba 0f00 	cmp.w	sl, #0
 800e34c:	d10e      	bne.n	800e36c <_scanf_float+0x1cc>
 800e34e:	f1b9 0f00 	cmp.w	r9, #0
 800e352:	d10e      	bne.n	800e372 <_scanf_float+0x1d2>
 800e354:	6822      	ldr	r2, [r4, #0]
 800e356:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e35a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e35e:	d108      	bne.n	800e372 <_scanf_float+0x1d2>
 800e360:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e364:	6022      	str	r2, [r4, #0]
 800e366:	f04f 0a01 	mov.w	sl, #1
 800e36a:	e7e2      	b.n	800e332 <_scanf_float+0x192>
 800e36c:	f1ba 0f02 	cmp.w	sl, #2
 800e370:	d055      	beq.n	800e41e <_scanf_float+0x27e>
 800e372:	2d01      	cmp	r5, #1
 800e374:	d002      	beq.n	800e37c <_scanf_float+0x1dc>
 800e376:	2d04      	cmp	r5, #4
 800e378:	f47f af44 	bne.w	800e204 <_scanf_float+0x64>
 800e37c:	3501      	adds	r5, #1
 800e37e:	b2ed      	uxtb	r5, r5
 800e380:	e7d7      	b.n	800e332 <_scanf_float+0x192>
 800e382:	f1ba 0f01 	cmp.w	sl, #1
 800e386:	f47f af3d 	bne.w	800e204 <_scanf_float+0x64>
 800e38a:	f04f 0a02 	mov.w	sl, #2
 800e38e:	e7d0      	b.n	800e332 <_scanf_float+0x192>
 800e390:	b97d      	cbnz	r5, 800e3b2 <_scanf_float+0x212>
 800e392:	f1b9 0f00 	cmp.w	r9, #0
 800e396:	f47f af38 	bne.w	800e20a <_scanf_float+0x6a>
 800e39a:	6822      	ldr	r2, [r4, #0]
 800e39c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e3a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e3a4:	f040 8108 	bne.w	800e5b8 <_scanf_float+0x418>
 800e3a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e3ac:	6022      	str	r2, [r4, #0]
 800e3ae:	2501      	movs	r5, #1
 800e3b0:	e7bf      	b.n	800e332 <_scanf_float+0x192>
 800e3b2:	2d03      	cmp	r5, #3
 800e3b4:	d0e2      	beq.n	800e37c <_scanf_float+0x1dc>
 800e3b6:	2d05      	cmp	r5, #5
 800e3b8:	e7de      	b.n	800e378 <_scanf_float+0x1d8>
 800e3ba:	2d02      	cmp	r5, #2
 800e3bc:	f47f af22 	bne.w	800e204 <_scanf_float+0x64>
 800e3c0:	2503      	movs	r5, #3
 800e3c2:	e7b6      	b.n	800e332 <_scanf_float+0x192>
 800e3c4:	2d06      	cmp	r5, #6
 800e3c6:	f47f af1d 	bne.w	800e204 <_scanf_float+0x64>
 800e3ca:	2507      	movs	r5, #7
 800e3cc:	e7b1      	b.n	800e332 <_scanf_float+0x192>
 800e3ce:	6822      	ldr	r2, [r4, #0]
 800e3d0:	0591      	lsls	r1, r2, #22
 800e3d2:	f57f af17 	bpl.w	800e204 <_scanf_float+0x64>
 800e3d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e3da:	6022      	str	r2, [r4, #0]
 800e3dc:	f8cd 9008 	str.w	r9, [sp, #8]
 800e3e0:	e7a7      	b.n	800e332 <_scanf_float+0x192>
 800e3e2:	6822      	ldr	r2, [r4, #0]
 800e3e4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e3e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e3ec:	d006      	beq.n	800e3fc <_scanf_float+0x25c>
 800e3ee:	0550      	lsls	r0, r2, #21
 800e3f0:	f57f af08 	bpl.w	800e204 <_scanf_float+0x64>
 800e3f4:	f1b9 0f00 	cmp.w	r9, #0
 800e3f8:	f000 80de 	beq.w	800e5b8 <_scanf_float+0x418>
 800e3fc:	0591      	lsls	r1, r2, #22
 800e3fe:	bf58      	it	pl
 800e400:	9902      	ldrpl	r1, [sp, #8]
 800e402:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e406:	bf58      	it	pl
 800e408:	eba9 0101 	subpl.w	r1, r9, r1
 800e40c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e410:	bf58      	it	pl
 800e412:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e416:	6022      	str	r2, [r4, #0]
 800e418:	f04f 0900 	mov.w	r9, #0
 800e41c:	e789      	b.n	800e332 <_scanf_float+0x192>
 800e41e:	f04f 0a03 	mov.w	sl, #3
 800e422:	e786      	b.n	800e332 <_scanf_float+0x192>
 800e424:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e428:	4639      	mov	r1, r7
 800e42a:	4640      	mov	r0, r8
 800e42c:	4798      	blx	r3
 800e42e:	2800      	cmp	r0, #0
 800e430:	f43f aedb 	beq.w	800e1ea <_scanf_float+0x4a>
 800e434:	e6e6      	b.n	800e204 <_scanf_float+0x64>
 800e436:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e43a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e43e:	463a      	mov	r2, r7
 800e440:	4640      	mov	r0, r8
 800e442:	4798      	blx	r3
 800e444:	6923      	ldr	r3, [r4, #16]
 800e446:	3b01      	subs	r3, #1
 800e448:	6123      	str	r3, [r4, #16]
 800e44a:	e6e8      	b.n	800e21e <_scanf_float+0x7e>
 800e44c:	1e6b      	subs	r3, r5, #1
 800e44e:	2b06      	cmp	r3, #6
 800e450:	d824      	bhi.n	800e49c <_scanf_float+0x2fc>
 800e452:	2d02      	cmp	r5, #2
 800e454:	d836      	bhi.n	800e4c4 <_scanf_float+0x324>
 800e456:	9b01      	ldr	r3, [sp, #4]
 800e458:	429e      	cmp	r6, r3
 800e45a:	f67f aee4 	bls.w	800e226 <_scanf_float+0x86>
 800e45e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e462:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e466:	463a      	mov	r2, r7
 800e468:	4640      	mov	r0, r8
 800e46a:	4798      	blx	r3
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	3b01      	subs	r3, #1
 800e470:	6123      	str	r3, [r4, #16]
 800e472:	e7f0      	b.n	800e456 <_scanf_float+0x2b6>
 800e474:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e478:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e47c:	463a      	mov	r2, r7
 800e47e:	4640      	mov	r0, r8
 800e480:	4798      	blx	r3
 800e482:	6923      	ldr	r3, [r4, #16]
 800e484:	3b01      	subs	r3, #1
 800e486:	6123      	str	r3, [r4, #16]
 800e488:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e48c:	fa5f fa8a 	uxtb.w	sl, sl
 800e490:	f1ba 0f02 	cmp.w	sl, #2
 800e494:	d1ee      	bne.n	800e474 <_scanf_float+0x2d4>
 800e496:	3d03      	subs	r5, #3
 800e498:	b2ed      	uxtb	r5, r5
 800e49a:	1b76      	subs	r6, r6, r5
 800e49c:	6823      	ldr	r3, [r4, #0]
 800e49e:	05da      	lsls	r2, r3, #23
 800e4a0:	d530      	bpl.n	800e504 <_scanf_float+0x364>
 800e4a2:	055b      	lsls	r3, r3, #21
 800e4a4:	d511      	bpl.n	800e4ca <_scanf_float+0x32a>
 800e4a6:	9b01      	ldr	r3, [sp, #4]
 800e4a8:	429e      	cmp	r6, r3
 800e4aa:	f67f aebc 	bls.w	800e226 <_scanf_float+0x86>
 800e4ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4b6:	463a      	mov	r2, r7
 800e4b8:	4640      	mov	r0, r8
 800e4ba:	4798      	blx	r3
 800e4bc:	6923      	ldr	r3, [r4, #16]
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	6123      	str	r3, [r4, #16]
 800e4c2:	e7f0      	b.n	800e4a6 <_scanf_float+0x306>
 800e4c4:	46aa      	mov	sl, r5
 800e4c6:	46b3      	mov	fp, r6
 800e4c8:	e7de      	b.n	800e488 <_scanf_float+0x2e8>
 800e4ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e4ce:	6923      	ldr	r3, [r4, #16]
 800e4d0:	2965      	cmp	r1, #101	@ 0x65
 800e4d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e4d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800e4da:	6123      	str	r3, [r4, #16]
 800e4dc:	d00c      	beq.n	800e4f8 <_scanf_float+0x358>
 800e4de:	2945      	cmp	r1, #69	@ 0x45
 800e4e0:	d00a      	beq.n	800e4f8 <_scanf_float+0x358>
 800e4e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4e6:	463a      	mov	r2, r7
 800e4e8:	4640      	mov	r0, r8
 800e4ea:	4798      	blx	r3
 800e4ec:	6923      	ldr	r3, [r4, #16]
 800e4ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	1eb5      	subs	r5, r6, #2
 800e4f6:	6123      	str	r3, [r4, #16]
 800e4f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4fc:	463a      	mov	r2, r7
 800e4fe:	4640      	mov	r0, r8
 800e500:	4798      	blx	r3
 800e502:	462e      	mov	r6, r5
 800e504:	6822      	ldr	r2, [r4, #0]
 800e506:	f012 0210 	ands.w	r2, r2, #16
 800e50a:	d001      	beq.n	800e510 <_scanf_float+0x370>
 800e50c:	2000      	movs	r0, #0
 800e50e:	e68b      	b.n	800e228 <_scanf_float+0x88>
 800e510:	7032      	strb	r2, [r6, #0]
 800e512:	6823      	ldr	r3, [r4, #0]
 800e514:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e51c:	d11c      	bne.n	800e558 <_scanf_float+0x3b8>
 800e51e:	9b02      	ldr	r3, [sp, #8]
 800e520:	454b      	cmp	r3, r9
 800e522:	eba3 0209 	sub.w	r2, r3, r9
 800e526:	d123      	bne.n	800e570 <_scanf_float+0x3d0>
 800e528:	9901      	ldr	r1, [sp, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	4640      	mov	r0, r8
 800e52e:	f002 fc07 	bl	8010d40 <_strtod_r>
 800e532:	9b03      	ldr	r3, [sp, #12]
 800e534:	6821      	ldr	r1, [r4, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f011 0f02 	tst.w	r1, #2
 800e53c:	ec57 6b10 	vmov	r6, r7, d0
 800e540:	f103 0204 	add.w	r2, r3, #4
 800e544:	d01f      	beq.n	800e586 <_scanf_float+0x3e6>
 800e546:	9903      	ldr	r1, [sp, #12]
 800e548:	600a      	str	r2, [r1, #0]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	e9c3 6700 	strd	r6, r7, [r3]
 800e550:	68e3      	ldr	r3, [r4, #12]
 800e552:	3301      	adds	r3, #1
 800e554:	60e3      	str	r3, [r4, #12]
 800e556:	e7d9      	b.n	800e50c <_scanf_float+0x36c>
 800e558:	9b04      	ldr	r3, [sp, #16]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0e4      	beq.n	800e528 <_scanf_float+0x388>
 800e55e:	9905      	ldr	r1, [sp, #20]
 800e560:	230a      	movs	r3, #10
 800e562:	3101      	adds	r1, #1
 800e564:	4640      	mov	r0, r8
 800e566:	f7ff f9b7 	bl	800d8d8 <_strtol_r>
 800e56a:	9b04      	ldr	r3, [sp, #16]
 800e56c:	9e05      	ldr	r6, [sp, #20]
 800e56e:	1ac2      	subs	r2, r0, r3
 800e570:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e574:	429e      	cmp	r6, r3
 800e576:	bf28      	it	cs
 800e578:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e57c:	4910      	ldr	r1, [pc, #64]	@ (800e5c0 <_scanf_float+0x420>)
 800e57e:	4630      	mov	r0, r6
 800e580:	f000 f8e4 	bl	800e74c <siprintf>
 800e584:	e7d0      	b.n	800e528 <_scanf_float+0x388>
 800e586:	f011 0f04 	tst.w	r1, #4
 800e58a:	9903      	ldr	r1, [sp, #12]
 800e58c:	600a      	str	r2, [r1, #0]
 800e58e:	d1dc      	bne.n	800e54a <_scanf_float+0x3aa>
 800e590:	681d      	ldr	r5, [r3, #0]
 800e592:	4632      	mov	r2, r6
 800e594:	463b      	mov	r3, r7
 800e596:	4630      	mov	r0, r6
 800e598:	4639      	mov	r1, r7
 800e59a:	f7f2 fad7 	bl	8000b4c <__aeabi_dcmpun>
 800e59e:	b128      	cbz	r0, 800e5ac <_scanf_float+0x40c>
 800e5a0:	4808      	ldr	r0, [pc, #32]	@ (800e5c4 <_scanf_float+0x424>)
 800e5a2:	f000 f9c5 	bl	800e930 <nanf>
 800e5a6:	ed85 0a00 	vstr	s0, [r5]
 800e5aa:	e7d1      	b.n	800e550 <_scanf_float+0x3b0>
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	4639      	mov	r1, r7
 800e5b0:	f7f2 fb2a 	bl	8000c08 <__aeabi_d2f>
 800e5b4:	6028      	str	r0, [r5, #0]
 800e5b6:	e7cb      	b.n	800e550 <_scanf_float+0x3b0>
 800e5b8:	f04f 0900 	mov.w	r9, #0
 800e5bc:	e629      	b.n	800e212 <_scanf_float+0x72>
 800e5be:	bf00      	nop
 800e5c0:	08014b91 	.word	0x08014b91
 800e5c4:	08014e24 	.word	0x08014e24

0800e5c8 <std>:
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	b510      	push	{r4, lr}
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e5d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5d6:	6083      	str	r3, [r0, #8]
 800e5d8:	8181      	strh	r1, [r0, #12]
 800e5da:	6643      	str	r3, [r0, #100]	@ 0x64
 800e5dc:	81c2      	strh	r2, [r0, #14]
 800e5de:	6183      	str	r3, [r0, #24]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	2208      	movs	r2, #8
 800e5e4:	305c      	adds	r0, #92	@ 0x5c
 800e5e6:	f000 f914 	bl	800e812 <memset>
 800e5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e620 <std+0x58>)
 800e5ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800e5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e624 <std+0x5c>)
 800e5f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e628 <std+0x60>)
 800e5f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e62c <std+0x64>)
 800e5f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e630 <std+0x68>)
 800e5fc:	6224      	str	r4, [r4, #32]
 800e5fe:	429c      	cmp	r4, r3
 800e600:	d006      	beq.n	800e610 <std+0x48>
 800e602:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e606:	4294      	cmp	r4, r2
 800e608:	d002      	beq.n	800e610 <std+0x48>
 800e60a:	33d0      	adds	r3, #208	@ 0xd0
 800e60c:	429c      	cmp	r4, r3
 800e60e:	d105      	bne.n	800e61c <std+0x54>
 800e610:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e618:	f000 b978 	b.w	800e90c <__retarget_lock_init_recursive>
 800e61c:	bd10      	pop	{r4, pc}
 800e61e:	bf00      	nop
 800e620:	0800e78d 	.word	0x0800e78d
 800e624:	0800e7af 	.word	0x0800e7af
 800e628:	0800e7e7 	.word	0x0800e7e7
 800e62c:	0800e80b 	.word	0x0800e80b
 800e630:	200054b8 	.word	0x200054b8

0800e634 <stdio_exit_handler>:
 800e634:	4a02      	ldr	r2, [pc, #8]	@ (800e640 <stdio_exit_handler+0xc>)
 800e636:	4903      	ldr	r1, [pc, #12]	@ (800e644 <stdio_exit_handler+0x10>)
 800e638:	4803      	ldr	r0, [pc, #12]	@ (800e648 <stdio_exit_handler+0x14>)
 800e63a:	f000 b869 	b.w	800e710 <_fwalk_sglue>
 800e63e:	bf00      	nop
 800e640:	20000404 	.word	0x20000404
 800e644:	08011105 	.word	0x08011105
 800e648:	20000414 	.word	0x20000414

0800e64c <cleanup_stdio>:
 800e64c:	6841      	ldr	r1, [r0, #4]
 800e64e:	4b0c      	ldr	r3, [pc, #48]	@ (800e680 <cleanup_stdio+0x34>)
 800e650:	4299      	cmp	r1, r3
 800e652:	b510      	push	{r4, lr}
 800e654:	4604      	mov	r4, r0
 800e656:	d001      	beq.n	800e65c <cleanup_stdio+0x10>
 800e658:	f002 fd54 	bl	8011104 <_fflush_r>
 800e65c:	68a1      	ldr	r1, [r4, #8]
 800e65e:	4b09      	ldr	r3, [pc, #36]	@ (800e684 <cleanup_stdio+0x38>)
 800e660:	4299      	cmp	r1, r3
 800e662:	d002      	beq.n	800e66a <cleanup_stdio+0x1e>
 800e664:	4620      	mov	r0, r4
 800e666:	f002 fd4d 	bl	8011104 <_fflush_r>
 800e66a:	68e1      	ldr	r1, [r4, #12]
 800e66c:	4b06      	ldr	r3, [pc, #24]	@ (800e688 <cleanup_stdio+0x3c>)
 800e66e:	4299      	cmp	r1, r3
 800e670:	d004      	beq.n	800e67c <cleanup_stdio+0x30>
 800e672:	4620      	mov	r0, r4
 800e674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e678:	f002 bd44 	b.w	8011104 <_fflush_r>
 800e67c:	bd10      	pop	{r4, pc}
 800e67e:	bf00      	nop
 800e680:	200054b8 	.word	0x200054b8
 800e684:	20005520 	.word	0x20005520
 800e688:	20005588 	.word	0x20005588

0800e68c <global_stdio_init.part.0>:
 800e68c:	b510      	push	{r4, lr}
 800e68e:	4b0b      	ldr	r3, [pc, #44]	@ (800e6bc <global_stdio_init.part.0+0x30>)
 800e690:	4c0b      	ldr	r4, [pc, #44]	@ (800e6c0 <global_stdio_init.part.0+0x34>)
 800e692:	4a0c      	ldr	r2, [pc, #48]	@ (800e6c4 <global_stdio_init.part.0+0x38>)
 800e694:	601a      	str	r2, [r3, #0]
 800e696:	4620      	mov	r0, r4
 800e698:	2200      	movs	r2, #0
 800e69a:	2104      	movs	r1, #4
 800e69c:	f7ff ff94 	bl	800e5c8 <std>
 800e6a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	2109      	movs	r1, #9
 800e6a8:	f7ff ff8e 	bl	800e5c8 <std>
 800e6ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6b6:	2112      	movs	r1, #18
 800e6b8:	f7ff bf86 	b.w	800e5c8 <std>
 800e6bc:	200055f0 	.word	0x200055f0
 800e6c0:	200054b8 	.word	0x200054b8
 800e6c4:	0800e635 	.word	0x0800e635

0800e6c8 <__sfp_lock_acquire>:
 800e6c8:	4801      	ldr	r0, [pc, #4]	@ (800e6d0 <__sfp_lock_acquire+0x8>)
 800e6ca:	f000 b920 	b.w	800e90e <__retarget_lock_acquire_recursive>
 800e6ce:	bf00      	nop
 800e6d0:	200055f9 	.word	0x200055f9

0800e6d4 <__sfp_lock_release>:
 800e6d4:	4801      	ldr	r0, [pc, #4]	@ (800e6dc <__sfp_lock_release+0x8>)
 800e6d6:	f000 b91b 	b.w	800e910 <__retarget_lock_release_recursive>
 800e6da:	bf00      	nop
 800e6dc:	200055f9 	.word	0x200055f9

0800e6e0 <__sinit>:
 800e6e0:	b510      	push	{r4, lr}
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	f7ff fff0 	bl	800e6c8 <__sfp_lock_acquire>
 800e6e8:	6a23      	ldr	r3, [r4, #32]
 800e6ea:	b11b      	cbz	r3, 800e6f4 <__sinit+0x14>
 800e6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6f0:	f7ff bff0 	b.w	800e6d4 <__sfp_lock_release>
 800e6f4:	4b04      	ldr	r3, [pc, #16]	@ (800e708 <__sinit+0x28>)
 800e6f6:	6223      	str	r3, [r4, #32]
 800e6f8:	4b04      	ldr	r3, [pc, #16]	@ (800e70c <__sinit+0x2c>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1f5      	bne.n	800e6ec <__sinit+0xc>
 800e700:	f7ff ffc4 	bl	800e68c <global_stdio_init.part.0>
 800e704:	e7f2      	b.n	800e6ec <__sinit+0xc>
 800e706:	bf00      	nop
 800e708:	0800e64d 	.word	0x0800e64d
 800e70c:	200055f0 	.word	0x200055f0

0800e710 <_fwalk_sglue>:
 800e710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e714:	4607      	mov	r7, r0
 800e716:	4688      	mov	r8, r1
 800e718:	4614      	mov	r4, r2
 800e71a:	2600      	movs	r6, #0
 800e71c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e720:	f1b9 0901 	subs.w	r9, r9, #1
 800e724:	d505      	bpl.n	800e732 <_fwalk_sglue+0x22>
 800e726:	6824      	ldr	r4, [r4, #0]
 800e728:	2c00      	cmp	r4, #0
 800e72a:	d1f7      	bne.n	800e71c <_fwalk_sglue+0xc>
 800e72c:	4630      	mov	r0, r6
 800e72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e732:	89ab      	ldrh	r3, [r5, #12]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d907      	bls.n	800e748 <_fwalk_sglue+0x38>
 800e738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e73c:	3301      	adds	r3, #1
 800e73e:	d003      	beq.n	800e748 <_fwalk_sglue+0x38>
 800e740:	4629      	mov	r1, r5
 800e742:	4638      	mov	r0, r7
 800e744:	47c0      	blx	r8
 800e746:	4306      	orrs	r6, r0
 800e748:	3568      	adds	r5, #104	@ 0x68
 800e74a:	e7e9      	b.n	800e720 <_fwalk_sglue+0x10>

0800e74c <siprintf>:
 800e74c:	b40e      	push	{r1, r2, r3}
 800e74e:	b500      	push	{lr}
 800e750:	b09c      	sub	sp, #112	@ 0x70
 800e752:	ab1d      	add	r3, sp, #116	@ 0x74
 800e754:	9002      	str	r0, [sp, #8]
 800e756:	9006      	str	r0, [sp, #24]
 800e758:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e75c:	4809      	ldr	r0, [pc, #36]	@ (800e784 <siprintf+0x38>)
 800e75e:	9107      	str	r1, [sp, #28]
 800e760:	9104      	str	r1, [sp, #16]
 800e762:	4909      	ldr	r1, [pc, #36]	@ (800e788 <siprintf+0x3c>)
 800e764:	f853 2b04 	ldr.w	r2, [r3], #4
 800e768:	9105      	str	r1, [sp, #20]
 800e76a:	6800      	ldr	r0, [r0, #0]
 800e76c:	9301      	str	r3, [sp, #4]
 800e76e:	a902      	add	r1, sp, #8
 800e770:	f002 fb48 	bl	8010e04 <_svfiprintf_r>
 800e774:	9b02      	ldr	r3, [sp, #8]
 800e776:	2200      	movs	r2, #0
 800e778:	701a      	strb	r2, [r3, #0]
 800e77a:	b01c      	add	sp, #112	@ 0x70
 800e77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e780:	b003      	add	sp, #12
 800e782:	4770      	bx	lr
 800e784:	20000410 	.word	0x20000410
 800e788:	ffff0208 	.word	0xffff0208

0800e78c <__sread>:
 800e78c:	b510      	push	{r4, lr}
 800e78e:	460c      	mov	r4, r1
 800e790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e794:	f000 f86c 	bl	800e870 <_read_r>
 800e798:	2800      	cmp	r0, #0
 800e79a:	bfab      	itete	ge
 800e79c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e79e:	89a3      	ldrhlt	r3, [r4, #12]
 800e7a0:	181b      	addge	r3, r3, r0
 800e7a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e7a6:	bfac      	ite	ge
 800e7a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e7aa:	81a3      	strhlt	r3, [r4, #12]
 800e7ac:	bd10      	pop	{r4, pc}

0800e7ae <__swrite>:
 800e7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b2:	461f      	mov	r7, r3
 800e7b4:	898b      	ldrh	r3, [r1, #12]
 800e7b6:	05db      	lsls	r3, r3, #23
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	4616      	mov	r6, r2
 800e7be:	d505      	bpl.n	800e7cc <__swrite+0x1e>
 800e7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c4:	2302      	movs	r3, #2
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f000 f840 	bl	800e84c <_lseek_r>
 800e7cc:	89a3      	ldrh	r3, [r4, #12]
 800e7ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e7d6:	81a3      	strh	r3, [r4, #12]
 800e7d8:	4632      	mov	r2, r6
 800e7da:	463b      	mov	r3, r7
 800e7dc:	4628      	mov	r0, r5
 800e7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e2:	f000 b857 	b.w	800e894 <_write_r>

0800e7e6 <__sseek>:
 800e7e6:	b510      	push	{r4, lr}
 800e7e8:	460c      	mov	r4, r1
 800e7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ee:	f000 f82d 	bl	800e84c <_lseek_r>
 800e7f2:	1c43      	adds	r3, r0, #1
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	bf15      	itete	ne
 800e7f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e7fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e7fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e802:	81a3      	strheq	r3, [r4, #12]
 800e804:	bf18      	it	ne
 800e806:	81a3      	strhne	r3, [r4, #12]
 800e808:	bd10      	pop	{r4, pc}

0800e80a <__sclose>:
 800e80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e80e:	f000 b80d 	b.w	800e82c <_close_r>

0800e812 <memset>:
 800e812:	4402      	add	r2, r0
 800e814:	4603      	mov	r3, r0
 800e816:	4293      	cmp	r3, r2
 800e818:	d100      	bne.n	800e81c <memset+0xa>
 800e81a:	4770      	bx	lr
 800e81c:	f803 1b01 	strb.w	r1, [r3], #1
 800e820:	e7f9      	b.n	800e816 <memset+0x4>
	...

0800e824 <_localeconv_r>:
 800e824:	4800      	ldr	r0, [pc, #0]	@ (800e828 <_localeconv_r+0x4>)
 800e826:	4770      	bx	lr
 800e828:	20000550 	.word	0x20000550

0800e82c <_close_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4d06      	ldr	r5, [pc, #24]	@ (800e848 <_close_r+0x1c>)
 800e830:	2300      	movs	r3, #0
 800e832:	4604      	mov	r4, r0
 800e834:	4608      	mov	r0, r1
 800e836:	602b      	str	r3, [r5, #0]
 800e838:	f7fa ff98 	bl	800976c <_close>
 800e83c:	1c43      	adds	r3, r0, #1
 800e83e:	d102      	bne.n	800e846 <_close_r+0x1a>
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	b103      	cbz	r3, 800e846 <_close_r+0x1a>
 800e844:	6023      	str	r3, [r4, #0]
 800e846:	bd38      	pop	{r3, r4, r5, pc}
 800e848:	200055f4 	.word	0x200055f4

0800e84c <_lseek_r>:
 800e84c:	b538      	push	{r3, r4, r5, lr}
 800e84e:	4d07      	ldr	r5, [pc, #28]	@ (800e86c <_lseek_r+0x20>)
 800e850:	4604      	mov	r4, r0
 800e852:	4608      	mov	r0, r1
 800e854:	4611      	mov	r1, r2
 800e856:	2200      	movs	r2, #0
 800e858:	602a      	str	r2, [r5, #0]
 800e85a:	461a      	mov	r2, r3
 800e85c:	f7fa ffad 	bl	80097ba <_lseek>
 800e860:	1c43      	adds	r3, r0, #1
 800e862:	d102      	bne.n	800e86a <_lseek_r+0x1e>
 800e864:	682b      	ldr	r3, [r5, #0]
 800e866:	b103      	cbz	r3, 800e86a <_lseek_r+0x1e>
 800e868:	6023      	str	r3, [r4, #0]
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	200055f4 	.word	0x200055f4

0800e870 <_read_r>:
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4d07      	ldr	r5, [pc, #28]	@ (800e890 <_read_r+0x20>)
 800e874:	4604      	mov	r4, r0
 800e876:	4608      	mov	r0, r1
 800e878:	4611      	mov	r1, r2
 800e87a:	2200      	movs	r2, #0
 800e87c:	602a      	str	r2, [r5, #0]
 800e87e:	461a      	mov	r2, r3
 800e880:	f7fa ff3b 	bl	80096fa <_read>
 800e884:	1c43      	adds	r3, r0, #1
 800e886:	d102      	bne.n	800e88e <_read_r+0x1e>
 800e888:	682b      	ldr	r3, [r5, #0]
 800e88a:	b103      	cbz	r3, 800e88e <_read_r+0x1e>
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	bd38      	pop	{r3, r4, r5, pc}
 800e890:	200055f4 	.word	0x200055f4

0800e894 <_write_r>:
 800e894:	b538      	push	{r3, r4, r5, lr}
 800e896:	4d07      	ldr	r5, [pc, #28]	@ (800e8b4 <_write_r+0x20>)
 800e898:	4604      	mov	r4, r0
 800e89a:	4608      	mov	r0, r1
 800e89c:	4611      	mov	r1, r2
 800e89e:	2200      	movs	r2, #0
 800e8a0:	602a      	str	r2, [r5, #0]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	f7fa ff46 	bl	8009734 <_write>
 800e8a8:	1c43      	adds	r3, r0, #1
 800e8aa:	d102      	bne.n	800e8b2 <_write_r+0x1e>
 800e8ac:	682b      	ldr	r3, [r5, #0]
 800e8ae:	b103      	cbz	r3, 800e8b2 <_write_r+0x1e>
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	bd38      	pop	{r3, r4, r5, pc}
 800e8b4:	200055f4 	.word	0x200055f4

0800e8b8 <__errno>:
 800e8b8:	4b01      	ldr	r3, [pc, #4]	@ (800e8c0 <__errno+0x8>)
 800e8ba:	6818      	ldr	r0, [r3, #0]
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	20000410 	.word	0x20000410

0800e8c4 <__libc_init_array>:
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	4d0d      	ldr	r5, [pc, #52]	@ (800e8fc <__libc_init_array+0x38>)
 800e8c8:	4c0d      	ldr	r4, [pc, #52]	@ (800e900 <__libc_init_array+0x3c>)
 800e8ca:	1b64      	subs	r4, r4, r5
 800e8cc:	10a4      	asrs	r4, r4, #2
 800e8ce:	2600      	movs	r6, #0
 800e8d0:	42a6      	cmp	r6, r4
 800e8d2:	d109      	bne.n	800e8e8 <__libc_init_array+0x24>
 800e8d4:	4d0b      	ldr	r5, [pc, #44]	@ (800e904 <__libc_init_array+0x40>)
 800e8d6:	4c0c      	ldr	r4, [pc, #48]	@ (800e908 <__libc_init_array+0x44>)
 800e8d8:	f003 faf8 	bl	8011ecc <_init>
 800e8dc:	1b64      	subs	r4, r4, r5
 800e8de:	10a4      	asrs	r4, r4, #2
 800e8e0:	2600      	movs	r6, #0
 800e8e2:	42a6      	cmp	r6, r4
 800e8e4:	d105      	bne.n	800e8f2 <__libc_init_array+0x2e>
 800e8e6:	bd70      	pop	{r4, r5, r6, pc}
 800e8e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8ec:	4798      	blx	r3
 800e8ee:	3601      	adds	r6, #1
 800e8f0:	e7ee      	b.n	800e8d0 <__libc_init_array+0xc>
 800e8f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8f6:	4798      	blx	r3
 800e8f8:	3601      	adds	r6, #1
 800e8fa:	e7f2      	b.n	800e8e2 <__libc_init_array+0x1e>
 800e8fc:	08014e90 	.word	0x08014e90
 800e900:	08014e90 	.word	0x08014e90
 800e904:	08014e90 	.word	0x08014e90
 800e908:	08014e94 	.word	0x08014e94

0800e90c <__retarget_lock_init_recursive>:
 800e90c:	4770      	bx	lr

0800e90e <__retarget_lock_acquire_recursive>:
 800e90e:	4770      	bx	lr

0800e910 <__retarget_lock_release_recursive>:
 800e910:	4770      	bx	lr

0800e912 <memcpy>:
 800e912:	440a      	add	r2, r1
 800e914:	4291      	cmp	r1, r2
 800e916:	f100 33ff 	add.w	r3, r0, #4294967295
 800e91a:	d100      	bne.n	800e91e <memcpy+0xc>
 800e91c:	4770      	bx	lr
 800e91e:	b510      	push	{r4, lr}
 800e920:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e924:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e928:	4291      	cmp	r1, r2
 800e92a:	d1f9      	bne.n	800e920 <memcpy+0xe>
 800e92c:	bd10      	pop	{r4, pc}
	...

0800e930 <nanf>:
 800e930:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e938 <nanf+0x8>
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	7fc00000 	.word	0x7fc00000

0800e93c <quorem>:
 800e93c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e940:	6903      	ldr	r3, [r0, #16]
 800e942:	690c      	ldr	r4, [r1, #16]
 800e944:	42a3      	cmp	r3, r4
 800e946:	4607      	mov	r7, r0
 800e948:	db7e      	blt.n	800ea48 <quorem+0x10c>
 800e94a:	3c01      	subs	r4, #1
 800e94c:	f101 0814 	add.w	r8, r1, #20
 800e950:	00a3      	lsls	r3, r4, #2
 800e952:	f100 0514 	add.w	r5, r0, #20
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e962:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e966:	3301      	adds	r3, #1
 800e968:	429a      	cmp	r2, r3
 800e96a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e96e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e972:	d32e      	bcc.n	800e9d2 <quorem+0x96>
 800e974:	f04f 0a00 	mov.w	sl, #0
 800e978:	46c4      	mov	ip, r8
 800e97a:	46ae      	mov	lr, r5
 800e97c:	46d3      	mov	fp, sl
 800e97e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e982:	b298      	uxth	r0, r3
 800e984:	fb06 a000 	mla	r0, r6, r0, sl
 800e988:	0c02      	lsrs	r2, r0, #16
 800e98a:	0c1b      	lsrs	r3, r3, #16
 800e98c:	fb06 2303 	mla	r3, r6, r3, r2
 800e990:	f8de 2000 	ldr.w	r2, [lr]
 800e994:	b280      	uxth	r0, r0
 800e996:	b292      	uxth	r2, r2
 800e998:	1a12      	subs	r2, r2, r0
 800e99a:	445a      	add	r2, fp
 800e99c:	f8de 0000 	ldr.w	r0, [lr]
 800e9a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e9aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e9ae:	b292      	uxth	r2, r2
 800e9b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e9b4:	45e1      	cmp	r9, ip
 800e9b6:	f84e 2b04 	str.w	r2, [lr], #4
 800e9ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e9be:	d2de      	bcs.n	800e97e <quorem+0x42>
 800e9c0:	9b00      	ldr	r3, [sp, #0]
 800e9c2:	58eb      	ldr	r3, [r5, r3]
 800e9c4:	b92b      	cbnz	r3, 800e9d2 <quorem+0x96>
 800e9c6:	9b01      	ldr	r3, [sp, #4]
 800e9c8:	3b04      	subs	r3, #4
 800e9ca:	429d      	cmp	r5, r3
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	d32f      	bcc.n	800ea30 <quorem+0xf4>
 800e9d0:	613c      	str	r4, [r7, #16]
 800e9d2:	4638      	mov	r0, r7
 800e9d4:	f001 f9c4 	bl	800fd60 <__mcmp>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	db25      	blt.n	800ea28 <quorem+0xec>
 800e9dc:	4629      	mov	r1, r5
 800e9de:	2000      	movs	r0, #0
 800e9e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9e4:	f8d1 c000 	ldr.w	ip, [r1]
 800e9e8:	fa1f fe82 	uxth.w	lr, r2
 800e9ec:	fa1f f38c 	uxth.w	r3, ip
 800e9f0:	eba3 030e 	sub.w	r3, r3, lr
 800e9f4:	4403      	add	r3, r0
 800e9f6:	0c12      	lsrs	r2, r2, #16
 800e9f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e9fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea06:	45c1      	cmp	r9, r8
 800ea08:	f841 3b04 	str.w	r3, [r1], #4
 800ea0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ea10:	d2e6      	bcs.n	800e9e0 <quorem+0xa4>
 800ea12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea1a:	b922      	cbnz	r2, 800ea26 <quorem+0xea>
 800ea1c:	3b04      	subs	r3, #4
 800ea1e:	429d      	cmp	r5, r3
 800ea20:	461a      	mov	r2, r3
 800ea22:	d30b      	bcc.n	800ea3c <quorem+0x100>
 800ea24:	613c      	str	r4, [r7, #16]
 800ea26:	3601      	adds	r6, #1
 800ea28:	4630      	mov	r0, r6
 800ea2a:	b003      	add	sp, #12
 800ea2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea30:	6812      	ldr	r2, [r2, #0]
 800ea32:	3b04      	subs	r3, #4
 800ea34:	2a00      	cmp	r2, #0
 800ea36:	d1cb      	bne.n	800e9d0 <quorem+0x94>
 800ea38:	3c01      	subs	r4, #1
 800ea3a:	e7c6      	b.n	800e9ca <quorem+0x8e>
 800ea3c:	6812      	ldr	r2, [r2, #0]
 800ea3e:	3b04      	subs	r3, #4
 800ea40:	2a00      	cmp	r2, #0
 800ea42:	d1ef      	bne.n	800ea24 <quorem+0xe8>
 800ea44:	3c01      	subs	r4, #1
 800ea46:	e7ea      	b.n	800ea1e <quorem+0xe2>
 800ea48:	2000      	movs	r0, #0
 800ea4a:	e7ee      	b.n	800ea2a <quorem+0xee>
 800ea4c:	0000      	movs	r0, r0
	...

0800ea50 <_dtoa_r>:
 800ea50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea54:	69c7      	ldr	r7, [r0, #28]
 800ea56:	b099      	sub	sp, #100	@ 0x64
 800ea58:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ea5c:	ec55 4b10 	vmov	r4, r5, d0
 800ea60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ea62:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea64:	4683      	mov	fp, r0
 800ea66:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea6a:	b97f      	cbnz	r7, 800ea8c <_dtoa_r+0x3c>
 800ea6c:	2010      	movs	r0, #16
 800ea6e:	f000 fdfd 	bl	800f66c <malloc>
 800ea72:	4602      	mov	r2, r0
 800ea74:	f8cb 001c 	str.w	r0, [fp, #28]
 800ea78:	b920      	cbnz	r0, 800ea84 <_dtoa_r+0x34>
 800ea7a:	4ba7      	ldr	r3, [pc, #668]	@ (800ed18 <_dtoa_r+0x2c8>)
 800ea7c:	21ef      	movs	r1, #239	@ 0xef
 800ea7e:	48a7      	ldr	r0, [pc, #668]	@ (800ed1c <_dtoa_r+0x2cc>)
 800ea80:	f002 fbae 	bl	80111e0 <__assert_func>
 800ea84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ea88:	6007      	str	r7, [r0, #0]
 800ea8a:	60c7      	str	r7, [r0, #12]
 800ea8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ea90:	6819      	ldr	r1, [r3, #0]
 800ea92:	b159      	cbz	r1, 800eaac <_dtoa_r+0x5c>
 800ea94:	685a      	ldr	r2, [r3, #4]
 800ea96:	604a      	str	r2, [r1, #4]
 800ea98:	2301      	movs	r3, #1
 800ea9a:	4093      	lsls	r3, r2
 800ea9c:	608b      	str	r3, [r1, #8]
 800ea9e:	4658      	mov	r0, fp
 800eaa0:	f000 feda 	bl	800f858 <_Bfree>
 800eaa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	1e2b      	subs	r3, r5, #0
 800eaae:	bfb9      	ittee	lt
 800eab0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eab4:	9303      	strlt	r3, [sp, #12]
 800eab6:	2300      	movge	r3, #0
 800eab8:	6033      	strge	r3, [r6, #0]
 800eaba:	9f03      	ldr	r7, [sp, #12]
 800eabc:	4b98      	ldr	r3, [pc, #608]	@ (800ed20 <_dtoa_r+0x2d0>)
 800eabe:	bfbc      	itt	lt
 800eac0:	2201      	movlt	r2, #1
 800eac2:	6032      	strlt	r2, [r6, #0]
 800eac4:	43bb      	bics	r3, r7
 800eac6:	d112      	bne.n	800eaee <_dtoa_r+0x9e>
 800eac8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eaca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eace:	6013      	str	r3, [r2, #0]
 800ead0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ead4:	4323      	orrs	r3, r4
 800ead6:	f000 854d 	beq.w	800f574 <_dtoa_r+0xb24>
 800eada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eadc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ed34 <_dtoa_r+0x2e4>
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f000 854f 	beq.w	800f584 <_dtoa_r+0xb34>
 800eae6:	f10a 0303 	add.w	r3, sl, #3
 800eaea:	f000 bd49 	b.w	800f580 <_dtoa_r+0xb30>
 800eaee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	ec51 0b17 	vmov	r0, r1, d7
 800eaf8:	2300      	movs	r3, #0
 800eafa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800eafe:	f7f1 fff3 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb02:	4680      	mov	r8, r0
 800eb04:	b158      	cbz	r0, 800eb1e <_dtoa_r+0xce>
 800eb06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eb08:	2301      	movs	r3, #1
 800eb0a:	6013      	str	r3, [r2, #0]
 800eb0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eb0e:	b113      	cbz	r3, 800eb16 <_dtoa_r+0xc6>
 800eb10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eb12:	4b84      	ldr	r3, [pc, #528]	@ (800ed24 <_dtoa_r+0x2d4>)
 800eb14:	6013      	str	r3, [r2, #0]
 800eb16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ed38 <_dtoa_r+0x2e8>
 800eb1a:	f000 bd33 	b.w	800f584 <_dtoa_r+0xb34>
 800eb1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eb22:	aa16      	add	r2, sp, #88	@ 0x58
 800eb24:	a917      	add	r1, sp, #92	@ 0x5c
 800eb26:	4658      	mov	r0, fp
 800eb28:	f001 fa3a 	bl	800ffa0 <__d2b>
 800eb2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eb30:	4681      	mov	r9, r0
 800eb32:	2e00      	cmp	r6, #0
 800eb34:	d077      	beq.n	800ec26 <_dtoa_r+0x1d6>
 800eb36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800eb3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800eb48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800eb4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800eb50:	4619      	mov	r1, r3
 800eb52:	2200      	movs	r2, #0
 800eb54:	4b74      	ldr	r3, [pc, #464]	@ (800ed28 <_dtoa_r+0x2d8>)
 800eb56:	f7f1 fba7 	bl	80002a8 <__aeabi_dsub>
 800eb5a:	a369      	add	r3, pc, #420	@ (adr r3, 800ed00 <_dtoa_r+0x2b0>)
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	f7f1 fd5a 	bl	8000618 <__aeabi_dmul>
 800eb64:	a368      	add	r3, pc, #416	@ (adr r3, 800ed08 <_dtoa_r+0x2b8>)
 800eb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6a:	f7f1 fb9f 	bl	80002ac <__adddf3>
 800eb6e:	4604      	mov	r4, r0
 800eb70:	4630      	mov	r0, r6
 800eb72:	460d      	mov	r5, r1
 800eb74:	f7f1 fce6 	bl	8000544 <__aeabi_i2d>
 800eb78:	a365      	add	r3, pc, #404	@ (adr r3, 800ed10 <_dtoa_r+0x2c0>)
 800eb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7e:	f7f1 fd4b 	bl	8000618 <__aeabi_dmul>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	4620      	mov	r0, r4
 800eb88:	4629      	mov	r1, r5
 800eb8a:	f7f1 fb8f 	bl	80002ac <__adddf3>
 800eb8e:	4604      	mov	r4, r0
 800eb90:	460d      	mov	r5, r1
 800eb92:	f7f1 fff1 	bl	8000b78 <__aeabi_d2iz>
 800eb96:	2200      	movs	r2, #0
 800eb98:	4607      	mov	r7, r0
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	4629      	mov	r1, r5
 800eba0:	f7f1 ffac 	bl	8000afc <__aeabi_dcmplt>
 800eba4:	b140      	cbz	r0, 800ebb8 <_dtoa_r+0x168>
 800eba6:	4638      	mov	r0, r7
 800eba8:	f7f1 fccc 	bl	8000544 <__aeabi_i2d>
 800ebac:	4622      	mov	r2, r4
 800ebae:	462b      	mov	r3, r5
 800ebb0:	f7f1 ff9a 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebb4:	b900      	cbnz	r0, 800ebb8 <_dtoa_r+0x168>
 800ebb6:	3f01      	subs	r7, #1
 800ebb8:	2f16      	cmp	r7, #22
 800ebba:	d851      	bhi.n	800ec60 <_dtoa_r+0x210>
 800ebbc:	4b5b      	ldr	r3, [pc, #364]	@ (800ed2c <_dtoa_r+0x2dc>)
 800ebbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ebc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ebca:	f7f1 ff97 	bl	8000afc <__aeabi_dcmplt>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d048      	beq.n	800ec64 <_dtoa_r+0x214>
 800ebd2:	3f01      	subs	r7, #1
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	9312      	str	r3, [sp, #72]	@ 0x48
 800ebd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ebda:	1b9b      	subs	r3, r3, r6
 800ebdc:	1e5a      	subs	r2, r3, #1
 800ebde:	bf44      	itt	mi
 800ebe0:	f1c3 0801 	rsbmi	r8, r3, #1
 800ebe4:	2300      	movmi	r3, #0
 800ebe6:	9208      	str	r2, [sp, #32]
 800ebe8:	bf54      	ite	pl
 800ebea:	f04f 0800 	movpl.w	r8, #0
 800ebee:	9308      	strmi	r3, [sp, #32]
 800ebf0:	2f00      	cmp	r7, #0
 800ebf2:	db39      	blt.n	800ec68 <_dtoa_r+0x218>
 800ebf4:	9b08      	ldr	r3, [sp, #32]
 800ebf6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ebf8:	443b      	add	r3, r7
 800ebfa:	9308      	str	r3, [sp, #32]
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec02:	2b09      	cmp	r3, #9
 800ec04:	d864      	bhi.n	800ecd0 <_dtoa_r+0x280>
 800ec06:	2b05      	cmp	r3, #5
 800ec08:	bfc4      	itt	gt
 800ec0a:	3b04      	subgt	r3, #4
 800ec0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ec0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec10:	f1a3 0302 	sub.w	r3, r3, #2
 800ec14:	bfcc      	ite	gt
 800ec16:	2400      	movgt	r4, #0
 800ec18:	2401      	movle	r4, #1
 800ec1a:	2b03      	cmp	r3, #3
 800ec1c:	d863      	bhi.n	800ece6 <_dtoa_r+0x296>
 800ec1e:	e8df f003 	tbb	[pc, r3]
 800ec22:	372a      	.short	0x372a
 800ec24:	5535      	.short	0x5535
 800ec26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ec2a:	441e      	add	r6, r3
 800ec2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ec30:	2b20      	cmp	r3, #32
 800ec32:	bfc1      	itttt	gt
 800ec34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ec38:	409f      	lslgt	r7, r3
 800ec3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ec3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ec42:	bfd6      	itet	le
 800ec44:	f1c3 0320 	rsble	r3, r3, #32
 800ec48:	ea47 0003 	orrgt.w	r0, r7, r3
 800ec4c:	fa04 f003 	lslle.w	r0, r4, r3
 800ec50:	f7f1 fc68 	bl	8000524 <__aeabi_ui2d>
 800ec54:	2201      	movs	r2, #1
 800ec56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ec5a:	3e01      	subs	r6, #1
 800ec5c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ec5e:	e777      	b.n	800eb50 <_dtoa_r+0x100>
 800ec60:	2301      	movs	r3, #1
 800ec62:	e7b8      	b.n	800ebd6 <_dtoa_r+0x186>
 800ec64:	9012      	str	r0, [sp, #72]	@ 0x48
 800ec66:	e7b7      	b.n	800ebd8 <_dtoa_r+0x188>
 800ec68:	427b      	negs	r3, r7
 800ec6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	eba8 0807 	sub.w	r8, r8, r7
 800ec72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec74:	e7c4      	b.n	800ec00 <_dtoa_r+0x1b0>
 800ec76:	2300      	movs	r3, #0
 800ec78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	dc35      	bgt.n	800ecec <_dtoa_r+0x29c>
 800ec80:	2301      	movs	r3, #1
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	9307      	str	r3, [sp, #28]
 800ec86:	461a      	mov	r2, r3
 800ec88:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec8a:	e00b      	b.n	800eca4 <_dtoa_r+0x254>
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e7f3      	b.n	800ec78 <_dtoa_r+0x228>
 800ec90:	2300      	movs	r3, #0
 800ec92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec96:	18fb      	adds	r3, r7, r3
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	9307      	str	r3, [sp, #28]
 800eca0:	bfb8      	it	lt
 800eca2:	2301      	movlt	r3, #1
 800eca4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800eca8:	2100      	movs	r1, #0
 800ecaa:	2204      	movs	r2, #4
 800ecac:	f102 0514 	add.w	r5, r2, #20
 800ecb0:	429d      	cmp	r5, r3
 800ecb2:	d91f      	bls.n	800ecf4 <_dtoa_r+0x2a4>
 800ecb4:	6041      	str	r1, [r0, #4]
 800ecb6:	4658      	mov	r0, fp
 800ecb8:	f000 fd8e 	bl	800f7d8 <_Balloc>
 800ecbc:	4682      	mov	sl, r0
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d13c      	bne.n	800ed3c <_dtoa_r+0x2ec>
 800ecc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ed30 <_dtoa_r+0x2e0>)
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ecca:	e6d8      	b.n	800ea7e <_dtoa_r+0x2e>
 800eccc:	2301      	movs	r3, #1
 800ecce:	e7e0      	b.n	800ec92 <_dtoa_r+0x242>
 800ecd0:	2401      	movs	r4, #1
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ecd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	9307      	str	r3, [sp, #28]
 800ece0:	2200      	movs	r2, #0
 800ece2:	2312      	movs	r3, #18
 800ece4:	e7d0      	b.n	800ec88 <_dtoa_r+0x238>
 800ece6:	2301      	movs	r3, #1
 800ece8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecea:	e7f5      	b.n	800ecd8 <_dtoa_r+0x288>
 800ecec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	9307      	str	r3, [sp, #28]
 800ecf2:	e7d7      	b.n	800eca4 <_dtoa_r+0x254>
 800ecf4:	3101      	adds	r1, #1
 800ecf6:	0052      	lsls	r2, r2, #1
 800ecf8:	e7d8      	b.n	800ecac <_dtoa_r+0x25c>
 800ecfa:	bf00      	nop
 800ecfc:	f3af 8000 	nop.w
 800ed00:	636f4361 	.word	0x636f4361
 800ed04:	3fd287a7 	.word	0x3fd287a7
 800ed08:	8b60c8b3 	.word	0x8b60c8b3
 800ed0c:	3fc68a28 	.word	0x3fc68a28
 800ed10:	509f79fb 	.word	0x509f79fb
 800ed14:	3fd34413 	.word	0x3fd34413
 800ed18:	08014ba3 	.word	0x08014ba3
 800ed1c:	08014bba 	.word	0x08014bba
 800ed20:	7ff00000 	.word	0x7ff00000
 800ed24:	08014b6e 	.word	0x08014b6e
 800ed28:	3ff80000 	.word	0x3ff80000
 800ed2c:	08014cb0 	.word	0x08014cb0
 800ed30:	08014c12 	.word	0x08014c12
 800ed34:	08014b9f 	.word	0x08014b9f
 800ed38:	08014b6d 	.word	0x08014b6d
 800ed3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ed40:	6018      	str	r0, [r3, #0]
 800ed42:	9b07      	ldr	r3, [sp, #28]
 800ed44:	2b0e      	cmp	r3, #14
 800ed46:	f200 80a4 	bhi.w	800ee92 <_dtoa_r+0x442>
 800ed4a:	2c00      	cmp	r4, #0
 800ed4c:	f000 80a1 	beq.w	800ee92 <_dtoa_r+0x442>
 800ed50:	2f00      	cmp	r7, #0
 800ed52:	dd33      	ble.n	800edbc <_dtoa_r+0x36c>
 800ed54:	4bad      	ldr	r3, [pc, #692]	@ (800f00c <_dtoa_r+0x5bc>)
 800ed56:	f007 020f 	and.w	r2, r7, #15
 800ed5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed5e:	ed93 7b00 	vldr	d7, [r3]
 800ed62:	05f8      	lsls	r0, r7, #23
 800ed64:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ed68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ed6c:	d516      	bpl.n	800ed9c <_dtoa_r+0x34c>
 800ed6e:	4ba8      	ldr	r3, [pc, #672]	@ (800f010 <_dtoa_r+0x5c0>)
 800ed70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed78:	f7f1 fd78 	bl	800086c <__aeabi_ddiv>
 800ed7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed80:	f004 040f 	and.w	r4, r4, #15
 800ed84:	2603      	movs	r6, #3
 800ed86:	4da2      	ldr	r5, [pc, #648]	@ (800f010 <_dtoa_r+0x5c0>)
 800ed88:	b954      	cbnz	r4, 800eda0 <_dtoa_r+0x350>
 800ed8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed92:	f7f1 fd6b 	bl	800086c <__aeabi_ddiv>
 800ed96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed9a:	e028      	b.n	800edee <_dtoa_r+0x39e>
 800ed9c:	2602      	movs	r6, #2
 800ed9e:	e7f2      	b.n	800ed86 <_dtoa_r+0x336>
 800eda0:	07e1      	lsls	r1, r4, #31
 800eda2:	d508      	bpl.n	800edb6 <_dtoa_r+0x366>
 800eda4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eda8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800edac:	f7f1 fc34 	bl	8000618 <__aeabi_dmul>
 800edb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edb4:	3601      	adds	r6, #1
 800edb6:	1064      	asrs	r4, r4, #1
 800edb8:	3508      	adds	r5, #8
 800edba:	e7e5      	b.n	800ed88 <_dtoa_r+0x338>
 800edbc:	f000 80d2 	beq.w	800ef64 <_dtoa_r+0x514>
 800edc0:	427c      	negs	r4, r7
 800edc2:	4b92      	ldr	r3, [pc, #584]	@ (800f00c <_dtoa_r+0x5bc>)
 800edc4:	4d92      	ldr	r5, [pc, #584]	@ (800f010 <_dtoa_r+0x5c0>)
 800edc6:	f004 020f 	and.w	r2, r4, #15
 800edca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800edd6:	f7f1 fc1f 	bl	8000618 <__aeabi_dmul>
 800edda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edde:	1124      	asrs	r4, r4, #4
 800ede0:	2300      	movs	r3, #0
 800ede2:	2602      	movs	r6, #2
 800ede4:	2c00      	cmp	r4, #0
 800ede6:	f040 80b2 	bne.w	800ef4e <_dtoa_r+0x4fe>
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1d3      	bne.n	800ed96 <_dtoa_r+0x346>
 800edee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edf0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 80b7 	beq.w	800ef68 <_dtoa_r+0x518>
 800edfa:	4b86      	ldr	r3, [pc, #536]	@ (800f014 <_dtoa_r+0x5c4>)
 800edfc:	2200      	movs	r2, #0
 800edfe:	4620      	mov	r0, r4
 800ee00:	4629      	mov	r1, r5
 800ee02:	f7f1 fe7b 	bl	8000afc <__aeabi_dcmplt>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	f000 80ae 	beq.w	800ef68 <_dtoa_r+0x518>
 800ee0c:	9b07      	ldr	r3, [sp, #28]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 80aa 	beq.w	800ef68 <_dtoa_r+0x518>
 800ee14:	9b00      	ldr	r3, [sp, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	dd37      	ble.n	800ee8a <_dtoa_r+0x43a>
 800ee1a:	1e7b      	subs	r3, r7, #1
 800ee1c:	9304      	str	r3, [sp, #16]
 800ee1e:	4620      	mov	r0, r4
 800ee20:	4b7d      	ldr	r3, [pc, #500]	@ (800f018 <_dtoa_r+0x5c8>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	4629      	mov	r1, r5
 800ee26:	f7f1 fbf7 	bl	8000618 <__aeabi_dmul>
 800ee2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee2e:	9c00      	ldr	r4, [sp, #0]
 800ee30:	3601      	adds	r6, #1
 800ee32:	4630      	mov	r0, r6
 800ee34:	f7f1 fb86 	bl	8000544 <__aeabi_i2d>
 800ee38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee3c:	f7f1 fbec 	bl	8000618 <__aeabi_dmul>
 800ee40:	4b76      	ldr	r3, [pc, #472]	@ (800f01c <_dtoa_r+0x5cc>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	f7f1 fa32 	bl	80002ac <__adddf3>
 800ee48:	4605      	mov	r5, r0
 800ee4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ee4e:	2c00      	cmp	r4, #0
 800ee50:	f040 808d 	bne.w	800ef6e <_dtoa_r+0x51e>
 800ee54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee58:	4b71      	ldr	r3, [pc, #452]	@ (800f020 <_dtoa_r+0x5d0>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f7f1 fa24 	bl	80002a8 <__aeabi_dsub>
 800ee60:	4602      	mov	r2, r0
 800ee62:	460b      	mov	r3, r1
 800ee64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee68:	462a      	mov	r2, r5
 800ee6a:	4633      	mov	r3, r6
 800ee6c:	f7f1 fe64 	bl	8000b38 <__aeabi_dcmpgt>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f040 828b 	bne.w	800f38c <_dtoa_r+0x93c>
 800ee76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee7a:	462a      	mov	r2, r5
 800ee7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ee80:	f7f1 fe3c 	bl	8000afc <__aeabi_dcmplt>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	f040 8128 	bne.w	800f0da <_dtoa_r+0x68a>
 800ee8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ee8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ee92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f2c0 815a 	blt.w	800f14e <_dtoa_r+0x6fe>
 800ee9a:	2f0e      	cmp	r7, #14
 800ee9c:	f300 8157 	bgt.w	800f14e <_dtoa_r+0x6fe>
 800eea0:	4b5a      	ldr	r3, [pc, #360]	@ (800f00c <_dtoa_r+0x5bc>)
 800eea2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eea6:	ed93 7b00 	vldr	d7, [r3]
 800eeaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	ed8d 7b00 	vstr	d7, [sp]
 800eeb2:	da03      	bge.n	800eebc <_dtoa_r+0x46c>
 800eeb4:	9b07      	ldr	r3, [sp, #28]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f340 8101 	ble.w	800f0be <_dtoa_r+0x66e>
 800eebc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eec0:	4656      	mov	r6, sl
 800eec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eec6:	4620      	mov	r0, r4
 800eec8:	4629      	mov	r1, r5
 800eeca:	f7f1 fccf 	bl	800086c <__aeabi_ddiv>
 800eece:	f7f1 fe53 	bl	8000b78 <__aeabi_d2iz>
 800eed2:	4680      	mov	r8, r0
 800eed4:	f7f1 fb36 	bl	8000544 <__aeabi_i2d>
 800eed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eedc:	f7f1 fb9c 	bl	8000618 <__aeabi_dmul>
 800eee0:	4602      	mov	r2, r0
 800eee2:	460b      	mov	r3, r1
 800eee4:	4620      	mov	r0, r4
 800eee6:	4629      	mov	r1, r5
 800eee8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eeec:	f7f1 f9dc 	bl	80002a8 <__aeabi_dsub>
 800eef0:	f806 4b01 	strb.w	r4, [r6], #1
 800eef4:	9d07      	ldr	r5, [sp, #28]
 800eef6:	eba6 040a 	sub.w	r4, r6, sl
 800eefa:	42a5      	cmp	r5, r4
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	f040 8117 	bne.w	800f132 <_dtoa_r+0x6e2>
 800ef04:	f7f1 f9d2 	bl	80002ac <__adddf3>
 800ef08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	460d      	mov	r5, r1
 800ef10:	f7f1 fe12 	bl	8000b38 <__aeabi_dcmpgt>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	f040 80f9 	bne.w	800f10c <_dtoa_r+0x6bc>
 800ef1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef1e:	4620      	mov	r0, r4
 800ef20:	4629      	mov	r1, r5
 800ef22:	f7f1 fde1 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef26:	b118      	cbz	r0, 800ef30 <_dtoa_r+0x4e0>
 800ef28:	f018 0f01 	tst.w	r8, #1
 800ef2c:	f040 80ee 	bne.w	800f10c <_dtoa_r+0x6bc>
 800ef30:	4649      	mov	r1, r9
 800ef32:	4658      	mov	r0, fp
 800ef34:	f000 fc90 	bl	800f858 <_Bfree>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	7033      	strb	r3, [r6, #0]
 800ef3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ef3e:	3701      	adds	r7, #1
 800ef40:	601f      	str	r7, [r3, #0]
 800ef42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f000 831d 	beq.w	800f584 <_dtoa_r+0xb34>
 800ef4a:	601e      	str	r6, [r3, #0]
 800ef4c:	e31a      	b.n	800f584 <_dtoa_r+0xb34>
 800ef4e:	07e2      	lsls	r2, r4, #31
 800ef50:	d505      	bpl.n	800ef5e <_dtoa_r+0x50e>
 800ef52:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef56:	f7f1 fb5f 	bl	8000618 <__aeabi_dmul>
 800ef5a:	3601      	adds	r6, #1
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	1064      	asrs	r4, r4, #1
 800ef60:	3508      	adds	r5, #8
 800ef62:	e73f      	b.n	800ede4 <_dtoa_r+0x394>
 800ef64:	2602      	movs	r6, #2
 800ef66:	e742      	b.n	800edee <_dtoa_r+0x39e>
 800ef68:	9c07      	ldr	r4, [sp, #28]
 800ef6a:	9704      	str	r7, [sp, #16]
 800ef6c:	e761      	b.n	800ee32 <_dtoa_r+0x3e2>
 800ef6e:	4b27      	ldr	r3, [pc, #156]	@ (800f00c <_dtoa_r+0x5bc>)
 800ef70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ef72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef7a:	4454      	add	r4, sl
 800ef7c:	2900      	cmp	r1, #0
 800ef7e:	d053      	beq.n	800f028 <_dtoa_r+0x5d8>
 800ef80:	4928      	ldr	r1, [pc, #160]	@ (800f024 <_dtoa_r+0x5d4>)
 800ef82:	2000      	movs	r0, #0
 800ef84:	f7f1 fc72 	bl	800086c <__aeabi_ddiv>
 800ef88:	4633      	mov	r3, r6
 800ef8a:	462a      	mov	r2, r5
 800ef8c:	f7f1 f98c 	bl	80002a8 <__aeabi_dsub>
 800ef90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ef94:	4656      	mov	r6, sl
 800ef96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef9a:	f7f1 fded 	bl	8000b78 <__aeabi_d2iz>
 800ef9e:	4605      	mov	r5, r0
 800efa0:	f7f1 fad0 	bl	8000544 <__aeabi_i2d>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efac:	f7f1 f97c 	bl	80002a8 <__aeabi_dsub>
 800efb0:	3530      	adds	r5, #48	@ 0x30
 800efb2:	4602      	mov	r2, r0
 800efb4:	460b      	mov	r3, r1
 800efb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800efba:	f806 5b01 	strb.w	r5, [r6], #1
 800efbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800efc2:	f7f1 fd9b 	bl	8000afc <__aeabi_dcmplt>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d171      	bne.n	800f0ae <_dtoa_r+0x65e>
 800efca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efce:	4911      	ldr	r1, [pc, #68]	@ (800f014 <_dtoa_r+0x5c4>)
 800efd0:	2000      	movs	r0, #0
 800efd2:	f7f1 f969 	bl	80002a8 <__aeabi_dsub>
 800efd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800efda:	f7f1 fd8f 	bl	8000afc <__aeabi_dcmplt>
 800efde:	2800      	cmp	r0, #0
 800efe0:	f040 8095 	bne.w	800f10e <_dtoa_r+0x6be>
 800efe4:	42a6      	cmp	r6, r4
 800efe6:	f43f af50 	beq.w	800ee8a <_dtoa_r+0x43a>
 800efea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800efee:	4b0a      	ldr	r3, [pc, #40]	@ (800f018 <_dtoa_r+0x5c8>)
 800eff0:	2200      	movs	r2, #0
 800eff2:	f7f1 fb11 	bl	8000618 <__aeabi_dmul>
 800eff6:	4b08      	ldr	r3, [pc, #32]	@ (800f018 <_dtoa_r+0x5c8>)
 800eff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800effc:	2200      	movs	r2, #0
 800effe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f002:	f7f1 fb09 	bl	8000618 <__aeabi_dmul>
 800f006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f00a:	e7c4      	b.n	800ef96 <_dtoa_r+0x546>
 800f00c:	08014cb0 	.word	0x08014cb0
 800f010:	08014c88 	.word	0x08014c88
 800f014:	3ff00000 	.word	0x3ff00000
 800f018:	40240000 	.word	0x40240000
 800f01c:	401c0000 	.word	0x401c0000
 800f020:	40140000 	.word	0x40140000
 800f024:	3fe00000 	.word	0x3fe00000
 800f028:	4631      	mov	r1, r6
 800f02a:	4628      	mov	r0, r5
 800f02c:	f7f1 faf4 	bl	8000618 <__aeabi_dmul>
 800f030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f034:	9415      	str	r4, [sp, #84]	@ 0x54
 800f036:	4656      	mov	r6, sl
 800f038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f03c:	f7f1 fd9c 	bl	8000b78 <__aeabi_d2iz>
 800f040:	4605      	mov	r5, r0
 800f042:	f7f1 fa7f 	bl	8000544 <__aeabi_i2d>
 800f046:	4602      	mov	r2, r0
 800f048:	460b      	mov	r3, r1
 800f04a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f04e:	f7f1 f92b 	bl	80002a8 <__aeabi_dsub>
 800f052:	3530      	adds	r5, #48	@ 0x30
 800f054:	f806 5b01 	strb.w	r5, [r6], #1
 800f058:	4602      	mov	r2, r0
 800f05a:	460b      	mov	r3, r1
 800f05c:	42a6      	cmp	r6, r4
 800f05e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f062:	f04f 0200 	mov.w	r2, #0
 800f066:	d124      	bne.n	800f0b2 <_dtoa_r+0x662>
 800f068:	4bac      	ldr	r3, [pc, #688]	@ (800f31c <_dtoa_r+0x8cc>)
 800f06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f06e:	f7f1 f91d 	bl	80002ac <__adddf3>
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f07a:	f7f1 fd5d 	bl	8000b38 <__aeabi_dcmpgt>
 800f07e:	2800      	cmp	r0, #0
 800f080:	d145      	bne.n	800f10e <_dtoa_r+0x6be>
 800f082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f086:	49a5      	ldr	r1, [pc, #660]	@ (800f31c <_dtoa_r+0x8cc>)
 800f088:	2000      	movs	r0, #0
 800f08a:	f7f1 f90d 	bl	80002a8 <__aeabi_dsub>
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f096:	f7f1 fd31 	bl	8000afc <__aeabi_dcmplt>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	f43f aef5 	beq.w	800ee8a <_dtoa_r+0x43a>
 800f0a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f0a2:	1e73      	subs	r3, r6, #1
 800f0a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800f0a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0aa:	2b30      	cmp	r3, #48	@ 0x30
 800f0ac:	d0f8      	beq.n	800f0a0 <_dtoa_r+0x650>
 800f0ae:	9f04      	ldr	r7, [sp, #16]
 800f0b0:	e73e      	b.n	800ef30 <_dtoa_r+0x4e0>
 800f0b2:	4b9b      	ldr	r3, [pc, #620]	@ (800f320 <_dtoa_r+0x8d0>)
 800f0b4:	f7f1 fab0 	bl	8000618 <__aeabi_dmul>
 800f0b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0bc:	e7bc      	b.n	800f038 <_dtoa_r+0x5e8>
 800f0be:	d10c      	bne.n	800f0da <_dtoa_r+0x68a>
 800f0c0:	4b98      	ldr	r3, [pc, #608]	@ (800f324 <_dtoa_r+0x8d4>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0c8:	f7f1 faa6 	bl	8000618 <__aeabi_dmul>
 800f0cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0d0:	f7f1 fd28 	bl	8000b24 <__aeabi_dcmpge>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	f000 8157 	beq.w	800f388 <_dtoa_r+0x938>
 800f0da:	2400      	movs	r4, #0
 800f0dc:	4625      	mov	r5, r4
 800f0de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0e0:	43db      	mvns	r3, r3
 800f0e2:	9304      	str	r3, [sp, #16]
 800f0e4:	4656      	mov	r6, sl
 800f0e6:	2700      	movs	r7, #0
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	4658      	mov	r0, fp
 800f0ec:	f000 fbb4 	bl	800f858 <_Bfree>
 800f0f0:	2d00      	cmp	r5, #0
 800f0f2:	d0dc      	beq.n	800f0ae <_dtoa_r+0x65e>
 800f0f4:	b12f      	cbz	r7, 800f102 <_dtoa_r+0x6b2>
 800f0f6:	42af      	cmp	r7, r5
 800f0f8:	d003      	beq.n	800f102 <_dtoa_r+0x6b2>
 800f0fa:	4639      	mov	r1, r7
 800f0fc:	4658      	mov	r0, fp
 800f0fe:	f000 fbab 	bl	800f858 <_Bfree>
 800f102:	4629      	mov	r1, r5
 800f104:	4658      	mov	r0, fp
 800f106:	f000 fba7 	bl	800f858 <_Bfree>
 800f10a:	e7d0      	b.n	800f0ae <_dtoa_r+0x65e>
 800f10c:	9704      	str	r7, [sp, #16]
 800f10e:	4633      	mov	r3, r6
 800f110:	461e      	mov	r6, r3
 800f112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f116:	2a39      	cmp	r2, #57	@ 0x39
 800f118:	d107      	bne.n	800f12a <_dtoa_r+0x6da>
 800f11a:	459a      	cmp	sl, r3
 800f11c:	d1f8      	bne.n	800f110 <_dtoa_r+0x6c0>
 800f11e:	9a04      	ldr	r2, [sp, #16]
 800f120:	3201      	adds	r2, #1
 800f122:	9204      	str	r2, [sp, #16]
 800f124:	2230      	movs	r2, #48	@ 0x30
 800f126:	f88a 2000 	strb.w	r2, [sl]
 800f12a:	781a      	ldrb	r2, [r3, #0]
 800f12c:	3201      	adds	r2, #1
 800f12e:	701a      	strb	r2, [r3, #0]
 800f130:	e7bd      	b.n	800f0ae <_dtoa_r+0x65e>
 800f132:	4b7b      	ldr	r3, [pc, #492]	@ (800f320 <_dtoa_r+0x8d0>)
 800f134:	2200      	movs	r2, #0
 800f136:	f7f1 fa6f 	bl	8000618 <__aeabi_dmul>
 800f13a:	2200      	movs	r2, #0
 800f13c:	2300      	movs	r3, #0
 800f13e:	4604      	mov	r4, r0
 800f140:	460d      	mov	r5, r1
 800f142:	f7f1 fcd1 	bl	8000ae8 <__aeabi_dcmpeq>
 800f146:	2800      	cmp	r0, #0
 800f148:	f43f aebb 	beq.w	800eec2 <_dtoa_r+0x472>
 800f14c:	e6f0      	b.n	800ef30 <_dtoa_r+0x4e0>
 800f14e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f150:	2a00      	cmp	r2, #0
 800f152:	f000 80db 	beq.w	800f30c <_dtoa_r+0x8bc>
 800f156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f158:	2a01      	cmp	r2, #1
 800f15a:	f300 80bf 	bgt.w	800f2dc <_dtoa_r+0x88c>
 800f15e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f160:	2a00      	cmp	r2, #0
 800f162:	f000 80b7 	beq.w	800f2d4 <_dtoa_r+0x884>
 800f166:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f16a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f16c:	4646      	mov	r6, r8
 800f16e:	9a08      	ldr	r2, [sp, #32]
 800f170:	2101      	movs	r1, #1
 800f172:	441a      	add	r2, r3
 800f174:	4658      	mov	r0, fp
 800f176:	4498      	add	r8, r3
 800f178:	9208      	str	r2, [sp, #32]
 800f17a:	f000 fc6b 	bl	800fa54 <__i2b>
 800f17e:	4605      	mov	r5, r0
 800f180:	b15e      	cbz	r6, 800f19a <_dtoa_r+0x74a>
 800f182:	9b08      	ldr	r3, [sp, #32]
 800f184:	2b00      	cmp	r3, #0
 800f186:	dd08      	ble.n	800f19a <_dtoa_r+0x74a>
 800f188:	42b3      	cmp	r3, r6
 800f18a:	9a08      	ldr	r2, [sp, #32]
 800f18c:	bfa8      	it	ge
 800f18e:	4633      	movge	r3, r6
 800f190:	eba8 0803 	sub.w	r8, r8, r3
 800f194:	1af6      	subs	r6, r6, r3
 800f196:	1ad3      	subs	r3, r2, r3
 800f198:	9308      	str	r3, [sp, #32]
 800f19a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f19c:	b1f3      	cbz	r3, 800f1dc <_dtoa_r+0x78c>
 800f19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f000 80b7 	beq.w	800f314 <_dtoa_r+0x8c4>
 800f1a6:	b18c      	cbz	r4, 800f1cc <_dtoa_r+0x77c>
 800f1a8:	4629      	mov	r1, r5
 800f1aa:	4622      	mov	r2, r4
 800f1ac:	4658      	mov	r0, fp
 800f1ae:	f000 fd11 	bl	800fbd4 <__pow5mult>
 800f1b2:	464a      	mov	r2, r9
 800f1b4:	4601      	mov	r1, r0
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	4658      	mov	r0, fp
 800f1ba:	f000 fc61 	bl	800fa80 <__multiply>
 800f1be:	4649      	mov	r1, r9
 800f1c0:	9004      	str	r0, [sp, #16]
 800f1c2:	4658      	mov	r0, fp
 800f1c4:	f000 fb48 	bl	800f858 <_Bfree>
 800f1c8:	9b04      	ldr	r3, [sp, #16]
 800f1ca:	4699      	mov	r9, r3
 800f1cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1ce:	1b1a      	subs	r2, r3, r4
 800f1d0:	d004      	beq.n	800f1dc <_dtoa_r+0x78c>
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	4658      	mov	r0, fp
 800f1d6:	f000 fcfd 	bl	800fbd4 <__pow5mult>
 800f1da:	4681      	mov	r9, r0
 800f1dc:	2101      	movs	r1, #1
 800f1de:	4658      	mov	r0, fp
 800f1e0:	f000 fc38 	bl	800fa54 <__i2b>
 800f1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f000 81cf 	beq.w	800f58c <_dtoa_r+0xb3c>
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	4601      	mov	r1, r0
 800f1f2:	4658      	mov	r0, fp
 800f1f4:	f000 fcee 	bl	800fbd4 <__pow5mult>
 800f1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	f300 8095 	bgt.w	800f32c <_dtoa_r+0x8dc>
 800f202:	9b02      	ldr	r3, [sp, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	f040 8087 	bne.w	800f318 <_dtoa_r+0x8c8>
 800f20a:	9b03      	ldr	r3, [sp, #12]
 800f20c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f210:	2b00      	cmp	r3, #0
 800f212:	f040 8089 	bne.w	800f328 <_dtoa_r+0x8d8>
 800f216:	9b03      	ldr	r3, [sp, #12]
 800f218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f21c:	0d1b      	lsrs	r3, r3, #20
 800f21e:	051b      	lsls	r3, r3, #20
 800f220:	b12b      	cbz	r3, 800f22e <_dtoa_r+0x7de>
 800f222:	9b08      	ldr	r3, [sp, #32]
 800f224:	3301      	adds	r3, #1
 800f226:	9308      	str	r3, [sp, #32]
 800f228:	f108 0801 	add.w	r8, r8, #1
 800f22c:	2301      	movs	r3, #1
 800f22e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f232:	2b00      	cmp	r3, #0
 800f234:	f000 81b0 	beq.w	800f598 <_dtoa_r+0xb48>
 800f238:	6923      	ldr	r3, [r4, #16]
 800f23a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f23e:	6918      	ldr	r0, [r3, #16]
 800f240:	f000 fbbc 	bl	800f9bc <__hi0bits>
 800f244:	f1c0 0020 	rsb	r0, r0, #32
 800f248:	9b08      	ldr	r3, [sp, #32]
 800f24a:	4418      	add	r0, r3
 800f24c:	f010 001f 	ands.w	r0, r0, #31
 800f250:	d077      	beq.n	800f342 <_dtoa_r+0x8f2>
 800f252:	f1c0 0320 	rsb	r3, r0, #32
 800f256:	2b04      	cmp	r3, #4
 800f258:	dd6b      	ble.n	800f332 <_dtoa_r+0x8e2>
 800f25a:	9b08      	ldr	r3, [sp, #32]
 800f25c:	f1c0 001c 	rsb	r0, r0, #28
 800f260:	4403      	add	r3, r0
 800f262:	4480      	add	r8, r0
 800f264:	4406      	add	r6, r0
 800f266:	9308      	str	r3, [sp, #32]
 800f268:	f1b8 0f00 	cmp.w	r8, #0
 800f26c:	dd05      	ble.n	800f27a <_dtoa_r+0x82a>
 800f26e:	4649      	mov	r1, r9
 800f270:	4642      	mov	r2, r8
 800f272:	4658      	mov	r0, fp
 800f274:	f000 fd08 	bl	800fc88 <__lshift>
 800f278:	4681      	mov	r9, r0
 800f27a:	9b08      	ldr	r3, [sp, #32]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	dd05      	ble.n	800f28c <_dtoa_r+0x83c>
 800f280:	4621      	mov	r1, r4
 800f282:	461a      	mov	r2, r3
 800f284:	4658      	mov	r0, fp
 800f286:	f000 fcff 	bl	800fc88 <__lshift>
 800f28a:	4604      	mov	r4, r0
 800f28c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d059      	beq.n	800f346 <_dtoa_r+0x8f6>
 800f292:	4621      	mov	r1, r4
 800f294:	4648      	mov	r0, r9
 800f296:	f000 fd63 	bl	800fd60 <__mcmp>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	da53      	bge.n	800f346 <_dtoa_r+0x8f6>
 800f29e:	1e7b      	subs	r3, r7, #1
 800f2a0:	9304      	str	r3, [sp, #16]
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	220a      	movs	r2, #10
 800f2a8:	4658      	mov	r0, fp
 800f2aa:	f000 faf7 	bl	800f89c <__multadd>
 800f2ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2b0:	4681      	mov	r9, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f000 8172 	beq.w	800f59c <_dtoa_r+0xb4c>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	220a      	movs	r2, #10
 800f2be:	4658      	mov	r0, fp
 800f2c0:	f000 faec 	bl	800f89c <__multadd>
 800f2c4:	9b00      	ldr	r3, [sp, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	dc67      	bgt.n	800f39c <_dtoa_r+0x94c>
 800f2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2ce:	2b02      	cmp	r3, #2
 800f2d0:	dc41      	bgt.n	800f356 <_dtoa_r+0x906>
 800f2d2:	e063      	b.n	800f39c <_dtoa_r+0x94c>
 800f2d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f2d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f2da:	e746      	b.n	800f16a <_dtoa_r+0x71a>
 800f2dc:	9b07      	ldr	r3, [sp, #28]
 800f2de:	1e5c      	subs	r4, r3, #1
 800f2e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2e2:	42a3      	cmp	r3, r4
 800f2e4:	bfbf      	itttt	lt
 800f2e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f2e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f2ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f2ec:	1ae3      	sublt	r3, r4, r3
 800f2ee:	bfb4      	ite	lt
 800f2f0:	18d2      	addlt	r2, r2, r3
 800f2f2:	1b1c      	subge	r4, r3, r4
 800f2f4:	9b07      	ldr	r3, [sp, #28]
 800f2f6:	bfbc      	itt	lt
 800f2f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f2fa:	2400      	movlt	r4, #0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	bfb5      	itete	lt
 800f300:	eba8 0603 	sublt.w	r6, r8, r3
 800f304:	9b07      	ldrge	r3, [sp, #28]
 800f306:	2300      	movlt	r3, #0
 800f308:	4646      	movge	r6, r8
 800f30a:	e730      	b.n	800f16e <_dtoa_r+0x71e>
 800f30c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f30e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f310:	4646      	mov	r6, r8
 800f312:	e735      	b.n	800f180 <_dtoa_r+0x730>
 800f314:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f316:	e75c      	b.n	800f1d2 <_dtoa_r+0x782>
 800f318:	2300      	movs	r3, #0
 800f31a:	e788      	b.n	800f22e <_dtoa_r+0x7de>
 800f31c:	3fe00000 	.word	0x3fe00000
 800f320:	40240000 	.word	0x40240000
 800f324:	40140000 	.word	0x40140000
 800f328:	9b02      	ldr	r3, [sp, #8]
 800f32a:	e780      	b.n	800f22e <_dtoa_r+0x7de>
 800f32c:	2300      	movs	r3, #0
 800f32e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f330:	e782      	b.n	800f238 <_dtoa_r+0x7e8>
 800f332:	d099      	beq.n	800f268 <_dtoa_r+0x818>
 800f334:	9a08      	ldr	r2, [sp, #32]
 800f336:	331c      	adds	r3, #28
 800f338:	441a      	add	r2, r3
 800f33a:	4498      	add	r8, r3
 800f33c:	441e      	add	r6, r3
 800f33e:	9208      	str	r2, [sp, #32]
 800f340:	e792      	b.n	800f268 <_dtoa_r+0x818>
 800f342:	4603      	mov	r3, r0
 800f344:	e7f6      	b.n	800f334 <_dtoa_r+0x8e4>
 800f346:	9b07      	ldr	r3, [sp, #28]
 800f348:	9704      	str	r7, [sp, #16]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	dc20      	bgt.n	800f390 <_dtoa_r+0x940>
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f352:	2b02      	cmp	r3, #2
 800f354:	dd1e      	ble.n	800f394 <_dtoa_r+0x944>
 800f356:	9b00      	ldr	r3, [sp, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f47f aec0 	bne.w	800f0de <_dtoa_r+0x68e>
 800f35e:	4621      	mov	r1, r4
 800f360:	2205      	movs	r2, #5
 800f362:	4658      	mov	r0, fp
 800f364:	f000 fa9a 	bl	800f89c <__multadd>
 800f368:	4601      	mov	r1, r0
 800f36a:	4604      	mov	r4, r0
 800f36c:	4648      	mov	r0, r9
 800f36e:	f000 fcf7 	bl	800fd60 <__mcmp>
 800f372:	2800      	cmp	r0, #0
 800f374:	f77f aeb3 	ble.w	800f0de <_dtoa_r+0x68e>
 800f378:	4656      	mov	r6, sl
 800f37a:	2331      	movs	r3, #49	@ 0x31
 800f37c:	f806 3b01 	strb.w	r3, [r6], #1
 800f380:	9b04      	ldr	r3, [sp, #16]
 800f382:	3301      	adds	r3, #1
 800f384:	9304      	str	r3, [sp, #16]
 800f386:	e6ae      	b.n	800f0e6 <_dtoa_r+0x696>
 800f388:	9c07      	ldr	r4, [sp, #28]
 800f38a:	9704      	str	r7, [sp, #16]
 800f38c:	4625      	mov	r5, r4
 800f38e:	e7f3      	b.n	800f378 <_dtoa_r+0x928>
 800f390:	9b07      	ldr	r3, [sp, #28]
 800f392:	9300      	str	r3, [sp, #0]
 800f394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f396:	2b00      	cmp	r3, #0
 800f398:	f000 8104 	beq.w	800f5a4 <_dtoa_r+0xb54>
 800f39c:	2e00      	cmp	r6, #0
 800f39e:	dd05      	ble.n	800f3ac <_dtoa_r+0x95c>
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4632      	mov	r2, r6
 800f3a4:	4658      	mov	r0, fp
 800f3a6:	f000 fc6f 	bl	800fc88 <__lshift>
 800f3aa:	4605      	mov	r5, r0
 800f3ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d05a      	beq.n	800f468 <_dtoa_r+0xa18>
 800f3b2:	6869      	ldr	r1, [r5, #4]
 800f3b4:	4658      	mov	r0, fp
 800f3b6:	f000 fa0f 	bl	800f7d8 <_Balloc>
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	b928      	cbnz	r0, 800f3ca <_dtoa_r+0x97a>
 800f3be:	4b84      	ldr	r3, [pc, #528]	@ (800f5d0 <_dtoa_r+0xb80>)
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f3c6:	f7ff bb5a 	b.w	800ea7e <_dtoa_r+0x2e>
 800f3ca:	692a      	ldr	r2, [r5, #16]
 800f3cc:	3202      	adds	r2, #2
 800f3ce:	0092      	lsls	r2, r2, #2
 800f3d0:	f105 010c 	add.w	r1, r5, #12
 800f3d4:	300c      	adds	r0, #12
 800f3d6:	f7ff fa9c 	bl	800e912 <memcpy>
 800f3da:	2201      	movs	r2, #1
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4658      	mov	r0, fp
 800f3e0:	f000 fc52 	bl	800fc88 <__lshift>
 800f3e4:	f10a 0301 	add.w	r3, sl, #1
 800f3e8:	9307      	str	r3, [sp, #28]
 800f3ea:	9b00      	ldr	r3, [sp, #0]
 800f3ec:	4453      	add	r3, sl
 800f3ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3f0:	9b02      	ldr	r3, [sp, #8]
 800f3f2:	f003 0301 	and.w	r3, r3, #1
 800f3f6:	462f      	mov	r7, r5
 800f3f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	9b07      	ldr	r3, [sp, #28]
 800f3fe:	4621      	mov	r1, r4
 800f400:	3b01      	subs	r3, #1
 800f402:	4648      	mov	r0, r9
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	f7ff fa99 	bl	800e93c <quorem>
 800f40a:	4639      	mov	r1, r7
 800f40c:	9002      	str	r0, [sp, #8]
 800f40e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f412:	4648      	mov	r0, r9
 800f414:	f000 fca4 	bl	800fd60 <__mcmp>
 800f418:	462a      	mov	r2, r5
 800f41a:	9008      	str	r0, [sp, #32]
 800f41c:	4621      	mov	r1, r4
 800f41e:	4658      	mov	r0, fp
 800f420:	f000 fcba 	bl	800fd98 <__mdiff>
 800f424:	68c2      	ldr	r2, [r0, #12]
 800f426:	4606      	mov	r6, r0
 800f428:	bb02      	cbnz	r2, 800f46c <_dtoa_r+0xa1c>
 800f42a:	4601      	mov	r1, r0
 800f42c:	4648      	mov	r0, r9
 800f42e:	f000 fc97 	bl	800fd60 <__mcmp>
 800f432:	4602      	mov	r2, r0
 800f434:	4631      	mov	r1, r6
 800f436:	4658      	mov	r0, fp
 800f438:	920e      	str	r2, [sp, #56]	@ 0x38
 800f43a:	f000 fa0d 	bl	800f858 <_Bfree>
 800f43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f440:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f442:	9e07      	ldr	r6, [sp, #28]
 800f444:	ea43 0102 	orr.w	r1, r3, r2
 800f448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f44a:	4319      	orrs	r1, r3
 800f44c:	d110      	bne.n	800f470 <_dtoa_r+0xa20>
 800f44e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f452:	d029      	beq.n	800f4a8 <_dtoa_r+0xa58>
 800f454:	9b08      	ldr	r3, [sp, #32]
 800f456:	2b00      	cmp	r3, #0
 800f458:	dd02      	ble.n	800f460 <_dtoa_r+0xa10>
 800f45a:	9b02      	ldr	r3, [sp, #8]
 800f45c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f460:	9b00      	ldr	r3, [sp, #0]
 800f462:	f883 8000 	strb.w	r8, [r3]
 800f466:	e63f      	b.n	800f0e8 <_dtoa_r+0x698>
 800f468:	4628      	mov	r0, r5
 800f46a:	e7bb      	b.n	800f3e4 <_dtoa_r+0x994>
 800f46c:	2201      	movs	r2, #1
 800f46e:	e7e1      	b.n	800f434 <_dtoa_r+0x9e4>
 800f470:	9b08      	ldr	r3, [sp, #32]
 800f472:	2b00      	cmp	r3, #0
 800f474:	db04      	blt.n	800f480 <_dtoa_r+0xa30>
 800f476:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f478:	430b      	orrs	r3, r1
 800f47a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f47c:	430b      	orrs	r3, r1
 800f47e:	d120      	bne.n	800f4c2 <_dtoa_r+0xa72>
 800f480:	2a00      	cmp	r2, #0
 800f482:	dded      	ble.n	800f460 <_dtoa_r+0xa10>
 800f484:	4649      	mov	r1, r9
 800f486:	2201      	movs	r2, #1
 800f488:	4658      	mov	r0, fp
 800f48a:	f000 fbfd 	bl	800fc88 <__lshift>
 800f48e:	4621      	mov	r1, r4
 800f490:	4681      	mov	r9, r0
 800f492:	f000 fc65 	bl	800fd60 <__mcmp>
 800f496:	2800      	cmp	r0, #0
 800f498:	dc03      	bgt.n	800f4a2 <_dtoa_r+0xa52>
 800f49a:	d1e1      	bne.n	800f460 <_dtoa_r+0xa10>
 800f49c:	f018 0f01 	tst.w	r8, #1
 800f4a0:	d0de      	beq.n	800f460 <_dtoa_r+0xa10>
 800f4a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f4a6:	d1d8      	bne.n	800f45a <_dtoa_r+0xa0a>
 800f4a8:	9a00      	ldr	r2, [sp, #0]
 800f4aa:	2339      	movs	r3, #57	@ 0x39
 800f4ac:	7013      	strb	r3, [r2, #0]
 800f4ae:	4633      	mov	r3, r6
 800f4b0:	461e      	mov	r6, r3
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f4b8:	2a39      	cmp	r2, #57	@ 0x39
 800f4ba:	d052      	beq.n	800f562 <_dtoa_r+0xb12>
 800f4bc:	3201      	adds	r2, #1
 800f4be:	701a      	strb	r2, [r3, #0]
 800f4c0:	e612      	b.n	800f0e8 <_dtoa_r+0x698>
 800f4c2:	2a00      	cmp	r2, #0
 800f4c4:	dd07      	ble.n	800f4d6 <_dtoa_r+0xa86>
 800f4c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f4ca:	d0ed      	beq.n	800f4a8 <_dtoa_r+0xa58>
 800f4cc:	9a00      	ldr	r2, [sp, #0]
 800f4ce:	f108 0301 	add.w	r3, r8, #1
 800f4d2:	7013      	strb	r3, [r2, #0]
 800f4d4:	e608      	b.n	800f0e8 <_dtoa_r+0x698>
 800f4d6:	9b07      	ldr	r3, [sp, #28]
 800f4d8:	9a07      	ldr	r2, [sp, #28]
 800f4da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f4de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d028      	beq.n	800f536 <_dtoa_r+0xae6>
 800f4e4:	4649      	mov	r1, r9
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	220a      	movs	r2, #10
 800f4ea:	4658      	mov	r0, fp
 800f4ec:	f000 f9d6 	bl	800f89c <__multadd>
 800f4f0:	42af      	cmp	r7, r5
 800f4f2:	4681      	mov	r9, r0
 800f4f4:	f04f 0300 	mov.w	r3, #0
 800f4f8:	f04f 020a 	mov.w	r2, #10
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	4658      	mov	r0, fp
 800f500:	d107      	bne.n	800f512 <_dtoa_r+0xac2>
 800f502:	f000 f9cb 	bl	800f89c <__multadd>
 800f506:	4607      	mov	r7, r0
 800f508:	4605      	mov	r5, r0
 800f50a:	9b07      	ldr	r3, [sp, #28]
 800f50c:	3301      	adds	r3, #1
 800f50e:	9307      	str	r3, [sp, #28]
 800f510:	e774      	b.n	800f3fc <_dtoa_r+0x9ac>
 800f512:	f000 f9c3 	bl	800f89c <__multadd>
 800f516:	4629      	mov	r1, r5
 800f518:	4607      	mov	r7, r0
 800f51a:	2300      	movs	r3, #0
 800f51c:	220a      	movs	r2, #10
 800f51e:	4658      	mov	r0, fp
 800f520:	f000 f9bc 	bl	800f89c <__multadd>
 800f524:	4605      	mov	r5, r0
 800f526:	e7f0      	b.n	800f50a <_dtoa_r+0xaba>
 800f528:	9b00      	ldr	r3, [sp, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	bfcc      	ite	gt
 800f52e:	461e      	movgt	r6, r3
 800f530:	2601      	movle	r6, #1
 800f532:	4456      	add	r6, sl
 800f534:	2700      	movs	r7, #0
 800f536:	4649      	mov	r1, r9
 800f538:	2201      	movs	r2, #1
 800f53a:	4658      	mov	r0, fp
 800f53c:	f000 fba4 	bl	800fc88 <__lshift>
 800f540:	4621      	mov	r1, r4
 800f542:	4681      	mov	r9, r0
 800f544:	f000 fc0c 	bl	800fd60 <__mcmp>
 800f548:	2800      	cmp	r0, #0
 800f54a:	dcb0      	bgt.n	800f4ae <_dtoa_r+0xa5e>
 800f54c:	d102      	bne.n	800f554 <_dtoa_r+0xb04>
 800f54e:	f018 0f01 	tst.w	r8, #1
 800f552:	d1ac      	bne.n	800f4ae <_dtoa_r+0xa5e>
 800f554:	4633      	mov	r3, r6
 800f556:	461e      	mov	r6, r3
 800f558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f55c:	2a30      	cmp	r2, #48	@ 0x30
 800f55e:	d0fa      	beq.n	800f556 <_dtoa_r+0xb06>
 800f560:	e5c2      	b.n	800f0e8 <_dtoa_r+0x698>
 800f562:	459a      	cmp	sl, r3
 800f564:	d1a4      	bne.n	800f4b0 <_dtoa_r+0xa60>
 800f566:	9b04      	ldr	r3, [sp, #16]
 800f568:	3301      	adds	r3, #1
 800f56a:	9304      	str	r3, [sp, #16]
 800f56c:	2331      	movs	r3, #49	@ 0x31
 800f56e:	f88a 3000 	strb.w	r3, [sl]
 800f572:	e5b9      	b.n	800f0e8 <_dtoa_r+0x698>
 800f574:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f576:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f5d4 <_dtoa_r+0xb84>
 800f57a:	b11b      	cbz	r3, 800f584 <_dtoa_r+0xb34>
 800f57c:	f10a 0308 	add.w	r3, sl, #8
 800f580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f582:	6013      	str	r3, [r2, #0]
 800f584:	4650      	mov	r0, sl
 800f586:	b019      	add	sp, #100	@ 0x64
 800f588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f58e:	2b01      	cmp	r3, #1
 800f590:	f77f ae37 	ble.w	800f202 <_dtoa_r+0x7b2>
 800f594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f596:	930a      	str	r3, [sp, #40]	@ 0x28
 800f598:	2001      	movs	r0, #1
 800f59a:	e655      	b.n	800f248 <_dtoa_r+0x7f8>
 800f59c:	9b00      	ldr	r3, [sp, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f77f aed6 	ble.w	800f350 <_dtoa_r+0x900>
 800f5a4:	4656      	mov	r6, sl
 800f5a6:	4621      	mov	r1, r4
 800f5a8:	4648      	mov	r0, r9
 800f5aa:	f7ff f9c7 	bl	800e93c <quorem>
 800f5ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f5b2:	f806 8b01 	strb.w	r8, [r6], #1
 800f5b6:	9b00      	ldr	r3, [sp, #0]
 800f5b8:	eba6 020a 	sub.w	r2, r6, sl
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	ddb3      	ble.n	800f528 <_dtoa_r+0xad8>
 800f5c0:	4649      	mov	r1, r9
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	220a      	movs	r2, #10
 800f5c6:	4658      	mov	r0, fp
 800f5c8:	f000 f968 	bl	800f89c <__multadd>
 800f5cc:	4681      	mov	r9, r0
 800f5ce:	e7ea      	b.n	800f5a6 <_dtoa_r+0xb56>
 800f5d0:	08014c12 	.word	0x08014c12
 800f5d4:	08014b96 	.word	0x08014b96

0800f5d8 <_free_r>:
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	4605      	mov	r5, r0
 800f5dc:	2900      	cmp	r1, #0
 800f5de:	d041      	beq.n	800f664 <_free_r+0x8c>
 800f5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5e4:	1f0c      	subs	r4, r1, #4
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	bfb8      	it	lt
 800f5ea:	18e4      	addlt	r4, r4, r3
 800f5ec:	f000 f8e8 	bl	800f7c0 <__malloc_lock>
 800f5f0:	4a1d      	ldr	r2, [pc, #116]	@ (800f668 <_free_r+0x90>)
 800f5f2:	6813      	ldr	r3, [r2, #0]
 800f5f4:	b933      	cbnz	r3, 800f604 <_free_r+0x2c>
 800f5f6:	6063      	str	r3, [r4, #4]
 800f5f8:	6014      	str	r4, [r2, #0]
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f600:	f000 b8e4 	b.w	800f7cc <__malloc_unlock>
 800f604:	42a3      	cmp	r3, r4
 800f606:	d908      	bls.n	800f61a <_free_r+0x42>
 800f608:	6820      	ldr	r0, [r4, #0]
 800f60a:	1821      	adds	r1, r4, r0
 800f60c:	428b      	cmp	r3, r1
 800f60e:	bf01      	itttt	eq
 800f610:	6819      	ldreq	r1, [r3, #0]
 800f612:	685b      	ldreq	r3, [r3, #4]
 800f614:	1809      	addeq	r1, r1, r0
 800f616:	6021      	streq	r1, [r4, #0]
 800f618:	e7ed      	b.n	800f5f6 <_free_r+0x1e>
 800f61a:	461a      	mov	r2, r3
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	b10b      	cbz	r3, 800f624 <_free_r+0x4c>
 800f620:	42a3      	cmp	r3, r4
 800f622:	d9fa      	bls.n	800f61a <_free_r+0x42>
 800f624:	6811      	ldr	r1, [r2, #0]
 800f626:	1850      	adds	r0, r2, r1
 800f628:	42a0      	cmp	r0, r4
 800f62a:	d10b      	bne.n	800f644 <_free_r+0x6c>
 800f62c:	6820      	ldr	r0, [r4, #0]
 800f62e:	4401      	add	r1, r0
 800f630:	1850      	adds	r0, r2, r1
 800f632:	4283      	cmp	r3, r0
 800f634:	6011      	str	r1, [r2, #0]
 800f636:	d1e0      	bne.n	800f5fa <_free_r+0x22>
 800f638:	6818      	ldr	r0, [r3, #0]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	6053      	str	r3, [r2, #4]
 800f63e:	4408      	add	r0, r1
 800f640:	6010      	str	r0, [r2, #0]
 800f642:	e7da      	b.n	800f5fa <_free_r+0x22>
 800f644:	d902      	bls.n	800f64c <_free_r+0x74>
 800f646:	230c      	movs	r3, #12
 800f648:	602b      	str	r3, [r5, #0]
 800f64a:	e7d6      	b.n	800f5fa <_free_r+0x22>
 800f64c:	6820      	ldr	r0, [r4, #0]
 800f64e:	1821      	adds	r1, r4, r0
 800f650:	428b      	cmp	r3, r1
 800f652:	bf04      	itt	eq
 800f654:	6819      	ldreq	r1, [r3, #0]
 800f656:	685b      	ldreq	r3, [r3, #4]
 800f658:	6063      	str	r3, [r4, #4]
 800f65a:	bf04      	itt	eq
 800f65c:	1809      	addeq	r1, r1, r0
 800f65e:	6021      	streq	r1, [r4, #0]
 800f660:	6054      	str	r4, [r2, #4]
 800f662:	e7ca      	b.n	800f5fa <_free_r+0x22>
 800f664:	bd38      	pop	{r3, r4, r5, pc}
 800f666:	bf00      	nop
 800f668:	20005600 	.word	0x20005600

0800f66c <malloc>:
 800f66c:	4b02      	ldr	r3, [pc, #8]	@ (800f678 <malloc+0xc>)
 800f66e:	4601      	mov	r1, r0
 800f670:	6818      	ldr	r0, [r3, #0]
 800f672:	f000 b825 	b.w	800f6c0 <_malloc_r>
 800f676:	bf00      	nop
 800f678:	20000410 	.word	0x20000410

0800f67c <sbrk_aligned>:
 800f67c:	b570      	push	{r4, r5, r6, lr}
 800f67e:	4e0f      	ldr	r6, [pc, #60]	@ (800f6bc <sbrk_aligned+0x40>)
 800f680:	460c      	mov	r4, r1
 800f682:	6831      	ldr	r1, [r6, #0]
 800f684:	4605      	mov	r5, r0
 800f686:	b911      	cbnz	r1, 800f68e <sbrk_aligned+0x12>
 800f688:	f001 fd90 	bl	80111ac <_sbrk_r>
 800f68c:	6030      	str	r0, [r6, #0]
 800f68e:	4621      	mov	r1, r4
 800f690:	4628      	mov	r0, r5
 800f692:	f001 fd8b 	bl	80111ac <_sbrk_r>
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	d103      	bne.n	800f6a2 <sbrk_aligned+0x26>
 800f69a:	f04f 34ff 	mov.w	r4, #4294967295
 800f69e:	4620      	mov	r0, r4
 800f6a0:	bd70      	pop	{r4, r5, r6, pc}
 800f6a2:	1cc4      	adds	r4, r0, #3
 800f6a4:	f024 0403 	bic.w	r4, r4, #3
 800f6a8:	42a0      	cmp	r0, r4
 800f6aa:	d0f8      	beq.n	800f69e <sbrk_aligned+0x22>
 800f6ac:	1a21      	subs	r1, r4, r0
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f001 fd7c 	bl	80111ac <_sbrk_r>
 800f6b4:	3001      	adds	r0, #1
 800f6b6:	d1f2      	bne.n	800f69e <sbrk_aligned+0x22>
 800f6b8:	e7ef      	b.n	800f69a <sbrk_aligned+0x1e>
 800f6ba:	bf00      	nop
 800f6bc:	200055fc 	.word	0x200055fc

0800f6c0 <_malloc_r>:
 800f6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6c4:	1ccd      	adds	r5, r1, #3
 800f6c6:	f025 0503 	bic.w	r5, r5, #3
 800f6ca:	3508      	adds	r5, #8
 800f6cc:	2d0c      	cmp	r5, #12
 800f6ce:	bf38      	it	cc
 800f6d0:	250c      	movcc	r5, #12
 800f6d2:	2d00      	cmp	r5, #0
 800f6d4:	4606      	mov	r6, r0
 800f6d6:	db01      	blt.n	800f6dc <_malloc_r+0x1c>
 800f6d8:	42a9      	cmp	r1, r5
 800f6da:	d904      	bls.n	800f6e6 <_malloc_r+0x26>
 800f6dc:	230c      	movs	r3, #12
 800f6de:	6033      	str	r3, [r6, #0]
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f7bc <_malloc_r+0xfc>
 800f6ea:	f000 f869 	bl	800f7c0 <__malloc_lock>
 800f6ee:	f8d8 3000 	ldr.w	r3, [r8]
 800f6f2:	461c      	mov	r4, r3
 800f6f4:	bb44      	cbnz	r4, 800f748 <_malloc_r+0x88>
 800f6f6:	4629      	mov	r1, r5
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f7ff ffbf 	bl	800f67c <sbrk_aligned>
 800f6fe:	1c43      	adds	r3, r0, #1
 800f700:	4604      	mov	r4, r0
 800f702:	d158      	bne.n	800f7b6 <_malloc_r+0xf6>
 800f704:	f8d8 4000 	ldr.w	r4, [r8]
 800f708:	4627      	mov	r7, r4
 800f70a:	2f00      	cmp	r7, #0
 800f70c:	d143      	bne.n	800f796 <_malloc_r+0xd6>
 800f70e:	2c00      	cmp	r4, #0
 800f710:	d04b      	beq.n	800f7aa <_malloc_r+0xea>
 800f712:	6823      	ldr	r3, [r4, #0]
 800f714:	4639      	mov	r1, r7
 800f716:	4630      	mov	r0, r6
 800f718:	eb04 0903 	add.w	r9, r4, r3
 800f71c:	f001 fd46 	bl	80111ac <_sbrk_r>
 800f720:	4581      	cmp	r9, r0
 800f722:	d142      	bne.n	800f7aa <_malloc_r+0xea>
 800f724:	6821      	ldr	r1, [r4, #0]
 800f726:	1a6d      	subs	r5, r5, r1
 800f728:	4629      	mov	r1, r5
 800f72a:	4630      	mov	r0, r6
 800f72c:	f7ff ffa6 	bl	800f67c <sbrk_aligned>
 800f730:	3001      	adds	r0, #1
 800f732:	d03a      	beq.n	800f7aa <_malloc_r+0xea>
 800f734:	6823      	ldr	r3, [r4, #0]
 800f736:	442b      	add	r3, r5
 800f738:	6023      	str	r3, [r4, #0]
 800f73a:	f8d8 3000 	ldr.w	r3, [r8]
 800f73e:	685a      	ldr	r2, [r3, #4]
 800f740:	bb62      	cbnz	r2, 800f79c <_malloc_r+0xdc>
 800f742:	f8c8 7000 	str.w	r7, [r8]
 800f746:	e00f      	b.n	800f768 <_malloc_r+0xa8>
 800f748:	6822      	ldr	r2, [r4, #0]
 800f74a:	1b52      	subs	r2, r2, r5
 800f74c:	d420      	bmi.n	800f790 <_malloc_r+0xd0>
 800f74e:	2a0b      	cmp	r2, #11
 800f750:	d917      	bls.n	800f782 <_malloc_r+0xc2>
 800f752:	1961      	adds	r1, r4, r5
 800f754:	42a3      	cmp	r3, r4
 800f756:	6025      	str	r5, [r4, #0]
 800f758:	bf18      	it	ne
 800f75a:	6059      	strne	r1, [r3, #4]
 800f75c:	6863      	ldr	r3, [r4, #4]
 800f75e:	bf08      	it	eq
 800f760:	f8c8 1000 	streq.w	r1, [r8]
 800f764:	5162      	str	r2, [r4, r5]
 800f766:	604b      	str	r3, [r1, #4]
 800f768:	4630      	mov	r0, r6
 800f76a:	f000 f82f 	bl	800f7cc <__malloc_unlock>
 800f76e:	f104 000b 	add.w	r0, r4, #11
 800f772:	1d23      	adds	r3, r4, #4
 800f774:	f020 0007 	bic.w	r0, r0, #7
 800f778:	1ac2      	subs	r2, r0, r3
 800f77a:	bf1c      	itt	ne
 800f77c:	1a1b      	subne	r3, r3, r0
 800f77e:	50a3      	strne	r3, [r4, r2]
 800f780:	e7af      	b.n	800f6e2 <_malloc_r+0x22>
 800f782:	6862      	ldr	r2, [r4, #4]
 800f784:	42a3      	cmp	r3, r4
 800f786:	bf0c      	ite	eq
 800f788:	f8c8 2000 	streq.w	r2, [r8]
 800f78c:	605a      	strne	r2, [r3, #4]
 800f78e:	e7eb      	b.n	800f768 <_malloc_r+0xa8>
 800f790:	4623      	mov	r3, r4
 800f792:	6864      	ldr	r4, [r4, #4]
 800f794:	e7ae      	b.n	800f6f4 <_malloc_r+0x34>
 800f796:	463c      	mov	r4, r7
 800f798:	687f      	ldr	r7, [r7, #4]
 800f79a:	e7b6      	b.n	800f70a <_malloc_r+0x4a>
 800f79c:	461a      	mov	r2, r3
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	42a3      	cmp	r3, r4
 800f7a2:	d1fb      	bne.n	800f79c <_malloc_r+0xdc>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	6053      	str	r3, [r2, #4]
 800f7a8:	e7de      	b.n	800f768 <_malloc_r+0xa8>
 800f7aa:	230c      	movs	r3, #12
 800f7ac:	6033      	str	r3, [r6, #0]
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f000 f80c 	bl	800f7cc <__malloc_unlock>
 800f7b4:	e794      	b.n	800f6e0 <_malloc_r+0x20>
 800f7b6:	6005      	str	r5, [r0, #0]
 800f7b8:	e7d6      	b.n	800f768 <_malloc_r+0xa8>
 800f7ba:	bf00      	nop
 800f7bc:	20005600 	.word	0x20005600

0800f7c0 <__malloc_lock>:
 800f7c0:	4801      	ldr	r0, [pc, #4]	@ (800f7c8 <__malloc_lock+0x8>)
 800f7c2:	f7ff b8a4 	b.w	800e90e <__retarget_lock_acquire_recursive>
 800f7c6:	bf00      	nop
 800f7c8:	200055f8 	.word	0x200055f8

0800f7cc <__malloc_unlock>:
 800f7cc:	4801      	ldr	r0, [pc, #4]	@ (800f7d4 <__malloc_unlock+0x8>)
 800f7ce:	f7ff b89f 	b.w	800e910 <__retarget_lock_release_recursive>
 800f7d2:	bf00      	nop
 800f7d4:	200055f8 	.word	0x200055f8

0800f7d8 <_Balloc>:
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	69c6      	ldr	r6, [r0, #28]
 800f7dc:	4604      	mov	r4, r0
 800f7de:	460d      	mov	r5, r1
 800f7e0:	b976      	cbnz	r6, 800f800 <_Balloc+0x28>
 800f7e2:	2010      	movs	r0, #16
 800f7e4:	f7ff ff42 	bl	800f66c <malloc>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	61e0      	str	r0, [r4, #28]
 800f7ec:	b920      	cbnz	r0, 800f7f8 <_Balloc+0x20>
 800f7ee:	4b18      	ldr	r3, [pc, #96]	@ (800f850 <_Balloc+0x78>)
 800f7f0:	4818      	ldr	r0, [pc, #96]	@ (800f854 <_Balloc+0x7c>)
 800f7f2:	216b      	movs	r1, #107	@ 0x6b
 800f7f4:	f001 fcf4 	bl	80111e0 <__assert_func>
 800f7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7fc:	6006      	str	r6, [r0, #0]
 800f7fe:	60c6      	str	r6, [r0, #12]
 800f800:	69e6      	ldr	r6, [r4, #28]
 800f802:	68f3      	ldr	r3, [r6, #12]
 800f804:	b183      	cbz	r3, 800f828 <_Balloc+0x50>
 800f806:	69e3      	ldr	r3, [r4, #28]
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f80e:	b9b8      	cbnz	r0, 800f840 <_Balloc+0x68>
 800f810:	2101      	movs	r1, #1
 800f812:	fa01 f605 	lsl.w	r6, r1, r5
 800f816:	1d72      	adds	r2, r6, #5
 800f818:	0092      	lsls	r2, r2, #2
 800f81a:	4620      	mov	r0, r4
 800f81c:	f001 fcfe 	bl	801121c <_calloc_r>
 800f820:	b160      	cbz	r0, 800f83c <_Balloc+0x64>
 800f822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f826:	e00e      	b.n	800f846 <_Balloc+0x6e>
 800f828:	2221      	movs	r2, #33	@ 0x21
 800f82a:	2104      	movs	r1, #4
 800f82c:	4620      	mov	r0, r4
 800f82e:	f001 fcf5 	bl	801121c <_calloc_r>
 800f832:	69e3      	ldr	r3, [r4, #28]
 800f834:	60f0      	str	r0, [r6, #12]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d1e4      	bne.n	800f806 <_Balloc+0x2e>
 800f83c:	2000      	movs	r0, #0
 800f83e:	bd70      	pop	{r4, r5, r6, pc}
 800f840:	6802      	ldr	r2, [r0, #0]
 800f842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f846:	2300      	movs	r3, #0
 800f848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f84c:	e7f7      	b.n	800f83e <_Balloc+0x66>
 800f84e:	bf00      	nop
 800f850:	08014ba3 	.word	0x08014ba3
 800f854:	08014c23 	.word	0x08014c23

0800f858 <_Bfree>:
 800f858:	b570      	push	{r4, r5, r6, lr}
 800f85a:	69c6      	ldr	r6, [r0, #28]
 800f85c:	4605      	mov	r5, r0
 800f85e:	460c      	mov	r4, r1
 800f860:	b976      	cbnz	r6, 800f880 <_Bfree+0x28>
 800f862:	2010      	movs	r0, #16
 800f864:	f7ff ff02 	bl	800f66c <malloc>
 800f868:	4602      	mov	r2, r0
 800f86a:	61e8      	str	r0, [r5, #28]
 800f86c:	b920      	cbnz	r0, 800f878 <_Bfree+0x20>
 800f86e:	4b09      	ldr	r3, [pc, #36]	@ (800f894 <_Bfree+0x3c>)
 800f870:	4809      	ldr	r0, [pc, #36]	@ (800f898 <_Bfree+0x40>)
 800f872:	218f      	movs	r1, #143	@ 0x8f
 800f874:	f001 fcb4 	bl	80111e0 <__assert_func>
 800f878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f87c:	6006      	str	r6, [r0, #0]
 800f87e:	60c6      	str	r6, [r0, #12]
 800f880:	b13c      	cbz	r4, 800f892 <_Bfree+0x3a>
 800f882:	69eb      	ldr	r3, [r5, #28]
 800f884:	6862      	ldr	r2, [r4, #4]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f88c:	6021      	str	r1, [r4, #0]
 800f88e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f892:	bd70      	pop	{r4, r5, r6, pc}
 800f894:	08014ba3 	.word	0x08014ba3
 800f898:	08014c23 	.word	0x08014c23

0800f89c <__multadd>:
 800f89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a0:	690d      	ldr	r5, [r1, #16]
 800f8a2:	4607      	mov	r7, r0
 800f8a4:	460c      	mov	r4, r1
 800f8a6:	461e      	mov	r6, r3
 800f8a8:	f101 0c14 	add.w	ip, r1, #20
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	f8dc 3000 	ldr.w	r3, [ip]
 800f8b2:	b299      	uxth	r1, r3
 800f8b4:	fb02 6101 	mla	r1, r2, r1, r6
 800f8b8:	0c1e      	lsrs	r6, r3, #16
 800f8ba:	0c0b      	lsrs	r3, r1, #16
 800f8bc:	fb02 3306 	mla	r3, r2, r6, r3
 800f8c0:	b289      	uxth	r1, r1
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8c8:	4285      	cmp	r5, r0
 800f8ca:	f84c 1b04 	str.w	r1, [ip], #4
 800f8ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8d2:	dcec      	bgt.n	800f8ae <__multadd+0x12>
 800f8d4:	b30e      	cbz	r6, 800f91a <__multadd+0x7e>
 800f8d6:	68a3      	ldr	r3, [r4, #8]
 800f8d8:	42ab      	cmp	r3, r5
 800f8da:	dc19      	bgt.n	800f910 <__multadd+0x74>
 800f8dc:	6861      	ldr	r1, [r4, #4]
 800f8de:	4638      	mov	r0, r7
 800f8e0:	3101      	adds	r1, #1
 800f8e2:	f7ff ff79 	bl	800f7d8 <_Balloc>
 800f8e6:	4680      	mov	r8, r0
 800f8e8:	b928      	cbnz	r0, 800f8f6 <__multadd+0x5a>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	4b0c      	ldr	r3, [pc, #48]	@ (800f920 <__multadd+0x84>)
 800f8ee:	480d      	ldr	r0, [pc, #52]	@ (800f924 <__multadd+0x88>)
 800f8f0:	21ba      	movs	r1, #186	@ 0xba
 800f8f2:	f001 fc75 	bl	80111e0 <__assert_func>
 800f8f6:	6922      	ldr	r2, [r4, #16]
 800f8f8:	3202      	adds	r2, #2
 800f8fa:	f104 010c 	add.w	r1, r4, #12
 800f8fe:	0092      	lsls	r2, r2, #2
 800f900:	300c      	adds	r0, #12
 800f902:	f7ff f806 	bl	800e912 <memcpy>
 800f906:	4621      	mov	r1, r4
 800f908:	4638      	mov	r0, r7
 800f90a:	f7ff ffa5 	bl	800f858 <_Bfree>
 800f90e:	4644      	mov	r4, r8
 800f910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f914:	3501      	adds	r5, #1
 800f916:	615e      	str	r6, [r3, #20]
 800f918:	6125      	str	r5, [r4, #16]
 800f91a:	4620      	mov	r0, r4
 800f91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f920:	08014c12 	.word	0x08014c12
 800f924:	08014c23 	.word	0x08014c23

0800f928 <__s2b>:
 800f928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f92c:	460c      	mov	r4, r1
 800f92e:	4615      	mov	r5, r2
 800f930:	461f      	mov	r7, r3
 800f932:	2209      	movs	r2, #9
 800f934:	3308      	adds	r3, #8
 800f936:	4606      	mov	r6, r0
 800f938:	fb93 f3f2 	sdiv	r3, r3, r2
 800f93c:	2100      	movs	r1, #0
 800f93e:	2201      	movs	r2, #1
 800f940:	429a      	cmp	r2, r3
 800f942:	db09      	blt.n	800f958 <__s2b+0x30>
 800f944:	4630      	mov	r0, r6
 800f946:	f7ff ff47 	bl	800f7d8 <_Balloc>
 800f94a:	b940      	cbnz	r0, 800f95e <__s2b+0x36>
 800f94c:	4602      	mov	r2, r0
 800f94e:	4b19      	ldr	r3, [pc, #100]	@ (800f9b4 <__s2b+0x8c>)
 800f950:	4819      	ldr	r0, [pc, #100]	@ (800f9b8 <__s2b+0x90>)
 800f952:	21d3      	movs	r1, #211	@ 0xd3
 800f954:	f001 fc44 	bl	80111e0 <__assert_func>
 800f958:	0052      	lsls	r2, r2, #1
 800f95a:	3101      	adds	r1, #1
 800f95c:	e7f0      	b.n	800f940 <__s2b+0x18>
 800f95e:	9b08      	ldr	r3, [sp, #32]
 800f960:	6143      	str	r3, [r0, #20]
 800f962:	2d09      	cmp	r5, #9
 800f964:	f04f 0301 	mov.w	r3, #1
 800f968:	6103      	str	r3, [r0, #16]
 800f96a:	dd16      	ble.n	800f99a <__s2b+0x72>
 800f96c:	f104 0909 	add.w	r9, r4, #9
 800f970:	46c8      	mov	r8, r9
 800f972:	442c      	add	r4, r5
 800f974:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f978:	4601      	mov	r1, r0
 800f97a:	3b30      	subs	r3, #48	@ 0x30
 800f97c:	220a      	movs	r2, #10
 800f97e:	4630      	mov	r0, r6
 800f980:	f7ff ff8c 	bl	800f89c <__multadd>
 800f984:	45a0      	cmp	r8, r4
 800f986:	d1f5      	bne.n	800f974 <__s2b+0x4c>
 800f988:	f1a5 0408 	sub.w	r4, r5, #8
 800f98c:	444c      	add	r4, r9
 800f98e:	1b2d      	subs	r5, r5, r4
 800f990:	1963      	adds	r3, r4, r5
 800f992:	42bb      	cmp	r3, r7
 800f994:	db04      	blt.n	800f9a0 <__s2b+0x78>
 800f996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f99a:	340a      	adds	r4, #10
 800f99c:	2509      	movs	r5, #9
 800f99e:	e7f6      	b.n	800f98e <__s2b+0x66>
 800f9a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9a4:	4601      	mov	r1, r0
 800f9a6:	3b30      	subs	r3, #48	@ 0x30
 800f9a8:	220a      	movs	r2, #10
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	f7ff ff76 	bl	800f89c <__multadd>
 800f9b0:	e7ee      	b.n	800f990 <__s2b+0x68>
 800f9b2:	bf00      	nop
 800f9b4:	08014c12 	.word	0x08014c12
 800f9b8:	08014c23 	.word	0x08014c23

0800f9bc <__hi0bits>:
 800f9bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	bf36      	itet	cc
 800f9c4:	0403      	lslcc	r3, r0, #16
 800f9c6:	2000      	movcs	r0, #0
 800f9c8:	2010      	movcc	r0, #16
 800f9ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f9ce:	bf3c      	itt	cc
 800f9d0:	021b      	lslcc	r3, r3, #8
 800f9d2:	3008      	addcc	r0, #8
 800f9d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f9d8:	bf3c      	itt	cc
 800f9da:	011b      	lslcc	r3, r3, #4
 800f9dc:	3004      	addcc	r0, #4
 800f9de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9e2:	bf3c      	itt	cc
 800f9e4:	009b      	lslcc	r3, r3, #2
 800f9e6:	3002      	addcc	r0, #2
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	db05      	blt.n	800f9f8 <__hi0bits+0x3c>
 800f9ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f9f0:	f100 0001 	add.w	r0, r0, #1
 800f9f4:	bf08      	it	eq
 800f9f6:	2020      	moveq	r0, #32
 800f9f8:	4770      	bx	lr

0800f9fa <__lo0bits>:
 800f9fa:	6803      	ldr	r3, [r0, #0]
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	f013 0007 	ands.w	r0, r3, #7
 800fa02:	d00b      	beq.n	800fa1c <__lo0bits+0x22>
 800fa04:	07d9      	lsls	r1, r3, #31
 800fa06:	d421      	bmi.n	800fa4c <__lo0bits+0x52>
 800fa08:	0798      	lsls	r0, r3, #30
 800fa0a:	bf49      	itett	mi
 800fa0c:	085b      	lsrmi	r3, r3, #1
 800fa0e:	089b      	lsrpl	r3, r3, #2
 800fa10:	2001      	movmi	r0, #1
 800fa12:	6013      	strmi	r3, [r2, #0]
 800fa14:	bf5c      	itt	pl
 800fa16:	6013      	strpl	r3, [r2, #0]
 800fa18:	2002      	movpl	r0, #2
 800fa1a:	4770      	bx	lr
 800fa1c:	b299      	uxth	r1, r3
 800fa1e:	b909      	cbnz	r1, 800fa24 <__lo0bits+0x2a>
 800fa20:	0c1b      	lsrs	r3, r3, #16
 800fa22:	2010      	movs	r0, #16
 800fa24:	b2d9      	uxtb	r1, r3
 800fa26:	b909      	cbnz	r1, 800fa2c <__lo0bits+0x32>
 800fa28:	3008      	adds	r0, #8
 800fa2a:	0a1b      	lsrs	r3, r3, #8
 800fa2c:	0719      	lsls	r1, r3, #28
 800fa2e:	bf04      	itt	eq
 800fa30:	091b      	lsreq	r3, r3, #4
 800fa32:	3004      	addeq	r0, #4
 800fa34:	0799      	lsls	r1, r3, #30
 800fa36:	bf04      	itt	eq
 800fa38:	089b      	lsreq	r3, r3, #2
 800fa3a:	3002      	addeq	r0, #2
 800fa3c:	07d9      	lsls	r1, r3, #31
 800fa3e:	d403      	bmi.n	800fa48 <__lo0bits+0x4e>
 800fa40:	085b      	lsrs	r3, r3, #1
 800fa42:	f100 0001 	add.w	r0, r0, #1
 800fa46:	d003      	beq.n	800fa50 <__lo0bits+0x56>
 800fa48:	6013      	str	r3, [r2, #0]
 800fa4a:	4770      	bx	lr
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	4770      	bx	lr
 800fa50:	2020      	movs	r0, #32
 800fa52:	4770      	bx	lr

0800fa54 <__i2b>:
 800fa54:	b510      	push	{r4, lr}
 800fa56:	460c      	mov	r4, r1
 800fa58:	2101      	movs	r1, #1
 800fa5a:	f7ff febd 	bl	800f7d8 <_Balloc>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	b928      	cbnz	r0, 800fa6e <__i2b+0x1a>
 800fa62:	4b05      	ldr	r3, [pc, #20]	@ (800fa78 <__i2b+0x24>)
 800fa64:	4805      	ldr	r0, [pc, #20]	@ (800fa7c <__i2b+0x28>)
 800fa66:	f240 1145 	movw	r1, #325	@ 0x145
 800fa6a:	f001 fbb9 	bl	80111e0 <__assert_func>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	6144      	str	r4, [r0, #20]
 800fa72:	6103      	str	r3, [r0, #16]
 800fa74:	bd10      	pop	{r4, pc}
 800fa76:	bf00      	nop
 800fa78:	08014c12 	.word	0x08014c12
 800fa7c:	08014c23 	.word	0x08014c23

0800fa80 <__multiply>:
 800fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa84:	4614      	mov	r4, r2
 800fa86:	690a      	ldr	r2, [r1, #16]
 800fa88:	6923      	ldr	r3, [r4, #16]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	bfa8      	it	ge
 800fa8e:	4623      	movge	r3, r4
 800fa90:	460f      	mov	r7, r1
 800fa92:	bfa4      	itt	ge
 800fa94:	460c      	movge	r4, r1
 800fa96:	461f      	movge	r7, r3
 800fa98:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fa9c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800faa0:	68a3      	ldr	r3, [r4, #8]
 800faa2:	6861      	ldr	r1, [r4, #4]
 800faa4:	eb0a 0609 	add.w	r6, sl, r9
 800faa8:	42b3      	cmp	r3, r6
 800faaa:	b085      	sub	sp, #20
 800faac:	bfb8      	it	lt
 800faae:	3101      	addlt	r1, #1
 800fab0:	f7ff fe92 	bl	800f7d8 <_Balloc>
 800fab4:	b930      	cbnz	r0, 800fac4 <__multiply+0x44>
 800fab6:	4602      	mov	r2, r0
 800fab8:	4b44      	ldr	r3, [pc, #272]	@ (800fbcc <__multiply+0x14c>)
 800faba:	4845      	ldr	r0, [pc, #276]	@ (800fbd0 <__multiply+0x150>)
 800fabc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fac0:	f001 fb8e 	bl	80111e0 <__assert_func>
 800fac4:	f100 0514 	add.w	r5, r0, #20
 800fac8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800facc:	462b      	mov	r3, r5
 800face:	2200      	movs	r2, #0
 800fad0:	4543      	cmp	r3, r8
 800fad2:	d321      	bcc.n	800fb18 <__multiply+0x98>
 800fad4:	f107 0114 	add.w	r1, r7, #20
 800fad8:	f104 0214 	add.w	r2, r4, #20
 800fadc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fae0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fae4:	9302      	str	r3, [sp, #8]
 800fae6:	1b13      	subs	r3, r2, r4
 800fae8:	3b15      	subs	r3, #21
 800faea:	f023 0303 	bic.w	r3, r3, #3
 800faee:	3304      	adds	r3, #4
 800faf0:	f104 0715 	add.w	r7, r4, #21
 800faf4:	42ba      	cmp	r2, r7
 800faf6:	bf38      	it	cc
 800faf8:	2304      	movcc	r3, #4
 800fafa:	9301      	str	r3, [sp, #4]
 800fafc:	9b02      	ldr	r3, [sp, #8]
 800fafe:	9103      	str	r1, [sp, #12]
 800fb00:	428b      	cmp	r3, r1
 800fb02:	d80c      	bhi.n	800fb1e <__multiply+0x9e>
 800fb04:	2e00      	cmp	r6, #0
 800fb06:	dd03      	ble.n	800fb10 <__multiply+0x90>
 800fb08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d05b      	beq.n	800fbc8 <__multiply+0x148>
 800fb10:	6106      	str	r6, [r0, #16]
 800fb12:	b005      	add	sp, #20
 800fb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb18:	f843 2b04 	str.w	r2, [r3], #4
 800fb1c:	e7d8      	b.n	800fad0 <__multiply+0x50>
 800fb1e:	f8b1 a000 	ldrh.w	sl, [r1]
 800fb22:	f1ba 0f00 	cmp.w	sl, #0
 800fb26:	d024      	beq.n	800fb72 <__multiply+0xf2>
 800fb28:	f104 0e14 	add.w	lr, r4, #20
 800fb2c:	46a9      	mov	r9, r5
 800fb2e:	f04f 0c00 	mov.w	ip, #0
 800fb32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb36:	f8d9 3000 	ldr.w	r3, [r9]
 800fb3a:	fa1f fb87 	uxth.w	fp, r7
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	fb0a 330b 	mla	r3, sl, fp, r3
 800fb44:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fb48:	f8d9 7000 	ldr.w	r7, [r9]
 800fb4c:	4463      	add	r3, ip
 800fb4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fb52:	fb0a c70b 	mla	r7, sl, fp, ip
 800fb56:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fb60:	4572      	cmp	r2, lr
 800fb62:	f849 3b04 	str.w	r3, [r9], #4
 800fb66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fb6a:	d8e2      	bhi.n	800fb32 <__multiply+0xb2>
 800fb6c:	9b01      	ldr	r3, [sp, #4]
 800fb6e:	f845 c003 	str.w	ip, [r5, r3]
 800fb72:	9b03      	ldr	r3, [sp, #12]
 800fb74:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fb78:	3104      	adds	r1, #4
 800fb7a:	f1b9 0f00 	cmp.w	r9, #0
 800fb7e:	d021      	beq.n	800fbc4 <__multiply+0x144>
 800fb80:	682b      	ldr	r3, [r5, #0]
 800fb82:	f104 0c14 	add.w	ip, r4, #20
 800fb86:	46ae      	mov	lr, r5
 800fb88:	f04f 0a00 	mov.w	sl, #0
 800fb8c:	f8bc b000 	ldrh.w	fp, [ip]
 800fb90:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fb94:	fb09 770b 	mla	r7, r9, fp, r7
 800fb98:	4457      	add	r7, sl
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fba0:	f84e 3b04 	str.w	r3, [lr], #4
 800fba4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbac:	f8be 3000 	ldrh.w	r3, [lr]
 800fbb0:	fb09 330a 	mla	r3, r9, sl, r3
 800fbb4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fbb8:	4562      	cmp	r2, ip
 800fbba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbbe:	d8e5      	bhi.n	800fb8c <__multiply+0x10c>
 800fbc0:	9f01      	ldr	r7, [sp, #4]
 800fbc2:	51eb      	str	r3, [r5, r7]
 800fbc4:	3504      	adds	r5, #4
 800fbc6:	e799      	b.n	800fafc <__multiply+0x7c>
 800fbc8:	3e01      	subs	r6, #1
 800fbca:	e79b      	b.n	800fb04 <__multiply+0x84>
 800fbcc:	08014c12 	.word	0x08014c12
 800fbd0:	08014c23 	.word	0x08014c23

0800fbd4 <__pow5mult>:
 800fbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbd8:	4615      	mov	r5, r2
 800fbda:	f012 0203 	ands.w	r2, r2, #3
 800fbde:	4607      	mov	r7, r0
 800fbe0:	460e      	mov	r6, r1
 800fbe2:	d007      	beq.n	800fbf4 <__pow5mult+0x20>
 800fbe4:	4c25      	ldr	r4, [pc, #148]	@ (800fc7c <__pow5mult+0xa8>)
 800fbe6:	3a01      	subs	r2, #1
 800fbe8:	2300      	movs	r3, #0
 800fbea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbee:	f7ff fe55 	bl	800f89c <__multadd>
 800fbf2:	4606      	mov	r6, r0
 800fbf4:	10ad      	asrs	r5, r5, #2
 800fbf6:	d03d      	beq.n	800fc74 <__pow5mult+0xa0>
 800fbf8:	69fc      	ldr	r4, [r7, #28]
 800fbfa:	b97c      	cbnz	r4, 800fc1c <__pow5mult+0x48>
 800fbfc:	2010      	movs	r0, #16
 800fbfe:	f7ff fd35 	bl	800f66c <malloc>
 800fc02:	4602      	mov	r2, r0
 800fc04:	61f8      	str	r0, [r7, #28]
 800fc06:	b928      	cbnz	r0, 800fc14 <__pow5mult+0x40>
 800fc08:	4b1d      	ldr	r3, [pc, #116]	@ (800fc80 <__pow5mult+0xac>)
 800fc0a:	481e      	ldr	r0, [pc, #120]	@ (800fc84 <__pow5mult+0xb0>)
 800fc0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fc10:	f001 fae6 	bl	80111e0 <__assert_func>
 800fc14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc18:	6004      	str	r4, [r0, #0]
 800fc1a:	60c4      	str	r4, [r0, #12]
 800fc1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fc20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc24:	b94c      	cbnz	r4, 800fc3a <__pow5mult+0x66>
 800fc26:	f240 2171 	movw	r1, #625	@ 0x271
 800fc2a:	4638      	mov	r0, r7
 800fc2c:	f7ff ff12 	bl	800fa54 <__i2b>
 800fc30:	2300      	movs	r3, #0
 800fc32:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc36:	4604      	mov	r4, r0
 800fc38:	6003      	str	r3, [r0, #0]
 800fc3a:	f04f 0900 	mov.w	r9, #0
 800fc3e:	07eb      	lsls	r3, r5, #31
 800fc40:	d50a      	bpl.n	800fc58 <__pow5mult+0x84>
 800fc42:	4631      	mov	r1, r6
 800fc44:	4622      	mov	r2, r4
 800fc46:	4638      	mov	r0, r7
 800fc48:	f7ff ff1a 	bl	800fa80 <__multiply>
 800fc4c:	4631      	mov	r1, r6
 800fc4e:	4680      	mov	r8, r0
 800fc50:	4638      	mov	r0, r7
 800fc52:	f7ff fe01 	bl	800f858 <_Bfree>
 800fc56:	4646      	mov	r6, r8
 800fc58:	106d      	asrs	r5, r5, #1
 800fc5a:	d00b      	beq.n	800fc74 <__pow5mult+0xa0>
 800fc5c:	6820      	ldr	r0, [r4, #0]
 800fc5e:	b938      	cbnz	r0, 800fc70 <__pow5mult+0x9c>
 800fc60:	4622      	mov	r2, r4
 800fc62:	4621      	mov	r1, r4
 800fc64:	4638      	mov	r0, r7
 800fc66:	f7ff ff0b 	bl	800fa80 <__multiply>
 800fc6a:	6020      	str	r0, [r4, #0]
 800fc6c:	f8c0 9000 	str.w	r9, [r0]
 800fc70:	4604      	mov	r4, r0
 800fc72:	e7e4      	b.n	800fc3e <__pow5mult+0x6a>
 800fc74:	4630      	mov	r0, r6
 800fc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc7a:	bf00      	nop
 800fc7c:	08014c7c 	.word	0x08014c7c
 800fc80:	08014ba3 	.word	0x08014ba3
 800fc84:	08014c23 	.word	0x08014c23

0800fc88 <__lshift>:
 800fc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc8c:	460c      	mov	r4, r1
 800fc8e:	6849      	ldr	r1, [r1, #4]
 800fc90:	6923      	ldr	r3, [r4, #16]
 800fc92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc96:	68a3      	ldr	r3, [r4, #8]
 800fc98:	4607      	mov	r7, r0
 800fc9a:	4691      	mov	r9, r2
 800fc9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fca0:	f108 0601 	add.w	r6, r8, #1
 800fca4:	42b3      	cmp	r3, r6
 800fca6:	db0b      	blt.n	800fcc0 <__lshift+0x38>
 800fca8:	4638      	mov	r0, r7
 800fcaa:	f7ff fd95 	bl	800f7d8 <_Balloc>
 800fcae:	4605      	mov	r5, r0
 800fcb0:	b948      	cbnz	r0, 800fcc6 <__lshift+0x3e>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	4b28      	ldr	r3, [pc, #160]	@ (800fd58 <__lshift+0xd0>)
 800fcb6:	4829      	ldr	r0, [pc, #164]	@ (800fd5c <__lshift+0xd4>)
 800fcb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fcbc:	f001 fa90 	bl	80111e0 <__assert_func>
 800fcc0:	3101      	adds	r1, #1
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	e7ee      	b.n	800fca4 <__lshift+0x1c>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	f100 0114 	add.w	r1, r0, #20
 800fccc:	f100 0210 	add.w	r2, r0, #16
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	4553      	cmp	r3, sl
 800fcd4:	db33      	blt.n	800fd3e <__lshift+0xb6>
 800fcd6:	6920      	ldr	r0, [r4, #16]
 800fcd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fcdc:	f104 0314 	add.w	r3, r4, #20
 800fce0:	f019 091f 	ands.w	r9, r9, #31
 800fce4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fce8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fcec:	d02b      	beq.n	800fd46 <__lshift+0xbe>
 800fcee:	f1c9 0e20 	rsb	lr, r9, #32
 800fcf2:	468a      	mov	sl, r1
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	6818      	ldr	r0, [r3, #0]
 800fcf8:	fa00 f009 	lsl.w	r0, r0, r9
 800fcfc:	4310      	orrs	r0, r2
 800fcfe:	f84a 0b04 	str.w	r0, [sl], #4
 800fd02:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd06:	459c      	cmp	ip, r3
 800fd08:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd0c:	d8f3      	bhi.n	800fcf6 <__lshift+0x6e>
 800fd0e:	ebac 0304 	sub.w	r3, ip, r4
 800fd12:	3b15      	subs	r3, #21
 800fd14:	f023 0303 	bic.w	r3, r3, #3
 800fd18:	3304      	adds	r3, #4
 800fd1a:	f104 0015 	add.w	r0, r4, #21
 800fd1e:	4584      	cmp	ip, r0
 800fd20:	bf38      	it	cc
 800fd22:	2304      	movcc	r3, #4
 800fd24:	50ca      	str	r2, [r1, r3]
 800fd26:	b10a      	cbz	r2, 800fd2c <__lshift+0xa4>
 800fd28:	f108 0602 	add.w	r6, r8, #2
 800fd2c:	3e01      	subs	r6, #1
 800fd2e:	4638      	mov	r0, r7
 800fd30:	612e      	str	r6, [r5, #16]
 800fd32:	4621      	mov	r1, r4
 800fd34:	f7ff fd90 	bl	800f858 <_Bfree>
 800fd38:	4628      	mov	r0, r5
 800fd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd42:	3301      	adds	r3, #1
 800fd44:	e7c5      	b.n	800fcd2 <__lshift+0x4a>
 800fd46:	3904      	subs	r1, #4
 800fd48:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd50:	459c      	cmp	ip, r3
 800fd52:	d8f9      	bhi.n	800fd48 <__lshift+0xc0>
 800fd54:	e7ea      	b.n	800fd2c <__lshift+0xa4>
 800fd56:	bf00      	nop
 800fd58:	08014c12 	.word	0x08014c12
 800fd5c:	08014c23 	.word	0x08014c23

0800fd60 <__mcmp>:
 800fd60:	690a      	ldr	r2, [r1, #16]
 800fd62:	4603      	mov	r3, r0
 800fd64:	6900      	ldr	r0, [r0, #16]
 800fd66:	1a80      	subs	r0, r0, r2
 800fd68:	b530      	push	{r4, r5, lr}
 800fd6a:	d10e      	bne.n	800fd8a <__mcmp+0x2a>
 800fd6c:	3314      	adds	r3, #20
 800fd6e:	3114      	adds	r1, #20
 800fd70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fd74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fd78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fd7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fd80:	4295      	cmp	r5, r2
 800fd82:	d003      	beq.n	800fd8c <__mcmp+0x2c>
 800fd84:	d205      	bcs.n	800fd92 <__mcmp+0x32>
 800fd86:	f04f 30ff 	mov.w	r0, #4294967295
 800fd8a:	bd30      	pop	{r4, r5, pc}
 800fd8c:	42a3      	cmp	r3, r4
 800fd8e:	d3f3      	bcc.n	800fd78 <__mcmp+0x18>
 800fd90:	e7fb      	b.n	800fd8a <__mcmp+0x2a>
 800fd92:	2001      	movs	r0, #1
 800fd94:	e7f9      	b.n	800fd8a <__mcmp+0x2a>
	...

0800fd98 <__mdiff>:
 800fd98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	4689      	mov	r9, r1
 800fd9e:	4606      	mov	r6, r0
 800fda0:	4611      	mov	r1, r2
 800fda2:	4648      	mov	r0, r9
 800fda4:	4614      	mov	r4, r2
 800fda6:	f7ff ffdb 	bl	800fd60 <__mcmp>
 800fdaa:	1e05      	subs	r5, r0, #0
 800fdac:	d112      	bne.n	800fdd4 <__mdiff+0x3c>
 800fdae:	4629      	mov	r1, r5
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f7ff fd11 	bl	800f7d8 <_Balloc>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	b928      	cbnz	r0, 800fdc6 <__mdiff+0x2e>
 800fdba:	4b3f      	ldr	r3, [pc, #252]	@ (800feb8 <__mdiff+0x120>)
 800fdbc:	f240 2137 	movw	r1, #567	@ 0x237
 800fdc0:	483e      	ldr	r0, [pc, #248]	@ (800febc <__mdiff+0x124>)
 800fdc2:	f001 fa0d 	bl	80111e0 <__assert_func>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fdcc:	4610      	mov	r0, r2
 800fdce:	b003      	add	sp, #12
 800fdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd4:	bfbc      	itt	lt
 800fdd6:	464b      	movlt	r3, r9
 800fdd8:	46a1      	movlt	r9, r4
 800fdda:	4630      	mov	r0, r6
 800fddc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fde0:	bfba      	itte	lt
 800fde2:	461c      	movlt	r4, r3
 800fde4:	2501      	movlt	r5, #1
 800fde6:	2500      	movge	r5, #0
 800fde8:	f7ff fcf6 	bl	800f7d8 <_Balloc>
 800fdec:	4602      	mov	r2, r0
 800fdee:	b918      	cbnz	r0, 800fdf8 <__mdiff+0x60>
 800fdf0:	4b31      	ldr	r3, [pc, #196]	@ (800feb8 <__mdiff+0x120>)
 800fdf2:	f240 2145 	movw	r1, #581	@ 0x245
 800fdf6:	e7e3      	b.n	800fdc0 <__mdiff+0x28>
 800fdf8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fdfc:	6926      	ldr	r6, [r4, #16]
 800fdfe:	60c5      	str	r5, [r0, #12]
 800fe00:	f109 0310 	add.w	r3, r9, #16
 800fe04:	f109 0514 	add.w	r5, r9, #20
 800fe08:	f104 0e14 	add.w	lr, r4, #20
 800fe0c:	f100 0b14 	add.w	fp, r0, #20
 800fe10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fe14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fe18:	9301      	str	r3, [sp, #4]
 800fe1a:	46d9      	mov	r9, fp
 800fe1c:	f04f 0c00 	mov.w	ip, #0
 800fe20:	9b01      	ldr	r3, [sp, #4]
 800fe22:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fe26:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fe2a:	9301      	str	r3, [sp, #4]
 800fe2c:	fa1f f38a 	uxth.w	r3, sl
 800fe30:	4619      	mov	r1, r3
 800fe32:	b283      	uxth	r3, r0
 800fe34:	1acb      	subs	r3, r1, r3
 800fe36:	0c00      	lsrs	r0, r0, #16
 800fe38:	4463      	add	r3, ip
 800fe3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fe48:	4576      	cmp	r6, lr
 800fe4a:	f849 3b04 	str.w	r3, [r9], #4
 800fe4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe52:	d8e5      	bhi.n	800fe20 <__mdiff+0x88>
 800fe54:	1b33      	subs	r3, r6, r4
 800fe56:	3b15      	subs	r3, #21
 800fe58:	f023 0303 	bic.w	r3, r3, #3
 800fe5c:	3415      	adds	r4, #21
 800fe5e:	3304      	adds	r3, #4
 800fe60:	42a6      	cmp	r6, r4
 800fe62:	bf38      	it	cc
 800fe64:	2304      	movcc	r3, #4
 800fe66:	441d      	add	r5, r3
 800fe68:	445b      	add	r3, fp
 800fe6a:	461e      	mov	r6, r3
 800fe6c:	462c      	mov	r4, r5
 800fe6e:	4544      	cmp	r4, r8
 800fe70:	d30e      	bcc.n	800fe90 <__mdiff+0xf8>
 800fe72:	f108 0103 	add.w	r1, r8, #3
 800fe76:	1b49      	subs	r1, r1, r5
 800fe78:	f021 0103 	bic.w	r1, r1, #3
 800fe7c:	3d03      	subs	r5, #3
 800fe7e:	45a8      	cmp	r8, r5
 800fe80:	bf38      	it	cc
 800fe82:	2100      	movcc	r1, #0
 800fe84:	440b      	add	r3, r1
 800fe86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe8a:	b191      	cbz	r1, 800feb2 <__mdiff+0x11a>
 800fe8c:	6117      	str	r7, [r2, #16]
 800fe8e:	e79d      	b.n	800fdcc <__mdiff+0x34>
 800fe90:	f854 1b04 	ldr.w	r1, [r4], #4
 800fe94:	46e6      	mov	lr, ip
 800fe96:	0c08      	lsrs	r0, r1, #16
 800fe98:	fa1c fc81 	uxtah	ip, ip, r1
 800fe9c:	4471      	add	r1, lr
 800fe9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fea2:	b289      	uxth	r1, r1
 800fea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fea8:	f846 1b04 	str.w	r1, [r6], #4
 800feac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800feb0:	e7dd      	b.n	800fe6e <__mdiff+0xd6>
 800feb2:	3f01      	subs	r7, #1
 800feb4:	e7e7      	b.n	800fe86 <__mdiff+0xee>
 800feb6:	bf00      	nop
 800feb8:	08014c12 	.word	0x08014c12
 800febc:	08014c23 	.word	0x08014c23

0800fec0 <__ulp>:
 800fec0:	b082      	sub	sp, #8
 800fec2:	ed8d 0b00 	vstr	d0, [sp]
 800fec6:	9a01      	ldr	r2, [sp, #4]
 800fec8:	4b0f      	ldr	r3, [pc, #60]	@ (800ff08 <__ulp+0x48>)
 800feca:	4013      	ands	r3, r2
 800fecc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	dc08      	bgt.n	800fee6 <__ulp+0x26>
 800fed4:	425b      	negs	r3, r3
 800fed6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800feda:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fede:	da04      	bge.n	800feea <__ulp+0x2a>
 800fee0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fee4:	4113      	asrs	r3, r2
 800fee6:	2200      	movs	r2, #0
 800fee8:	e008      	b.n	800fefc <__ulp+0x3c>
 800feea:	f1a2 0314 	sub.w	r3, r2, #20
 800feee:	2b1e      	cmp	r3, #30
 800fef0:	bfda      	itte	le
 800fef2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fef6:	40da      	lsrle	r2, r3
 800fef8:	2201      	movgt	r2, #1
 800fefa:	2300      	movs	r3, #0
 800fefc:	4619      	mov	r1, r3
 800fefe:	4610      	mov	r0, r2
 800ff00:	ec41 0b10 	vmov	d0, r0, r1
 800ff04:	b002      	add	sp, #8
 800ff06:	4770      	bx	lr
 800ff08:	7ff00000 	.word	0x7ff00000

0800ff0c <__b2d>:
 800ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff10:	6906      	ldr	r6, [r0, #16]
 800ff12:	f100 0814 	add.w	r8, r0, #20
 800ff16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ff1a:	1f37      	subs	r7, r6, #4
 800ff1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff20:	4610      	mov	r0, r2
 800ff22:	f7ff fd4b 	bl	800f9bc <__hi0bits>
 800ff26:	f1c0 0320 	rsb	r3, r0, #32
 800ff2a:	280a      	cmp	r0, #10
 800ff2c:	600b      	str	r3, [r1, #0]
 800ff2e:	491b      	ldr	r1, [pc, #108]	@ (800ff9c <__b2d+0x90>)
 800ff30:	dc15      	bgt.n	800ff5e <__b2d+0x52>
 800ff32:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff36:	fa22 f30c 	lsr.w	r3, r2, ip
 800ff3a:	45b8      	cmp	r8, r7
 800ff3c:	ea43 0501 	orr.w	r5, r3, r1
 800ff40:	bf34      	ite	cc
 800ff42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff46:	2300      	movcs	r3, #0
 800ff48:	3015      	adds	r0, #21
 800ff4a:	fa02 f000 	lsl.w	r0, r2, r0
 800ff4e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ff52:	4303      	orrs	r3, r0
 800ff54:	461c      	mov	r4, r3
 800ff56:	ec45 4b10 	vmov	d0, r4, r5
 800ff5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5e:	45b8      	cmp	r8, r7
 800ff60:	bf3a      	itte	cc
 800ff62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff66:	f1a6 0708 	subcc.w	r7, r6, #8
 800ff6a:	2300      	movcs	r3, #0
 800ff6c:	380b      	subs	r0, #11
 800ff6e:	d012      	beq.n	800ff96 <__b2d+0x8a>
 800ff70:	f1c0 0120 	rsb	r1, r0, #32
 800ff74:	fa23 f401 	lsr.w	r4, r3, r1
 800ff78:	4082      	lsls	r2, r0
 800ff7a:	4322      	orrs	r2, r4
 800ff7c:	4547      	cmp	r7, r8
 800ff7e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ff82:	bf8c      	ite	hi
 800ff84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ff88:	2200      	movls	r2, #0
 800ff8a:	4083      	lsls	r3, r0
 800ff8c:	40ca      	lsrs	r2, r1
 800ff8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ff92:	4313      	orrs	r3, r2
 800ff94:	e7de      	b.n	800ff54 <__b2d+0x48>
 800ff96:	ea42 0501 	orr.w	r5, r2, r1
 800ff9a:	e7db      	b.n	800ff54 <__b2d+0x48>
 800ff9c:	3ff00000 	.word	0x3ff00000

0800ffa0 <__d2b>:
 800ffa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffa4:	460f      	mov	r7, r1
 800ffa6:	2101      	movs	r1, #1
 800ffa8:	ec59 8b10 	vmov	r8, r9, d0
 800ffac:	4616      	mov	r6, r2
 800ffae:	f7ff fc13 	bl	800f7d8 <_Balloc>
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	b930      	cbnz	r0, 800ffc4 <__d2b+0x24>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	4b23      	ldr	r3, [pc, #140]	@ (8010048 <__d2b+0xa8>)
 800ffba:	4824      	ldr	r0, [pc, #144]	@ (801004c <__d2b+0xac>)
 800ffbc:	f240 310f 	movw	r1, #783	@ 0x30f
 800ffc0:	f001 f90e 	bl	80111e0 <__assert_func>
 800ffc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ffc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffcc:	b10d      	cbz	r5, 800ffd2 <__d2b+0x32>
 800ffce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ffd2:	9301      	str	r3, [sp, #4]
 800ffd4:	f1b8 0300 	subs.w	r3, r8, #0
 800ffd8:	d023      	beq.n	8010022 <__d2b+0x82>
 800ffda:	4668      	mov	r0, sp
 800ffdc:	9300      	str	r3, [sp, #0]
 800ffde:	f7ff fd0c 	bl	800f9fa <__lo0bits>
 800ffe2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ffe6:	b1d0      	cbz	r0, 801001e <__d2b+0x7e>
 800ffe8:	f1c0 0320 	rsb	r3, r0, #32
 800ffec:	fa02 f303 	lsl.w	r3, r2, r3
 800fff0:	430b      	orrs	r3, r1
 800fff2:	40c2      	lsrs	r2, r0
 800fff4:	6163      	str	r3, [r4, #20]
 800fff6:	9201      	str	r2, [sp, #4]
 800fff8:	9b01      	ldr	r3, [sp, #4]
 800fffa:	61a3      	str	r3, [r4, #24]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	bf0c      	ite	eq
 8010000:	2201      	moveq	r2, #1
 8010002:	2202      	movne	r2, #2
 8010004:	6122      	str	r2, [r4, #16]
 8010006:	b1a5      	cbz	r5, 8010032 <__d2b+0x92>
 8010008:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801000c:	4405      	add	r5, r0
 801000e:	603d      	str	r5, [r7, #0]
 8010010:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010014:	6030      	str	r0, [r6, #0]
 8010016:	4620      	mov	r0, r4
 8010018:	b003      	add	sp, #12
 801001a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801001e:	6161      	str	r1, [r4, #20]
 8010020:	e7ea      	b.n	800fff8 <__d2b+0x58>
 8010022:	a801      	add	r0, sp, #4
 8010024:	f7ff fce9 	bl	800f9fa <__lo0bits>
 8010028:	9b01      	ldr	r3, [sp, #4]
 801002a:	6163      	str	r3, [r4, #20]
 801002c:	3020      	adds	r0, #32
 801002e:	2201      	movs	r2, #1
 8010030:	e7e8      	b.n	8010004 <__d2b+0x64>
 8010032:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010036:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801003a:	6038      	str	r0, [r7, #0]
 801003c:	6918      	ldr	r0, [r3, #16]
 801003e:	f7ff fcbd 	bl	800f9bc <__hi0bits>
 8010042:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010046:	e7e5      	b.n	8010014 <__d2b+0x74>
 8010048:	08014c12 	.word	0x08014c12
 801004c:	08014c23 	.word	0x08014c23

08010050 <__ratio>:
 8010050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010054:	b085      	sub	sp, #20
 8010056:	e9cd 1000 	strd	r1, r0, [sp]
 801005a:	a902      	add	r1, sp, #8
 801005c:	f7ff ff56 	bl	800ff0c <__b2d>
 8010060:	9800      	ldr	r0, [sp, #0]
 8010062:	a903      	add	r1, sp, #12
 8010064:	ec55 4b10 	vmov	r4, r5, d0
 8010068:	f7ff ff50 	bl	800ff0c <__b2d>
 801006c:	9b01      	ldr	r3, [sp, #4]
 801006e:	6919      	ldr	r1, [r3, #16]
 8010070:	9b00      	ldr	r3, [sp, #0]
 8010072:	691b      	ldr	r3, [r3, #16]
 8010074:	1ac9      	subs	r1, r1, r3
 8010076:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801007a:	1a9b      	subs	r3, r3, r2
 801007c:	ec5b ab10 	vmov	sl, fp, d0
 8010080:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010084:	2b00      	cmp	r3, #0
 8010086:	bfce      	itee	gt
 8010088:	462a      	movgt	r2, r5
 801008a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801008e:	465a      	movle	r2, fp
 8010090:	462f      	mov	r7, r5
 8010092:	46d9      	mov	r9, fp
 8010094:	bfcc      	ite	gt
 8010096:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801009a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801009e:	464b      	mov	r3, r9
 80100a0:	4652      	mov	r2, sl
 80100a2:	4620      	mov	r0, r4
 80100a4:	4639      	mov	r1, r7
 80100a6:	f7f0 fbe1 	bl	800086c <__aeabi_ddiv>
 80100aa:	ec41 0b10 	vmov	d0, r0, r1
 80100ae:	b005      	add	sp, #20
 80100b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100b4 <__copybits>:
 80100b4:	3901      	subs	r1, #1
 80100b6:	b570      	push	{r4, r5, r6, lr}
 80100b8:	1149      	asrs	r1, r1, #5
 80100ba:	6914      	ldr	r4, [r2, #16]
 80100bc:	3101      	adds	r1, #1
 80100be:	f102 0314 	add.w	r3, r2, #20
 80100c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80100c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100ca:	1f05      	subs	r5, r0, #4
 80100cc:	42a3      	cmp	r3, r4
 80100ce:	d30c      	bcc.n	80100ea <__copybits+0x36>
 80100d0:	1aa3      	subs	r3, r4, r2
 80100d2:	3b11      	subs	r3, #17
 80100d4:	f023 0303 	bic.w	r3, r3, #3
 80100d8:	3211      	adds	r2, #17
 80100da:	42a2      	cmp	r2, r4
 80100dc:	bf88      	it	hi
 80100de:	2300      	movhi	r3, #0
 80100e0:	4418      	add	r0, r3
 80100e2:	2300      	movs	r3, #0
 80100e4:	4288      	cmp	r0, r1
 80100e6:	d305      	bcc.n	80100f4 <__copybits+0x40>
 80100e8:	bd70      	pop	{r4, r5, r6, pc}
 80100ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80100ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80100f2:	e7eb      	b.n	80100cc <__copybits+0x18>
 80100f4:	f840 3b04 	str.w	r3, [r0], #4
 80100f8:	e7f4      	b.n	80100e4 <__copybits+0x30>

080100fa <__any_on>:
 80100fa:	f100 0214 	add.w	r2, r0, #20
 80100fe:	6900      	ldr	r0, [r0, #16]
 8010100:	114b      	asrs	r3, r1, #5
 8010102:	4298      	cmp	r0, r3
 8010104:	b510      	push	{r4, lr}
 8010106:	db11      	blt.n	801012c <__any_on+0x32>
 8010108:	dd0a      	ble.n	8010120 <__any_on+0x26>
 801010a:	f011 011f 	ands.w	r1, r1, #31
 801010e:	d007      	beq.n	8010120 <__any_on+0x26>
 8010110:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010114:	fa24 f001 	lsr.w	r0, r4, r1
 8010118:	fa00 f101 	lsl.w	r1, r0, r1
 801011c:	428c      	cmp	r4, r1
 801011e:	d10b      	bne.n	8010138 <__any_on+0x3e>
 8010120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010124:	4293      	cmp	r3, r2
 8010126:	d803      	bhi.n	8010130 <__any_on+0x36>
 8010128:	2000      	movs	r0, #0
 801012a:	bd10      	pop	{r4, pc}
 801012c:	4603      	mov	r3, r0
 801012e:	e7f7      	b.n	8010120 <__any_on+0x26>
 8010130:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010134:	2900      	cmp	r1, #0
 8010136:	d0f5      	beq.n	8010124 <__any_on+0x2a>
 8010138:	2001      	movs	r0, #1
 801013a:	e7f6      	b.n	801012a <__any_on+0x30>

0801013c <sulp>:
 801013c:	b570      	push	{r4, r5, r6, lr}
 801013e:	4604      	mov	r4, r0
 8010140:	460d      	mov	r5, r1
 8010142:	ec45 4b10 	vmov	d0, r4, r5
 8010146:	4616      	mov	r6, r2
 8010148:	f7ff feba 	bl	800fec0 <__ulp>
 801014c:	ec51 0b10 	vmov	r0, r1, d0
 8010150:	b17e      	cbz	r6, 8010172 <sulp+0x36>
 8010152:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010156:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801015a:	2b00      	cmp	r3, #0
 801015c:	dd09      	ble.n	8010172 <sulp+0x36>
 801015e:	051b      	lsls	r3, r3, #20
 8010160:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010164:	2400      	movs	r4, #0
 8010166:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801016a:	4622      	mov	r2, r4
 801016c:	462b      	mov	r3, r5
 801016e:	f7f0 fa53 	bl	8000618 <__aeabi_dmul>
 8010172:	ec41 0b10 	vmov	d0, r0, r1
 8010176:	bd70      	pop	{r4, r5, r6, pc}

08010178 <_strtod_l>:
 8010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	b09f      	sub	sp, #124	@ 0x7c
 801017e:	460c      	mov	r4, r1
 8010180:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010182:	2200      	movs	r2, #0
 8010184:	921a      	str	r2, [sp, #104]	@ 0x68
 8010186:	9005      	str	r0, [sp, #20]
 8010188:	f04f 0a00 	mov.w	sl, #0
 801018c:	f04f 0b00 	mov.w	fp, #0
 8010190:	460a      	mov	r2, r1
 8010192:	9219      	str	r2, [sp, #100]	@ 0x64
 8010194:	7811      	ldrb	r1, [r2, #0]
 8010196:	292b      	cmp	r1, #43	@ 0x2b
 8010198:	d04a      	beq.n	8010230 <_strtod_l+0xb8>
 801019a:	d838      	bhi.n	801020e <_strtod_l+0x96>
 801019c:	290d      	cmp	r1, #13
 801019e:	d832      	bhi.n	8010206 <_strtod_l+0x8e>
 80101a0:	2908      	cmp	r1, #8
 80101a2:	d832      	bhi.n	801020a <_strtod_l+0x92>
 80101a4:	2900      	cmp	r1, #0
 80101a6:	d03b      	beq.n	8010220 <_strtod_l+0xa8>
 80101a8:	2200      	movs	r2, #0
 80101aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80101ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80101ae:	782a      	ldrb	r2, [r5, #0]
 80101b0:	2a30      	cmp	r2, #48	@ 0x30
 80101b2:	f040 80b3 	bne.w	801031c <_strtod_l+0x1a4>
 80101b6:	786a      	ldrb	r2, [r5, #1]
 80101b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80101bc:	2a58      	cmp	r2, #88	@ 0x58
 80101be:	d16e      	bne.n	801029e <_strtod_l+0x126>
 80101c0:	9302      	str	r3, [sp, #8]
 80101c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101c4:	9301      	str	r3, [sp, #4]
 80101c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	4a8e      	ldr	r2, [pc, #568]	@ (8010404 <_strtod_l+0x28c>)
 80101cc:	9805      	ldr	r0, [sp, #20]
 80101ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80101d0:	a919      	add	r1, sp, #100	@ 0x64
 80101d2:	f001 f89f 	bl	8011314 <__gethex>
 80101d6:	f010 060f 	ands.w	r6, r0, #15
 80101da:	4604      	mov	r4, r0
 80101dc:	d005      	beq.n	80101ea <_strtod_l+0x72>
 80101de:	2e06      	cmp	r6, #6
 80101e0:	d128      	bne.n	8010234 <_strtod_l+0xbc>
 80101e2:	3501      	adds	r5, #1
 80101e4:	2300      	movs	r3, #0
 80101e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80101e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f040 858e 	bne.w	8010d0e <_strtod_l+0xb96>
 80101f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101f4:	b1cb      	cbz	r3, 801022a <_strtod_l+0xb2>
 80101f6:	4652      	mov	r2, sl
 80101f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80101fc:	ec43 2b10 	vmov	d0, r2, r3
 8010200:	b01f      	add	sp, #124	@ 0x7c
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010206:	2920      	cmp	r1, #32
 8010208:	d1ce      	bne.n	80101a8 <_strtod_l+0x30>
 801020a:	3201      	adds	r2, #1
 801020c:	e7c1      	b.n	8010192 <_strtod_l+0x1a>
 801020e:	292d      	cmp	r1, #45	@ 0x2d
 8010210:	d1ca      	bne.n	80101a8 <_strtod_l+0x30>
 8010212:	2101      	movs	r1, #1
 8010214:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010216:	1c51      	adds	r1, r2, #1
 8010218:	9119      	str	r1, [sp, #100]	@ 0x64
 801021a:	7852      	ldrb	r2, [r2, #1]
 801021c:	2a00      	cmp	r2, #0
 801021e:	d1c5      	bne.n	80101ac <_strtod_l+0x34>
 8010220:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010222:	9419      	str	r4, [sp, #100]	@ 0x64
 8010224:	2b00      	cmp	r3, #0
 8010226:	f040 8570 	bne.w	8010d0a <_strtod_l+0xb92>
 801022a:	4652      	mov	r2, sl
 801022c:	465b      	mov	r3, fp
 801022e:	e7e5      	b.n	80101fc <_strtod_l+0x84>
 8010230:	2100      	movs	r1, #0
 8010232:	e7ef      	b.n	8010214 <_strtod_l+0x9c>
 8010234:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010236:	b13a      	cbz	r2, 8010248 <_strtod_l+0xd0>
 8010238:	2135      	movs	r1, #53	@ 0x35
 801023a:	a81c      	add	r0, sp, #112	@ 0x70
 801023c:	f7ff ff3a 	bl	80100b4 <__copybits>
 8010240:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010242:	9805      	ldr	r0, [sp, #20]
 8010244:	f7ff fb08 	bl	800f858 <_Bfree>
 8010248:	3e01      	subs	r6, #1
 801024a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801024c:	2e04      	cmp	r6, #4
 801024e:	d806      	bhi.n	801025e <_strtod_l+0xe6>
 8010250:	e8df f006 	tbb	[pc, r6]
 8010254:	201d0314 	.word	0x201d0314
 8010258:	14          	.byte	0x14
 8010259:	00          	.byte	0x00
 801025a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801025e:	05e1      	lsls	r1, r4, #23
 8010260:	bf48      	it	mi
 8010262:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010266:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801026a:	0d1b      	lsrs	r3, r3, #20
 801026c:	051b      	lsls	r3, r3, #20
 801026e:	2b00      	cmp	r3, #0
 8010270:	d1bb      	bne.n	80101ea <_strtod_l+0x72>
 8010272:	f7fe fb21 	bl	800e8b8 <__errno>
 8010276:	2322      	movs	r3, #34	@ 0x22
 8010278:	6003      	str	r3, [r0, #0]
 801027a:	e7b6      	b.n	80101ea <_strtod_l+0x72>
 801027c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010280:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010284:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010288:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801028c:	e7e7      	b.n	801025e <_strtod_l+0xe6>
 801028e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801040c <_strtod_l+0x294>
 8010292:	e7e4      	b.n	801025e <_strtod_l+0xe6>
 8010294:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010298:	f04f 3aff 	mov.w	sl, #4294967295
 801029c:	e7df      	b.n	801025e <_strtod_l+0xe6>
 801029e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80102a0:	1c5a      	adds	r2, r3, #1
 80102a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80102a4:	785b      	ldrb	r3, [r3, #1]
 80102a6:	2b30      	cmp	r3, #48	@ 0x30
 80102a8:	d0f9      	beq.n	801029e <_strtod_l+0x126>
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d09d      	beq.n	80101ea <_strtod_l+0x72>
 80102ae:	2301      	movs	r3, #1
 80102b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80102b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80102b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80102b6:	2300      	movs	r3, #0
 80102b8:	9308      	str	r3, [sp, #32]
 80102ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80102bc:	461f      	mov	r7, r3
 80102be:	220a      	movs	r2, #10
 80102c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80102c2:	7805      	ldrb	r5, [r0, #0]
 80102c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80102c8:	b2d9      	uxtb	r1, r3
 80102ca:	2909      	cmp	r1, #9
 80102cc:	d928      	bls.n	8010320 <_strtod_l+0x1a8>
 80102ce:	494e      	ldr	r1, [pc, #312]	@ (8010408 <_strtod_l+0x290>)
 80102d0:	2201      	movs	r2, #1
 80102d2:	f000 ff59 	bl	8011188 <strncmp>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d032      	beq.n	8010340 <_strtod_l+0x1c8>
 80102da:	2000      	movs	r0, #0
 80102dc:	462a      	mov	r2, r5
 80102de:	4681      	mov	r9, r0
 80102e0:	463d      	mov	r5, r7
 80102e2:	4603      	mov	r3, r0
 80102e4:	2a65      	cmp	r2, #101	@ 0x65
 80102e6:	d001      	beq.n	80102ec <_strtod_l+0x174>
 80102e8:	2a45      	cmp	r2, #69	@ 0x45
 80102ea:	d114      	bne.n	8010316 <_strtod_l+0x19e>
 80102ec:	b91d      	cbnz	r5, 80102f6 <_strtod_l+0x17e>
 80102ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102f0:	4302      	orrs	r2, r0
 80102f2:	d095      	beq.n	8010220 <_strtod_l+0xa8>
 80102f4:	2500      	movs	r5, #0
 80102f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80102f8:	1c62      	adds	r2, r4, #1
 80102fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80102fc:	7862      	ldrb	r2, [r4, #1]
 80102fe:	2a2b      	cmp	r2, #43	@ 0x2b
 8010300:	d077      	beq.n	80103f2 <_strtod_l+0x27a>
 8010302:	2a2d      	cmp	r2, #45	@ 0x2d
 8010304:	d07b      	beq.n	80103fe <_strtod_l+0x286>
 8010306:	f04f 0c00 	mov.w	ip, #0
 801030a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801030e:	2909      	cmp	r1, #9
 8010310:	f240 8082 	bls.w	8010418 <_strtod_l+0x2a0>
 8010314:	9419      	str	r4, [sp, #100]	@ 0x64
 8010316:	f04f 0800 	mov.w	r8, #0
 801031a:	e0a2      	b.n	8010462 <_strtod_l+0x2ea>
 801031c:	2300      	movs	r3, #0
 801031e:	e7c7      	b.n	80102b0 <_strtod_l+0x138>
 8010320:	2f08      	cmp	r7, #8
 8010322:	bfd5      	itete	le
 8010324:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010326:	9908      	ldrgt	r1, [sp, #32]
 8010328:	fb02 3301 	mlale	r3, r2, r1, r3
 801032c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010330:	f100 0001 	add.w	r0, r0, #1
 8010334:	bfd4      	ite	le
 8010336:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010338:	9308      	strgt	r3, [sp, #32]
 801033a:	3701      	adds	r7, #1
 801033c:	9019      	str	r0, [sp, #100]	@ 0x64
 801033e:	e7bf      	b.n	80102c0 <_strtod_l+0x148>
 8010340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010342:	1c5a      	adds	r2, r3, #1
 8010344:	9219      	str	r2, [sp, #100]	@ 0x64
 8010346:	785a      	ldrb	r2, [r3, #1]
 8010348:	b37f      	cbz	r7, 80103aa <_strtod_l+0x232>
 801034a:	4681      	mov	r9, r0
 801034c:	463d      	mov	r5, r7
 801034e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010352:	2b09      	cmp	r3, #9
 8010354:	d912      	bls.n	801037c <_strtod_l+0x204>
 8010356:	2301      	movs	r3, #1
 8010358:	e7c4      	b.n	80102e4 <_strtod_l+0x16c>
 801035a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801035c:	1c5a      	adds	r2, r3, #1
 801035e:	9219      	str	r2, [sp, #100]	@ 0x64
 8010360:	785a      	ldrb	r2, [r3, #1]
 8010362:	3001      	adds	r0, #1
 8010364:	2a30      	cmp	r2, #48	@ 0x30
 8010366:	d0f8      	beq.n	801035a <_strtod_l+0x1e2>
 8010368:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801036c:	2b08      	cmp	r3, #8
 801036e:	f200 84d3 	bhi.w	8010d18 <_strtod_l+0xba0>
 8010372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010374:	930c      	str	r3, [sp, #48]	@ 0x30
 8010376:	4681      	mov	r9, r0
 8010378:	2000      	movs	r0, #0
 801037a:	4605      	mov	r5, r0
 801037c:	3a30      	subs	r2, #48	@ 0x30
 801037e:	f100 0301 	add.w	r3, r0, #1
 8010382:	d02a      	beq.n	80103da <_strtod_l+0x262>
 8010384:	4499      	add	r9, r3
 8010386:	eb00 0c05 	add.w	ip, r0, r5
 801038a:	462b      	mov	r3, r5
 801038c:	210a      	movs	r1, #10
 801038e:	4563      	cmp	r3, ip
 8010390:	d10d      	bne.n	80103ae <_strtod_l+0x236>
 8010392:	1c69      	adds	r1, r5, #1
 8010394:	4401      	add	r1, r0
 8010396:	4428      	add	r0, r5
 8010398:	2808      	cmp	r0, #8
 801039a:	dc16      	bgt.n	80103ca <_strtod_l+0x252>
 801039c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801039e:	230a      	movs	r3, #10
 80103a0:	fb03 2300 	mla	r3, r3, r0, r2
 80103a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80103a6:	2300      	movs	r3, #0
 80103a8:	e018      	b.n	80103dc <_strtod_l+0x264>
 80103aa:	4638      	mov	r0, r7
 80103ac:	e7da      	b.n	8010364 <_strtod_l+0x1ec>
 80103ae:	2b08      	cmp	r3, #8
 80103b0:	f103 0301 	add.w	r3, r3, #1
 80103b4:	dc03      	bgt.n	80103be <_strtod_l+0x246>
 80103b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80103b8:	434e      	muls	r6, r1
 80103ba:	960a      	str	r6, [sp, #40]	@ 0x28
 80103bc:	e7e7      	b.n	801038e <_strtod_l+0x216>
 80103be:	2b10      	cmp	r3, #16
 80103c0:	bfde      	ittt	le
 80103c2:	9e08      	ldrle	r6, [sp, #32]
 80103c4:	434e      	mulle	r6, r1
 80103c6:	9608      	strle	r6, [sp, #32]
 80103c8:	e7e1      	b.n	801038e <_strtod_l+0x216>
 80103ca:	280f      	cmp	r0, #15
 80103cc:	dceb      	bgt.n	80103a6 <_strtod_l+0x22e>
 80103ce:	9808      	ldr	r0, [sp, #32]
 80103d0:	230a      	movs	r3, #10
 80103d2:	fb03 2300 	mla	r3, r3, r0, r2
 80103d6:	9308      	str	r3, [sp, #32]
 80103d8:	e7e5      	b.n	80103a6 <_strtod_l+0x22e>
 80103da:	4629      	mov	r1, r5
 80103dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80103de:	1c50      	adds	r0, r2, #1
 80103e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80103e2:	7852      	ldrb	r2, [r2, #1]
 80103e4:	4618      	mov	r0, r3
 80103e6:	460d      	mov	r5, r1
 80103e8:	e7b1      	b.n	801034e <_strtod_l+0x1d6>
 80103ea:	f04f 0900 	mov.w	r9, #0
 80103ee:	2301      	movs	r3, #1
 80103f0:	e77d      	b.n	80102ee <_strtod_l+0x176>
 80103f2:	f04f 0c00 	mov.w	ip, #0
 80103f6:	1ca2      	adds	r2, r4, #2
 80103f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80103fa:	78a2      	ldrb	r2, [r4, #2]
 80103fc:	e785      	b.n	801030a <_strtod_l+0x192>
 80103fe:	f04f 0c01 	mov.w	ip, #1
 8010402:	e7f8      	b.n	80103f6 <_strtod_l+0x27e>
 8010404:	08014d90 	.word	0x08014d90
 8010408:	08014d78 	.word	0x08014d78
 801040c:	7ff00000 	.word	0x7ff00000
 8010410:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010412:	1c51      	adds	r1, r2, #1
 8010414:	9119      	str	r1, [sp, #100]	@ 0x64
 8010416:	7852      	ldrb	r2, [r2, #1]
 8010418:	2a30      	cmp	r2, #48	@ 0x30
 801041a:	d0f9      	beq.n	8010410 <_strtod_l+0x298>
 801041c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010420:	2908      	cmp	r1, #8
 8010422:	f63f af78 	bhi.w	8010316 <_strtod_l+0x19e>
 8010426:	3a30      	subs	r2, #48	@ 0x30
 8010428:	920e      	str	r2, [sp, #56]	@ 0x38
 801042a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801042c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801042e:	f04f 080a 	mov.w	r8, #10
 8010432:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010434:	1c56      	adds	r6, r2, #1
 8010436:	9619      	str	r6, [sp, #100]	@ 0x64
 8010438:	7852      	ldrb	r2, [r2, #1]
 801043a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801043e:	f1be 0f09 	cmp.w	lr, #9
 8010442:	d939      	bls.n	80104b8 <_strtod_l+0x340>
 8010444:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010446:	1a76      	subs	r6, r6, r1
 8010448:	2e08      	cmp	r6, #8
 801044a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801044e:	dc03      	bgt.n	8010458 <_strtod_l+0x2e0>
 8010450:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010452:	4588      	cmp	r8, r1
 8010454:	bfa8      	it	ge
 8010456:	4688      	movge	r8, r1
 8010458:	f1bc 0f00 	cmp.w	ip, #0
 801045c:	d001      	beq.n	8010462 <_strtod_l+0x2ea>
 801045e:	f1c8 0800 	rsb	r8, r8, #0
 8010462:	2d00      	cmp	r5, #0
 8010464:	d14e      	bne.n	8010504 <_strtod_l+0x38c>
 8010466:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010468:	4308      	orrs	r0, r1
 801046a:	f47f aebe 	bne.w	80101ea <_strtod_l+0x72>
 801046e:	2b00      	cmp	r3, #0
 8010470:	f47f aed6 	bne.w	8010220 <_strtod_l+0xa8>
 8010474:	2a69      	cmp	r2, #105	@ 0x69
 8010476:	d028      	beq.n	80104ca <_strtod_l+0x352>
 8010478:	dc25      	bgt.n	80104c6 <_strtod_l+0x34e>
 801047a:	2a49      	cmp	r2, #73	@ 0x49
 801047c:	d025      	beq.n	80104ca <_strtod_l+0x352>
 801047e:	2a4e      	cmp	r2, #78	@ 0x4e
 8010480:	f47f aece 	bne.w	8010220 <_strtod_l+0xa8>
 8010484:	499b      	ldr	r1, [pc, #620]	@ (80106f4 <_strtod_l+0x57c>)
 8010486:	a819      	add	r0, sp, #100	@ 0x64
 8010488:	f001 f966 	bl	8011758 <__match>
 801048c:	2800      	cmp	r0, #0
 801048e:	f43f aec7 	beq.w	8010220 <_strtod_l+0xa8>
 8010492:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	2b28      	cmp	r3, #40	@ 0x28
 8010498:	d12e      	bne.n	80104f8 <_strtod_l+0x380>
 801049a:	4997      	ldr	r1, [pc, #604]	@ (80106f8 <_strtod_l+0x580>)
 801049c:	aa1c      	add	r2, sp, #112	@ 0x70
 801049e:	a819      	add	r0, sp, #100	@ 0x64
 80104a0:	f001 f96e 	bl	8011780 <__hexnan>
 80104a4:	2805      	cmp	r0, #5
 80104a6:	d127      	bne.n	80104f8 <_strtod_l+0x380>
 80104a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80104aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80104ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80104b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80104b6:	e698      	b.n	80101ea <_strtod_l+0x72>
 80104b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80104ba:	fb08 2101 	mla	r1, r8, r1, r2
 80104be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80104c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80104c4:	e7b5      	b.n	8010432 <_strtod_l+0x2ba>
 80104c6:	2a6e      	cmp	r2, #110	@ 0x6e
 80104c8:	e7da      	b.n	8010480 <_strtod_l+0x308>
 80104ca:	498c      	ldr	r1, [pc, #560]	@ (80106fc <_strtod_l+0x584>)
 80104cc:	a819      	add	r0, sp, #100	@ 0x64
 80104ce:	f001 f943 	bl	8011758 <__match>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	f43f aea4 	beq.w	8010220 <_strtod_l+0xa8>
 80104d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104da:	4989      	ldr	r1, [pc, #548]	@ (8010700 <_strtod_l+0x588>)
 80104dc:	3b01      	subs	r3, #1
 80104de:	a819      	add	r0, sp, #100	@ 0x64
 80104e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80104e2:	f001 f939 	bl	8011758 <__match>
 80104e6:	b910      	cbnz	r0, 80104ee <_strtod_l+0x376>
 80104e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104ea:	3301      	adds	r3, #1
 80104ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80104ee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010710 <_strtod_l+0x598>
 80104f2:	f04f 0a00 	mov.w	sl, #0
 80104f6:	e678      	b.n	80101ea <_strtod_l+0x72>
 80104f8:	4882      	ldr	r0, [pc, #520]	@ (8010704 <_strtod_l+0x58c>)
 80104fa:	f000 fe69 	bl	80111d0 <nan>
 80104fe:	ec5b ab10 	vmov	sl, fp, d0
 8010502:	e672      	b.n	80101ea <_strtod_l+0x72>
 8010504:	eba8 0309 	sub.w	r3, r8, r9
 8010508:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801050a:	9309      	str	r3, [sp, #36]	@ 0x24
 801050c:	2f00      	cmp	r7, #0
 801050e:	bf08      	it	eq
 8010510:	462f      	moveq	r7, r5
 8010512:	2d10      	cmp	r5, #16
 8010514:	462c      	mov	r4, r5
 8010516:	bfa8      	it	ge
 8010518:	2410      	movge	r4, #16
 801051a:	f7f0 f803 	bl	8000524 <__aeabi_ui2d>
 801051e:	2d09      	cmp	r5, #9
 8010520:	4682      	mov	sl, r0
 8010522:	468b      	mov	fp, r1
 8010524:	dc13      	bgt.n	801054e <_strtod_l+0x3d6>
 8010526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010528:	2b00      	cmp	r3, #0
 801052a:	f43f ae5e 	beq.w	80101ea <_strtod_l+0x72>
 801052e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010530:	dd78      	ble.n	8010624 <_strtod_l+0x4ac>
 8010532:	2b16      	cmp	r3, #22
 8010534:	dc5f      	bgt.n	80105f6 <_strtod_l+0x47e>
 8010536:	4974      	ldr	r1, [pc, #464]	@ (8010708 <_strtod_l+0x590>)
 8010538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801053c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010540:	4652      	mov	r2, sl
 8010542:	465b      	mov	r3, fp
 8010544:	f7f0 f868 	bl	8000618 <__aeabi_dmul>
 8010548:	4682      	mov	sl, r0
 801054a:	468b      	mov	fp, r1
 801054c:	e64d      	b.n	80101ea <_strtod_l+0x72>
 801054e:	4b6e      	ldr	r3, [pc, #440]	@ (8010708 <_strtod_l+0x590>)
 8010550:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010554:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010558:	f7f0 f85e 	bl	8000618 <__aeabi_dmul>
 801055c:	4682      	mov	sl, r0
 801055e:	9808      	ldr	r0, [sp, #32]
 8010560:	468b      	mov	fp, r1
 8010562:	f7ef ffdf 	bl	8000524 <__aeabi_ui2d>
 8010566:	4602      	mov	r2, r0
 8010568:	460b      	mov	r3, r1
 801056a:	4650      	mov	r0, sl
 801056c:	4659      	mov	r1, fp
 801056e:	f7ef fe9d 	bl	80002ac <__adddf3>
 8010572:	2d0f      	cmp	r5, #15
 8010574:	4682      	mov	sl, r0
 8010576:	468b      	mov	fp, r1
 8010578:	ddd5      	ble.n	8010526 <_strtod_l+0x3ae>
 801057a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801057c:	1b2c      	subs	r4, r5, r4
 801057e:	441c      	add	r4, r3
 8010580:	2c00      	cmp	r4, #0
 8010582:	f340 8096 	ble.w	80106b2 <_strtod_l+0x53a>
 8010586:	f014 030f 	ands.w	r3, r4, #15
 801058a:	d00a      	beq.n	80105a2 <_strtod_l+0x42a>
 801058c:	495e      	ldr	r1, [pc, #376]	@ (8010708 <_strtod_l+0x590>)
 801058e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010592:	4652      	mov	r2, sl
 8010594:	465b      	mov	r3, fp
 8010596:	e9d1 0100 	ldrd	r0, r1, [r1]
 801059a:	f7f0 f83d 	bl	8000618 <__aeabi_dmul>
 801059e:	4682      	mov	sl, r0
 80105a0:	468b      	mov	fp, r1
 80105a2:	f034 040f 	bics.w	r4, r4, #15
 80105a6:	d073      	beq.n	8010690 <_strtod_l+0x518>
 80105a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80105ac:	dd48      	ble.n	8010640 <_strtod_l+0x4c8>
 80105ae:	2400      	movs	r4, #0
 80105b0:	46a0      	mov	r8, r4
 80105b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80105b4:	46a1      	mov	r9, r4
 80105b6:	9a05      	ldr	r2, [sp, #20]
 80105b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010710 <_strtod_l+0x598>
 80105bc:	2322      	movs	r3, #34	@ 0x22
 80105be:	6013      	str	r3, [r2, #0]
 80105c0:	f04f 0a00 	mov.w	sl, #0
 80105c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	f43f ae0f 	beq.w	80101ea <_strtod_l+0x72>
 80105cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80105ce:	9805      	ldr	r0, [sp, #20]
 80105d0:	f7ff f942 	bl	800f858 <_Bfree>
 80105d4:	9805      	ldr	r0, [sp, #20]
 80105d6:	4649      	mov	r1, r9
 80105d8:	f7ff f93e 	bl	800f858 <_Bfree>
 80105dc:	9805      	ldr	r0, [sp, #20]
 80105de:	4641      	mov	r1, r8
 80105e0:	f7ff f93a 	bl	800f858 <_Bfree>
 80105e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80105e6:	9805      	ldr	r0, [sp, #20]
 80105e8:	f7ff f936 	bl	800f858 <_Bfree>
 80105ec:	9805      	ldr	r0, [sp, #20]
 80105ee:	4621      	mov	r1, r4
 80105f0:	f7ff f932 	bl	800f858 <_Bfree>
 80105f4:	e5f9      	b.n	80101ea <_strtod_l+0x72>
 80105f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80105fc:	4293      	cmp	r3, r2
 80105fe:	dbbc      	blt.n	801057a <_strtod_l+0x402>
 8010600:	4c41      	ldr	r4, [pc, #260]	@ (8010708 <_strtod_l+0x590>)
 8010602:	f1c5 050f 	rsb	r5, r5, #15
 8010606:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801060a:	4652      	mov	r2, sl
 801060c:	465b      	mov	r3, fp
 801060e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010612:	f7f0 f801 	bl	8000618 <__aeabi_dmul>
 8010616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010618:	1b5d      	subs	r5, r3, r5
 801061a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801061e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010622:	e78f      	b.n	8010544 <_strtod_l+0x3cc>
 8010624:	3316      	adds	r3, #22
 8010626:	dba8      	blt.n	801057a <_strtod_l+0x402>
 8010628:	4b37      	ldr	r3, [pc, #220]	@ (8010708 <_strtod_l+0x590>)
 801062a:	eba9 0808 	sub.w	r8, r9, r8
 801062e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010632:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010636:	4650      	mov	r0, sl
 8010638:	4659      	mov	r1, fp
 801063a:	f7f0 f917 	bl	800086c <__aeabi_ddiv>
 801063e:	e783      	b.n	8010548 <_strtod_l+0x3d0>
 8010640:	4b32      	ldr	r3, [pc, #200]	@ (801070c <_strtod_l+0x594>)
 8010642:	9308      	str	r3, [sp, #32]
 8010644:	2300      	movs	r3, #0
 8010646:	1124      	asrs	r4, r4, #4
 8010648:	4650      	mov	r0, sl
 801064a:	4659      	mov	r1, fp
 801064c:	461e      	mov	r6, r3
 801064e:	2c01      	cmp	r4, #1
 8010650:	dc21      	bgt.n	8010696 <_strtod_l+0x51e>
 8010652:	b10b      	cbz	r3, 8010658 <_strtod_l+0x4e0>
 8010654:	4682      	mov	sl, r0
 8010656:	468b      	mov	fp, r1
 8010658:	492c      	ldr	r1, [pc, #176]	@ (801070c <_strtod_l+0x594>)
 801065a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801065e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010662:	4652      	mov	r2, sl
 8010664:	465b      	mov	r3, fp
 8010666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801066a:	f7ef ffd5 	bl	8000618 <__aeabi_dmul>
 801066e:	4b28      	ldr	r3, [pc, #160]	@ (8010710 <_strtod_l+0x598>)
 8010670:	460a      	mov	r2, r1
 8010672:	400b      	ands	r3, r1
 8010674:	4927      	ldr	r1, [pc, #156]	@ (8010714 <_strtod_l+0x59c>)
 8010676:	428b      	cmp	r3, r1
 8010678:	4682      	mov	sl, r0
 801067a:	d898      	bhi.n	80105ae <_strtod_l+0x436>
 801067c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010680:	428b      	cmp	r3, r1
 8010682:	bf86      	itte	hi
 8010684:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010718 <_strtod_l+0x5a0>
 8010688:	f04f 3aff 	movhi.w	sl, #4294967295
 801068c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010690:	2300      	movs	r3, #0
 8010692:	9308      	str	r3, [sp, #32]
 8010694:	e07a      	b.n	801078c <_strtod_l+0x614>
 8010696:	07e2      	lsls	r2, r4, #31
 8010698:	d505      	bpl.n	80106a6 <_strtod_l+0x52e>
 801069a:	9b08      	ldr	r3, [sp, #32]
 801069c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a0:	f7ef ffba 	bl	8000618 <__aeabi_dmul>
 80106a4:	2301      	movs	r3, #1
 80106a6:	9a08      	ldr	r2, [sp, #32]
 80106a8:	3208      	adds	r2, #8
 80106aa:	3601      	adds	r6, #1
 80106ac:	1064      	asrs	r4, r4, #1
 80106ae:	9208      	str	r2, [sp, #32]
 80106b0:	e7cd      	b.n	801064e <_strtod_l+0x4d6>
 80106b2:	d0ed      	beq.n	8010690 <_strtod_l+0x518>
 80106b4:	4264      	negs	r4, r4
 80106b6:	f014 020f 	ands.w	r2, r4, #15
 80106ba:	d00a      	beq.n	80106d2 <_strtod_l+0x55a>
 80106bc:	4b12      	ldr	r3, [pc, #72]	@ (8010708 <_strtod_l+0x590>)
 80106be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106c2:	4650      	mov	r0, sl
 80106c4:	4659      	mov	r1, fp
 80106c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ca:	f7f0 f8cf 	bl	800086c <__aeabi_ddiv>
 80106ce:	4682      	mov	sl, r0
 80106d0:	468b      	mov	fp, r1
 80106d2:	1124      	asrs	r4, r4, #4
 80106d4:	d0dc      	beq.n	8010690 <_strtod_l+0x518>
 80106d6:	2c1f      	cmp	r4, #31
 80106d8:	dd20      	ble.n	801071c <_strtod_l+0x5a4>
 80106da:	2400      	movs	r4, #0
 80106dc:	46a0      	mov	r8, r4
 80106de:	940a      	str	r4, [sp, #40]	@ 0x28
 80106e0:	46a1      	mov	r9, r4
 80106e2:	9a05      	ldr	r2, [sp, #20]
 80106e4:	2322      	movs	r3, #34	@ 0x22
 80106e6:	f04f 0a00 	mov.w	sl, #0
 80106ea:	f04f 0b00 	mov.w	fp, #0
 80106ee:	6013      	str	r3, [r2, #0]
 80106f0:	e768      	b.n	80105c4 <_strtod_l+0x44c>
 80106f2:	bf00      	nop
 80106f4:	08014b6a 	.word	0x08014b6a
 80106f8:	08014d7c 	.word	0x08014d7c
 80106fc:	08014b62 	.word	0x08014b62
 8010700:	08014b99 	.word	0x08014b99
 8010704:	08014e24 	.word	0x08014e24
 8010708:	08014cb0 	.word	0x08014cb0
 801070c:	08014c88 	.word	0x08014c88
 8010710:	7ff00000 	.word	0x7ff00000
 8010714:	7ca00000 	.word	0x7ca00000
 8010718:	7fefffff 	.word	0x7fefffff
 801071c:	f014 0310 	ands.w	r3, r4, #16
 8010720:	bf18      	it	ne
 8010722:	236a      	movne	r3, #106	@ 0x6a
 8010724:	4ea9      	ldr	r6, [pc, #676]	@ (80109cc <_strtod_l+0x854>)
 8010726:	9308      	str	r3, [sp, #32]
 8010728:	4650      	mov	r0, sl
 801072a:	4659      	mov	r1, fp
 801072c:	2300      	movs	r3, #0
 801072e:	07e2      	lsls	r2, r4, #31
 8010730:	d504      	bpl.n	801073c <_strtod_l+0x5c4>
 8010732:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010736:	f7ef ff6f 	bl	8000618 <__aeabi_dmul>
 801073a:	2301      	movs	r3, #1
 801073c:	1064      	asrs	r4, r4, #1
 801073e:	f106 0608 	add.w	r6, r6, #8
 8010742:	d1f4      	bne.n	801072e <_strtod_l+0x5b6>
 8010744:	b10b      	cbz	r3, 801074a <_strtod_l+0x5d2>
 8010746:	4682      	mov	sl, r0
 8010748:	468b      	mov	fp, r1
 801074a:	9b08      	ldr	r3, [sp, #32]
 801074c:	b1b3      	cbz	r3, 801077c <_strtod_l+0x604>
 801074e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010752:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010756:	2b00      	cmp	r3, #0
 8010758:	4659      	mov	r1, fp
 801075a:	dd0f      	ble.n	801077c <_strtod_l+0x604>
 801075c:	2b1f      	cmp	r3, #31
 801075e:	dd55      	ble.n	801080c <_strtod_l+0x694>
 8010760:	2b34      	cmp	r3, #52	@ 0x34
 8010762:	bfde      	ittt	le
 8010764:	f04f 33ff 	movle.w	r3, #4294967295
 8010768:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801076c:	4093      	lslle	r3, r2
 801076e:	f04f 0a00 	mov.w	sl, #0
 8010772:	bfcc      	ite	gt
 8010774:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010778:	ea03 0b01 	andle.w	fp, r3, r1
 801077c:	2200      	movs	r2, #0
 801077e:	2300      	movs	r3, #0
 8010780:	4650      	mov	r0, sl
 8010782:	4659      	mov	r1, fp
 8010784:	f7f0 f9b0 	bl	8000ae8 <__aeabi_dcmpeq>
 8010788:	2800      	cmp	r0, #0
 801078a:	d1a6      	bne.n	80106da <_strtod_l+0x562>
 801078c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010792:	9805      	ldr	r0, [sp, #20]
 8010794:	462b      	mov	r3, r5
 8010796:	463a      	mov	r2, r7
 8010798:	f7ff f8c6 	bl	800f928 <__s2b>
 801079c:	900a      	str	r0, [sp, #40]	@ 0x28
 801079e:	2800      	cmp	r0, #0
 80107a0:	f43f af05 	beq.w	80105ae <_strtod_l+0x436>
 80107a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107a6:	2a00      	cmp	r2, #0
 80107a8:	eba9 0308 	sub.w	r3, r9, r8
 80107ac:	bfa8      	it	ge
 80107ae:	2300      	movge	r3, #0
 80107b0:	9312      	str	r3, [sp, #72]	@ 0x48
 80107b2:	2400      	movs	r4, #0
 80107b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80107b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80107ba:	46a0      	mov	r8, r4
 80107bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107be:	9805      	ldr	r0, [sp, #20]
 80107c0:	6859      	ldr	r1, [r3, #4]
 80107c2:	f7ff f809 	bl	800f7d8 <_Balloc>
 80107c6:	4681      	mov	r9, r0
 80107c8:	2800      	cmp	r0, #0
 80107ca:	f43f aef4 	beq.w	80105b6 <_strtod_l+0x43e>
 80107ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107d0:	691a      	ldr	r2, [r3, #16]
 80107d2:	3202      	adds	r2, #2
 80107d4:	f103 010c 	add.w	r1, r3, #12
 80107d8:	0092      	lsls	r2, r2, #2
 80107da:	300c      	adds	r0, #12
 80107dc:	f7fe f899 	bl	800e912 <memcpy>
 80107e0:	ec4b ab10 	vmov	d0, sl, fp
 80107e4:	9805      	ldr	r0, [sp, #20]
 80107e6:	aa1c      	add	r2, sp, #112	@ 0x70
 80107e8:	a91b      	add	r1, sp, #108	@ 0x6c
 80107ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80107ee:	f7ff fbd7 	bl	800ffa0 <__d2b>
 80107f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80107f4:	2800      	cmp	r0, #0
 80107f6:	f43f aede 	beq.w	80105b6 <_strtod_l+0x43e>
 80107fa:	9805      	ldr	r0, [sp, #20]
 80107fc:	2101      	movs	r1, #1
 80107fe:	f7ff f929 	bl	800fa54 <__i2b>
 8010802:	4680      	mov	r8, r0
 8010804:	b948      	cbnz	r0, 801081a <_strtod_l+0x6a2>
 8010806:	f04f 0800 	mov.w	r8, #0
 801080a:	e6d4      	b.n	80105b6 <_strtod_l+0x43e>
 801080c:	f04f 32ff 	mov.w	r2, #4294967295
 8010810:	fa02 f303 	lsl.w	r3, r2, r3
 8010814:	ea03 0a0a 	and.w	sl, r3, sl
 8010818:	e7b0      	b.n	801077c <_strtod_l+0x604>
 801081a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801081c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801081e:	2d00      	cmp	r5, #0
 8010820:	bfab      	itete	ge
 8010822:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010824:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010826:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010828:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801082a:	bfac      	ite	ge
 801082c:	18ef      	addge	r7, r5, r3
 801082e:	1b5e      	sublt	r6, r3, r5
 8010830:	9b08      	ldr	r3, [sp, #32]
 8010832:	1aed      	subs	r5, r5, r3
 8010834:	4415      	add	r5, r2
 8010836:	4b66      	ldr	r3, [pc, #408]	@ (80109d0 <_strtod_l+0x858>)
 8010838:	3d01      	subs	r5, #1
 801083a:	429d      	cmp	r5, r3
 801083c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010840:	da50      	bge.n	80108e4 <_strtod_l+0x76c>
 8010842:	1b5b      	subs	r3, r3, r5
 8010844:	2b1f      	cmp	r3, #31
 8010846:	eba2 0203 	sub.w	r2, r2, r3
 801084a:	f04f 0101 	mov.w	r1, #1
 801084e:	dc3d      	bgt.n	80108cc <_strtod_l+0x754>
 8010850:	fa01 f303 	lsl.w	r3, r1, r3
 8010854:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010856:	2300      	movs	r3, #0
 8010858:	9310      	str	r3, [sp, #64]	@ 0x40
 801085a:	18bd      	adds	r5, r7, r2
 801085c:	9b08      	ldr	r3, [sp, #32]
 801085e:	42af      	cmp	r7, r5
 8010860:	4416      	add	r6, r2
 8010862:	441e      	add	r6, r3
 8010864:	463b      	mov	r3, r7
 8010866:	bfa8      	it	ge
 8010868:	462b      	movge	r3, r5
 801086a:	42b3      	cmp	r3, r6
 801086c:	bfa8      	it	ge
 801086e:	4633      	movge	r3, r6
 8010870:	2b00      	cmp	r3, #0
 8010872:	bfc2      	ittt	gt
 8010874:	1aed      	subgt	r5, r5, r3
 8010876:	1af6      	subgt	r6, r6, r3
 8010878:	1aff      	subgt	r7, r7, r3
 801087a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801087c:	2b00      	cmp	r3, #0
 801087e:	dd16      	ble.n	80108ae <_strtod_l+0x736>
 8010880:	4641      	mov	r1, r8
 8010882:	9805      	ldr	r0, [sp, #20]
 8010884:	461a      	mov	r2, r3
 8010886:	f7ff f9a5 	bl	800fbd4 <__pow5mult>
 801088a:	4680      	mov	r8, r0
 801088c:	2800      	cmp	r0, #0
 801088e:	d0ba      	beq.n	8010806 <_strtod_l+0x68e>
 8010890:	4601      	mov	r1, r0
 8010892:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010894:	9805      	ldr	r0, [sp, #20]
 8010896:	f7ff f8f3 	bl	800fa80 <__multiply>
 801089a:	900e      	str	r0, [sp, #56]	@ 0x38
 801089c:	2800      	cmp	r0, #0
 801089e:	f43f ae8a 	beq.w	80105b6 <_strtod_l+0x43e>
 80108a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80108a4:	9805      	ldr	r0, [sp, #20]
 80108a6:	f7fe ffd7 	bl	800f858 <_Bfree>
 80108aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80108ae:	2d00      	cmp	r5, #0
 80108b0:	dc1d      	bgt.n	80108ee <_strtod_l+0x776>
 80108b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	dd23      	ble.n	8010900 <_strtod_l+0x788>
 80108b8:	4649      	mov	r1, r9
 80108ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80108bc:	9805      	ldr	r0, [sp, #20]
 80108be:	f7ff f989 	bl	800fbd4 <__pow5mult>
 80108c2:	4681      	mov	r9, r0
 80108c4:	b9e0      	cbnz	r0, 8010900 <_strtod_l+0x788>
 80108c6:	f04f 0900 	mov.w	r9, #0
 80108ca:	e674      	b.n	80105b6 <_strtod_l+0x43e>
 80108cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80108d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80108d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80108d8:	35e2      	adds	r5, #226	@ 0xe2
 80108da:	fa01 f305 	lsl.w	r3, r1, r5
 80108de:	9310      	str	r3, [sp, #64]	@ 0x40
 80108e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80108e2:	e7ba      	b.n	801085a <_strtod_l+0x6e2>
 80108e4:	2300      	movs	r3, #0
 80108e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80108e8:	2301      	movs	r3, #1
 80108ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80108ec:	e7b5      	b.n	801085a <_strtod_l+0x6e2>
 80108ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80108f0:	9805      	ldr	r0, [sp, #20]
 80108f2:	462a      	mov	r2, r5
 80108f4:	f7ff f9c8 	bl	800fc88 <__lshift>
 80108f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d1d9      	bne.n	80108b2 <_strtod_l+0x73a>
 80108fe:	e65a      	b.n	80105b6 <_strtod_l+0x43e>
 8010900:	2e00      	cmp	r6, #0
 8010902:	dd07      	ble.n	8010914 <_strtod_l+0x79c>
 8010904:	4649      	mov	r1, r9
 8010906:	9805      	ldr	r0, [sp, #20]
 8010908:	4632      	mov	r2, r6
 801090a:	f7ff f9bd 	bl	800fc88 <__lshift>
 801090e:	4681      	mov	r9, r0
 8010910:	2800      	cmp	r0, #0
 8010912:	d0d8      	beq.n	80108c6 <_strtod_l+0x74e>
 8010914:	2f00      	cmp	r7, #0
 8010916:	dd08      	ble.n	801092a <_strtod_l+0x7b2>
 8010918:	4641      	mov	r1, r8
 801091a:	9805      	ldr	r0, [sp, #20]
 801091c:	463a      	mov	r2, r7
 801091e:	f7ff f9b3 	bl	800fc88 <__lshift>
 8010922:	4680      	mov	r8, r0
 8010924:	2800      	cmp	r0, #0
 8010926:	f43f ae46 	beq.w	80105b6 <_strtod_l+0x43e>
 801092a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801092c:	9805      	ldr	r0, [sp, #20]
 801092e:	464a      	mov	r2, r9
 8010930:	f7ff fa32 	bl	800fd98 <__mdiff>
 8010934:	4604      	mov	r4, r0
 8010936:	2800      	cmp	r0, #0
 8010938:	f43f ae3d 	beq.w	80105b6 <_strtod_l+0x43e>
 801093c:	68c3      	ldr	r3, [r0, #12]
 801093e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010940:	2300      	movs	r3, #0
 8010942:	60c3      	str	r3, [r0, #12]
 8010944:	4641      	mov	r1, r8
 8010946:	f7ff fa0b 	bl	800fd60 <__mcmp>
 801094a:	2800      	cmp	r0, #0
 801094c:	da46      	bge.n	80109dc <_strtod_l+0x864>
 801094e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010950:	ea53 030a 	orrs.w	r3, r3, sl
 8010954:	d16c      	bne.n	8010a30 <_strtod_l+0x8b8>
 8010956:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801095a:	2b00      	cmp	r3, #0
 801095c:	d168      	bne.n	8010a30 <_strtod_l+0x8b8>
 801095e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010962:	0d1b      	lsrs	r3, r3, #20
 8010964:	051b      	lsls	r3, r3, #20
 8010966:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801096a:	d961      	bls.n	8010a30 <_strtod_l+0x8b8>
 801096c:	6963      	ldr	r3, [r4, #20]
 801096e:	b913      	cbnz	r3, 8010976 <_strtod_l+0x7fe>
 8010970:	6923      	ldr	r3, [r4, #16]
 8010972:	2b01      	cmp	r3, #1
 8010974:	dd5c      	ble.n	8010a30 <_strtod_l+0x8b8>
 8010976:	4621      	mov	r1, r4
 8010978:	2201      	movs	r2, #1
 801097a:	9805      	ldr	r0, [sp, #20]
 801097c:	f7ff f984 	bl	800fc88 <__lshift>
 8010980:	4641      	mov	r1, r8
 8010982:	4604      	mov	r4, r0
 8010984:	f7ff f9ec 	bl	800fd60 <__mcmp>
 8010988:	2800      	cmp	r0, #0
 801098a:	dd51      	ble.n	8010a30 <_strtod_l+0x8b8>
 801098c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010990:	9a08      	ldr	r2, [sp, #32]
 8010992:	0d1b      	lsrs	r3, r3, #20
 8010994:	051b      	lsls	r3, r3, #20
 8010996:	2a00      	cmp	r2, #0
 8010998:	d06b      	beq.n	8010a72 <_strtod_l+0x8fa>
 801099a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801099e:	d868      	bhi.n	8010a72 <_strtod_l+0x8fa>
 80109a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80109a4:	f67f ae9d 	bls.w	80106e2 <_strtod_l+0x56a>
 80109a8:	4b0a      	ldr	r3, [pc, #40]	@ (80109d4 <_strtod_l+0x85c>)
 80109aa:	4650      	mov	r0, sl
 80109ac:	4659      	mov	r1, fp
 80109ae:	2200      	movs	r2, #0
 80109b0:	f7ef fe32 	bl	8000618 <__aeabi_dmul>
 80109b4:	4b08      	ldr	r3, [pc, #32]	@ (80109d8 <_strtod_l+0x860>)
 80109b6:	400b      	ands	r3, r1
 80109b8:	4682      	mov	sl, r0
 80109ba:	468b      	mov	fp, r1
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f47f ae05 	bne.w	80105cc <_strtod_l+0x454>
 80109c2:	9a05      	ldr	r2, [sp, #20]
 80109c4:	2322      	movs	r3, #34	@ 0x22
 80109c6:	6013      	str	r3, [r2, #0]
 80109c8:	e600      	b.n	80105cc <_strtod_l+0x454>
 80109ca:	bf00      	nop
 80109cc:	08014da8 	.word	0x08014da8
 80109d0:	fffffc02 	.word	0xfffffc02
 80109d4:	39500000 	.word	0x39500000
 80109d8:	7ff00000 	.word	0x7ff00000
 80109dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80109e0:	d165      	bne.n	8010aae <_strtod_l+0x936>
 80109e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109e8:	b35a      	cbz	r2, 8010a42 <_strtod_l+0x8ca>
 80109ea:	4a9f      	ldr	r2, [pc, #636]	@ (8010c68 <_strtod_l+0xaf0>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d12b      	bne.n	8010a48 <_strtod_l+0x8d0>
 80109f0:	9b08      	ldr	r3, [sp, #32]
 80109f2:	4651      	mov	r1, sl
 80109f4:	b303      	cbz	r3, 8010a38 <_strtod_l+0x8c0>
 80109f6:	4b9d      	ldr	r3, [pc, #628]	@ (8010c6c <_strtod_l+0xaf4>)
 80109f8:	465a      	mov	r2, fp
 80109fa:	4013      	ands	r3, r2
 80109fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010a00:	f04f 32ff 	mov.w	r2, #4294967295
 8010a04:	d81b      	bhi.n	8010a3e <_strtod_l+0x8c6>
 8010a06:	0d1b      	lsrs	r3, r3, #20
 8010a08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010a10:	4299      	cmp	r1, r3
 8010a12:	d119      	bne.n	8010a48 <_strtod_l+0x8d0>
 8010a14:	4b96      	ldr	r3, [pc, #600]	@ (8010c70 <_strtod_l+0xaf8>)
 8010a16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d102      	bne.n	8010a22 <_strtod_l+0x8aa>
 8010a1c:	3101      	adds	r1, #1
 8010a1e:	f43f adca 	beq.w	80105b6 <_strtod_l+0x43e>
 8010a22:	4b92      	ldr	r3, [pc, #584]	@ (8010c6c <_strtod_l+0xaf4>)
 8010a24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a26:	401a      	ands	r2, r3
 8010a28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010a2c:	f04f 0a00 	mov.w	sl, #0
 8010a30:	9b08      	ldr	r3, [sp, #32]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1b8      	bne.n	80109a8 <_strtod_l+0x830>
 8010a36:	e5c9      	b.n	80105cc <_strtod_l+0x454>
 8010a38:	f04f 33ff 	mov.w	r3, #4294967295
 8010a3c:	e7e8      	b.n	8010a10 <_strtod_l+0x898>
 8010a3e:	4613      	mov	r3, r2
 8010a40:	e7e6      	b.n	8010a10 <_strtod_l+0x898>
 8010a42:	ea53 030a 	orrs.w	r3, r3, sl
 8010a46:	d0a1      	beq.n	801098c <_strtod_l+0x814>
 8010a48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a4a:	b1db      	cbz	r3, 8010a84 <_strtod_l+0x90c>
 8010a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a4e:	4213      	tst	r3, r2
 8010a50:	d0ee      	beq.n	8010a30 <_strtod_l+0x8b8>
 8010a52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a54:	9a08      	ldr	r2, [sp, #32]
 8010a56:	4650      	mov	r0, sl
 8010a58:	4659      	mov	r1, fp
 8010a5a:	b1bb      	cbz	r3, 8010a8c <_strtod_l+0x914>
 8010a5c:	f7ff fb6e 	bl	801013c <sulp>
 8010a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010a64:	ec53 2b10 	vmov	r2, r3, d0
 8010a68:	f7ef fc20 	bl	80002ac <__adddf3>
 8010a6c:	4682      	mov	sl, r0
 8010a6e:	468b      	mov	fp, r1
 8010a70:	e7de      	b.n	8010a30 <_strtod_l+0x8b8>
 8010a72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010a76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010a7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010a7e:	f04f 3aff 	mov.w	sl, #4294967295
 8010a82:	e7d5      	b.n	8010a30 <_strtod_l+0x8b8>
 8010a84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010a86:	ea13 0f0a 	tst.w	r3, sl
 8010a8a:	e7e1      	b.n	8010a50 <_strtod_l+0x8d8>
 8010a8c:	f7ff fb56 	bl	801013c <sulp>
 8010a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010a94:	ec53 2b10 	vmov	r2, r3, d0
 8010a98:	f7ef fc06 	bl	80002a8 <__aeabi_dsub>
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	4682      	mov	sl, r0
 8010aa2:	468b      	mov	fp, r1
 8010aa4:	f7f0 f820 	bl	8000ae8 <__aeabi_dcmpeq>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	d0c1      	beq.n	8010a30 <_strtod_l+0x8b8>
 8010aac:	e619      	b.n	80106e2 <_strtod_l+0x56a>
 8010aae:	4641      	mov	r1, r8
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f7ff facd 	bl	8010050 <__ratio>
 8010ab6:	ec57 6b10 	vmov	r6, r7, d0
 8010aba:	2200      	movs	r2, #0
 8010abc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	4639      	mov	r1, r7
 8010ac4:	f7f0 f824 	bl	8000b10 <__aeabi_dcmple>
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d06f      	beq.n	8010bac <_strtod_l+0xa34>
 8010acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d17a      	bne.n	8010bc8 <_strtod_l+0xa50>
 8010ad2:	f1ba 0f00 	cmp.w	sl, #0
 8010ad6:	d158      	bne.n	8010b8a <_strtod_l+0xa12>
 8010ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d15a      	bne.n	8010b98 <_strtod_l+0xa20>
 8010ae2:	4b64      	ldr	r3, [pc, #400]	@ (8010c74 <_strtod_l+0xafc>)
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	4639      	mov	r1, r7
 8010aea:	f7f0 f807 	bl	8000afc <__aeabi_dcmplt>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d159      	bne.n	8010ba6 <_strtod_l+0xa2e>
 8010af2:	4630      	mov	r0, r6
 8010af4:	4639      	mov	r1, r7
 8010af6:	4b60      	ldr	r3, [pc, #384]	@ (8010c78 <_strtod_l+0xb00>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	f7ef fd8d 	bl	8000618 <__aeabi_dmul>
 8010afe:	4606      	mov	r6, r0
 8010b00:	460f      	mov	r7, r1
 8010b02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010b06:	9606      	str	r6, [sp, #24]
 8010b08:	9307      	str	r3, [sp, #28]
 8010b0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b0e:	4d57      	ldr	r5, [pc, #348]	@ (8010c6c <_strtod_l+0xaf4>)
 8010b10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b16:	401d      	ands	r5, r3
 8010b18:	4b58      	ldr	r3, [pc, #352]	@ (8010c7c <_strtod_l+0xb04>)
 8010b1a:	429d      	cmp	r5, r3
 8010b1c:	f040 80b2 	bne.w	8010c84 <_strtod_l+0xb0c>
 8010b20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010b26:	ec4b ab10 	vmov	d0, sl, fp
 8010b2a:	f7ff f9c9 	bl	800fec0 <__ulp>
 8010b2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b32:	ec51 0b10 	vmov	r0, r1, d0
 8010b36:	f7ef fd6f 	bl	8000618 <__aeabi_dmul>
 8010b3a:	4652      	mov	r2, sl
 8010b3c:	465b      	mov	r3, fp
 8010b3e:	f7ef fbb5 	bl	80002ac <__adddf3>
 8010b42:	460b      	mov	r3, r1
 8010b44:	4949      	ldr	r1, [pc, #292]	@ (8010c6c <_strtod_l+0xaf4>)
 8010b46:	4a4e      	ldr	r2, [pc, #312]	@ (8010c80 <_strtod_l+0xb08>)
 8010b48:	4019      	ands	r1, r3
 8010b4a:	4291      	cmp	r1, r2
 8010b4c:	4682      	mov	sl, r0
 8010b4e:	d942      	bls.n	8010bd6 <_strtod_l+0xa5e>
 8010b50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010b52:	4b47      	ldr	r3, [pc, #284]	@ (8010c70 <_strtod_l+0xaf8>)
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d103      	bne.n	8010b60 <_strtod_l+0x9e8>
 8010b58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	f43f ad2b 	beq.w	80105b6 <_strtod_l+0x43e>
 8010b60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010c70 <_strtod_l+0xaf8>
 8010b64:	f04f 3aff 	mov.w	sl, #4294967295
 8010b68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b6a:	9805      	ldr	r0, [sp, #20]
 8010b6c:	f7fe fe74 	bl	800f858 <_Bfree>
 8010b70:	9805      	ldr	r0, [sp, #20]
 8010b72:	4649      	mov	r1, r9
 8010b74:	f7fe fe70 	bl	800f858 <_Bfree>
 8010b78:	9805      	ldr	r0, [sp, #20]
 8010b7a:	4641      	mov	r1, r8
 8010b7c:	f7fe fe6c 	bl	800f858 <_Bfree>
 8010b80:	9805      	ldr	r0, [sp, #20]
 8010b82:	4621      	mov	r1, r4
 8010b84:	f7fe fe68 	bl	800f858 <_Bfree>
 8010b88:	e618      	b.n	80107bc <_strtod_l+0x644>
 8010b8a:	f1ba 0f01 	cmp.w	sl, #1
 8010b8e:	d103      	bne.n	8010b98 <_strtod_l+0xa20>
 8010b90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f43f ada5 	beq.w	80106e2 <_strtod_l+0x56a>
 8010b98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010c48 <_strtod_l+0xad0>
 8010b9c:	4f35      	ldr	r7, [pc, #212]	@ (8010c74 <_strtod_l+0xafc>)
 8010b9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ba2:	2600      	movs	r6, #0
 8010ba4:	e7b1      	b.n	8010b0a <_strtod_l+0x992>
 8010ba6:	4f34      	ldr	r7, [pc, #208]	@ (8010c78 <_strtod_l+0xb00>)
 8010ba8:	2600      	movs	r6, #0
 8010baa:	e7aa      	b.n	8010b02 <_strtod_l+0x98a>
 8010bac:	4b32      	ldr	r3, [pc, #200]	@ (8010c78 <_strtod_l+0xb00>)
 8010bae:	4630      	mov	r0, r6
 8010bb0:	4639      	mov	r1, r7
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f7ef fd30 	bl	8000618 <__aeabi_dmul>
 8010bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bba:	4606      	mov	r6, r0
 8010bbc:	460f      	mov	r7, r1
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d09f      	beq.n	8010b02 <_strtod_l+0x98a>
 8010bc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010bc6:	e7a0      	b.n	8010b0a <_strtod_l+0x992>
 8010bc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010c50 <_strtod_l+0xad8>
 8010bcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010bd0:	ec57 6b17 	vmov	r6, r7, d7
 8010bd4:	e799      	b.n	8010b0a <_strtod_l+0x992>
 8010bd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010bda:	9b08      	ldr	r3, [sp, #32]
 8010bdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d1c1      	bne.n	8010b68 <_strtod_l+0x9f0>
 8010be4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010be8:	0d1b      	lsrs	r3, r3, #20
 8010bea:	051b      	lsls	r3, r3, #20
 8010bec:	429d      	cmp	r5, r3
 8010bee:	d1bb      	bne.n	8010b68 <_strtod_l+0x9f0>
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	4639      	mov	r1, r7
 8010bf4:	f7f0 f870 	bl	8000cd8 <__aeabi_d2lz>
 8010bf8:	f7ef fce0 	bl	80005bc <__aeabi_l2d>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	460b      	mov	r3, r1
 8010c00:	4630      	mov	r0, r6
 8010c02:	4639      	mov	r1, r7
 8010c04:	f7ef fb50 	bl	80002a8 <__aeabi_dsub>
 8010c08:	460b      	mov	r3, r1
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010c10:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c16:	ea46 060a 	orr.w	r6, r6, sl
 8010c1a:	431e      	orrs	r6, r3
 8010c1c:	d06f      	beq.n	8010cfe <_strtod_l+0xb86>
 8010c1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010c58 <_strtod_l+0xae0>)
 8010c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c24:	f7ef ff6a 	bl	8000afc <__aeabi_dcmplt>
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	f47f accf 	bne.w	80105cc <_strtod_l+0x454>
 8010c2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010c60 <_strtod_l+0xae8>)
 8010c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c38:	f7ef ff7e 	bl	8000b38 <__aeabi_dcmpgt>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	d093      	beq.n	8010b68 <_strtod_l+0x9f0>
 8010c40:	e4c4      	b.n	80105cc <_strtod_l+0x454>
 8010c42:	bf00      	nop
 8010c44:	f3af 8000 	nop.w
 8010c48:	00000000 	.word	0x00000000
 8010c4c:	bff00000 	.word	0xbff00000
 8010c50:	00000000 	.word	0x00000000
 8010c54:	3ff00000 	.word	0x3ff00000
 8010c58:	94a03595 	.word	0x94a03595
 8010c5c:	3fdfffff 	.word	0x3fdfffff
 8010c60:	35afe535 	.word	0x35afe535
 8010c64:	3fe00000 	.word	0x3fe00000
 8010c68:	000fffff 	.word	0x000fffff
 8010c6c:	7ff00000 	.word	0x7ff00000
 8010c70:	7fefffff 	.word	0x7fefffff
 8010c74:	3ff00000 	.word	0x3ff00000
 8010c78:	3fe00000 	.word	0x3fe00000
 8010c7c:	7fe00000 	.word	0x7fe00000
 8010c80:	7c9fffff 	.word	0x7c9fffff
 8010c84:	9b08      	ldr	r3, [sp, #32]
 8010c86:	b323      	cbz	r3, 8010cd2 <_strtod_l+0xb5a>
 8010c88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010c8c:	d821      	bhi.n	8010cd2 <_strtod_l+0xb5a>
 8010c8e:	a328      	add	r3, pc, #160	@ (adr r3, 8010d30 <_strtod_l+0xbb8>)
 8010c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c94:	4630      	mov	r0, r6
 8010c96:	4639      	mov	r1, r7
 8010c98:	f7ef ff3a 	bl	8000b10 <__aeabi_dcmple>
 8010c9c:	b1a0      	cbz	r0, 8010cc8 <_strtod_l+0xb50>
 8010c9e:	4639      	mov	r1, r7
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	f7ef ff91 	bl	8000bc8 <__aeabi_d2uiz>
 8010ca6:	2801      	cmp	r0, #1
 8010ca8:	bf38      	it	cc
 8010caa:	2001      	movcc	r0, #1
 8010cac:	f7ef fc3a 	bl	8000524 <__aeabi_ui2d>
 8010cb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cb2:	4606      	mov	r6, r0
 8010cb4:	460f      	mov	r7, r1
 8010cb6:	b9fb      	cbnz	r3, 8010cf8 <_strtod_l+0xb80>
 8010cb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010cbc:	9014      	str	r0, [sp, #80]	@ 0x50
 8010cbe:	9315      	str	r3, [sp, #84]	@ 0x54
 8010cc0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010cc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010cc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010cca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010cce:	1b5b      	subs	r3, r3, r5
 8010cd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8010cd2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010cd6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010cda:	f7ff f8f1 	bl	800fec0 <__ulp>
 8010cde:	4650      	mov	r0, sl
 8010ce0:	ec53 2b10 	vmov	r2, r3, d0
 8010ce4:	4659      	mov	r1, fp
 8010ce6:	f7ef fc97 	bl	8000618 <__aeabi_dmul>
 8010cea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010cee:	f7ef fadd 	bl	80002ac <__adddf3>
 8010cf2:	4682      	mov	sl, r0
 8010cf4:	468b      	mov	fp, r1
 8010cf6:	e770      	b.n	8010bda <_strtod_l+0xa62>
 8010cf8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010cfc:	e7e0      	b.n	8010cc0 <_strtod_l+0xb48>
 8010cfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8010d38 <_strtod_l+0xbc0>)
 8010d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d04:	f7ef fefa 	bl	8000afc <__aeabi_dcmplt>
 8010d08:	e798      	b.n	8010c3c <_strtod_l+0xac4>
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010d10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d12:	6013      	str	r3, [r2, #0]
 8010d14:	f7ff ba6d 	b.w	80101f2 <_strtod_l+0x7a>
 8010d18:	2a65      	cmp	r2, #101	@ 0x65
 8010d1a:	f43f ab66 	beq.w	80103ea <_strtod_l+0x272>
 8010d1e:	2a45      	cmp	r2, #69	@ 0x45
 8010d20:	f43f ab63 	beq.w	80103ea <_strtod_l+0x272>
 8010d24:	2301      	movs	r3, #1
 8010d26:	f7ff bb9e 	b.w	8010466 <_strtod_l+0x2ee>
 8010d2a:	bf00      	nop
 8010d2c:	f3af 8000 	nop.w
 8010d30:	ffc00000 	.word	0xffc00000
 8010d34:	41dfffff 	.word	0x41dfffff
 8010d38:	94a03595 	.word	0x94a03595
 8010d3c:	3fcfffff 	.word	0x3fcfffff

08010d40 <_strtod_r>:
 8010d40:	4b01      	ldr	r3, [pc, #4]	@ (8010d48 <_strtod_r+0x8>)
 8010d42:	f7ff ba19 	b.w	8010178 <_strtod_l>
 8010d46:	bf00      	nop
 8010d48:	20000460 	.word	0x20000460

08010d4c <__ssputs_r>:
 8010d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d50:	688e      	ldr	r6, [r1, #8]
 8010d52:	461f      	mov	r7, r3
 8010d54:	42be      	cmp	r6, r7
 8010d56:	680b      	ldr	r3, [r1, #0]
 8010d58:	4682      	mov	sl, r0
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	4690      	mov	r8, r2
 8010d5e:	d82d      	bhi.n	8010dbc <__ssputs_r+0x70>
 8010d60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d68:	d026      	beq.n	8010db8 <__ssputs_r+0x6c>
 8010d6a:	6965      	ldr	r5, [r4, #20]
 8010d6c:	6909      	ldr	r1, [r1, #16]
 8010d6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d72:	eba3 0901 	sub.w	r9, r3, r1
 8010d76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d7a:	1c7b      	adds	r3, r7, #1
 8010d7c:	444b      	add	r3, r9
 8010d7e:	106d      	asrs	r5, r5, #1
 8010d80:	429d      	cmp	r5, r3
 8010d82:	bf38      	it	cc
 8010d84:	461d      	movcc	r5, r3
 8010d86:	0553      	lsls	r3, r2, #21
 8010d88:	d527      	bpl.n	8010dda <__ssputs_r+0x8e>
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	f7fe fc98 	bl	800f6c0 <_malloc_r>
 8010d90:	4606      	mov	r6, r0
 8010d92:	b360      	cbz	r0, 8010dee <__ssputs_r+0xa2>
 8010d94:	6921      	ldr	r1, [r4, #16]
 8010d96:	464a      	mov	r2, r9
 8010d98:	f7fd fdbb 	bl	800e912 <memcpy>
 8010d9c:	89a3      	ldrh	r3, [r4, #12]
 8010d9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010da6:	81a3      	strh	r3, [r4, #12]
 8010da8:	6126      	str	r6, [r4, #16]
 8010daa:	6165      	str	r5, [r4, #20]
 8010dac:	444e      	add	r6, r9
 8010dae:	eba5 0509 	sub.w	r5, r5, r9
 8010db2:	6026      	str	r6, [r4, #0]
 8010db4:	60a5      	str	r5, [r4, #8]
 8010db6:	463e      	mov	r6, r7
 8010db8:	42be      	cmp	r6, r7
 8010dba:	d900      	bls.n	8010dbe <__ssputs_r+0x72>
 8010dbc:	463e      	mov	r6, r7
 8010dbe:	6820      	ldr	r0, [r4, #0]
 8010dc0:	4632      	mov	r2, r6
 8010dc2:	4641      	mov	r1, r8
 8010dc4:	f000 f9c6 	bl	8011154 <memmove>
 8010dc8:	68a3      	ldr	r3, [r4, #8]
 8010dca:	1b9b      	subs	r3, r3, r6
 8010dcc:	60a3      	str	r3, [r4, #8]
 8010dce:	6823      	ldr	r3, [r4, #0]
 8010dd0:	4433      	add	r3, r6
 8010dd2:	6023      	str	r3, [r4, #0]
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dda:	462a      	mov	r2, r5
 8010ddc:	f000 fd7d 	bl	80118da <_realloc_r>
 8010de0:	4606      	mov	r6, r0
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d1e0      	bne.n	8010da8 <__ssputs_r+0x5c>
 8010de6:	6921      	ldr	r1, [r4, #16]
 8010de8:	4650      	mov	r0, sl
 8010dea:	f7fe fbf5 	bl	800f5d8 <_free_r>
 8010dee:	230c      	movs	r3, #12
 8010df0:	f8ca 3000 	str.w	r3, [sl]
 8010df4:	89a3      	ldrh	r3, [r4, #12]
 8010df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dfa:	81a3      	strh	r3, [r4, #12]
 8010dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010e00:	e7e9      	b.n	8010dd6 <__ssputs_r+0x8a>
	...

08010e04 <_svfiprintf_r>:
 8010e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e08:	4698      	mov	r8, r3
 8010e0a:	898b      	ldrh	r3, [r1, #12]
 8010e0c:	061b      	lsls	r3, r3, #24
 8010e0e:	b09d      	sub	sp, #116	@ 0x74
 8010e10:	4607      	mov	r7, r0
 8010e12:	460d      	mov	r5, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	d510      	bpl.n	8010e3a <_svfiprintf_r+0x36>
 8010e18:	690b      	ldr	r3, [r1, #16]
 8010e1a:	b973      	cbnz	r3, 8010e3a <_svfiprintf_r+0x36>
 8010e1c:	2140      	movs	r1, #64	@ 0x40
 8010e1e:	f7fe fc4f 	bl	800f6c0 <_malloc_r>
 8010e22:	6028      	str	r0, [r5, #0]
 8010e24:	6128      	str	r0, [r5, #16]
 8010e26:	b930      	cbnz	r0, 8010e36 <_svfiprintf_r+0x32>
 8010e28:	230c      	movs	r3, #12
 8010e2a:	603b      	str	r3, [r7, #0]
 8010e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e30:	b01d      	add	sp, #116	@ 0x74
 8010e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e36:	2340      	movs	r3, #64	@ 0x40
 8010e38:	616b      	str	r3, [r5, #20]
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e3e:	2320      	movs	r3, #32
 8010e40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e48:	2330      	movs	r3, #48	@ 0x30
 8010e4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010fe8 <_svfiprintf_r+0x1e4>
 8010e4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e52:	f04f 0901 	mov.w	r9, #1
 8010e56:	4623      	mov	r3, r4
 8010e58:	469a      	mov	sl, r3
 8010e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e5e:	b10a      	cbz	r2, 8010e64 <_svfiprintf_r+0x60>
 8010e60:	2a25      	cmp	r2, #37	@ 0x25
 8010e62:	d1f9      	bne.n	8010e58 <_svfiprintf_r+0x54>
 8010e64:	ebba 0b04 	subs.w	fp, sl, r4
 8010e68:	d00b      	beq.n	8010e82 <_svfiprintf_r+0x7e>
 8010e6a:	465b      	mov	r3, fp
 8010e6c:	4622      	mov	r2, r4
 8010e6e:	4629      	mov	r1, r5
 8010e70:	4638      	mov	r0, r7
 8010e72:	f7ff ff6b 	bl	8010d4c <__ssputs_r>
 8010e76:	3001      	adds	r0, #1
 8010e78:	f000 80a7 	beq.w	8010fca <_svfiprintf_r+0x1c6>
 8010e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e7e:	445a      	add	r2, fp
 8010e80:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e82:	f89a 3000 	ldrb.w	r3, [sl]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f000 809f 	beq.w	8010fca <_svfiprintf_r+0x1c6>
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e96:	f10a 0a01 	add.w	sl, sl, #1
 8010e9a:	9304      	str	r3, [sp, #16]
 8010e9c:	9307      	str	r3, [sp, #28]
 8010e9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ea2:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ea4:	4654      	mov	r4, sl
 8010ea6:	2205      	movs	r2, #5
 8010ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eac:	484e      	ldr	r0, [pc, #312]	@ (8010fe8 <_svfiprintf_r+0x1e4>)
 8010eae:	f7ef f99f 	bl	80001f0 <memchr>
 8010eb2:	9a04      	ldr	r2, [sp, #16]
 8010eb4:	b9d8      	cbnz	r0, 8010eee <_svfiprintf_r+0xea>
 8010eb6:	06d0      	lsls	r0, r2, #27
 8010eb8:	bf44      	itt	mi
 8010eba:	2320      	movmi	r3, #32
 8010ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ec0:	0711      	lsls	r1, r2, #28
 8010ec2:	bf44      	itt	mi
 8010ec4:	232b      	movmi	r3, #43	@ 0x2b
 8010ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010eca:	f89a 3000 	ldrb.w	r3, [sl]
 8010ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ed0:	d015      	beq.n	8010efe <_svfiprintf_r+0xfa>
 8010ed2:	9a07      	ldr	r2, [sp, #28]
 8010ed4:	4654      	mov	r4, sl
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	f04f 0c0a 	mov.w	ip, #10
 8010edc:	4621      	mov	r1, r4
 8010ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ee2:	3b30      	subs	r3, #48	@ 0x30
 8010ee4:	2b09      	cmp	r3, #9
 8010ee6:	d94b      	bls.n	8010f80 <_svfiprintf_r+0x17c>
 8010ee8:	b1b0      	cbz	r0, 8010f18 <_svfiprintf_r+0x114>
 8010eea:	9207      	str	r2, [sp, #28]
 8010eec:	e014      	b.n	8010f18 <_svfiprintf_r+0x114>
 8010eee:	eba0 0308 	sub.w	r3, r0, r8
 8010ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	9304      	str	r3, [sp, #16]
 8010efa:	46a2      	mov	sl, r4
 8010efc:	e7d2      	b.n	8010ea4 <_svfiprintf_r+0xa0>
 8010efe:	9b03      	ldr	r3, [sp, #12]
 8010f00:	1d19      	adds	r1, r3, #4
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	9103      	str	r1, [sp, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	bfbb      	ittet	lt
 8010f0a:	425b      	neglt	r3, r3
 8010f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8010f10:	9307      	strge	r3, [sp, #28]
 8010f12:	9307      	strlt	r3, [sp, #28]
 8010f14:	bfb8      	it	lt
 8010f16:	9204      	strlt	r2, [sp, #16]
 8010f18:	7823      	ldrb	r3, [r4, #0]
 8010f1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f1c:	d10a      	bne.n	8010f34 <_svfiprintf_r+0x130>
 8010f1e:	7863      	ldrb	r3, [r4, #1]
 8010f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f22:	d132      	bne.n	8010f8a <_svfiprintf_r+0x186>
 8010f24:	9b03      	ldr	r3, [sp, #12]
 8010f26:	1d1a      	adds	r2, r3, #4
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	9203      	str	r2, [sp, #12]
 8010f2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f30:	3402      	adds	r4, #2
 8010f32:	9305      	str	r3, [sp, #20]
 8010f34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010ff8 <_svfiprintf_r+0x1f4>
 8010f38:	7821      	ldrb	r1, [r4, #0]
 8010f3a:	2203      	movs	r2, #3
 8010f3c:	4650      	mov	r0, sl
 8010f3e:	f7ef f957 	bl	80001f0 <memchr>
 8010f42:	b138      	cbz	r0, 8010f54 <_svfiprintf_r+0x150>
 8010f44:	9b04      	ldr	r3, [sp, #16]
 8010f46:	eba0 000a 	sub.w	r0, r0, sl
 8010f4a:	2240      	movs	r2, #64	@ 0x40
 8010f4c:	4082      	lsls	r2, r0
 8010f4e:	4313      	orrs	r3, r2
 8010f50:	3401      	adds	r4, #1
 8010f52:	9304      	str	r3, [sp, #16]
 8010f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f58:	4824      	ldr	r0, [pc, #144]	@ (8010fec <_svfiprintf_r+0x1e8>)
 8010f5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f5e:	2206      	movs	r2, #6
 8010f60:	f7ef f946 	bl	80001f0 <memchr>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	d036      	beq.n	8010fd6 <_svfiprintf_r+0x1d2>
 8010f68:	4b21      	ldr	r3, [pc, #132]	@ (8010ff0 <_svfiprintf_r+0x1ec>)
 8010f6a:	bb1b      	cbnz	r3, 8010fb4 <_svfiprintf_r+0x1b0>
 8010f6c:	9b03      	ldr	r3, [sp, #12]
 8010f6e:	3307      	adds	r3, #7
 8010f70:	f023 0307 	bic.w	r3, r3, #7
 8010f74:	3308      	adds	r3, #8
 8010f76:	9303      	str	r3, [sp, #12]
 8010f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f7a:	4433      	add	r3, r6
 8010f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f7e:	e76a      	b.n	8010e56 <_svfiprintf_r+0x52>
 8010f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f84:	460c      	mov	r4, r1
 8010f86:	2001      	movs	r0, #1
 8010f88:	e7a8      	b.n	8010edc <_svfiprintf_r+0xd8>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	3401      	adds	r4, #1
 8010f8e:	9305      	str	r3, [sp, #20]
 8010f90:	4619      	mov	r1, r3
 8010f92:	f04f 0c0a 	mov.w	ip, #10
 8010f96:	4620      	mov	r0, r4
 8010f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f9c:	3a30      	subs	r2, #48	@ 0x30
 8010f9e:	2a09      	cmp	r2, #9
 8010fa0:	d903      	bls.n	8010faa <_svfiprintf_r+0x1a6>
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d0c6      	beq.n	8010f34 <_svfiprintf_r+0x130>
 8010fa6:	9105      	str	r1, [sp, #20]
 8010fa8:	e7c4      	b.n	8010f34 <_svfiprintf_r+0x130>
 8010faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fae:	4604      	mov	r4, r0
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e7f0      	b.n	8010f96 <_svfiprintf_r+0x192>
 8010fb4:	ab03      	add	r3, sp, #12
 8010fb6:	9300      	str	r3, [sp, #0]
 8010fb8:	462a      	mov	r2, r5
 8010fba:	4b0e      	ldr	r3, [pc, #56]	@ (8010ff4 <_svfiprintf_r+0x1f0>)
 8010fbc:	a904      	add	r1, sp, #16
 8010fbe:	4638      	mov	r0, r7
 8010fc0:	f7fc fd36 	bl	800da30 <_printf_float>
 8010fc4:	1c42      	adds	r2, r0, #1
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	d1d6      	bne.n	8010f78 <_svfiprintf_r+0x174>
 8010fca:	89ab      	ldrh	r3, [r5, #12]
 8010fcc:	065b      	lsls	r3, r3, #25
 8010fce:	f53f af2d 	bmi.w	8010e2c <_svfiprintf_r+0x28>
 8010fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fd4:	e72c      	b.n	8010e30 <_svfiprintf_r+0x2c>
 8010fd6:	ab03      	add	r3, sp, #12
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	462a      	mov	r2, r5
 8010fdc:	4b05      	ldr	r3, [pc, #20]	@ (8010ff4 <_svfiprintf_r+0x1f0>)
 8010fde:	a904      	add	r1, sp, #16
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	f7fc ffbd 	bl	800df60 <_printf_i>
 8010fe6:	e7ed      	b.n	8010fc4 <_svfiprintf_r+0x1c0>
 8010fe8:	08014dd0 	.word	0x08014dd0
 8010fec:	08014dda 	.word	0x08014dda
 8010ff0:	0800da31 	.word	0x0800da31
 8010ff4:	08010d4d 	.word	0x08010d4d
 8010ff8:	08014dd6 	.word	0x08014dd6

08010ffc <__sflush_r>:
 8010ffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011004:	0716      	lsls	r6, r2, #28
 8011006:	4605      	mov	r5, r0
 8011008:	460c      	mov	r4, r1
 801100a:	d454      	bmi.n	80110b6 <__sflush_r+0xba>
 801100c:	684b      	ldr	r3, [r1, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	dc02      	bgt.n	8011018 <__sflush_r+0x1c>
 8011012:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011014:	2b00      	cmp	r3, #0
 8011016:	dd48      	ble.n	80110aa <__sflush_r+0xae>
 8011018:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801101a:	2e00      	cmp	r6, #0
 801101c:	d045      	beq.n	80110aa <__sflush_r+0xae>
 801101e:	2300      	movs	r3, #0
 8011020:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011024:	682f      	ldr	r7, [r5, #0]
 8011026:	6a21      	ldr	r1, [r4, #32]
 8011028:	602b      	str	r3, [r5, #0]
 801102a:	d030      	beq.n	801108e <__sflush_r+0x92>
 801102c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801102e:	89a3      	ldrh	r3, [r4, #12]
 8011030:	0759      	lsls	r1, r3, #29
 8011032:	d505      	bpl.n	8011040 <__sflush_r+0x44>
 8011034:	6863      	ldr	r3, [r4, #4]
 8011036:	1ad2      	subs	r2, r2, r3
 8011038:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801103a:	b10b      	cbz	r3, 8011040 <__sflush_r+0x44>
 801103c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801103e:	1ad2      	subs	r2, r2, r3
 8011040:	2300      	movs	r3, #0
 8011042:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011044:	6a21      	ldr	r1, [r4, #32]
 8011046:	4628      	mov	r0, r5
 8011048:	47b0      	blx	r6
 801104a:	1c43      	adds	r3, r0, #1
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	d106      	bne.n	801105e <__sflush_r+0x62>
 8011050:	6829      	ldr	r1, [r5, #0]
 8011052:	291d      	cmp	r1, #29
 8011054:	d82b      	bhi.n	80110ae <__sflush_r+0xb2>
 8011056:	4a2a      	ldr	r2, [pc, #168]	@ (8011100 <__sflush_r+0x104>)
 8011058:	410a      	asrs	r2, r1
 801105a:	07d6      	lsls	r6, r2, #31
 801105c:	d427      	bmi.n	80110ae <__sflush_r+0xb2>
 801105e:	2200      	movs	r2, #0
 8011060:	6062      	str	r2, [r4, #4]
 8011062:	04d9      	lsls	r1, r3, #19
 8011064:	6922      	ldr	r2, [r4, #16]
 8011066:	6022      	str	r2, [r4, #0]
 8011068:	d504      	bpl.n	8011074 <__sflush_r+0x78>
 801106a:	1c42      	adds	r2, r0, #1
 801106c:	d101      	bne.n	8011072 <__sflush_r+0x76>
 801106e:	682b      	ldr	r3, [r5, #0]
 8011070:	b903      	cbnz	r3, 8011074 <__sflush_r+0x78>
 8011072:	6560      	str	r0, [r4, #84]	@ 0x54
 8011074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011076:	602f      	str	r7, [r5, #0]
 8011078:	b1b9      	cbz	r1, 80110aa <__sflush_r+0xae>
 801107a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801107e:	4299      	cmp	r1, r3
 8011080:	d002      	beq.n	8011088 <__sflush_r+0x8c>
 8011082:	4628      	mov	r0, r5
 8011084:	f7fe faa8 	bl	800f5d8 <_free_r>
 8011088:	2300      	movs	r3, #0
 801108a:	6363      	str	r3, [r4, #52]	@ 0x34
 801108c:	e00d      	b.n	80110aa <__sflush_r+0xae>
 801108e:	2301      	movs	r3, #1
 8011090:	4628      	mov	r0, r5
 8011092:	47b0      	blx	r6
 8011094:	4602      	mov	r2, r0
 8011096:	1c50      	adds	r0, r2, #1
 8011098:	d1c9      	bne.n	801102e <__sflush_r+0x32>
 801109a:	682b      	ldr	r3, [r5, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d0c6      	beq.n	801102e <__sflush_r+0x32>
 80110a0:	2b1d      	cmp	r3, #29
 80110a2:	d001      	beq.n	80110a8 <__sflush_r+0xac>
 80110a4:	2b16      	cmp	r3, #22
 80110a6:	d11e      	bne.n	80110e6 <__sflush_r+0xea>
 80110a8:	602f      	str	r7, [r5, #0]
 80110aa:	2000      	movs	r0, #0
 80110ac:	e022      	b.n	80110f4 <__sflush_r+0xf8>
 80110ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110b2:	b21b      	sxth	r3, r3
 80110b4:	e01b      	b.n	80110ee <__sflush_r+0xf2>
 80110b6:	690f      	ldr	r7, [r1, #16]
 80110b8:	2f00      	cmp	r7, #0
 80110ba:	d0f6      	beq.n	80110aa <__sflush_r+0xae>
 80110bc:	0793      	lsls	r3, r2, #30
 80110be:	680e      	ldr	r6, [r1, #0]
 80110c0:	bf08      	it	eq
 80110c2:	694b      	ldreq	r3, [r1, #20]
 80110c4:	600f      	str	r7, [r1, #0]
 80110c6:	bf18      	it	ne
 80110c8:	2300      	movne	r3, #0
 80110ca:	eba6 0807 	sub.w	r8, r6, r7
 80110ce:	608b      	str	r3, [r1, #8]
 80110d0:	f1b8 0f00 	cmp.w	r8, #0
 80110d4:	dde9      	ble.n	80110aa <__sflush_r+0xae>
 80110d6:	6a21      	ldr	r1, [r4, #32]
 80110d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80110da:	4643      	mov	r3, r8
 80110dc:	463a      	mov	r2, r7
 80110de:	4628      	mov	r0, r5
 80110e0:	47b0      	blx	r6
 80110e2:	2800      	cmp	r0, #0
 80110e4:	dc08      	bgt.n	80110f8 <__sflush_r+0xfc>
 80110e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110ee:	81a3      	strh	r3, [r4, #12]
 80110f0:	f04f 30ff 	mov.w	r0, #4294967295
 80110f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110f8:	4407      	add	r7, r0
 80110fa:	eba8 0800 	sub.w	r8, r8, r0
 80110fe:	e7e7      	b.n	80110d0 <__sflush_r+0xd4>
 8011100:	dfbffffe 	.word	0xdfbffffe

08011104 <_fflush_r>:
 8011104:	b538      	push	{r3, r4, r5, lr}
 8011106:	690b      	ldr	r3, [r1, #16]
 8011108:	4605      	mov	r5, r0
 801110a:	460c      	mov	r4, r1
 801110c:	b913      	cbnz	r3, 8011114 <_fflush_r+0x10>
 801110e:	2500      	movs	r5, #0
 8011110:	4628      	mov	r0, r5
 8011112:	bd38      	pop	{r3, r4, r5, pc}
 8011114:	b118      	cbz	r0, 801111e <_fflush_r+0x1a>
 8011116:	6a03      	ldr	r3, [r0, #32]
 8011118:	b90b      	cbnz	r3, 801111e <_fflush_r+0x1a>
 801111a:	f7fd fae1 	bl	800e6e0 <__sinit>
 801111e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d0f3      	beq.n	801110e <_fflush_r+0xa>
 8011126:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011128:	07d0      	lsls	r0, r2, #31
 801112a:	d404      	bmi.n	8011136 <_fflush_r+0x32>
 801112c:	0599      	lsls	r1, r3, #22
 801112e:	d402      	bmi.n	8011136 <_fflush_r+0x32>
 8011130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011132:	f7fd fbec 	bl	800e90e <__retarget_lock_acquire_recursive>
 8011136:	4628      	mov	r0, r5
 8011138:	4621      	mov	r1, r4
 801113a:	f7ff ff5f 	bl	8010ffc <__sflush_r>
 801113e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011140:	07da      	lsls	r2, r3, #31
 8011142:	4605      	mov	r5, r0
 8011144:	d4e4      	bmi.n	8011110 <_fflush_r+0xc>
 8011146:	89a3      	ldrh	r3, [r4, #12]
 8011148:	059b      	lsls	r3, r3, #22
 801114a:	d4e1      	bmi.n	8011110 <_fflush_r+0xc>
 801114c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801114e:	f7fd fbdf 	bl	800e910 <__retarget_lock_release_recursive>
 8011152:	e7dd      	b.n	8011110 <_fflush_r+0xc>

08011154 <memmove>:
 8011154:	4288      	cmp	r0, r1
 8011156:	b510      	push	{r4, lr}
 8011158:	eb01 0402 	add.w	r4, r1, r2
 801115c:	d902      	bls.n	8011164 <memmove+0x10>
 801115e:	4284      	cmp	r4, r0
 8011160:	4623      	mov	r3, r4
 8011162:	d807      	bhi.n	8011174 <memmove+0x20>
 8011164:	1e43      	subs	r3, r0, #1
 8011166:	42a1      	cmp	r1, r4
 8011168:	d008      	beq.n	801117c <memmove+0x28>
 801116a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801116e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011172:	e7f8      	b.n	8011166 <memmove+0x12>
 8011174:	4402      	add	r2, r0
 8011176:	4601      	mov	r1, r0
 8011178:	428a      	cmp	r2, r1
 801117a:	d100      	bne.n	801117e <memmove+0x2a>
 801117c:	bd10      	pop	{r4, pc}
 801117e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011186:	e7f7      	b.n	8011178 <memmove+0x24>

08011188 <strncmp>:
 8011188:	b510      	push	{r4, lr}
 801118a:	b16a      	cbz	r2, 80111a8 <strncmp+0x20>
 801118c:	3901      	subs	r1, #1
 801118e:	1884      	adds	r4, r0, r2
 8011190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011194:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011198:	429a      	cmp	r2, r3
 801119a:	d103      	bne.n	80111a4 <strncmp+0x1c>
 801119c:	42a0      	cmp	r0, r4
 801119e:	d001      	beq.n	80111a4 <strncmp+0x1c>
 80111a0:	2a00      	cmp	r2, #0
 80111a2:	d1f5      	bne.n	8011190 <strncmp+0x8>
 80111a4:	1ad0      	subs	r0, r2, r3
 80111a6:	bd10      	pop	{r4, pc}
 80111a8:	4610      	mov	r0, r2
 80111aa:	e7fc      	b.n	80111a6 <strncmp+0x1e>

080111ac <_sbrk_r>:
 80111ac:	b538      	push	{r3, r4, r5, lr}
 80111ae:	4d06      	ldr	r5, [pc, #24]	@ (80111c8 <_sbrk_r+0x1c>)
 80111b0:	2300      	movs	r3, #0
 80111b2:	4604      	mov	r4, r0
 80111b4:	4608      	mov	r0, r1
 80111b6:	602b      	str	r3, [r5, #0]
 80111b8:	f7f8 fb0c 	bl	80097d4 <_sbrk>
 80111bc:	1c43      	adds	r3, r0, #1
 80111be:	d102      	bne.n	80111c6 <_sbrk_r+0x1a>
 80111c0:	682b      	ldr	r3, [r5, #0]
 80111c2:	b103      	cbz	r3, 80111c6 <_sbrk_r+0x1a>
 80111c4:	6023      	str	r3, [r4, #0]
 80111c6:	bd38      	pop	{r3, r4, r5, pc}
 80111c8:	200055f4 	.word	0x200055f4
 80111cc:	00000000 	.word	0x00000000

080111d0 <nan>:
 80111d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80111d8 <nan+0x8>
 80111d4:	4770      	bx	lr
 80111d6:	bf00      	nop
 80111d8:	00000000 	.word	0x00000000
 80111dc:	7ff80000 	.word	0x7ff80000

080111e0 <__assert_func>:
 80111e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111e2:	4614      	mov	r4, r2
 80111e4:	461a      	mov	r2, r3
 80111e6:	4b09      	ldr	r3, [pc, #36]	@ (801120c <__assert_func+0x2c>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4605      	mov	r5, r0
 80111ec:	68d8      	ldr	r0, [r3, #12]
 80111ee:	b954      	cbnz	r4, 8011206 <__assert_func+0x26>
 80111f0:	4b07      	ldr	r3, [pc, #28]	@ (8011210 <__assert_func+0x30>)
 80111f2:	461c      	mov	r4, r3
 80111f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111f8:	9100      	str	r1, [sp, #0]
 80111fa:	462b      	mov	r3, r5
 80111fc:	4905      	ldr	r1, [pc, #20]	@ (8011214 <__assert_func+0x34>)
 80111fe:	f000 fba7 	bl	8011950 <fiprintf>
 8011202:	f000 fbb7 	bl	8011974 <abort>
 8011206:	4b04      	ldr	r3, [pc, #16]	@ (8011218 <__assert_func+0x38>)
 8011208:	e7f4      	b.n	80111f4 <__assert_func+0x14>
 801120a:	bf00      	nop
 801120c:	20000410 	.word	0x20000410
 8011210:	08014e24 	.word	0x08014e24
 8011214:	08014df6 	.word	0x08014df6
 8011218:	08014de9 	.word	0x08014de9

0801121c <_calloc_r>:
 801121c:	b570      	push	{r4, r5, r6, lr}
 801121e:	fba1 5402 	umull	r5, r4, r1, r2
 8011222:	b93c      	cbnz	r4, 8011234 <_calloc_r+0x18>
 8011224:	4629      	mov	r1, r5
 8011226:	f7fe fa4b 	bl	800f6c0 <_malloc_r>
 801122a:	4606      	mov	r6, r0
 801122c:	b928      	cbnz	r0, 801123a <_calloc_r+0x1e>
 801122e:	2600      	movs	r6, #0
 8011230:	4630      	mov	r0, r6
 8011232:	bd70      	pop	{r4, r5, r6, pc}
 8011234:	220c      	movs	r2, #12
 8011236:	6002      	str	r2, [r0, #0]
 8011238:	e7f9      	b.n	801122e <_calloc_r+0x12>
 801123a:	462a      	mov	r2, r5
 801123c:	4621      	mov	r1, r4
 801123e:	f7fd fae8 	bl	800e812 <memset>
 8011242:	e7f5      	b.n	8011230 <_calloc_r+0x14>

08011244 <rshift>:
 8011244:	6903      	ldr	r3, [r0, #16]
 8011246:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801124a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801124e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011252:	f100 0414 	add.w	r4, r0, #20
 8011256:	dd45      	ble.n	80112e4 <rshift+0xa0>
 8011258:	f011 011f 	ands.w	r1, r1, #31
 801125c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011264:	d10c      	bne.n	8011280 <rshift+0x3c>
 8011266:	f100 0710 	add.w	r7, r0, #16
 801126a:	4629      	mov	r1, r5
 801126c:	42b1      	cmp	r1, r6
 801126e:	d334      	bcc.n	80112da <rshift+0x96>
 8011270:	1a9b      	subs	r3, r3, r2
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	1eea      	subs	r2, r5, #3
 8011276:	4296      	cmp	r6, r2
 8011278:	bf38      	it	cc
 801127a:	2300      	movcc	r3, #0
 801127c:	4423      	add	r3, r4
 801127e:	e015      	b.n	80112ac <rshift+0x68>
 8011280:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011284:	f1c1 0820 	rsb	r8, r1, #32
 8011288:	40cf      	lsrs	r7, r1
 801128a:	f105 0e04 	add.w	lr, r5, #4
 801128e:	46a1      	mov	r9, r4
 8011290:	4576      	cmp	r6, lr
 8011292:	46f4      	mov	ip, lr
 8011294:	d815      	bhi.n	80112c2 <rshift+0x7e>
 8011296:	1a9a      	subs	r2, r3, r2
 8011298:	0092      	lsls	r2, r2, #2
 801129a:	3a04      	subs	r2, #4
 801129c:	3501      	adds	r5, #1
 801129e:	42ae      	cmp	r6, r5
 80112a0:	bf38      	it	cc
 80112a2:	2200      	movcc	r2, #0
 80112a4:	18a3      	adds	r3, r4, r2
 80112a6:	50a7      	str	r7, [r4, r2]
 80112a8:	b107      	cbz	r7, 80112ac <rshift+0x68>
 80112aa:	3304      	adds	r3, #4
 80112ac:	1b1a      	subs	r2, r3, r4
 80112ae:	42a3      	cmp	r3, r4
 80112b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80112b4:	bf08      	it	eq
 80112b6:	2300      	moveq	r3, #0
 80112b8:	6102      	str	r2, [r0, #16]
 80112ba:	bf08      	it	eq
 80112bc:	6143      	streq	r3, [r0, #20]
 80112be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112c2:	f8dc c000 	ldr.w	ip, [ip]
 80112c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80112ca:	ea4c 0707 	orr.w	r7, ip, r7
 80112ce:	f849 7b04 	str.w	r7, [r9], #4
 80112d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80112d6:	40cf      	lsrs	r7, r1
 80112d8:	e7da      	b.n	8011290 <rshift+0x4c>
 80112da:	f851 cb04 	ldr.w	ip, [r1], #4
 80112de:	f847 cf04 	str.w	ip, [r7, #4]!
 80112e2:	e7c3      	b.n	801126c <rshift+0x28>
 80112e4:	4623      	mov	r3, r4
 80112e6:	e7e1      	b.n	80112ac <rshift+0x68>

080112e8 <__hexdig_fun>:
 80112e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80112ec:	2b09      	cmp	r3, #9
 80112ee:	d802      	bhi.n	80112f6 <__hexdig_fun+0xe>
 80112f0:	3820      	subs	r0, #32
 80112f2:	b2c0      	uxtb	r0, r0
 80112f4:	4770      	bx	lr
 80112f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80112fa:	2b05      	cmp	r3, #5
 80112fc:	d801      	bhi.n	8011302 <__hexdig_fun+0x1a>
 80112fe:	3847      	subs	r0, #71	@ 0x47
 8011300:	e7f7      	b.n	80112f2 <__hexdig_fun+0xa>
 8011302:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011306:	2b05      	cmp	r3, #5
 8011308:	d801      	bhi.n	801130e <__hexdig_fun+0x26>
 801130a:	3827      	subs	r0, #39	@ 0x27
 801130c:	e7f1      	b.n	80112f2 <__hexdig_fun+0xa>
 801130e:	2000      	movs	r0, #0
 8011310:	4770      	bx	lr
	...

08011314 <__gethex>:
 8011314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011318:	b085      	sub	sp, #20
 801131a:	468a      	mov	sl, r1
 801131c:	9302      	str	r3, [sp, #8]
 801131e:	680b      	ldr	r3, [r1, #0]
 8011320:	9001      	str	r0, [sp, #4]
 8011322:	4690      	mov	r8, r2
 8011324:	1c9c      	adds	r4, r3, #2
 8011326:	46a1      	mov	r9, r4
 8011328:	f814 0b01 	ldrb.w	r0, [r4], #1
 801132c:	2830      	cmp	r0, #48	@ 0x30
 801132e:	d0fa      	beq.n	8011326 <__gethex+0x12>
 8011330:	eba9 0303 	sub.w	r3, r9, r3
 8011334:	f1a3 0b02 	sub.w	fp, r3, #2
 8011338:	f7ff ffd6 	bl	80112e8 <__hexdig_fun>
 801133c:	4605      	mov	r5, r0
 801133e:	2800      	cmp	r0, #0
 8011340:	d168      	bne.n	8011414 <__gethex+0x100>
 8011342:	49a0      	ldr	r1, [pc, #640]	@ (80115c4 <__gethex+0x2b0>)
 8011344:	2201      	movs	r2, #1
 8011346:	4648      	mov	r0, r9
 8011348:	f7ff ff1e 	bl	8011188 <strncmp>
 801134c:	4607      	mov	r7, r0
 801134e:	2800      	cmp	r0, #0
 8011350:	d167      	bne.n	8011422 <__gethex+0x10e>
 8011352:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011356:	4626      	mov	r6, r4
 8011358:	f7ff ffc6 	bl	80112e8 <__hexdig_fun>
 801135c:	2800      	cmp	r0, #0
 801135e:	d062      	beq.n	8011426 <__gethex+0x112>
 8011360:	4623      	mov	r3, r4
 8011362:	7818      	ldrb	r0, [r3, #0]
 8011364:	2830      	cmp	r0, #48	@ 0x30
 8011366:	4699      	mov	r9, r3
 8011368:	f103 0301 	add.w	r3, r3, #1
 801136c:	d0f9      	beq.n	8011362 <__gethex+0x4e>
 801136e:	f7ff ffbb 	bl	80112e8 <__hexdig_fun>
 8011372:	fab0 f580 	clz	r5, r0
 8011376:	096d      	lsrs	r5, r5, #5
 8011378:	f04f 0b01 	mov.w	fp, #1
 801137c:	464a      	mov	r2, r9
 801137e:	4616      	mov	r6, r2
 8011380:	3201      	adds	r2, #1
 8011382:	7830      	ldrb	r0, [r6, #0]
 8011384:	f7ff ffb0 	bl	80112e8 <__hexdig_fun>
 8011388:	2800      	cmp	r0, #0
 801138a:	d1f8      	bne.n	801137e <__gethex+0x6a>
 801138c:	498d      	ldr	r1, [pc, #564]	@ (80115c4 <__gethex+0x2b0>)
 801138e:	2201      	movs	r2, #1
 8011390:	4630      	mov	r0, r6
 8011392:	f7ff fef9 	bl	8011188 <strncmp>
 8011396:	2800      	cmp	r0, #0
 8011398:	d13f      	bne.n	801141a <__gethex+0x106>
 801139a:	b944      	cbnz	r4, 80113ae <__gethex+0x9a>
 801139c:	1c74      	adds	r4, r6, #1
 801139e:	4622      	mov	r2, r4
 80113a0:	4616      	mov	r6, r2
 80113a2:	3201      	adds	r2, #1
 80113a4:	7830      	ldrb	r0, [r6, #0]
 80113a6:	f7ff ff9f 	bl	80112e8 <__hexdig_fun>
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d1f8      	bne.n	80113a0 <__gethex+0x8c>
 80113ae:	1ba4      	subs	r4, r4, r6
 80113b0:	00a7      	lsls	r7, r4, #2
 80113b2:	7833      	ldrb	r3, [r6, #0]
 80113b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80113b8:	2b50      	cmp	r3, #80	@ 0x50
 80113ba:	d13e      	bne.n	801143a <__gethex+0x126>
 80113bc:	7873      	ldrb	r3, [r6, #1]
 80113be:	2b2b      	cmp	r3, #43	@ 0x2b
 80113c0:	d033      	beq.n	801142a <__gethex+0x116>
 80113c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80113c4:	d034      	beq.n	8011430 <__gethex+0x11c>
 80113c6:	1c71      	adds	r1, r6, #1
 80113c8:	2400      	movs	r4, #0
 80113ca:	7808      	ldrb	r0, [r1, #0]
 80113cc:	f7ff ff8c 	bl	80112e8 <__hexdig_fun>
 80113d0:	1e43      	subs	r3, r0, #1
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	2b18      	cmp	r3, #24
 80113d6:	d830      	bhi.n	801143a <__gethex+0x126>
 80113d8:	f1a0 0210 	sub.w	r2, r0, #16
 80113dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80113e0:	f7ff ff82 	bl	80112e8 <__hexdig_fun>
 80113e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80113e8:	fa5f fc8c 	uxtb.w	ip, ip
 80113ec:	f1bc 0f18 	cmp.w	ip, #24
 80113f0:	f04f 030a 	mov.w	r3, #10
 80113f4:	d91e      	bls.n	8011434 <__gethex+0x120>
 80113f6:	b104      	cbz	r4, 80113fa <__gethex+0xe6>
 80113f8:	4252      	negs	r2, r2
 80113fa:	4417      	add	r7, r2
 80113fc:	f8ca 1000 	str.w	r1, [sl]
 8011400:	b1ed      	cbz	r5, 801143e <__gethex+0x12a>
 8011402:	f1bb 0f00 	cmp.w	fp, #0
 8011406:	bf0c      	ite	eq
 8011408:	2506      	moveq	r5, #6
 801140a:	2500      	movne	r5, #0
 801140c:	4628      	mov	r0, r5
 801140e:	b005      	add	sp, #20
 8011410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011414:	2500      	movs	r5, #0
 8011416:	462c      	mov	r4, r5
 8011418:	e7b0      	b.n	801137c <__gethex+0x68>
 801141a:	2c00      	cmp	r4, #0
 801141c:	d1c7      	bne.n	80113ae <__gethex+0x9a>
 801141e:	4627      	mov	r7, r4
 8011420:	e7c7      	b.n	80113b2 <__gethex+0x9e>
 8011422:	464e      	mov	r6, r9
 8011424:	462f      	mov	r7, r5
 8011426:	2501      	movs	r5, #1
 8011428:	e7c3      	b.n	80113b2 <__gethex+0x9e>
 801142a:	2400      	movs	r4, #0
 801142c:	1cb1      	adds	r1, r6, #2
 801142e:	e7cc      	b.n	80113ca <__gethex+0xb6>
 8011430:	2401      	movs	r4, #1
 8011432:	e7fb      	b.n	801142c <__gethex+0x118>
 8011434:	fb03 0002 	mla	r0, r3, r2, r0
 8011438:	e7ce      	b.n	80113d8 <__gethex+0xc4>
 801143a:	4631      	mov	r1, r6
 801143c:	e7de      	b.n	80113fc <__gethex+0xe8>
 801143e:	eba6 0309 	sub.w	r3, r6, r9
 8011442:	3b01      	subs	r3, #1
 8011444:	4629      	mov	r1, r5
 8011446:	2b07      	cmp	r3, #7
 8011448:	dc0a      	bgt.n	8011460 <__gethex+0x14c>
 801144a:	9801      	ldr	r0, [sp, #4]
 801144c:	f7fe f9c4 	bl	800f7d8 <_Balloc>
 8011450:	4604      	mov	r4, r0
 8011452:	b940      	cbnz	r0, 8011466 <__gethex+0x152>
 8011454:	4b5c      	ldr	r3, [pc, #368]	@ (80115c8 <__gethex+0x2b4>)
 8011456:	4602      	mov	r2, r0
 8011458:	21e4      	movs	r1, #228	@ 0xe4
 801145a:	485c      	ldr	r0, [pc, #368]	@ (80115cc <__gethex+0x2b8>)
 801145c:	f7ff fec0 	bl	80111e0 <__assert_func>
 8011460:	3101      	adds	r1, #1
 8011462:	105b      	asrs	r3, r3, #1
 8011464:	e7ef      	b.n	8011446 <__gethex+0x132>
 8011466:	f100 0a14 	add.w	sl, r0, #20
 801146a:	2300      	movs	r3, #0
 801146c:	4655      	mov	r5, sl
 801146e:	469b      	mov	fp, r3
 8011470:	45b1      	cmp	r9, r6
 8011472:	d337      	bcc.n	80114e4 <__gethex+0x1d0>
 8011474:	f845 bb04 	str.w	fp, [r5], #4
 8011478:	eba5 050a 	sub.w	r5, r5, sl
 801147c:	10ad      	asrs	r5, r5, #2
 801147e:	6125      	str	r5, [r4, #16]
 8011480:	4658      	mov	r0, fp
 8011482:	f7fe fa9b 	bl	800f9bc <__hi0bits>
 8011486:	016d      	lsls	r5, r5, #5
 8011488:	f8d8 6000 	ldr.w	r6, [r8]
 801148c:	1a2d      	subs	r5, r5, r0
 801148e:	42b5      	cmp	r5, r6
 8011490:	dd54      	ble.n	801153c <__gethex+0x228>
 8011492:	1bad      	subs	r5, r5, r6
 8011494:	4629      	mov	r1, r5
 8011496:	4620      	mov	r0, r4
 8011498:	f7fe fe2f 	bl	80100fa <__any_on>
 801149c:	4681      	mov	r9, r0
 801149e:	b178      	cbz	r0, 80114c0 <__gethex+0x1ac>
 80114a0:	1e6b      	subs	r3, r5, #1
 80114a2:	1159      	asrs	r1, r3, #5
 80114a4:	f003 021f 	and.w	r2, r3, #31
 80114a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80114ac:	f04f 0901 	mov.w	r9, #1
 80114b0:	fa09 f202 	lsl.w	r2, r9, r2
 80114b4:	420a      	tst	r2, r1
 80114b6:	d003      	beq.n	80114c0 <__gethex+0x1ac>
 80114b8:	454b      	cmp	r3, r9
 80114ba:	dc36      	bgt.n	801152a <__gethex+0x216>
 80114bc:	f04f 0902 	mov.w	r9, #2
 80114c0:	4629      	mov	r1, r5
 80114c2:	4620      	mov	r0, r4
 80114c4:	f7ff febe 	bl	8011244 <rshift>
 80114c8:	442f      	add	r7, r5
 80114ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80114ce:	42bb      	cmp	r3, r7
 80114d0:	da42      	bge.n	8011558 <__gethex+0x244>
 80114d2:	9801      	ldr	r0, [sp, #4]
 80114d4:	4621      	mov	r1, r4
 80114d6:	f7fe f9bf 	bl	800f858 <_Bfree>
 80114da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114dc:	2300      	movs	r3, #0
 80114de:	6013      	str	r3, [r2, #0]
 80114e0:	25a3      	movs	r5, #163	@ 0xa3
 80114e2:	e793      	b.n	801140c <__gethex+0xf8>
 80114e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80114e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80114ea:	d012      	beq.n	8011512 <__gethex+0x1fe>
 80114ec:	2b20      	cmp	r3, #32
 80114ee:	d104      	bne.n	80114fa <__gethex+0x1e6>
 80114f0:	f845 bb04 	str.w	fp, [r5], #4
 80114f4:	f04f 0b00 	mov.w	fp, #0
 80114f8:	465b      	mov	r3, fp
 80114fa:	7830      	ldrb	r0, [r6, #0]
 80114fc:	9303      	str	r3, [sp, #12]
 80114fe:	f7ff fef3 	bl	80112e8 <__hexdig_fun>
 8011502:	9b03      	ldr	r3, [sp, #12]
 8011504:	f000 000f 	and.w	r0, r0, #15
 8011508:	4098      	lsls	r0, r3
 801150a:	ea4b 0b00 	orr.w	fp, fp, r0
 801150e:	3304      	adds	r3, #4
 8011510:	e7ae      	b.n	8011470 <__gethex+0x15c>
 8011512:	45b1      	cmp	r9, r6
 8011514:	d8ea      	bhi.n	80114ec <__gethex+0x1d8>
 8011516:	492b      	ldr	r1, [pc, #172]	@ (80115c4 <__gethex+0x2b0>)
 8011518:	9303      	str	r3, [sp, #12]
 801151a:	2201      	movs	r2, #1
 801151c:	4630      	mov	r0, r6
 801151e:	f7ff fe33 	bl	8011188 <strncmp>
 8011522:	9b03      	ldr	r3, [sp, #12]
 8011524:	2800      	cmp	r0, #0
 8011526:	d1e1      	bne.n	80114ec <__gethex+0x1d8>
 8011528:	e7a2      	b.n	8011470 <__gethex+0x15c>
 801152a:	1ea9      	subs	r1, r5, #2
 801152c:	4620      	mov	r0, r4
 801152e:	f7fe fde4 	bl	80100fa <__any_on>
 8011532:	2800      	cmp	r0, #0
 8011534:	d0c2      	beq.n	80114bc <__gethex+0x1a8>
 8011536:	f04f 0903 	mov.w	r9, #3
 801153a:	e7c1      	b.n	80114c0 <__gethex+0x1ac>
 801153c:	da09      	bge.n	8011552 <__gethex+0x23e>
 801153e:	1b75      	subs	r5, r6, r5
 8011540:	4621      	mov	r1, r4
 8011542:	9801      	ldr	r0, [sp, #4]
 8011544:	462a      	mov	r2, r5
 8011546:	f7fe fb9f 	bl	800fc88 <__lshift>
 801154a:	1b7f      	subs	r7, r7, r5
 801154c:	4604      	mov	r4, r0
 801154e:	f100 0a14 	add.w	sl, r0, #20
 8011552:	f04f 0900 	mov.w	r9, #0
 8011556:	e7b8      	b.n	80114ca <__gethex+0x1b6>
 8011558:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801155c:	42bd      	cmp	r5, r7
 801155e:	dd6f      	ble.n	8011640 <__gethex+0x32c>
 8011560:	1bed      	subs	r5, r5, r7
 8011562:	42ae      	cmp	r6, r5
 8011564:	dc34      	bgt.n	80115d0 <__gethex+0x2bc>
 8011566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801156a:	2b02      	cmp	r3, #2
 801156c:	d022      	beq.n	80115b4 <__gethex+0x2a0>
 801156e:	2b03      	cmp	r3, #3
 8011570:	d024      	beq.n	80115bc <__gethex+0x2a8>
 8011572:	2b01      	cmp	r3, #1
 8011574:	d115      	bne.n	80115a2 <__gethex+0x28e>
 8011576:	42ae      	cmp	r6, r5
 8011578:	d113      	bne.n	80115a2 <__gethex+0x28e>
 801157a:	2e01      	cmp	r6, #1
 801157c:	d10b      	bne.n	8011596 <__gethex+0x282>
 801157e:	9a02      	ldr	r2, [sp, #8]
 8011580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011584:	6013      	str	r3, [r2, #0]
 8011586:	2301      	movs	r3, #1
 8011588:	6123      	str	r3, [r4, #16]
 801158a:	f8ca 3000 	str.w	r3, [sl]
 801158e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011590:	2562      	movs	r5, #98	@ 0x62
 8011592:	601c      	str	r4, [r3, #0]
 8011594:	e73a      	b.n	801140c <__gethex+0xf8>
 8011596:	1e71      	subs	r1, r6, #1
 8011598:	4620      	mov	r0, r4
 801159a:	f7fe fdae 	bl	80100fa <__any_on>
 801159e:	2800      	cmp	r0, #0
 80115a0:	d1ed      	bne.n	801157e <__gethex+0x26a>
 80115a2:	9801      	ldr	r0, [sp, #4]
 80115a4:	4621      	mov	r1, r4
 80115a6:	f7fe f957 	bl	800f858 <_Bfree>
 80115aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115ac:	2300      	movs	r3, #0
 80115ae:	6013      	str	r3, [r2, #0]
 80115b0:	2550      	movs	r5, #80	@ 0x50
 80115b2:	e72b      	b.n	801140c <__gethex+0xf8>
 80115b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d1f3      	bne.n	80115a2 <__gethex+0x28e>
 80115ba:	e7e0      	b.n	801157e <__gethex+0x26a>
 80115bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d1dd      	bne.n	801157e <__gethex+0x26a>
 80115c2:	e7ee      	b.n	80115a2 <__gethex+0x28e>
 80115c4:	08014d78 	.word	0x08014d78
 80115c8:	08014c12 	.word	0x08014c12
 80115cc:	08014e25 	.word	0x08014e25
 80115d0:	1e6f      	subs	r7, r5, #1
 80115d2:	f1b9 0f00 	cmp.w	r9, #0
 80115d6:	d130      	bne.n	801163a <__gethex+0x326>
 80115d8:	b127      	cbz	r7, 80115e4 <__gethex+0x2d0>
 80115da:	4639      	mov	r1, r7
 80115dc:	4620      	mov	r0, r4
 80115de:	f7fe fd8c 	bl	80100fa <__any_on>
 80115e2:	4681      	mov	r9, r0
 80115e4:	117a      	asrs	r2, r7, #5
 80115e6:	2301      	movs	r3, #1
 80115e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80115ec:	f007 071f 	and.w	r7, r7, #31
 80115f0:	40bb      	lsls	r3, r7
 80115f2:	4213      	tst	r3, r2
 80115f4:	4629      	mov	r1, r5
 80115f6:	4620      	mov	r0, r4
 80115f8:	bf18      	it	ne
 80115fa:	f049 0902 	orrne.w	r9, r9, #2
 80115fe:	f7ff fe21 	bl	8011244 <rshift>
 8011602:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011606:	1b76      	subs	r6, r6, r5
 8011608:	2502      	movs	r5, #2
 801160a:	f1b9 0f00 	cmp.w	r9, #0
 801160e:	d047      	beq.n	80116a0 <__gethex+0x38c>
 8011610:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011614:	2b02      	cmp	r3, #2
 8011616:	d015      	beq.n	8011644 <__gethex+0x330>
 8011618:	2b03      	cmp	r3, #3
 801161a:	d017      	beq.n	801164c <__gethex+0x338>
 801161c:	2b01      	cmp	r3, #1
 801161e:	d109      	bne.n	8011634 <__gethex+0x320>
 8011620:	f019 0f02 	tst.w	r9, #2
 8011624:	d006      	beq.n	8011634 <__gethex+0x320>
 8011626:	f8da 3000 	ldr.w	r3, [sl]
 801162a:	ea49 0903 	orr.w	r9, r9, r3
 801162e:	f019 0f01 	tst.w	r9, #1
 8011632:	d10e      	bne.n	8011652 <__gethex+0x33e>
 8011634:	f045 0510 	orr.w	r5, r5, #16
 8011638:	e032      	b.n	80116a0 <__gethex+0x38c>
 801163a:	f04f 0901 	mov.w	r9, #1
 801163e:	e7d1      	b.n	80115e4 <__gethex+0x2d0>
 8011640:	2501      	movs	r5, #1
 8011642:	e7e2      	b.n	801160a <__gethex+0x2f6>
 8011644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011646:	f1c3 0301 	rsb	r3, r3, #1
 801164a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801164c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801164e:	2b00      	cmp	r3, #0
 8011650:	d0f0      	beq.n	8011634 <__gethex+0x320>
 8011652:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011656:	f104 0314 	add.w	r3, r4, #20
 801165a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801165e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011662:	f04f 0c00 	mov.w	ip, #0
 8011666:	4618      	mov	r0, r3
 8011668:	f853 2b04 	ldr.w	r2, [r3], #4
 801166c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011670:	d01b      	beq.n	80116aa <__gethex+0x396>
 8011672:	3201      	adds	r2, #1
 8011674:	6002      	str	r2, [r0, #0]
 8011676:	2d02      	cmp	r5, #2
 8011678:	f104 0314 	add.w	r3, r4, #20
 801167c:	d13c      	bne.n	80116f8 <__gethex+0x3e4>
 801167e:	f8d8 2000 	ldr.w	r2, [r8]
 8011682:	3a01      	subs	r2, #1
 8011684:	42b2      	cmp	r2, r6
 8011686:	d109      	bne.n	801169c <__gethex+0x388>
 8011688:	1171      	asrs	r1, r6, #5
 801168a:	2201      	movs	r2, #1
 801168c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011690:	f006 061f 	and.w	r6, r6, #31
 8011694:	fa02 f606 	lsl.w	r6, r2, r6
 8011698:	421e      	tst	r6, r3
 801169a:	d13a      	bne.n	8011712 <__gethex+0x3fe>
 801169c:	f045 0520 	orr.w	r5, r5, #32
 80116a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116a2:	601c      	str	r4, [r3, #0]
 80116a4:	9b02      	ldr	r3, [sp, #8]
 80116a6:	601f      	str	r7, [r3, #0]
 80116a8:	e6b0      	b.n	801140c <__gethex+0xf8>
 80116aa:	4299      	cmp	r1, r3
 80116ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80116b0:	d8d9      	bhi.n	8011666 <__gethex+0x352>
 80116b2:	68a3      	ldr	r3, [r4, #8]
 80116b4:	459b      	cmp	fp, r3
 80116b6:	db17      	blt.n	80116e8 <__gethex+0x3d4>
 80116b8:	6861      	ldr	r1, [r4, #4]
 80116ba:	9801      	ldr	r0, [sp, #4]
 80116bc:	3101      	adds	r1, #1
 80116be:	f7fe f88b 	bl	800f7d8 <_Balloc>
 80116c2:	4681      	mov	r9, r0
 80116c4:	b918      	cbnz	r0, 80116ce <__gethex+0x3ba>
 80116c6:	4b1a      	ldr	r3, [pc, #104]	@ (8011730 <__gethex+0x41c>)
 80116c8:	4602      	mov	r2, r0
 80116ca:	2184      	movs	r1, #132	@ 0x84
 80116cc:	e6c5      	b.n	801145a <__gethex+0x146>
 80116ce:	6922      	ldr	r2, [r4, #16]
 80116d0:	3202      	adds	r2, #2
 80116d2:	f104 010c 	add.w	r1, r4, #12
 80116d6:	0092      	lsls	r2, r2, #2
 80116d8:	300c      	adds	r0, #12
 80116da:	f7fd f91a 	bl	800e912 <memcpy>
 80116de:	4621      	mov	r1, r4
 80116e0:	9801      	ldr	r0, [sp, #4]
 80116e2:	f7fe f8b9 	bl	800f858 <_Bfree>
 80116e6:	464c      	mov	r4, r9
 80116e8:	6923      	ldr	r3, [r4, #16]
 80116ea:	1c5a      	adds	r2, r3, #1
 80116ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80116f0:	6122      	str	r2, [r4, #16]
 80116f2:	2201      	movs	r2, #1
 80116f4:	615a      	str	r2, [r3, #20]
 80116f6:	e7be      	b.n	8011676 <__gethex+0x362>
 80116f8:	6922      	ldr	r2, [r4, #16]
 80116fa:	455a      	cmp	r2, fp
 80116fc:	dd0b      	ble.n	8011716 <__gethex+0x402>
 80116fe:	2101      	movs	r1, #1
 8011700:	4620      	mov	r0, r4
 8011702:	f7ff fd9f 	bl	8011244 <rshift>
 8011706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801170a:	3701      	adds	r7, #1
 801170c:	42bb      	cmp	r3, r7
 801170e:	f6ff aee0 	blt.w	80114d2 <__gethex+0x1be>
 8011712:	2501      	movs	r5, #1
 8011714:	e7c2      	b.n	801169c <__gethex+0x388>
 8011716:	f016 061f 	ands.w	r6, r6, #31
 801171a:	d0fa      	beq.n	8011712 <__gethex+0x3fe>
 801171c:	4453      	add	r3, sl
 801171e:	f1c6 0620 	rsb	r6, r6, #32
 8011722:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011726:	f7fe f949 	bl	800f9bc <__hi0bits>
 801172a:	42b0      	cmp	r0, r6
 801172c:	dbe7      	blt.n	80116fe <__gethex+0x3ea>
 801172e:	e7f0      	b.n	8011712 <__gethex+0x3fe>
 8011730:	08014c12 	.word	0x08014c12

08011734 <L_shift>:
 8011734:	f1c2 0208 	rsb	r2, r2, #8
 8011738:	0092      	lsls	r2, r2, #2
 801173a:	b570      	push	{r4, r5, r6, lr}
 801173c:	f1c2 0620 	rsb	r6, r2, #32
 8011740:	6843      	ldr	r3, [r0, #4]
 8011742:	6804      	ldr	r4, [r0, #0]
 8011744:	fa03 f506 	lsl.w	r5, r3, r6
 8011748:	432c      	orrs	r4, r5
 801174a:	40d3      	lsrs	r3, r2
 801174c:	6004      	str	r4, [r0, #0]
 801174e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011752:	4288      	cmp	r0, r1
 8011754:	d3f4      	bcc.n	8011740 <L_shift+0xc>
 8011756:	bd70      	pop	{r4, r5, r6, pc}

08011758 <__match>:
 8011758:	b530      	push	{r4, r5, lr}
 801175a:	6803      	ldr	r3, [r0, #0]
 801175c:	3301      	adds	r3, #1
 801175e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011762:	b914      	cbnz	r4, 801176a <__match+0x12>
 8011764:	6003      	str	r3, [r0, #0]
 8011766:	2001      	movs	r0, #1
 8011768:	bd30      	pop	{r4, r5, pc}
 801176a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801176e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011772:	2d19      	cmp	r5, #25
 8011774:	bf98      	it	ls
 8011776:	3220      	addls	r2, #32
 8011778:	42a2      	cmp	r2, r4
 801177a:	d0f0      	beq.n	801175e <__match+0x6>
 801177c:	2000      	movs	r0, #0
 801177e:	e7f3      	b.n	8011768 <__match+0x10>

08011780 <__hexnan>:
 8011780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011784:	680b      	ldr	r3, [r1, #0]
 8011786:	6801      	ldr	r1, [r0, #0]
 8011788:	115e      	asrs	r6, r3, #5
 801178a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801178e:	f013 031f 	ands.w	r3, r3, #31
 8011792:	b087      	sub	sp, #28
 8011794:	bf18      	it	ne
 8011796:	3604      	addne	r6, #4
 8011798:	2500      	movs	r5, #0
 801179a:	1f37      	subs	r7, r6, #4
 801179c:	4682      	mov	sl, r0
 801179e:	4690      	mov	r8, r2
 80117a0:	9301      	str	r3, [sp, #4]
 80117a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80117a6:	46b9      	mov	r9, r7
 80117a8:	463c      	mov	r4, r7
 80117aa:	9502      	str	r5, [sp, #8]
 80117ac:	46ab      	mov	fp, r5
 80117ae:	784a      	ldrb	r2, [r1, #1]
 80117b0:	1c4b      	adds	r3, r1, #1
 80117b2:	9303      	str	r3, [sp, #12]
 80117b4:	b342      	cbz	r2, 8011808 <__hexnan+0x88>
 80117b6:	4610      	mov	r0, r2
 80117b8:	9105      	str	r1, [sp, #20]
 80117ba:	9204      	str	r2, [sp, #16]
 80117bc:	f7ff fd94 	bl	80112e8 <__hexdig_fun>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d151      	bne.n	8011868 <__hexnan+0xe8>
 80117c4:	9a04      	ldr	r2, [sp, #16]
 80117c6:	9905      	ldr	r1, [sp, #20]
 80117c8:	2a20      	cmp	r2, #32
 80117ca:	d818      	bhi.n	80117fe <__hexnan+0x7e>
 80117cc:	9b02      	ldr	r3, [sp, #8]
 80117ce:	459b      	cmp	fp, r3
 80117d0:	dd13      	ble.n	80117fa <__hexnan+0x7a>
 80117d2:	454c      	cmp	r4, r9
 80117d4:	d206      	bcs.n	80117e4 <__hexnan+0x64>
 80117d6:	2d07      	cmp	r5, #7
 80117d8:	dc04      	bgt.n	80117e4 <__hexnan+0x64>
 80117da:	462a      	mov	r2, r5
 80117dc:	4649      	mov	r1, r9
 80117de:	4620      	mov	r0, r4
 80117e0:	f7ff ffa8 	bl	8011734 <L_shift>
 80117e4:	4544      	cmp	r4, r8
 80117e6:	d952      	bls.n	801188e <__hexnan+0x10e>
 80117e8:	2300      	movs	r3, #0
 80117ea:	f1a4 0904 	sub.w	r9, r4, #4
 80117ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80117f2:	f8cd b008 	str.w	fp, [sp, #8]
 80117f6:	464c      	mov	r4, r9
 80117f8:	461d      	mov	r5, r3
 80117fa:	9903      	ldr	r1, [sp, #12]
 80117fc:	e7d7      	b.n	80117ae <__hexnan+0x2e>
 80117fe:	2a29      	cmp	r2, #41	@ 0x29
 8011800:	d157      	bne.n	80118b2 <__hexnan+0x132>
 8011802:	3102      	adds	r1, #2
 8011804:	f8ca 1000 	str.w	r1, [sl]
 8011808:	f1bb 0f00 	cmp.w	fp, #0
 801180c:	d051      	beq.n	80118b2 <__hexnan+0x132>
 801180e:	454c      	cmp	r4, r9
 8011810:	d206      	bcs.n	8011820 <__hexnan+0xa0>
 8011812:	2d07      	cmp	r5, #7
 8011814:	dc04      	bgt.n	8011820 <__hexnan+0xa0>
 8011816:	462a      	mov	r2, r5
 8011818:	4649      	mov	r1, r9
 801181a:	4620      	mov	r0, r4
 801181c:	f7ff ff8a 	bl	8011734 <L_shift>
 8011820:	4544      	cmp	r4, r8
 8011822:	d936      	bls.n	8011892 <__hexnan+0x112>
 8011824:	f1a8 0204 	sub.w	r2, r8, #4
 8011828:	4623      	mov	r3, r4
 801182a:	f853 1b04 	ldr.w	r1, [r3], #4
 801182e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011832:	429f      	cmp	r7, r3
 8011834:	d2f9      	bcs.n	801182a <__hexnan+0xaa>
 8011836:	1b3b      	subs	r3, r7, r4
 8011838:	f023 0303 	bic.w	r3, r3, #3
 801183c:	3304      	adds	r3, #4
 801183e:	3401      	adds	r4, #1
 8011840:	3e03      	subs	r6, #3
 8011842:	42b4      	cmp	r4, r6
 8011844:	bf88      	it	hi
 8011846:	2304      	movhi	r3, #4
 8011848:	4443      	add	r3, r8
 801184a:	2200      	movs	r2, #0
 801184c:	f843 2b04 	str.w	r2, [r3], #4
 8011850:	429f      	cmp	r7, r3
 8011852:	d2fb      	bcs.n	801184c <__hexnan+0xcc>
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	b91b      	cbnz	r3, 8011860 <__hexnan+0xe0>
 8011858:	4547      	cmp	r7, r8
 801185a:	d128      	bne.n	80118ae <__hexnan+0x12e>
 801185c:	2301      	movs	r3, #1
 801185e:	603b      	str	r3, [r7, #0]
 8011860:	2005      	movs	r0, #5
 8011862:	b007      	add	sp, #28
 8011864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011868:	3501      	adds	r5, #1
 801186a:	2d08      	cmp	r5, #8
 801186c:	f10b 0b01 	add.w	fp, fp, #1
 8011870:	dd06      	ble.n	8011880 <__hexnan+0x100>
 8011872:	4544      	cmp	r4, r8
 8011874:	d9c1      	bls.n	80117fa <__hexnan+0x7a>
 8011876:	2300      	movs	r3, #0
 8011878:	f844 3c04 	str.w	r3, [r4, #-4]
 801187c:	2501      	movs	r5, #1
 801187e:	3c04      	subs	r4, #4
 8011880:	6822      	ldr	r2, [r4, #0]
 8011882:	f000 000f 	and.w	r0, r0, #15
 8011886:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801188a:	6020      	str	r0, [r4, #0]
 801188c:	e7b5      	b.n	80117fa <__hexnan+0x7a>
 801188e:	2508      	movs	r5, #8
 8011890:	e7b3      	b.n	80117fa <__hexnan+0x7a>
 8011892:	9b01      	ldr	r3, [sp, #4]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d0dd      	beq.n	8011854 <__hexnan+0xd4>
 8011898:	f1c3 0320 	rsb	r3, r3, #32
 801189c:	f04f 32ff 	mov.w	r2, #4294967295
 80118a0:	40da      	lsrs	r2, r3
 80118a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80118a6:	4013      	ands	r3, r2
 80118a8:	f846 3c04 	str.w	r3, [r6, #-4]
 80118ac:	e7d2      	b.n	8011854 <__hexnan+0xd4>
 80118ae:	3f04      	subs	r7, #4
 80118b0:	e7d0      	b.n	8011854 <__hexnan+0xd4>
 80118b2:	2004      	movs	r0, #4
 80118b4:	e7d5      	b.n	8011862 <__hexnan+0xe2>

080118b6 <__ascii_mbtowc>:
 80118b6:	b082      	sub	sp, #8
 80118b8:	b901      	cbnz	r1, 80118bc <__ascii_mbtowc+0x6>
 80118ba:	a901      	add	r1, sp, #4
 80118bc:	b142      	cbz	r2, 80118d0 <__ascii_mbtowc+0x1a>
 80118be:	b14b      	cbz	r3, 80118d4 <__ascii_mbtowc+0x1e>
 80118c0:	7813      	ldrb	r3, [r2, #0]
 80118c2:	600b      	str	r3, [r1, #0]
 80118c4:	7812      	ldrb	r2, [r2, #0]
 80118c6:	1e10      	subs	r0, r2, #0
 80118c8:	bf18      	it	ne
 80118ca:	2001      	movne	r0, #1
 80118cc:	b002      	add	sp, #8
 80118ce:	4770      	bx	lr
 80118d0:	4610      	mov	r0, r2
 80118d2:	e7fb      	b.n	80118cc <__ascii_mbtowc+0x16>
 80118d4:	f06f 0001 	mvn.w	r0, #1
 80118d8:	e7f8      	b.n	80118cc <__ascii_mbtowc+0x16>

080118da <_realloc_r>:
 80118da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118de:	4680      	mov	r8, r0
 80118e0:	4615      	mov	r5, r2
 80118e2:	460c      	mov	r4, r1
 80118e4:	b921      	cbnz	r1, 80118f0 <_realloc_r+0x16>
 80118e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118ea:	4611      	mov	r1, r2
 80118ec:	f7fd bee8 	b.w	800f6c0 <_malloc_r>
 80118f0:	b92a      	cbnz	r2, 80118fe <_realloc_r+0x24>
 80118f2:	f7fd fe71 	bl	800f5d8 <_free_r>
 80118f6:	2400      	movs	r4, #0
 80118f8:	4620      	mov	r0, r4
 80118fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118fe:	f000 f840 	bl	8011982 <_malloc_usable_size_r>
 8011902:	4285      	cmp	r5, r0
 8011904:	4606      	mov	r6, r0
 8011906:	d802      	bhi.n	801190e <_realloc_r+0x34>
 8011908:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801190c:	d8f4      	bhi.n	80118f8 <_realloc_r+0x1e>
 801190e:	4629      	mov	r1, r5
 8011910:	4640      	mov	r0, r8
 8011912:	f7fd fed5 	bl	800f6c0 <_malloc_r>
 8011916:	4607      	mov	r7, r0
 8011918:	2800      	cmp	r0, #0
 801191a:	d0ec      	beq.n	80118f6 <_realloc_r+0x1c>
 801191c:	42b5      	cmp	r5, r6
 801191e:	462a      	mov	r2, r5
 8011920:	4621      	mov	r1, r4
 8011922:	bf28      	it	cs
 8011924:	4632      	movcs	r2, r6
 8011926:	f7fc fff4 	bl	800e912 <memcpy>
 801192a:	4621      	mov	r1, r4
 801192c:	4640      	mov	r0, r8
 801192e:	f7fd fe53 	bl	800f5d8 <_free_r>
 8011932:	463c      	mov	r4, r7
 8011934:	e7e0      	b.n	80118f8 <_realloc_r+0x1e>

08011936 <__ascii_wctomb>:
 8011936:	4603      	mov	r3, r0
 8011938:	4608      	mov	r0, r1
 801193a:	b141      	cbz	r1, 801194e <__ascii_wctomb+0x18>
 801193c:	2aff      	cmp	r2, #255	@ 0xff
 801193e:	d904      	bls.n	801194a <__ascii_wctomb+0x14>
 8011940:	228a      	movs	r2, #138	@ 0x8a
 8011942:	601a      	str	r2, [r3, #0]
 8011944:	f04f 30ff 	mov.w	r0, #4294967295
 8011948:	4770      	bx	lr
 801194a:	700a      	strb	r2, [r1, #0]
 801194c:	2001      	movs	r0, #1
 801194e:	4770      	bx	lr

08011950 <fiprintf>:
 8011950:	b40e      	push	{r1, r2, r3}
 8011952:	b503      	push	{r0, r1, lr}
 8011954:	4601      	mov	r1, r0
 8011956:	ab03      	add	r3, sp, #12
 8011958:	4805      	ldr	r0, [pc, #20]	@ (8011970 <fiprintf+0x20>)
 801195a:	f853 2b04 	ldr.w	r2, [r3], #4
 801195e:	6800      	ldr	r0, [r0, #0]
 8011960:	9301      	str	r3, [sp, #4]
 8011962:	f000 f83f 	bl	80119e4 <_vfiprintf_r>
 8011966:	b002      	add	sp, #8
 8011968:	f85d eb04 	ldr.w	lr, [sp], #4
 801196c:	b003      	add	sp, #12
 801196e:	4770      	bx	lr
 8011970:	20000410 	.word	0x20000410

08011974 <abort>:
 8011974:	b508      	push	{r3, lr}
 8011976:	2006      	movs	r0, #6
 8011978:	f000 fa08 	bl	8011d8c <raise>
 801197c:	2001      	movs	r0, #1
 801197e:	f7f7 feb1 	bl	80096e4 <_exit>

08011982 <_malloc_usable_size_r>:
 8011982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011986:	1f18      	subs	r0, r3, #4
 8011988:	2b00      	cmp	r3, #0
 801198a:	bfbc      	itt	lt
 801198c:	580b      	ldrlt	r3, [r1, r0]
 801198e:	18c0      	addlt	r0, r0, r3
 8011990:	4770      	bx	lr

08011992 <__sfputc_r>:
 8011992:	6893      	ldr	r3, [r2, #8]
 8011994:	3b01      	subs	r3, #1
 8011996:	2b00      	cmp	r3, #0
 8011998:	b410      	push	{r4}
 801199a:	6093      	str	r3, [r2, #8]
 801199c:	da08      	bge.n	80119b0 <__sfputc_r+0x1e>
 801199e:	6994      	ldr	r4, [r2, #24]
 80119a0:	42a3      	cmp	r3, r4
 80119a2:	db01      	blt.n	80119a8 <__sfputc_r+0x16>
 80119a4:	290a      	cmp	r1, #10
 80119a6:	d103      	bne.n	80119b0 <__sfputc_r+0x1e>
 80119a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119ac:	f000 b932 	b.w	8011c14 <__swbuf_r>
 80119b0:	6813      	ldr	r3, [r2, #0]
 80119b2:	1c58      	adds	r0, r3, #1
 80119b4:	6010      	str	r0, [r2, #0]
 80119b6:	7019      	strb	r1, [r3, #0]
 80119b8:	4608      	mov	r0, r1
 80119ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <__sfputs_r>:
 80119c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119c2:	4606      	mov	r6, r0
 80119c4:	460f      	mov	r7, r1
 80119c6:	4614      	mov	r4, r2
 80119c8:	18d5      	adds	r5, r2, r3
 80119ca:	42ac      	cmp	r4, r5
 80119cc:	d101      	bne.n	80119d2 <__sfputs_r+0x12>
 80119ce:	2000      	movs	r0, #0
 80119d0:	e007      	b.n	80119e2 <__sfputs_r+0x22>
 80119d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119d6:	463a      	mov	r2, r7
 80119d8:	4630      	mov	r0, r6
 80119da:	f7ff ffda 	bl	8011992 <__sfputc_r>
 80119de:	1c43      	adds	r3, r0, #1
 80119e0:	d1f3      	bne.n	80119ca <__sfputs_r+0xa>
 80119e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119e4 <_vfiprintf_r>:
 80119e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e8:	460d      	mov	r5, r1
 80119ea:	b09d      	sub	sp, #116	@ 0x74
 80119ec:	4614      	mov	r4, r2
 80119ee:	4698      	mov	r8, r3
 80119f0:	4606      	mov	r6, r0
 80119f2:	b118      	cbz	r0, 80119fc <_vfiprintf_r+0x18>
 80119f4:	6a03      	ldr	r3, [r0, #32]
 80119f6:	b90b      	cbnz	r3, 80119fc <_vfiprintf_r+0x18>
 80119f8:	f7fc fe72 	bl	800e6e0 <__sinit>
 80119fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119fe:	07d9      	lsls	r1, r3, #31
 8011a00:	d405      	bmi.n	8011a0e <_vfiprintf_r+0x2a>
 8011a02:	89ab      	ldrh	r3, [r5, #12]
 8011a04:	059a      	lsls	r2, r3, #22
 8011a06:	d402      	bmi.n	8011a0e <_vfiprintf_r+0x2a>
 8011a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a0a:	f7fc ff80 	bl	800e90e <__retarget_lock_acquire_recursive>
 8011a0e:	89ab      	ldrh	r3, [r5, #12]
 8011a10:	071b      	lsls	r3, r3, #28
 8011a12:	d501      	bpl.n	8011a18 <_vfiprintf_r+0x34>
 8011a14:	692b      	ldr	r3, [r5, #16]
 8011a16:	b99b      	cbnz	r3, 8011a40 <_vfiprintf_r+0x5c>
 8011a18:	4629      	mov	r1, r5
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f000 f938 	bl	8011c90 <__swsetup_r>
 8011a20:	b170      	cbz	r0, 8011a40 <_vfiprintf_r+0x5c>
 8011a22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a24:	07dc      	lsls	r4, r3, #31
 8011a26:	d504      	bpl.n	8011a32 <_vfiprintf_r+0x4e>
 8011a28:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2c:	b01d      	add	sp, #116	@ 0x74
 8011a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a32:	89ab      	ldrh	r3, [r5, #12]
 8011a34:	0598      	lsls	r0, r3, #22
 8011a36:	d4f7      	bmi.n	8011a28 <_vfiprintf_r+0x44>
 8011a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a3a:	f7fc ff69 	bl	800e910 <__retarget_lock_release_recursive>
 8011a3e:	e7f3      	b.n	8011a28 <_vfiprintf_r+0x44>
 8011a40:	2300      	movs	r3, #0
 8011a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a44:	2320      	movs	r3, #32
 8011a46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a4e:	2330      	movs	r3, #48	@ 0x30
 8011a50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011c00 <_vfiprintf_r+0x21c>
 8011a54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a58:	f04f 0901 	mov.w	r9, #1
 8011a5c:	4623      	mov	r3, r4
 8011a5e:	469a      	mov	sl, r3
 8011a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a64:	b10a      	cbz	r2, 8011a6a <_vfiprintf_r+0x86>
 8011a66:	2a25      	cmp	r2, #37	@ 0x25
 8011a68:	d1f9      	bne.n	8011a5e <_vfiprintf_r+0x7a>
 8011a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8011a6e:	d00b      	beq.n	8011a88 <_vfiprintf_r+0xa4>
 8011a70:	465b      	mov	r3, fp
 8011a72:	4622      	mov	r2, r4
 8011a74:	4629      	mov	r1, r5
 8011a76:	4630      	mov	r0, r6
 8011a78:	f7ff ffa2 	bl	80119c0 <__sfputs_r>
 8011a7c:	3001      	adds	r0, #1
 8011a7e:	f000 80a7 	beq.w	8011bd0 <_vfiprintf_r+0x1ec>
 8011a82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a84:	445a      	add	r2, fp
 8011a86:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a88:	f89a 3000 	ldrb.w	r3, [sl]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f000 809f 	beq.w	8011bd0 <_vfiprintf_r+0x1ec>
 8011a92:	2300      	movs	r3, #0
 8011a94:	f04f 32ff 	mov.w	r2, #4294967295
 8011a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a9c:	f10a 0a01 	add.w	sl, sl, #1
 8011aa0:	9304      	str	r3, [sp, #16]
 8011aa2:	9307      	str	r3, [sp, #28]
 8011aa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011aa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011aaa:	4654      	mov	r4, sl
 8011aac:	2205      	movs	r2, #5
 8011aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ab2:	4853      	ldr	r0, [pc, #332]	@ (8011c00 <_vfiprintf_r+0x21c>)
 8011ab4:	f7ee fb9c 	bl	80001f0 <memchr>
 8011ab8:	9a04      	ldr	r2, [sp, #16]
 8011aba:	b9d8      	cbnz	r0, 8011af4 <_vfiprintf_r+0x110>
 8011abc:	06d1      	lsls	r1, r2, #27
 8011abe:	bf44      	itt	mi
 8011ac0:	2320      	movmi	r3, #32
 8011ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ac6:	0713      	lsls	r3, r2, #28
 8011ac8:	bf44      	itt	mi
 8011aca:	232b      	movmi	r3, #43	@ 0x2b
 8011acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ad4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ad6:	d015      	beq.n	8011b04 <_vfiprintf_r+0x120>
 8011ad8:	9a07      	ldr	r2, [sp, #28]
 8011ada:	4654      	mov	r4, sl
 8011adc:	2000      	movs	r0, #0
 8011ade:	f04f 0c0a 	mov.w	ip, #10
 8011ae2:	4621      	mov	r1, r4
 8011ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ae8:	3b30      	subs	r3, #48	@ 0x30
 8011aea:	2b09      	cmp	r3, #9
 8011aec:	d94b      	bls.n	8011b86 <_vfiprintf_r+0x1a2>
 8011aee:	b1b0      	cbz	r0, 8011b1e <_vfiprintf_r+0x13a>
 8011af0:	9207      	str	r2, [sp, #28]
 8011af2:	e014      	b.n	8011b1e <_vfiprintf_r+0x13a>
 8011af4:	eba0 0308 	sub.w	r3, r0, r8
 8011af8:	fa09 f303 	lsl.w	r3, r9, r3
 8011afc:	4313      	orrs	r3, r2
 8011afe:	9304      	str	r3, [sp, #16]
 8011b00:	46a2      	mov	sl, r4
 8011b02:	e7d2      	b.n	8011aaa <_vfiprintf_r+0xc6>
 8011b04:	9b03      	ldr	r3, [sp, #12]
 8011b06:	1d19      	adds	r1, r3, #4
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	9103      	str	r1, [sp, #12]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	bfbb      	ittet	lt
 8011b10:	425b      	neglt	r3, r3
 8011b12:	f042 0202 	orrlt.w	r2, r2, #2
 8011b16:	9307      	strge	r3, [sp, #28]
 8011b18:	9307      	strlt	r3, [sp, #28]
 8011b1a:	bfb8      	it	lt
 8011b1c:	9204      	strlt	r2, [sp, #16]
 8011b1e:	7823      	ldrb	r3, [r4, #0]
 8011b20:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b22:	d10a      	bne.n	8011b3a <_vfiprintf_r+0x156>
 8011b24:	7863      	ldrb	r3, [r4, #1]
 8011b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b28:	d132      	bne.n	8011b90 <_vfiprintf_r+0x1ac>
 8011b2a:	9b03      	ldr	r3, [sp, #12]
 8011b2c:	1d1a      	adds	r2, r3, #4
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	9203      	str	r2, [sp, #12]
 8011b32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b36:	3402      	adds	r4, #2
 8011b38:	9305      	str	r3, [sp, #20]
 8011b3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c10 <_vfiprintf_r+0x22c>
 8011b3e:	7821      	ldrb	r1, [r4, #0]
 8011b40:	2203      	movs	r2, #3
 8011b42:	4650      	mov	r0, sl
 8011b44:	f7ee fb54 	bl	80001f0 <memchr>
 8011b48:	b138      	cbz	r0, 8011b5a <_vfiprintf_r+0x176>
 8011b4a:	9b04      	ldr	r3, [sp, #16]
 8011b4c:	eba0 000a 	sub.w	r0, r0, sl
 8011b50:	2240      	movs	r2, #64	@ 0x40
 8011b52:	4082      	lsls	r2, r0
 8011b54:	4313      	orrs	r3, r2
 8011b56:	3401      	adds	r4, #1
 8011b58:	9304      	str	r3, [sp, #16]
 8011b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b5e:	4829      	ldr	r0, [pc, #164]	@ (8011c04 <_vfiprintf_r+0x220>)
 8011b60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b64:	2206      	movs	r2, #6
 8011b66:	f7ee fb43 	bl	80001f0 <memchr>
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	d03f      	beq.n	8011bee <_vfiprintf_r+0x20a>
 8011b6e:	4b26      	ldr	r3, [pc, #152]	@ (8011c08 <_vfiprintf_r+0x224>)
 8011b70:	bb1b      	cbnz	r3, 8011bba <_vfiprintf_r+0x1d6>
 8011b72:	9b03      	ldr	r3, [sp, #12]
 8011b74:	3307      	adds	r3, #7
 8011b76:	f023 0307 	bic.w	r3, r3, #7
 8011b7a:	3308      	adds	r3, #8
 8011b7c:	9303      	str	r3, [sp, #12]
 8011b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b80:	443b      	add	r3, r7
 8011b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b84:	e76a      	b.n	8011a5c <_vfiprintf_r+0x78>
 8011b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	2001      	movs	r0, #1
 8011b8e:	e7a8      	b.n	8011ae2 <_vfiprintf_r+0xfe>
 8011b90:	2300      	movs	r3, #0
 8011b92:	3401      	adds	r4, #1
 8011b94:	9305      	str	r3, [sp, #20]
 8011b96:	4619      	mov	r1, r3
 8011b98:	f04f 0c0a 	mov.w	ip, #10
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ba2:	3a30      	subs	r2, #48	@ 0x30
 8011ba4:	2a09      	cmp	r2, #9
 8011ba6:	d903      	bls.n	8011bb0 <_vfiprintf_r+0x1cc>
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d0c6      	beq.n	8011b3a <_vfiprintf_r+0x156>
 8011bac:	9105      	str	r1, [sp, #20]
 8011bae:	e7c4      	b.n	8011b3a <_vfiprintf_r+0x156>
 8011bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e7f0      	b.n	8011b9c <_vfiprintf_r+0x1b8>
 8011bba:	ab03      	add	r3, sp, #12
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	462a      	mov	r2, r5
 8011bc0:	4b12      	ldr	r3, [pc, #72]	@ (8011c0c <_vfiprintf_r+0x228>)
 8011bc2:	a904      	add	r1, sp, #16
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f7fb ff33 	bl	800da30 <_printf_float>
 8011bca:	4607      	mov	r7, r0
 8011bcc:	1c78      	adds	r0, r7, #1
 8011bce:	d1d6      	bne.n	8011b7e <_vfiprintf_r+0x19a>
 8011bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bd2:	07d9      	lsls	r1, r3, #31
 8011bd4:	d405      	bmi.n	8011be2 <_vfiprintf_r+0x1fe>
 8011bd6:	89ab      	ldrh	r3, [r5, #12]
 8011bd8:	059a      	lsls	r2, r3, #22
 8011bda:	d402      	bmi.n	8011be2 <_vfiprintf_r+0x1fe>
 8011bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bde:	f7fc fe97 	bl	800e910 <__retarget_lock_release_recursive>
 8011be2:	89ab      	ldrh	r3, [r5, #12]
 8011be4:	065b      	lsls	r3, r3, #25
 8011be6:	f53f af1f 	bmi.w	8011a28 <_vfiprintf_r+0x44>
 8011bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bec:	e71e      	b.n	8011a2c <_vfiprintf_r+0x48>
 8011bee:	ab03      	add	r3, sp, #12
 8011bf0:	9300      	str	r3, [sp, #0]
 8011bf2:	462a      	mov	r2, r5
 8011bf4:	4b05      	ldr	r3, [pc, #20]	@ (8011c0c <_vfiprintf_r+0x228>)
 8011bf6:	a904      	add	r1, sp, #16
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	f7fc f9b1 	bl	800df60 <_printf_i>
 8011bfe:	e7e4      	b.n	8011bca <_vfiprintf_r+0x1e6>
 8011c00:	08014dd0 	.word	0x08014dd0
 8011c04:	08014dda 	.word	0x08014dda
 8011c08:	0800da31 	.word	0x0800da31
 8011c0c:	080119c1 	.word	0x080119c1
 8011c10:	08014dd6 	.word	0x08014dd6

08011c14 <__swbuf_r>:
 8011c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c16:	460e      	mov	r6, r1
 8011c18:	4614      	mov	r4, r2
 8011c1a:	4605      	mov	r5, r0
 8011c1c:	b118      	cbz	r0, 8011c26 <__swbuf_r+0x12>
 8011c1e:	6a03      	ldr	r3, [r0, #32]
 8011c20:	b90b      	cbnz	r3, 8011c26 <__swbuf_r+0x12>
 8011c22:	f7fc fd5d 	bl	800e6e0 <__sinit>
 8011c26:	69a3      	ldr	r3, [r4, #24]
 8011c28:	60a3      	str	r3, [r4, #8]
 8011c2a:	89a3      	ldrh	r3, [r4, #12]
 8011c2c:	071a      	lsls	r2, r3, #28
 8011c2e:	d501      	bpl.n	8011c34 <__swbuf_r+0x20>
 8011c30:	6923      	ldr	r3, [r4, #16]
 8011c32:	b943      	cbnz	r3, 8011c46 <__swbuf_r+0x32>
 8011c34:	4621      	mov	r1, r4
 8011c36:	4628      	mov	r0, r5
 8011c38:	f000 f82a 	bl	8011c90 <__swsetup_r>
 8011c3c:	b118      	cbz	r0, 8011c46 <__swbuf_r+0x32>
 8011c3e:	f04f 37ff 	mov.w	r7, #4294967295
 8011c42:	4638      	mov	r0, r7
 8011c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c46:	6823      	ldr	r3, [r4, #0]
 8011c48:	6922      	ldr	r2, [r4, #16]
 8011c4a:	1a98      	subs	r0, r3, r2
 8011c4c:	6963      	ldr	r3, [r4, #20]
 8011c4e:	b2f6      	uxtb	r6, r6
 8011c50:	4283      	cmp	r3, r0
 8011c52:	4637      	mov	r7, r6
 8011c54:	dc05      	bgt.n	8011c62 <__swbuf_r+0x4e>
 8011c56:	4621      	mov	r1, r4
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f7ff fa53 	bl	8011104 <_fflush_r>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d1ed      	bne.n	8011c3e <__swbuf_r+0x2a>
 8011c62:	68a3      	ldr	r3, [r4, #8]
 8011c64:	3b01      	subs	r3, #1
 8011c66:	60a3      	str	r3, [r4, #8]
 8011c68:	6823      	ldr	r3, [r4, #0]
 8011c6a:	1c5a      	adds	r2, r3, #1
 8011c6c:	6022      	str	r2, [r4, #0]
 8011c6e:	701e      	strb	r6, [r3, #0]
 8011c70:	6962      	ldr	r2, [r4, #20]
 8011c72:	1c43      	adds	r3, r0, #1
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d004      	beq.n	8011c82 <__swbuf_r+0x6e>
 8011c78:	89a3      	ldrh	r3, [r4, #12]
 8011c7a:	07db      	lsls	r3, r3, #31
 8011c7c:	d5e1      	bpl.n	8011c42 <__swbuf_r+0x2e>
 8011c7e:	2e0a      	cmp	r6, #10
 8011c80:	d1df      	bne.n	8011c42 <__swbuf_r+0x2e>
 8011c82:	4621      	mov	r1, r4
 8011c84:	4628      	mov	r0, r5
 8011c86:	f7ff fa3d 	bl	8011104 <_fflush_r>
 8011c8a:	2800      	cmp	r0, #0
 8011c8c:	d0d9      	beq.n	8011c42 <__swbuf_r+0x2e>
 8011c8e:	e7d6      	b.n	8011c3e <__swbuf_r+0x2a>

08011c90 <__swsetup_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	4b29      	ldr	r3, [pc, #164]	@ (8011d38 <__swsetup_r+0xa8>)
 8011c94:	4605      	mov	r5, r0
 8011c96:	6818      	ldr	r0, [r3, #0]
 8011c98:	460c      	mov	r4, r1
 8011c9a:	b118      	cbz	r0, 8011ca4 <__swsetup_r+0x14>
 8011c9c:	6a03      	ldr	r3, [r0, #32]
 8011c9e:	b90b      	cbnz	r3, 8011ca4 <__swsetup_r+0x14>
 8011ca0:	f7fc fd1e 	bl	800e6e0 <__sinit>
 8011ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ca8:	0719      	lsls	r1, r3, #28
 8011caa:	d422      	bmi.n	8011cf2 <__swsetup_r+0x62>
 8011cac:	06da      	lsls	r2, r3, #27
 8011cae:	d407      	bmi.n	8011cc0 <__swsetup_r+0x30>
 8011cb0:	2209      	movs	r2, #9
 8011cb2:	602a      	str	r2, [r5, #0]
 8011cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cb8:	81a3      	strh	r3, [r4, #12]
 8011cba:	f04f 30ff 	mov.w	r0, #4294967295
 8011cbe:	e033      	b.n	8011d28 <__swsetup_r+0x98>
 8011cc0:	0758      	lsls	r0, r3, #29
 8011cc2:	d512      	bpl.n	8011cea <__swsetup_r+0x5a>
 8011cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cc6:	b141      	cbz	r1, 8011cda <__swsetup_r+0x4a>
 8011cc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ccc:	4299      	cmp	r1, r3
 8011cce:	d002      	beq.n	8011cd6 <__swsetup_r+0x46>
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	f7fd fc81 	bl	800f5d8 <_free_r>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cda:	89a3      	ldrh	r3, [r4, #12]
 8011cdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ce0:	81a3      	strh	r3, [r4, #12]
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	6063      	str	r3, [r4, #4]
 8011ce6:	6923      	ldr	r3, [r4, #16]
 8011ce8:	6023      	str	r3, [r4, #0]
 8011cea:	89a3      	ldrh	r3, [r4, #12]
 8011cec:	f043 0308 	orr.w	r3, r3, #8
 8011cf0:	81a3      	strh	r3, [r4, #12]
 8011cf2:	6923      	ldr	r3, [r4, #16]
 8011cf4:	b94b      	cbnz	r3, 8011d0a <__swsetup_r+0x7a>
 8011cf6:	89a3      	ldrh	r3, [r4, #12]
 8011cf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d00:	d003      	beq.n	8011d0a <__swsetup_r+0x7a>
 8011d02:	4621      	mov	r1, r4
 8011d04:	4628      	mov	r0, r5
 8011d06:	f000 f883 	bl	8011e10 <__smakebuf_r>
 8011d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d0e:	f013 0201 	ands.w	r2, r3, #1
 8011d12:	d00a      	beq.n	8011d2a <__swsetup_r+0x9a>
 8011d14:	2200      	movs	r2, #0
 8011d16:	60a2      	str	r2, [r4, #8]
 8011d18:	6962      	ldr	r2, [r4, #20]
 8011d1a:	4252      	negs	r2, r2
 8011d1c:	61a2      	str	r2, [r4, #24]
 8011d1e:	6922      	ldr	r2, [r4, #16]
 8011d20:	b942      	cbnz	r2, 8011d34 <__swsetup_r+0xa4>
 8011d22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d26:	d1c5      	bne.n	8011cb4 <__swsetup_r+0x24>
 8011d28:	bd38      	pop	{r3, r4, r5, pc}
 8011d2a:	0799      	lsls	r1, r3, #30
 8011d2c:	bf58      	it	pl
 8011d2e:	6962      	ldrpl	r2, [r4, #20]
 8011d30:	60a2      	str	r2, [r4, #8]
 8011d32:	e7f4      	b.n	8011d1e <__swsetup_r+0x8e>
 8011d34:	2000      	movs	r0, #0
 8011d36:	e7f7      	b.n	8011d28 <__swsetup_r+0x98>
 8011d38:	20000410 	.word	0x20000410

08011d3c <_raise_r>:
 8011d3c:	291f      	cmp	r1, #31
 8011d3e:	b538      	push	{r3, r4, r5, lr}
 8011d40:	4605      	mov	r5, r0
 8011d42:	460c      	mov	r4, r1
 8011d44:	d904      	bls.n	8011d50 <_raise_r+0x14>
 8011d46:	2316      	movs	r3, #22
 8011d48:	6003      	str	r3, [r0, #0]
 8011d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d4e:	bd38      	pop	{r3, r4, r5, pc}
 8011d50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011d52:	b112      	cbz	r2, 8011d5a <_raise_r+0x1e>
 8011d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d58:	b94b      	cbnz	r3, 8011d6e <_raise_r+0x32>
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f000 f830 	bl	8011dc0 <_getpid_r>
 8011d60:	4622      	mov	r2, r4
 8011d62:	4601      	mov	r1, r0
 8011d64:	4628      	mov	r0, r5
 8011d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d6a:	f000 b817 	b.w	8011d9c <_kill_r>
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d00a      	beq.n	8011d88 <_raise_r+0x4c>
 8011d72:	1c59      	adds	r1, r3, #1
 8011d74:	d103      	bne.n	8011d7e <_raise_r+0x42>
 8011d76:	2316      	movs	r3, #22
 8011d78:	6003      	str	r3, [r0, #0]
 8011d7a:	2001      	movs	r0, #1
 8011d7c:	e7e7      	b.n	8011d4e <_raise_r+0x12>
 8011d7e:	2100      	movs	r1, #0
 8011d80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011d84:	4620      	mov	r0, r4
 8011d86:	4798      	blx	r3
 8011d88:	2000      	movs	r0, #0
 8011d8a:	e7e0      	b.n	8011d4e <_raise_r+0x12>

08011d8c <raise>:
 8011d8c:	4b02      	ldr	r3, [pc, #8]	@ (8011d98 <raise+0xc>)
 8011d8e:	4601      	mov	r1, r0
 8011d90:	6818      	ldr	r0, [r3, #0]
 8011d92:	f7ff bfd3 	b.w	8011d3c <_raise_r>
 8011d96:	bf00      	nop
 8011d98:	20000410 	.word	0x20000410

08011d9c <_kill_r>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	4d07      	ldr	r5, [pc, #28]	@ (8011dbc <_kill_r+0x20>)
 8011da0:	2300      	movs	r3, #0
 8011da2:	4604      	mov	r4, r0
 8011da4:	4608      	mov	r0, r1
 8011da6:	4611      	mov	r1, r2
 8011da8:	602b      	str	r3, [r5, #0]
 8011daa:	f7f7 fc8b 	bl	80096c4 <_kill>
 8011dae:	1c43      	adds	r3, r0, #1
 8011db0:	d102      	bne.n	8011db8 <_kill_r+0x1c>
 8011db2:	682b      	ldr	r3, [r5, #0]
 8011db4:	b103      	cbz	r3, 8011db8 <_kill_r+0x1c>
 8011db6:	6023      	str	r3, [r4, #0]
 8011db8:	bd38      	pop	{r3, r4, r5, pc}
 8011dba:	bf00      	nop
 8011dbc:	200055f4 	.word	0x200055f4

08011dc0 <_getpid_r>:
 8011dc0:	f7f7 bc78 	b.w	80096b4 <_getpid>

08011dc4 <__swhatbuf_r>:
 8011dc4:	b570      	push	{r4, r5, r6, lr}
 8011dc6:	460c      	mov	r4, r1
 8011dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dcc:	2900      	cmp	r1, #0
 8011dce:	b096      	sub	sp, #88	@ 0x58
 8011dd0:	4615      	mov	r5, r2
 8011dd2:	461e      	mov	r6, r3
 8011dd4:	da0d      	bge.n	8011df2 <__swhatbuf_r+0x2e>
 8011dd6:	89a3      	ldrh	r3, [r4, #12]
 8011dd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ddc:	f04f 0100 	mov.w	r1, #0
 8011de0:	bf14      	ite	ne
 8011de2:	2340      	movne	r3, #64	@ 0x40
 8011de4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011de8:	2000      	movs	r0, #0
 8011dea:	6031      	str	r1, [r6, #0]
 8011dec:	602b      	str	r3, [r5, #0]
 8011dee:	b016      	add	sp, #88	@ 0x58
 8011df0:	bd70      	pop	{r4, r5, r6, pc}
 8011df2:	466a      	mov	r2, sp
 8011df4:	f000 f848 	bl	8011e88 <_fstat_r>
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	dbec      	blt.n	8011dd6 <__swhatbuf_r+0x12>
 8011dfc:	9901      	ldr	r1, [sp, #4]
 8011dfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011e02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011e06:	4259      	negs	r1, r3
 8011e08:	4159      	adcs	r1, r3
 8011e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e0e:	e7eb      	b.n	8011de8 <__swhatbuf_r+0x24>

08011e10 <__smakebuf_r>:
 8011e10:	898b      	ldrh	r3, [r1, #12]
 8011e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e14:	079d      	lsls	r5, r3, #30
 8011e16:	4606      	mov	r6, r0
 8011e18:	460c      	mov	r4, r1
 8011e1a:	d507      	bpl.n	8011e2c <__smakebuf_r+0x1c>
 8011e1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	6123      	str	r3, [r4, #16]
 8011e24:	2301      	movs	r3, #1
 8011e26:	6163      	str	r3, [r4, #20]
 8011e28:	b003      	add	sp, #12
 8011e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e2c:	ab01      	add	r3, sp, #4
 8011e2e:	466a      	mov	r2, sp
 8011e30:	f7ff ffc8 	bl	8011dc4 <__swhatbuf_r>
 8011e34:	9f00      	ldr	r7, [sp, #0]
 8011e36:	4605      	mov	r5, r0
 8011e38:	4639      	mov	r1, r7
 8011e3a:	4630      	mov	r0, r6
 8011e3c:	f7fd fc40 	bl	800f6c0 <_malloc_r>
 8011e40:	b948      	cbnz	r0, 8011e56 <__smakebuf_r+0x46>
 8011e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e46:	059a      	lsls	r2, r3, #22
 8011e48:	d4ee      	bmi.n	8011e28 <__smakebuf_r+0x18>
 8011e4a:	f023 0303 	bic.w	r3, r3, #3
 8011e4e:	f043 0302 	orr.w	r3, r3, #2
 8011e52:	81a3      	strh	r3, [r4, #12]
 8011e54:	e7e2      	b.n	8011e1c <__smakebuf_r+0xc>
 8011e56:	89a3      	ldrh	r3, [r4, #12]
 8011e58:	6020      	str	r0, [r4, #0]
 8011e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e5e:	81a3      	strh	r3, [r4, #12]
 8011e60:	9b01      	ldr	r3, [sp, #4]
 8011e62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e66:	b15b      	cbz	r3, 8011e80 <__smakebuf_r+0x70>
 8011e68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	f000 f81d 	bl	8011eac <_isatty_r>
 8011e72:	b128      	cbz	r0, 8011e80 <__smakebuf_r+0x70>
 8011e74:	89a3      	ldrh	r3, [r4, #12]
 8011e76:	f023 0303 	bic.w	r3, r3, #3
 8011e7a:	f043 0301 	orr.w	r3, r3, #1
 8011e7e:	81a3      	strh	r3, [r4, #12]
 8011e80:	89a3      	ldrh	r3, [r4, #12]
 8011e82:	431d      	orrs	r5, r3
 8011e84:	81a5      	strh	r5, [r4, #12]
 8011e86:	e7cf      	b.n	8011e28 <__smakebuf_r+0x18>

08011e88 <_fstat_r>:
 8011e88:	b538      	push	{r3, r4, r5, lr}
 8011e8a:	4d07      	ldr	r5, [pc, #28]	@ (8011ea8 <_fstat_r+0x20>)
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	4604      	mov	r4, r0
 8011e90:	4608      	mov	r0, r1
 8011e92:	4611      	mov	r1, r2
 8011e94:	602b      	str	r3, [r5, #0]
 8011e96:	f7f7 fc75 	bl	8009784 <_fstat>
 8011e9a:	1c43      	adds	r3, r0, #1
 8011e9c:	d102      	bne.n	8011ea4 <_fstat_r+0x1c>
 8011e9e:	682b      	ldr	r3, [r5, #0]
 8011ea0:	b103      	cbz	r3, 8011ea4 <_fstat_r+0x1c>
 8011ea2:	6023      	str	r3, [r4, #0]
 8011ea4:	bd38      	pop	{r3, r4, r5, pc}
 8011ea6:	bf00      	nop
 8011ea8:	200055f4 	.word	0x200055f4

08011eac <_isatty_r>:
 8011eac:	b538      	push	{r3, r4, r5, lr}
 8011eae:	4d06      	ldr	r5, [pc, #24]	@ (8011ec8 <_isatty_r+0x1c>)
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	4608      	mov	r0, r1
 8011eb6:	602b      	str	r3, [r5, #0]
 8011eb8:	f7f7 fc74 	bl	80097a4 <_isatty>
 8011ebc:	1c43      	adds	r3, r0, #1
 8011ebe:	d102      	bne.n	8011ec6 <_isatty_r+0x1a>
 8011ec0:	682b      	ldr	r3, [r5, #0]
 8011ec2:	b103      	cbz	r3, 8011ec6 <_isatty_r+0x1a>
 8011ec4:	6023      	str	r3, [r4, #0]
 8011ec6:	bd38      	pop	{r3, r4, r5, pc}
 8011ec8:	200055f4 	.word	0x200055f4

08011ecc <_init>:
 8011ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ece:	bf00      	nop
 8011ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ed2:	bc08      	pop	{r3}
 8011ed4:	469e      	mov	lr, r3
 8011ed6:	4770      	bx	lr

08011ed8 <_fini>:
 8011ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eda:	bf00      	nop
 8011edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ede:	bc08      	pop	{r3}
 8011ee0:	469e      	mov	lr, r3
 8011ee2:	4770      	bx	lr
