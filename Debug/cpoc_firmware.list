
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011884  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ec8  08011a18  08011a18  00012a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148e0  080148e0  000165b0  2**0
                  CONTENTS
  4 .ARM          00000008  080148e0  080148e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080148e8  080148e8  000165b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080148e8  080148e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080148ec  080148ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005b0  20000000  080148f0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000165b0  2**0
                  CONTENTS
 10 .bss          00004860  200005b0  200005b0  000165b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e10  20004e10  000165b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000165b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfbf  00000000  00000000  000165e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e7  00000000  00000000  0002459f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00027988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a35  00000000  00000000  00028740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d69d  00000000  00000000  00029175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011978  00000000  00000000  00046812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095526  00000000  00000000  0005818a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ed6b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a94  00000000  00000000  000ed6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f2188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005b0 	.word	0x200005b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080119fc 	.word	0x080119fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005b4 	.word	0x200005b4
 80001cc:	080119fc 	.word	0x080119fc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003d4 	.word	0x200003d4
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001798:	2b80      	cmp	r3, #128	@ 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	@ 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	61ba      	str	r2, [r7, #24]
 8001840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	e841 2300 	strex	r3, r2, [r1]
 800184a:	613b      	str	r3, [r7, #16]
   return(result);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e7      	bne.n	8001822 <LL_USART_EnableIT_RXNE+0x8>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	330c      	adds	r3, #12
 800186c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	60bb      	str	r3, [r7, #8]
   return(result);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	61ba      	str	r2, [r7, #24]
 8001886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	e841 2300 	strex	r3, r2, [r1]
 8001890:	613b      	str	r3, [r7, #16]
   return(result);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <LL_USART_EnableIT_TXE+0x8>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b089      	sub	sp, #36	@ 0x24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3314      	adds	r3, #20
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	613b      	str	r3, [r7, #16]
   return(result);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e7      	bne.n	80018ae <LL_USART_EnableIT_ERROR+0x8>
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	60bb      	str	r3, [r7, #8]
   return(result);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	61ba      	str	r2, [r7, #24]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	e841 2300 	strex	r3, r2, [r1]
 800191c:	613b      	str	r3, [r7, #16]
   return(result);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e7      	bne.n	80018f4 <LL_USART_DisableIT_RXNE+0x8>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001932:	b480      	push	{r7}
 8001934:	b089      	sub	sp, #36	@ 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e853 3f00 	ldrex	r3, [r3]
 8001946:	60bb      	str	r3, [r7, #8]
   return(result);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	330c      	adds	r3, #12
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	61ba      	str	r2, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	e841 2300 	strex	r3, r2, [r1]
 8001962:	613b      	str	r3, [r7, #16]
   return(result);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e7      	bne.n	800193a <LL_USART_DisableIT_TXE+0x8>
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3724      	adds	r7, #36	@ 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b80      	cmp	r3, #128	@ 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:


void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001a00:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <Ringbuf_init+0x88>)
 8001a02:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <Ringbuf_init+0x8c>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <Ringbuf_init+0x90>)
 8001a08:	4a21      	ldr	r2, [pc, #132]	@ (8001a90 <Ringbuf_init+0x94>)
 8001a0a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <Ringbuf_init+0x98>)
 8001a0e:	4a22      	ldr	r2, [pc, #136]	@ (8001a98 <Ringbuf_init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <Ringbuf_init+0xa0>)
 8001a14:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <Ringbuf_init+0xa4>)
 8001a16:	601a      	str	r2, [r3, #0]
  _rx_buffer5 = &rx_buffer5;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <Ringbuf_init+0xa8>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	@ (8001aa8 <Ringbuf_init+0xac>)
 8001a1c:	601a      	str	r2, [r3, #0]
  _tx_buffer5 = &tx_buffer5;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <Ringbuf_init+0xb0>)
 8001a20:	4a23      	ldr	r2, [pc, #140]	@ (8001ab0 <Ringbuf_init+0xb4>)
 8001a22:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001a24:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <Ringbuf_init+0xb8>)
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <Ringbuf_init+0xbc>)
 8001a28:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001a2a:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <Ringbuf_init+0xc0>)
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <Ringbuf_init+0xc4>)
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff36 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart2);
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff31 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart5);
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff2c 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff27 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fedc 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart2);
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fed7 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart5);
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fed2 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fecd 	bl	800181a <LL_USART_EnableIT_RXNE>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000460c 	.word	0x2000460c
 8001a88:	200005cc 	.word	0x200005cc
 8001a8c:	20004610 	.word	0x20004610
 8001a90:	20000dd4 	.word	0x20000dd4
 8001a94:	20004614 	.word	0x20004614
 8001a98:	200015dc 	.word	0x200015dc
 8001a9c:	20004618 	.word	0x20004618
 8001aa0:	20001de4 	.word	0x20001de4
 8001aa4:	2000461c 	.word	0x2000461c
 8001aa8:	200025ec 	.word	0x200025ec
 8001aac:	20004620 	.word	0x20004620
 8001ab0:	20002df4 	.word	0x20002df4
 8001ab4:	20004624 	.word	0x20004624
 8001ab8:	200035fc 	.word	0x200035fc
 8001abc:	20004628 	.word	0x20004628
 8001ac0:	20003e04 	.word	0x20003e04
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aec:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d031      	beq.n	8001b5e <store_char+0x8a>
	ATOMIC_BLOCK_START(USART1)
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <store_char+0x94>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fef4 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(USART2)
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <store_char+0x98>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff feef 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(UART5)
 8001b0e:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <store_char+0x9c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff feea 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(USART6)
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <store_char+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fee5 	bl	80018ec <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	79f9      	ldrb	r1, [r7, #7]
 8001b2c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
    ATOMIC_BLOCK_END(USART1)
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <store_char+0x94>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe6d 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART2)
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <store_char+0x98>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fe68 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART5)
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <store_char+0x9c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fe63 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART6)
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <store_char+0xa0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe5e 	bl	800181a <LL_USART_EnableIT_RXNE>
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000008 	.word	0x20000008
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <Uart_read>:
//	else return -1;
//}
//

int Uart_read(USART_TypeDef *uart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;

  switch ((uint32_t)uart) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a41      	ldr	r2, [pc, #260]	@ (8001c88 <Uart_read+0x110>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <Uart_read+0x24>
 8001b88:	4a3f      	ldr	r2, [pc, #252]	@ (8001c88 <Uart_read+0x110>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d812      	bhi.n	8001bb4 <Uart_read+0x3c>
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c8c <Uart_read+0x114>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <Uart_read+0x2c>
 8001b94:	4a3e      	ldr	r2, [pc, #248]	@ (8001c90 <Uart_read+0x118>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d008      	beq.n	8001bac <Uart_read+0x34>
 8001b9a:	e00b      	b.n	8001bb4 <Uart_read+0x3c>
    case (uint32_t)USART1:
      _rx_buffer = _rx_buffer1;
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <Uart_read+0x11c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
      break;
 8001ba2:	e00b      	b.n	8001bbc <Uart_read+0x44>
    case (uint32_t)USART2:
      _rx_buffer = _rx_buffer2;
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <Uart_read+0x120>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
      break;
 8001baa:	e007      	b.n	8001bbc <Uart_read+0x44>
    case (uint32_t)UART5:
      _rx_buffer = _rx_buffer5;
 8001bac:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <Uart_read+0x124>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
      break;
 8001bb2:	e003      	b.n	8001bbc <Uart_read+0x44>
    default:
      _rx_buffer = _rx_buffer6;
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca0 <Uart_read+0x128>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
      break;
 8001bba:	bf00      	nop
  }

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d102      	bne.n	8001bd2 <Uart_read+0x5a>
  {
    return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e055      	b.n	8001c7e <Uart_read+0x106>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c88 <Uart_read+0x110>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d105      	bne.n	8001be6 <Uart_read+0x6e>
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <Uart_read+0x12c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fe84 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001be4:	e018      	b.n	8001c18 <Uart_read+0xa0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a28      	ldr	r2, [pc, #160]	@ (8001c8c <Uart_read+0x114>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d105      	bne.n	8001bfa <Uart_read+0x82>
 8001bee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <Uart_read+0x130>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe7a 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001bf8:	e00e      	b.n	8001c18 <Uart_read+0xa0>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	@ (8001c90 <Uart_read+0x118>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d105      	bne.n	8001c0e <Uart_read+0x96>
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <Uart_read+0x134>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe70 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c0c:	e004      	b.n	8001c18 <Uart_read+0xa0>
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <Uart_read+0x138>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fe6a 	bl	80018ec <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    ATOMIC_BLOCK_END(uart)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <Uart_read+0x110>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d105      	bne.n	8001c4a <Uart_read+0xd2>
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <Uart_read+0x12c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fde9 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c48:	e018      	b.n	8001c7c <Uart_read+0x104>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c8c <Uart_read+0x114>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d105      	bne.n	8001c5e <Uart_read+0xe6>
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <Uart_read+0x130>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fddf 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c5c:	e00e      	b.n	8001c7c <Uart_read+0x104>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <Uart_read+0x118>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d105      	bne.n	8001c72 <Uart_read+0xfa>
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <Uart_read+0x134>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fdd5 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c70:	e004      	b.n	8001c7c <Uart_read+0x104>
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <Uart_read+0x138>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fdcf 	bl	800181a <LL_USART_EnableIT_RXNE>
    return c;
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40004400 	.word	0x40004400
 8001c90:	40005000 	.word	0x40005000
 8001c94:	2000460c 	.word	0x2000460c
 8001c98:	20004614 	.word	0x20004614
 8001c9c:	2000461c 	.word	0x2000461c
 8001ca0:	20004624 	.word	0x20004624
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  switch ((uint32_t)uart) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a54      	ldr	r2, [pc, #336]	@ (8001e14 <Uart_write+0x160>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d009      	beq.n	8001cda <Uart_write+0x26>
 8001cc6:	4a53      	ldr	r2, [pc, #332]	@ (8001e14 <Uart_write+0x160>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d812      	bhi.n	8001cf2 <Uart_write+0x3e>
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <Uart_write+0x164>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <Uart_write+0x2e>
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <Uart_write+0x168>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d008      	beq.n	8001cea <Uart_write+0x36>
 8001cd8:	e00b      	b.n	8001cf2 <Uart_write+0x3e>
    case (uint32_t)USART1:
      _tx_buffer = _tx_buffer1;
 8001cda:	4b51      	ldr	r3, [pc, #324]	@ (8001e20 <Uart_write+0x16c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]
      break;
 8001ce0:	e00b      	b.n	8001cfa <Uart_write+0x46>
    case (uint32_t)USART2:
      _tx_buffer = _tx_buffer2;
 8001ce2:	4b50      	ldr	r3, [pc, #320]	@ (8001e24 <Uart_write+0x170>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
      break;
 8001ce8:	e007      	b.n	8001cfa <Uart_write+0x46>
    case (uint32_t)UART5:
      _tx_buffer = _tx_buffer5;
 8001cea:	4b4f      	ldr	r3, [pc, #316]	@ (8001e28 <Uart_write+0x174>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
      break;
 8001cf0:	e003      	b.n	8001cfa <Uart_write+0x46>
    default:
      _tx_buffer = _tx_buffer6;
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e2c <Uart_write+0x178>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
      break;
 8001cf8:	bf00      	nop
  }

	if (c>=0)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f2c0 8085 	blt.w	8001e0c <Uart_write+0x158>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0e:	60bb      	str	r3, [r7, #8]

		ATOMIC_BLOCK_START(uart)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <Uart_write+0x160>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d105      	bne.n	8001d24 <Uart_write+0x70>
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <Uart_write+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fde5 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d22:	e018      	b.n	8001d56 <Uart_write+0xa2>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3c      	ldr	r2, [pc, #240]	@ (8001e18 <Uart_write+0x164>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d105      	bne.n	8001d38 <Uart_write+0x84>
 8001d2c:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <Uart_write+0x180>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fddb 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d36:	e00e      	b.n	8001d56 <Uart_write+0xa2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a38      	ldr	r2, [pc, #224]	@ (8001e1c <Uart_write+0x168>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d105      	bne.n	8001d4c <Uart_write+0x98>
 8001d40:	4b3d      	ldr	r3, [pc, #244]	@ (8001e38 <Uart_write+0x184>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fdd1 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d4a:	e004      	b.n	8001d56 <Uart_write+0xa2>
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <Uart_write+0x188>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fdcb 	bl	80018ec <LL_USART_DisableIT_RXNE>
		while (i == _tx_buffer->tail);
 8001d56:	bf00      	nop
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d0f9      	beq.n	8001d58 <Uart_write+0xa4>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	b2d1      	uxtb	r1, r2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
		ATOMIC_BLOCK_END(uart)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <Uart_write+0x160>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d105      	bne.n	8001d8e <Uart_write+0xda>
 8001d82:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <Uart_write+0x17c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd47 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001d8c:	e018      	b.n	8001dc0 <Uart_write+0x10c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <Uart_write+0x164>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d105      	bne.n	8001da2 <Uart_write+0xee>
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <Uart_write+0x180>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd3d 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001da0:	e00e      	b.n	8001dc0 <Uart_write+0x10c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <Uart_write+0x168>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d105      	bne.n	8001db6 <Uart_write+0x102>
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <Uart_write+0x184>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fd33 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001db4:	e004      	b.n	8001dc0 <Uart_write+0x10c>
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <Uart_write+0x188>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fd2d 	bl	800181a <LL_USART_EnableIT_RXNE>

		  switch ((uint32_t)uart) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <Uart_write+0x160>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <Uart_write+0x128>
 8001dc8:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <Uart_write+0x160>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d818      	bhi.n	8001e00 <Uart_write+0x14c>
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <Uart_write+0x164>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <Uart_write+0x134>
 8001dd4:	4a11      	ldr	r2, [pc, #68]	@ (8001e1c <Uart_write+0x168>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00c      	beq.n	8001df4 <Uart_write+0x140>
 8001dda:	e011      	b.n	8001e00 <Uart_write+0x14c>
		    case (uint32_t)USART1:
		      LL_USART_EnableIT_TXE(uart1);
 8001ddc:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <Uart_write+0x17c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fd3d 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001de6:	e011      	b.n	8001e0c <Uart_write+0x158>
		    case (uint32_t)USART2:
		      LL_USART_EnableIT_TXE(uart2);
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <Uart_write+0x180>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd37 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001df2:	e00b      	b.n	8001e0c <Uart_write+0x158>
		    case (uint32_t)UART5:
		      LL_USART_EnableIT_TXE(uart5);
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <Uart_write+0x184>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fd31 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001dfe:	e005      	b.n	8001e0c <Uart_write+0x158>
		    default:
		      LL_USART_EnableIT_TXE(uart6);
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <Uart_write+0x188>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fd2b 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001e0a:	bf00      	nop
		  }
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40004400 	.word	0x40004400
 8001e1c:	40005000 	.word	0x40005000
 8001e20:	20004610 	.word	0x20004610
 8001e24:	20004618 	.word	0x20004618
 8001e28:	20004620 	.word	0x20004620
 8001e2c:	20004628 	.word	0x20004628
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;
	  switch ((uint32_t)uart) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <IsDataAvailable+0x70>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <IsDataAvailable+0x24>
 8001e50:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <IsDataAvailable+0x70>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d812      	bhi.n	8001e7c <IsDataAvailable+0x3c>
 8001e56:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <IsDataAvailable+0x74>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <IsDataAvailable+0x2c>
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <IsDataAvailable+0x78>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d008      	beq.n	8001e74 <IsDataAvailable+0x34>
 8001e62:	e00b      	b.n	8001e7c <IsDataAvailable+0x3c>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <IsDataAvailable+0x7c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
	      break;
 8001e6a:	e00b      	b.n	8001e84 <IsDataAvailable+0x44>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <IsDataAvailable+0x80>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
	      break;
 8001e72:	e007      	b.n	8001e84 <IsDataAvailable+0x44>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <IsDataAvailable+0x84>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
	      break;
 8001e7a:	e003      	b.n	8001e84 <IsDataAvailable+0x44>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <IsDataAvailable+0x88>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
	      break;
 8001e82:	bf00      	nop
	  }

  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40004400 	.word	0x40004400
 8001eb8:	40005000 	.word	0x40005000
 8001ebc:	2000460c 	.word	0x2000460c
 8001ec0:	20004614 	.word	0x20004614
 8001ec4:	2000461c 	.word	0x2000461c
 8001ec8:	20004624 	.word	0x20004624

08001ecc <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8001ed6:	e007      	b.n	8001ee8 <Uart_sendstring+0x1c>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	603a      	str	r2, [r7, #0]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fee6 	bl	8001cb4 <Uart_write>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f3      	bne.n	8001ed8 <Uart_sendstring+0xc>
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <Uart_flush>:


}

void Uart_flush (USART_TypeDef *uart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;

	  switch ((uint32_t)uart) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <Uart_flush+0x6c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <Uart_flush+0x24>
 8001f0c:	4a16      	ldr	r2, [pc, #88]	@ (8001f68 <Uart_flush+0x6c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d812      	bhi.n	8001f38 <Uart_flush+0x3c>
 8001f12:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <Uart_flush+0x70>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <Uart_flush+0x2c>
 8001f18:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <Uart_flush+0x74>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d008      	beq.n	8001f30 <Uart_flush+0x34>
 8001f1e:	e00b      	b.n	8001f38 <Uart_flush+0x3c>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <Uart_flush+0x78>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
	      break;
 8001f26:	e00b      	b.n	8001f40 <Uart_flush+0x44>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <Uart_flush+0x7c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
	      break;
 8001f2e:	e007      	b.n	8001f40 <Uart_flush+0x44>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <Uart_flush+0x80>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
	      break;
 8001f36:	e003      	b.n	8001f40 <Uart_flush+0x44>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <Uart_flush+0x84>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
	      break;
 8001f3e:	bf00      	nop
	  }

	  memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00c f9fa 	bl	800e342 <memset>
	  _rx_buffer->head = 0;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	  _rx_buffer->tail = 0;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	40005000 	.word	0x40005000
 8001f74:	2000460c 	.word	0x2000460c
 8001f78:	20004614 	.word	0x20004614
 8001f7c:	2000461c 	.word	0x2000461c
 8001f80:	20004624 	.word	0x20004624

08001f84 <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    switch ((uint32_t)uart) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <Uart_isr+0x124>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <Uart_isr+0x24>
 8001f94:	4a44      	ldr	r2, [pc, #272]	@ (80020a8 <Uart_isr+0x124>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d81b      	bhi.n	8001fd2 <Uart_isr+0x4e>
 8001f9a:	4a44      	ldr	r2, [pc, #272]	@ (80020ac <Uart_isr+0x128>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00a      	beq.n	8001fb6 <Uart_isr+0x32>
 8001fa0:	4a43      	ldr	r2, [pc, #268]	@ (80020b0 <Uart_isr+0x12c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <Uart_isr+0x40>
 8001fa6:	e014      	b.n	8001fd2 <Uart_isr+0x4e>
      case (uint32_t)USART1:
        _rx_buffer = _rx_buffer1;
 8001fa8:	4b42      	ldr	r3, [pc, #264]	@ (80020b4 <Uart_isr+0x130>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer1;
 8001fae:	4b42      	ldr	r3, [pc, #264]	@ (80020b8 <Uart_isr+0x134>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        break;
 8001fb4:	e014      	b.n	8001fe0 <Uart_isr+0x5c>
      case (uint32_t)USART2:
        _rx_buffer = _rx_buffer2;
 8001fb6:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <Uart_isr+0x138>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer2;
 8001fbc:	4b40      	ldr	r3, [pc, #256]	@ (80020c0 <Uart_isr+0x13c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
        break;
 8001fc2:	e00d      	b.n	8001fe0 <Uart_isr+0x5c>
      case (uint32_t)UART5:
        _rx_buffer = _rx_buffer5;
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80020c4 <Uart_isr+0x140>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer5;
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <Uart_isr+0x144>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
        break;
 8001fd0:	e006      	b.n	8001fe0 <Uart_isr+0x5c>
      default:
        _rx_buffer = _rx_buffer6;
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80020cc <Uart_isr+0x148>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer6;
 8001fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <Uart_isr+0x14c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	613b      	str	r3, [r7, #16]
        break;
 8001fde:	bf00      	nop
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fbbe 	bl	8001762 <LL_USART_IsActiveFlag_RXNE>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02c      	beq.n	8002046 <Uart_isr+0xc2>
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fcc3 	bl	8001978 <LL_USART_IsEnabledIT_RXNE>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d026      	beq.n	8002046 <Uart_isr+0xc2>
//        LL_USART_ReceiveData8(uart);                /* Read status register */
//        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
//        store_char (c, _rx_buffer);  // store data in buffer
//        return;

        unsigned char data = LL_USART_ReceiveData8(uart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fce3 	bl	80019c4 <LL_USART_ReceiveData8>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fb9a 	bl	800173c <LL_USART_IsActiveFlag_ORE>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10b      	bne.n	8002026 <Uart_isr+0xa2>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fb6e 	bl	80016f0 <LL_USART_IsActiveFlag_FE>
 8002014:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <Uart_isr+0xa2>
            (LL_USART_IsActiveFlag_NE(uart) != RESET))
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fb7b 	bl	8001716 <LL_USART_IsActiveFlag_NE>
 8002020:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <Uart_isr+0xb6>
        {
          // if error, del flag
          LL_USART_ClearFlag_ORE(uart);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fbe5 	bl	80017f6 <LL_USART_ClearFlag_ORE>
          LL_USART_ClearFlag_FE(uart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fbbe 	bl	80017ae <LL_USART_ClearFlag_FE>
          LL_USART_ClearFlag_NE(uart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fbcd 	bl	80017d2 <LL_USART_ClearFlag_NE>
        }
        else
        {
          store_char(data, _rx_buffer); // store data in buffer
        }
        return;
 8002038:	e032      	b.n	80020a0 <Uart_isr+0x11c>
          store_char(data, _rx_buffer); // store data in buffer
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	6979      	ldr	r1, [r7, #20]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fd48 	bl	8001ad4 <store_char>
        return;
 8002044:	e02c      	b.n	80020a0 <Uart_isr+0x11c>


    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fb9e 	bl	8001788 <LL_USART_IsActiveFlag_TXE>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d026      	beq.n	80020a0 <Uart_isr+0x11c>
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fca3 	bl	800199e <LL_USART_IsEnabledIT_TXE>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d020      	beq.n	80020a0 <Uart_isr+0x11c>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800206a:	429a      	cmp	r2, r3
 800206c:	d103      	bne.n	8002076 <Uart_isr+0xf2>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fc5f 	bl	8001932 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 8002074:	e013      	b.n	800209e <Uart_isr+0x11a>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002088:	3301      	adds	r3, #1
 800208a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
          LL_USART_TransmitData8(uart, c);
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fca0 	bl	80019de <LL_USART_TransmitData8>
        return;
 800209e:	bf00      	nop
    }
}
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40004400 	.word	0x40004400
 80020b0:	40005000 	.word	0x40005000
 80020b4:	2000460c 	.word	0x2000460c
 80020b8:	20004610 	.word	0x20004610
 80020bc:	20004614 	.word	0x20004614
 80020c0:	20004618 	.word	0x20004618
 80020c4:	2000461c 	.word	0x2000461c
 80020c8:	20004620 	.word	0x20004620
 80020cc:	20004624 	.word	0x20004624
 80020d0:	20004628 	.word	0x20004628

080020d4 <send_packet_init>:
		status_ACKsend_update					// taskFunction;
	}
};

void send_packet_init(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
    sendFlag = 0;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <send_packet_init+0x1c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <send_packet_init+0x20>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2000472d 	.word	0x2000472d
 80020f4:	2000472e 	.word	0x2000472e

080020f8 <set_send_flag>:

void set_send_flag(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
    sendFlag = 1;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <set_send_flag+0x14>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	2000472d 	.word	0x2000472d

08002110 <clear_send_flag>:

void clear_send_flag(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <clear_send_flag+0x14>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	2000472d 	.word	0x2000472d

08002128 <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
	while (g_pkt_lock);
 8002134:	bf00      	nop
 8002136:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <set_fsp_packet+0x58>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1fa      	bne.n	8002136 <set_fsp_packet+0xe>
	g_pkt_lock = 1;
 8002140:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <set_fsp_packet+0x58>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
	memset((void *)g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 8002146:	22ff      	movs	r2, #255	@ 0xff
 8002148:	2100      	movs	r1, #0
 800214a:	480e      	ldr	r0, [pc, #56]	@ (8002184 <set_fsp_packet+0x5c>)
 800214c:	f00c f8f9 	bl	800e342 <memset>
    memcpy((void *)g_encoded_pkt, encoded_pkt, encoded_len);
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	461a      	mov	r2, r3
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	480b      	ldr	r0, [pc, #44]	@ (8002184 <set_fsp_packet+0x5c>)
 8002158:	f00c f973 	bl	800e442 <memcpy>
    g_encoded_len = encoded_len;
 800215c:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <set_fsp_packet+0x60>)
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	7013      	strb	r3, [r2, #0]
    g_pkt_lock = 0;
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <set_fsp_packet+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
    sendFlag = 1;
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <set_fsp_packet+0x64>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);
 800216e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002172:	2003      	movs	r0, #3
 8002174:	f008 f914 	bl	800a3a0 <SCH_TIM_Start>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000472c 	.word	0x2000472c
 8002184:	2000462c 	.word	0x2000462c
 8002188:	2000472b 	.word	0x2000472b
 800218c:	2000472d 	.word	0x2000472d

08002190 <send_packet_create_task>:

void send_packet_create_task(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 8002194:	4902      	ldr	r1, [pc, #8]	@ (80021a0 <send_packet_create_task+0x10>)
 8002196:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <send_packet_create_task+0x14>)
 8002198:	f008 f92e 	bl	800a3f8 <SCH_TASK_CreateTask>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000014 	.word	0x20000014
 80021a4:	20000010 	.word	0x20000010

080021a8 <status_ACKsend_update>:


uint8_t sendBuffer[FSP_PKT_MAX_LENGTH];

void	status_ACKsend_update(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 80021ae:	2003      	movs	r0, #3
 80021b0:	f008 f90c 	bl	800a3cc <SCH_TIM_HasCompleted>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d057      	beq.n	800226a <status_ACKsend_update+0xc2>
			{

			    if (sendFlag)
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <status_ACKsend_update+0xcc>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d04d      	beq.n	8002260 <status_ACKsend_update+0xb8>
			    {
			    	if(retryCount < MAX_RETRIES){
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <status_ACKsend_update+0xd0>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d833      	bhi.n	8002236 <status_ACKsend_update+0x8e>
			    		while (g_pkt_lock);
 80021ce:	bf00      	nop
 80021d0:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <status_ACKsend_update+0xd4>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1fa      	bne.n	80021d0 <status_ACKsend_update+0x28>
			    		g_pkt_lock = 1;
 80021da:	4b28      	ldr	r3, [pc, #160]	@ (800227c <status_ACKsend_update+0xd4>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
			            memcpy(sendBuffer, (const void *)g_encoded_pkt, g_encoded_len);
 80021e0:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <status_ACKsend_update+0xd8>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	4926      	ldr	r1, [pc, #152]	@ (8002284 <status_ACKsend_update+0xdc>)
 80021ea:	4827      	ldr	r0, [pc, #156]	@ (8002288 <status_ACKsend_update+0xe0>)
 80021ec:	f00c f929 	bl	800e442 <memcpy>
			            for (int i = 0; i < g_encoded_len; i++) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	e00a      	b.n	800220c <status_ACKsend_update+0x64>
			                Uart_write(USART1, sendBuffer[i]);
 80021f6:	4a24      	ldr	r2, [pc, #144]	@ (8002288 <status_ACKsend_update+0xe0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4822      	ldr	r0, [pc, #136]	@ (800228c <status_ACKsend_update+0xe4>)
 8002202:	f7ff fd57 	bl	8001cb4 <Uart_write>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3301      	adds	r3, #1
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <status_ACKsend_update+0xd8>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4293      	cmp	r3, r2
 8002218:	dbed      	blt.n	80021f6 <status_ACKsend_update+0x4e>
			            }
						retryCount++;
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <status_ACKsend_update+0xd0>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <status_ACKsend_update+0xd0>)
 8002226:	701a      	strb	r2, [r3, #0]
						sendFlag = 1;
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <status_ACKsend_update+0xcc>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
						g_pkt_lock = 0;
 800222e:	4b13      	ldr	r3, [pc, #76]	@ (800227c <status_ACKsend_update+0xd4>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e014      	b.n	8002260 <status_ACKsend_update+0xb8>
			    	}
			    	else {
			    		retryCount = 0;
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <status_ACKsend_update+0xd0>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 800223c:	f7ff ff68 	bl	8002110 <clear_send_flag>

			    		Uart_sendstring(UART5, "TIMEOUT_NORESPONE");
 8002240:	4913      	ldr	r1, [pc, #76]	@ (8002290 <status_ACKsend_update+0xe8>)
 8002242:	4814      	ldr	r0, [pc, #80]	@ (8002294 <status_ACKsend_update+0xec>)
 8002244:	f7ff fe42 	bl	8001ecc <Uart_sendstring>
			    		Uart_sendstring(UART5, "\r\n> ");
 8002248:	4913      	ldr	r1, [pc, #76]	@ (8002298 <status_ACKsend_update+0xf0>)
 800224a:	4812      	ldr	r0, [pc, #72]	@ (8002294 <status_ACKsend_update+0xec>)
 800224c:	f7ff fe3e 	bl	8001ecc <Uart_sendstring>
			    		Uart_sendstring(USART6, "TIMEOUT_NORESPONE");
 8002250:	490f      	ldr	r1, [pc, #60]	@ (8002290 <status_ACKsend_update+0xe8>)
 8002252:	4812      	ldr	r0, [pc, #72]	@ (800229c <status_ACKsend_update+0xf4>)
 8002254:	f7ff fe3a 	bl	8001ecc <Uart_sendstring>
			    		Uart_sendstring(USART6, "\r\n> ");
 8002258:	490f      	ldr	r1, [pc, #60]	@ (8002298 <status_ACKsend_update+0xf0>)
 800225a:	4810      	ldr	r0, [pc, #64]	@ (800229c <status_ACKsend_update+0xf4>)
 800225c:	f7ff fe36 	bl	8001ecc <Uart_sendstring>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);	//restart
 8002260:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002264:	2003      	movs	r0, #3
 8002266:	f008 f89b 	bl	800a3a0 <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000472d 	.word	0x2000472d
 8002278:	2000472e 	.word	0x2000472e
 800227c:	2000472c 	.word	0x2000472c
 8002280:	2000472b 	.word	0x2000472b
 8002284:	2000462c 	.word	0x2000462c
 8002288:	20004730 	.word	0x20004730
 800228c:	40011000 	.word	0x40011000
 8002290:	08011a18 	.word	0x08011a18
 8002294:	40005000 	.word	0x40005000
 8002298:	08011a2c 	.word	0x08011a2c
 800229c:	40011400 	.word	0x40011400

080022a0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	619a      	str	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <IOU_create_task>:
};



void IOU_create_task(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&IOU_task_context.taskHandle, &IOU_task_context.taskProperty);
 80022c0:	4906      	ldr	r1, [pc, #24]	@ (80022dc <IOU_create_task+0x20>)
 80022c2:	4807      	ldr	r0, [pc, #28]	@ (80022e0 <IOU_create_task+0x24>)
 80022c4:	f008 f898 	bl	800a3f8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 80022c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022cc:	2007      	movs	r0, #7
 80022ce:	f008 f867 	bl	800a3a0 <SCH_TIM_Start>
    Ringbuf_init();
 80022d2:	f7ff fb93 	bl	80019fc <Ringbuf_init>
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000030 	.word	0x20000030
 80022e0:	2000002c 	.word	0x2000002c

080022e4 <IOU_update_task>:
volatile uint8_t receive_pmuFlag = 1;
volatile uint8_t receive_iouFlag = 1;
volatile uint8_t send_rs422 = 0;


void IOU_update_task(void) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
	if (auto_report_enabled) {
 80022ea:	4b24      	ldr	r3, [pc, #144]	@ (800237c <IOU_update_task+0x98>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d040      	beq.n	8002374 <IOU_update_task+0x90>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_IOU))
 80022f2:	2007      	movs	r0, #7
 80022f4:	f008 f86a 	bl	800a3cc <SCH_TIM_HasCompleted>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03a      	beq.n	8002374 <IOU_update_task+0x90>
		{

			if(!sendFlag){
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <IOU_update_task+0x9c>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d135      	bne.n	8002374 <IOU_update_task+0x90>
				if(!send_rs422){
 8002308:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <IOU_update_task+0xa0>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d130      	bne.n	8002374 <IOU_update_task+0x90>
					if(receive_pduFlag&&receive_pmuFlag){
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <IOU_update_task+0xa4>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02b      	beq.n	8002374 <IOU_update_task+0x90>
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <IOU_update_task+0xa8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d026      	beq.n	8002374 <IOU_update_task+0x90>
						switch_board(0);
 8002326:	2000      	movs	r0, #0
 8002328:	f004 fcd6 	bl	8006cd8 <switch_board>
						Uart_flush(USART1);
 800232c:	4818      	ldr	r0, [pc, #96]	@ (8002390 <IOU_update_task+0xac>)
 800232e:	f7ff fde5 	bl	8001efc <Uart_flush>

						frame = iou_frame;
 8002332:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <IOU_update_task+0xb0>)
 8002334:	60bb      	str	r3, [r7, #8]
						frame_len = sizeof(iou_frame);
 8002336:	2309      	movs	r3, #9
 8002338:	71fb      	strb	r3, [r7, #7]
						for (int i = 0; i < frame_len; i++) {
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	e00a      	b.n	8002356 <IOU_update_task+0x72>
							Uart_write(USART1, frame[i]);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	4811      	ldr	r0, [pc, #68]	@ (8002390 <IOU_update_task+0xac>)
 800234c:	f7ff fcb2 	bl	8001cb4 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	429a      	cmp	r2, r3
 800235c:	dbf0      	blt.n	8002340 <IOU_update_task+0x5c>
						}
						receive_iouFlag = 0;
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <IOU_update_task+0xb4>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 8002364:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <IOU_update_task+0xa0>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 800236a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800236e:	2007      	movs	r0, #7
 8002370:	f008 f816 	bl	800a3a0 <SCH_TIM_Start>
					}
				}
			}
		}
	}
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20004958 	.word	0x20004958
 8002380:	2000472d 	.word	0x2000472d
 8002384:	2000482f 	.word	0x2000482f
 8002388:	2000003c 	.word	0x2000003c
 800238c:	2000003d 	.word	0x2000003d
 8002390:	40011000 	.word	0x40011000
 8002394:	20000020 	.word	0x20000020
 8002398:	2000003e 	.word	0x2000003e

0800239c <Cmd_iou_set_temp>:
//}

volatile uint8_t uart_choose_uart5 = 0;

int Cmd_iou_set_temp(int argc, char *argv[])
{
 800239c:	b580      	push	{r7, lr}
 800239e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80023a2:	af02      	add	r7, sp, #8
 80023a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80023a8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80023ac:	6018      	str	r0, [r3, #0]
 80023ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80023b2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80023b6:	6019      	str	r1, [r3, #0]


    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80023b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80023bc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	dc01      	bgt.n	80023ca <Cmd_iou_set_temp+0x2e>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0d8      	b.n	800257c <Cmd_iou_set_temp+0x1e0>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80023ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80023ce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	dd01      	ble.n	80023dc <Cmd_iou_set_temp+0x40>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0cf      	b.n	800257c <Cmd_iou_set_temp+0x1e0>

    uint8_t channel = atoi(argv[1]);
 80023dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80023e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3304      	adds	r3, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00a ff8e 	bl	800d30c <atoi>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80023f6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d901      	bls.n	8002402 <Cmd_iou_set_temp+0x66>
 80023fe:	2304      	movs	r3, #4
 8002400:	e0bc      	b.n	800257c <Cmd_iou_set_temp+0x1e0>

    uint16_t temp = atoi(argv[2]);
 8002402:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002406:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3308      	adds	r3, #8
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f00a ff7b 	bl	800d30c <atoi>
 8002416:	4603      	mov	r3, r0
 8002418:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (temp > 500)    return CMDLINE_INVALID_ARG;
 800241c:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002420:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002424:	d901      	bls.n	800242a <Cmd_iou_set_temp+0x8e>
 8002426:	2304      	movs	r3, #4
 8002428:	e0a8      	b.n	800257c <Cmd_iou_set_temp+0x1e0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800242a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800242e:	4856      	ldr	r0, [pc, #344]	@ (8002588 <Cmd_iou_set_temp+0x1ec>)
 8002430:	f7ff ff36 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002434:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002438:	4853      	ldr	r0, [pc, #332]	@ (8002588 <Cmd_iou_set_temp+0x1ec>)
 800243a:	f7ff ff31 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800243e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002442:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800244c:	3b01      	subs	r3, #1
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002454:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002462:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002466:	4a49      	ldr	r2, [pc, #292]	@ (800258c <Cmd_iou_set_temp+0x1f0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d103      	bne.n	8002474 <Cmd_iou_set_temp+0xd8>
    	uart_choose_uart5 = 1;
 800246c:	4b48      	ldr	r3, [pc, #288]	@ (8002590 <Cmd_iou_set_temp+0x1f4>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e002      	b.n	800247a <Cmd_iou_set_temp+0xde>
    }else{
    	uart_choose_uart5 = 0;
 8002474:	4b46      	ldr	r3, [pc, #280]	@ (8002590 <Cmd_iou_set_temp+0x1f4>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
    }

    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = channel;
 8002480:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002484:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(temp >> 8);   //high
 8002488:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	b29b      	uxth	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(temp & 0xFF); //low
 8002496:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80024a0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80024a4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80024a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2301      	movs	r3, #1
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2305      	movs	r3, #5
 80024b4:	2203      	movs	r2, #3
 80024b6:	f008 f94b 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80024ba:	f107 020f 	add.w	r2, r7, #15
 80024be:	f107 0110 	add.w	r1, r7, #16
 80024c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024c6:	4618      	mov	r0, r3
 80024c8:	f008 f9c8 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 80024cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80024d0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02c      	beq.n	8002534 <Cmd_iou_set_temp+0x198>
        for (int i = 0; i < frame_len; i++) {
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80024e0:	e010      	b.n	8002504 <Cmd_iou_set_temp+0x168>
            Uart_write(USART1, encoded_frame[i]);
 80024e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80024e6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80024ea:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4827      	ldr	r0, [pc, #156]	@ (8002594 <Cmd_iou_set_temp+0x1f8>)
 80024f6:	f7ff fbdd 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80024fa:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80024fe:	3301      	adds	r3, #1
 8002500:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002504:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002508:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002514:	4293      	cmp	r3, r2
 8002516:	dbe4      	blt.n	80024e2 <Cmd_iou_set_temp+0x146>

        }
        set_fsp_packet(encoded_frame, frame_len);
 8002518:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800251c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fdfd 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800252e:	f7ff fde3 	bl	80020f8 <set_send_flag>
 8002532:	e022      	b.n	800257a <Cmd_iou_set_temp+0x1de>
    }else{
    	fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002534:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002538:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800253c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	2301      	movs	r3, #1
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2305      	movs	r3, #5
 8002548:	2203      	movs	r2, #3
 800254a:	f008 f901 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
    	frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800254e:	f107 020f 	add.w	r2, r7, #15
 8002552:	f107 0110 	add.w	r1, r7, #16
 8002556:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800255a:	4618      	mov	r0, r3
 800255c:	f008 f97e 	bl	800a85c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8002560:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002564:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fdd9 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8002576:	f7ff fdbf 	bl	80020f8 <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 800257a:	2305      	movs	r3, #5
}
 800257c:	4618      	mov	r0, r3
 800257e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40020000 	.word	0x40020000
 800258c:	40005000 	.word	0x40005000
 8002590:	20004830 	.word	0x20004830
 8002594:	40011000 	.word	0x40011000

08002598 <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 8002598:	b580      	push	{r7, lr}
 800259a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800259e:	af02      	add	r7, sp, #8
 80025a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025a4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025a8:	6018      	str	r0, [r3, #0]
 80025aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025ae:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025b2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80025b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025b8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	dc01      	bgt.n	80025c6 <Cmd_iou_get_temp+0x2e>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0cf      	b.n	8002766 <Cmd_iou_get_temp+0x1ce>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80025c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025ca:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	dd01      	ble.n	80025d8 <Cmd_iou_get_temp+0x40>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e0c6      	b.n	8002766 <Cmd_iou_get_temp+0x1ce>


    uint8_t sensor = atoi(argv[1]);
 80025d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025dc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3304      	adds	r3, #4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00a fe90 	bl	800d30c <atoi>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 80025f2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d901      	bls.n	80025fe <Cmd_iou_get_temp+0x66>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e0b3      	b.n	8002766 <Cmd_iou_get_temp+0x1ce>

    uint8_t channel = atoi(argv[2]);
 80025fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002602:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3308      	adds	r3, #8
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f00a fe7d 	bl	800d30c <atoi>
 8002612:	4603      	mov	r3, r0
 8002614:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002618:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 800261c:	2b03      	cmp	r3, #3
 800261e:	d901      	bls.n	8002624 <Cmd_iou_get_temp+0x8c>
 8002620:	2304      	movs	r3, #4
 8002622:	e0a0      	b.n	8002766 <Cmd_iou_get_temp+0x1ce>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002624:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002628:	4851      	ldr	r0, [pc, #324]	@ (8002770 <Cmd_iou_get_temp+0x1d8>)
 800262a:	f7ff fe39 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800262e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002632:	484f      	ldr	r0, [pc, #316]	@ (8002770 <Cmd_iou_get_temp+0x1d8>)
 8002634:	f7ff fe34 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002638:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800263c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002646:	3b01      	subs	r3, #1
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800264e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	4413      	add	r3, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800265c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002660:	4a44      	ldr	r2, [pc, #272]	@ (8002774 <Cmd_iou_get_temp+0x1dc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d103      	bne.n	800266e <Cmd_iou_get_temp+0xd6>
    	uart_choose_uart5 = 1;
 8002666:	4b44      	ldr	r3, [pc, #272]	@ (8002778 <Cmd_iou_get_temp+0x1e0>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e002      	b.n	8002674 <Cmd_iou_get_temp+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 800266e:	4b42      	ldr	r3, [pc, #264]	@ (8002778 <Cmd_iou_get_temp+0x1e0>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_GET_TEMP;
 8002674:	2302      	movs	r3, #2
 8002676:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];


    payload[0] = sensor;
 800267a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800267e:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = channel;
 8002682:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002686:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800268a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800268e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	2301      	movs	r3, #1
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2305      	movs	r3, #5
 800269e:	2202      	movs	r2, #2
 80026a0:	f008 f856 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80026a4:	f107 020f 	add.w	r2, r7, #15
 80026a8:	f107 0110 	add.w	r1, r7, #16
 80026ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026b0:	4618      	mov	r0, r3
 80026b2:	f008 f8d3 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 80026b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026ba:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02c      	beq.n	800271e <Cmd_iou_get_temp+0x186>
        for (int i = 0; i < frame_len; i++) {
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80026ca:	e010      	b.n	80026ee <Cmd_iou_get_temp+0x156>
            Uart_write(USART1, encoded_frame[i]);
 80026cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026d0:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80026d4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	4827      	ldr	r0, [pc, #156]	@ (800277c <Cmd_iou_get_temp+0x1e4>)
 80026e0:	f7ff fae8 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80026e4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026e8:	3301      	adds	r3, #1
 80026ea:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80026ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026f2:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026fe:	4293      	cmp	r3, r2
 8002700:	dbe4      	blt.n	80026cc <Cmd_iou_get_temp+0x134>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002702:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002706:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fd08 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002718:	f7ff fcee 	bl	80020f8 <set_send_flag>
 800271c:	e022      	b.n	8002764 <Cmd_iou_get_temp+0x1cc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800271e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002722:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2301      	movs	r3, #1
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2305      	movs	r3, #5
 8002732:	2202      	movs	r2, #2
 8002734:	f008 f80c 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002738:	f107 020f 	add.w	r2, r7, #15
 800273c:	f107 0110 	add.w	r1, r7, #16
 8002740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002744:	4618      	mov	r0, r3
 8002746:	f008 f889 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800274a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800274e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fce4 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002760:	f7ff fcca 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002764:	2305      	movs	r3, #5
}
 8002766:	4618      	mov	r0, r3
 8002768:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40020000 	.word	0x40020000
 8002774:	40005000 	.word	0x40005000
 8002778:	20004830 	.word	0x20004830
 800277c:	40011000 	.word	0x40011000

08002780 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 8002780:	b580      	push	{r7, lr}
 8002782:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002786:	af02      	add	r7, sp, #8
 8002788:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800278c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002790:	6018      	str	r0, [r3, #0]
 8002792:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002796:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800279a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800279c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027a0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	dc01      	bgt.n	80027ae <Cmd_iou_temp_setpoint+0x2e>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0b8      	b.n	8002920 <Cmd_iou_temp_setpoint+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80027ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027b2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	dd01      	ble.n	80027c0 <Cmd_iou_temp_setpoint+0x40>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0af      	b.n	8002920 <Cmd_iou_temp_setpoint+0x1a0>
    uint8_t channel = atoi(argv[1]);
 80027c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027c4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3304      	adds	r3, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00a fd9c 	bl	800d30c <atoi>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80027da:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d901      	bls.n	80027e6 <Cmd_iou_temp_setpoint+0x66>
 80027e2:	2304      	movs	r3, #4
 80027e4:	e09c      	b.n	8002920 <Cmd_iou_temp_setpoint+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80027e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027ea:	4850      	ldr	r0, [pc, #320]	@ (800292c <Cmd_iou_temp_setpoint+0x1ac>)
 80027ec:	f7ff fd58 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80027f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027f4:	484d      	ldr	r0, [pc, #308]	@ (800292c <Cmd_iou_temp_setpoint+0x1ac>)
 80027f6:	f7ff fd53 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80027fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027fe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002808:	3b01      	subs	r3, #1
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002810:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4413      	add	r3, r2
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800281e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002822:	4a43      	ldr	r2, [pc, #268]	@ (8002930 <Cmd_iou_temp_setpoint+0x1b0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <Cmd_iou_temp_setpoint+0xb0>
    	uart_choose_uart5 = 1;
 8002828:	4b42      	ldr	r3, [pc, #264]	@ (8002934 <Cmd_iou_temp_setpoint+0x1b4>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e002      	b.n	8002836 <Cmd_iou_temp_setpoint+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002830:	4b40      	ldr	r3, [pc, #256]	@ (8002934 <Cmd_iou_temp_setpoint+0x1b4>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 8002836:	2303      	movs	r3, #3
 8002838:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 800283c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002840:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002844:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002848:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800284c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2301      	movs	r3, #1
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2305      	movs	r3, #5
 8002858:	2201      	movs	r2, #1
 800285a:	f007 ff79 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800285e:	f107 020f 	add.w	r2, r7, #15
 8002862:	f107 0110 	add.w	r1, r7, #16
 8002866:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800286a:	4618      	mov	r0, r3
 800286c:	f007 fff6 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 8002870:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002874:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d02c      	beq.n	80028d8 <Cmd_iou_temp_setpoint+0x158>
        for (int i = 0; i < frame_len; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002884:	e010      	b.n	80028a8 <Cmd_iou_temp_setpoint+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002886:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800288a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800288e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4619      	mov	r1, r3
 8002898:	4827      	ldr	r0, [pc, #156]	@ (8002938 <Cmd_iou_temp_setpoint+0x1b8>)
 800289a:	f7ff fa0b 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800289e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80028a2:	3301      	adds	r3, #1
 80028a4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80028a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028ac:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80028b8:	4293      	cmp	r3, r2
 80028ba:	dbe4      	blt.n	8002886 <Cmd_iou_temp_setpoint+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80028bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028c0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fc2b 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80028d2:	f7ff fc11 	bl	80020f8 <set_send_flag>
 80028d6:	e022      	b.n	800291e <Cmd_iou_temp_setpoint+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80028d8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80028dc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80028e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	2301      	movs	r3, #1
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2305      	movs	r3, #5
 80028ec:	2201      	movs	r2, #1
 80028ee:	f007 ff2f 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80028f2:	f107 020f 	add.w	r2, r7, #15
 80028f6:	f107 0110 	add.w	r1, r7, #16
 80028fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028fe:	4618      	mov	r0, r3
 8002900:	f007 ffac 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002904:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002908:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	f107 0310 	add.w	r3, r7, #16
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fc07 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800291a:	f7ff fbed 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800291e:	2305      	movs	r3, #5
}
 8002920:	4618      	mov	r0, r3
 8002922:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40020000 	.word	0x40020000
 8002930:	40005000 	.word	0x40005000
 8002934:	20004830 	.word	0x20004830
 8002938:	40011000 	.word	0x40011000

0800293c <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 800293c:	b580      	push	{r7, lr}
 800293e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002942:	af02      	add	r7, sp, #8
 8002944:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002948:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800294c:	6018      	str	r0, [r3, #0]
 800294e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002952:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002956:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002958:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800295c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b02      	cmp	r3, #2
 8002964:	dc01      	bgt.n	800296a <Cmd_iou_tec_ena+0x2e>
 8002966:	2303      	movs	r3, #3
 8002968:	e0b8      	b.n	8002adc <Cmd_iou_tec_ena+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800296a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800296e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b03      	cmp	r3, #3
 8002976:	dd01      	ble.n	800297c <Cmd_iou_tec_ena+0x40>
 8002978:	2302      	movs	r3, #2
 800297a:	e0af      	b.n	8002adc <Cmd_iou_tec_ena+0x1a0>
    uint8_t channel = atoi(argv[1]);
 800297c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002980:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3304      	adds	r3, #4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f00a fcbe 	bl	800d30c <atoi>
 8002990:	4603      	mov	r3, r0
 8002992:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002996:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800299a:	2b03      	cmp	r3, #3
 800299c:	d901      	bls.n	80029a2 <Cmd_iou_tec_ena+0x66>
 800299e:	2304      	movs	r3, #4
 80029a0:	e09c      	b.n	8002adc <Cmd_iou_tec_ena+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80029a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029a6:	4850      	ldr	r0, [pc, #320]	@ (8002ae8 <Cmd_iou_tec_ena+0x1ac>)
 80029a8:	f7ff fc7a 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80029ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029b0:	484d      	ldr	r0, [pc, #308]	@ (8002ae8 <Cmd_iou_tec_ena+0x1ac>)
 80029b2:	f7ff fc75 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80029b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029ba:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029c4:	3b01      	subs	r3, #1
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80029cc:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80029da:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80029de:	4a43      	ldr	r2, [pc, #268]	@ (8002aec <Cmd_iou_tec_ena+0x1b0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d103      	bne.n	80029ec <Cmd_iou_tec_ena+0xb0>
    	uart_choose_uart5 = 1;
 80029e4:	4b42      	ldr	r3, [pc, #264]	@ (8002af0 <Cmd_iou_tec_ena+0x1b4>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e002      	b.n	80029f2 <Cmd_iou_tec_ena+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 80029ec:	4b40      	ldr	r3, [pc, #256]	@ (8002af0 <Cmd_iou_tec_ena+0x1b4>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_ENA;
 80029f2:	2304      	movs	r3, #4
 80029f4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 80029f8:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80029fc:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a00:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a04:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2305      	movs	r3, #5
 8002a14:	2201      	movs	r2, #1
 8002a16:	f007 fe9b 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002a1a:	f107 020f 	add.w	r2, r7, #15
 8002a1e:	f107 0110 	add.w	r1, r7, #16
 8002a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a26:	4618      	mov	r0, r3
 8002a28:	f007 ff18 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002a2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a30:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02c      	beq.n	8002a94 <Cmd_iou_tec_ena+0x158>
        for (int i = 0; i < frame_len; i++) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002a40:	e010      	b.n	8002a64 <Cmd_iou_tec_ena+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002a42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a46:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002a4a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	4827      	ldr	r0, [pc, #156]	@ (8002af4 <Cmd_iou_tec_ena+0x1b8>)
 8002a56:	f7ff f92d 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002a5a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002a64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a68:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002a74:	4293      	cmp	r3, r2
 8002a76:	dbe4      	blt.n	8002a42 <Cmd_iou_tec_ena+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002a78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a7c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fb4d 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002a8e:	f7ff fb33 	bl	80020f8 <set_send_flag>
 8002a92:	e022      	b.n	8002ada <Cmd_iou_tec_ena+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a94:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a98:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002a9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2305      	movs	r3, #5
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f007 fe51 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002aae:	f107 020f 	add.w	r2, r7, #15
 8002ab2:	f107 0110 	add.w	r1, r7, #16
 8002ab6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002aba:	4618      	mov	r0, r3
 8002abc:	f007 fece 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002ac0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ac4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	f107 0310 	add.w	r3, r7, #16
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fb29 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002ad6:	f7ff fb0f 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002ada:	2305      	movs	r3, #5
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40005000 	.word	0x40005000
 8002af0:	20004830 	.word	0x20004830
 8002af4:	40011000 	.word	0x40011000

08002af8 <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b04:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b08:	6018      	str	r0, [r3, #0]
 8002b0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b0e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002b12:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002b14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b18:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	dc01      	bgt.n	8002b26 <Cmd_iou_tec_dis+0x2e>
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0b8      	b.n	8002c98 <Cmd_iou_tec_dis+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002b26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b2a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	dd01      	ble.n	8002b38 <Cmd_iou_tec_dis+0x40>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e0af      	b.n	8002c98 <Cmd_iou_tec_dis+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8002b38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b3c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3304      	adds	r3, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f00a fbe0 	bl	800d30c <atoi>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002b52:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d901      	bls.n	8002b5e <Cmd_iou_tec_dis+0x66>
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	e09c      	b.n	8002c98 <Cmd_iou_tec_dis+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002b5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b62:	4850      	ldr	r0, [pc, #320]	@ (8002ca4 <Cmd_iou_tec_dis+0x1ac>)
 8002b64:	f7ff fb9c 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002b68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b6c:	484d      	ldr	r0, [pc, #308]	@ (8002ca4 <Cmd_iou_tec_dis+0x1ac>)
 8002b6e:	f7ff fb97 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002b72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b76:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b80:	3b01      	subs	r3, #1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002b88:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002b96:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002b9a:	4a43      	ldr	r2, [pc, #268]	@ (8002ca8 <Cmd_iou_tec_dis+0x1b0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d103      	bne.n	8002ba8 <Cmd_iou_tec_dis+0xb0>
    	uart_choose_uart5 = 1;
 8002ba0:	4b42      	ldr	r3, [pc, #264]	@ (8002cac <Cmd_iou_tec_dis+0x1b4>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e002      	b.n	8002bae <Cmd_iou_tec_dis+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002ba8:	4b40      	ldr	r3, [pc, #256]	@ (8002cac <Cmd_iou_tec_dis+0x1b4>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_TEC_DIS;
 8002bae:	2305      	movs	r3, #5
 8002bb0:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002bb4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002bb8:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002bbc:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002bc0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002bc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2305      	movs	r3, #5
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f007 fdbd 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002bd6:	f107 020f 	add.w	r2, r7, #15
 8002bda:	f107 0110 	add.w	r1, r7, #16
 8002bde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002be2:	4618      	mov	r0, r3
 8002be4:	f007 fe3a 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002be8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bec:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d02c      	beq.n	8002c50 <Cmd_iou_tec_dis+0x158>
        for (int i = 0; i < frame_len; i++) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002bfc:	e010      	b.n	8002c20 <Cmd_iou_tec_dis+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002bfe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c02:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002c06:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4827      	ldr	r0, [pc, #156]	@ (8002cb0 <Cmd_iou_tec_dis+0x1b8>)
 8002c12:	f7ff f84f 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002c16:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002c20:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c24:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c30:	4293      	cmp	r3, r2
 8002c32:	dbe4      	blt.n	8002bfe <Cmd_iou_tec_dis+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002c34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c38:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	f107 0310 	add.w	r3, r7, #16
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fa6f 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002c4a:	f7ff fa55 	bl	80020f8 <set_send_flag>
 8002c4e:	e022      	b.n	8002c96 <Cmd_iou_tec_dis+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002c50:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002c54:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002c58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	2301      	movs	r3, #1
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2305      	movs	r3, #5
 8002c64:	2201      	movs	r2, #1
 8002c66:	f007 fd73 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002c6a:	f107 020f 	add.w	r2, r7, #15
 8002c6e:	f107 0110 	add.w	r1, r7, #16
 8002c72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c76:	4618      	mov	r0, r3
 8002c78:	f007 fdf0 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002c7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c80:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	f107 0310 	add.w	r3, r7, #16
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa4b 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002c92:	f7ff fa31 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002c96:	2305      	movs	r3, #5
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40005000 	.word	0x40005000
 8002cac:	20004830 	.word	0x20004830
 8002cb0:	40011000 	.word	0x40011000

08002cb4 <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002cba:	af02      	add	r7, sp, #8
 8002cbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cc0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002cc4:	6018      	str	r0, [r3, #0]
 8002cc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002cce:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002cd0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cd4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	dc01      	bgt.n	8002ce2 <Cmd_iou_tec_ena_auto+0x2e>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0b8      	b.n	8002e54 <Cmd_iou_tec_ena_auto+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002ce2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ce6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	dd01      	ble.n	8002cf4 <Cmd_iou_tec_ena_auto+0x40>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0af      	b.n	8002e54 <Cmd_iou_tec_ena_auto+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8002cf4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cf8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f00a fb02 	bl	800d30c <atoi>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002d0e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d901      	bls.n	8002d1a <Cmd_iou_tec_ena_auto+0x66>
 8002d16:	2304      	movs	r3, #4
 8002d18:	e09c      	b.n	8002e54 <Cmd_iou_tec_ena_auto+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002d1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d1e:	4850      	ldr	r0, [pc, #320]	@ (8002e60 <Cmd_iou_tec_ena_auto+0x1ac>)
 8002d20:	f7ff fabe 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002d24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d28:	484d      	ldr	r0, [pc, #308]	@ (8002e60 <Cmd_iou_tec_ena_auto+0x1ac>)
 8002d2a:	f7ff fab9 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002d2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d32:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002d44:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002d52:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002d56:	4a43      	ldr	r2, [pc, #268]	@ (8002e64 <Cmd_iou_tec_ena_auto+0x1b0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d103      	bne.n	8002d64 <Cmd_iou_tec_ena_auto+0xb0>
    	uart_choose_uart5 = 1;
 8002d5c:	4b42      	ldr	r3, [pc, #264]	@ (8002e68 <Cmd_iou_tec_ena_auto+0x1b4>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e002      	b.n	8002d6a <Cmd_iou_tec_ena_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002d64:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <Cmd_iou_tec_ena_auto+0x1b4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002d70:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002d74:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002d78:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002d7c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002d80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	2301      	movs	r3, #1
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2305      	movs	r3, #5
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f007 fcdf 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002d92:	f107 020f 	add.w	r2, r7, #15
 8002d96:	f107 0110 	add.w	r1, r7, #16
 8002d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f007 fd5c 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 8002da4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002da8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02c      	beq.n	8002e0c <Cmd_iou_tec_ena_auto+0x158>
        for (int i = 0; i < frame_len; i++) {
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002db8:	e010      	b.n	8002ddc <Cmd_iou_tec_ena_auto+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002dba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002dbe:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002dc2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002dc6:	4413      	add	r3, r2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4827      	ldr	r0, [pc, #156]	@ (8002e6c <Cmd_iou_tec_ena_auto+0x1b8>)
 8002dce:	f7fe ff71 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002dd2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ddc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002de0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002dec:	4293      	cmp	r3, r2
 8002dee:	dbe4      	blt.n	8002dba <Cmd_iou_tec_ena_auto+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002df0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002df4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f991 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002e06:	f7ff f977 	bl	80020f8 <set_send_flag>
 8002e0a:	e022      	b.n	8002e52 <Cmd_iou_tec_ena_auto+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002e0c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002e10:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002e14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2305      	movs	r3, #5
 8002e20:	2201      	movs	r2, #1
 8002e22:	f007 fc95 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e26:	f107 020f 	add.w	r2, r7, #15
 8002e2a:	f107 0110 	add.w	r1, r7, #16
 8002e2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e32:	4618      	mov	r0, r3
 8002e34:	f007 fd12 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002e38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e3c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	f107 0310 	add.w	r3, r7, #16
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f96d 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002e4e:	f7ff f953 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002e52:	2305      	movs	r3, #5
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40005000 	.word	0x40005000
 8002e68:	20004830 	.word	0x20004830
 8002e6c:	40011000 	.word	0x40011000

08002e70 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002e76:	af02      	add	r7, sp, #8
 8002e78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e7c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002e80:	6018      	str	r0, [r3, #0]
 8002e82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e86:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002e8a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002e8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e90:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	dc01      	bgt.n	8002e9e <Cmd_iou_tec_dis_auto+0x2e>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0b8      	b.n	8003010 <Cmd_iou_tec_dis_auto+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002e9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ea2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	dd01      	ble.n	8002eb0 <Cmd_iou_tec_dis_auto+0x40>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0af      	b.n	8003010 <Cmd_iou_tec_dis_auto+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8002eb0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002eb4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f00a fa24 	bl	800d30c <atoi>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002eca:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d901      	bls.n	8002ed6 <Cmd_iou_tec_dis_auto+0x66>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e09c      	b.n	8003010 <Cmd_iou_tec_dis_auto+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002ed6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002eda:	4850      	ldr	r0, [pc, #320]	@ (800301c <Cmd_iou_tec_dis_auto+0x1ac>)
 8002edc:	f7ff f9e0 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002ee0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ee4:	484d      	ldr	r0, [pc, #308]	@ (800301c <Cmd_iou_tec_dis_auto+0x1ac>)
 8002ee6:	f7ff f9db 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002eea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002eee:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002f00:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002f0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002f12:	4a43      	ldr	r2, [pc, #268]	@ (8003020 <Cmd_iou_tec_dis_auto+0x1b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d103      	bne.n	8002f20 <Cmd_iou_tec_dis_auto+0xb0>
    	uart_choose_uart5 = 1;
 8002f18:	4b42      	ldr	r3, [pc, #264]	@ (8003024 <Cmd_iou_tec_dis_auto+0x1b4>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e002      	b.n	8002f26 <Cmd_iou_tec_dis_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002f20:	4b40      	ldr	r3, [pc, #256]	@ (8003024 <Cmd_iou_tec_dis_auto+0x1b4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 8002f26:	2307      	movs	r3, #7
 8002f28:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002f2c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002f30:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002f34:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002f38:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002f3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2301      	movs	r3, #1
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2305      	movs	r3, #5
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f007 fc01 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002f4e:	f107 020f 	add.w	r2, r7, #15
 8002f52:	f107 0110 	add.w	r1, r7, #16
 8002f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f007 fc7e 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 8002f60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f64:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d02c      	beq.n	8002fc8 <Cmd_iou_tec_dis_auto+0x158>
        for (int i = 0; i < frame_len; i++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002f74:	e010      	b.n	8002f98 <Cmd_iou_tec_dis_auto+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8002f76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f7a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002f7e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002f82:	4413      	add	r3, r2
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4827      	ldr	r0, [pc, #156]	@ (8003028 <Cmd_iou_tec_dis_auto+0x1b8>)
 8002f8a:	f7fe fe93 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002f8e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002f92:	3301      	adds	r3, #1
 8002f94:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002f98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f9c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	dbe4      	blt.n	8002f76 <Cmd_iou_tec_dis_auto+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002fac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002fb0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	f107 0310 	add.w	r3, r7, #16
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff f8b3 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002fc2:	f7ff f899 	bl	80020f8 <set_send_flag>
 8002fc6:	e022      	b.n	800300e <Cmd_iou_tec_dis_auto+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002fc8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002fcc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002fd0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2305      	movs	r3, #5
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f007 fbb7 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002fe2:	f107 020f 	add.w	r2, r7, #15
 8002fe6:	f107 0110 	add.w	r1, r7, #16
 8002fea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f007 fc34 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002ff4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ff8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	f107 0310 	add.w	r3, r7, #16
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f88f 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800300a:	f7ff f875 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800300e:	2305      	movs	r3, #5
}
 8003010:	4618      	mov	r0, r3
 8003012:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40020000 	.word	0x40020000
 8003020:	40005000 	.word	0x40005000
 8003024:	20004830 	.word	0x20004830
 8003028:	40011000 	.word	0x40011000

0800302c <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 800302c:	b580      	push	{r7, lr}
 800302e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003032:	af02      	add	r7, sp, #8
 8003034:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003038:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800303c:	6018      	str	r0, [r3, #0]
 800303e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003042:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003046:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 4) return CMDLINE_TOO_FEW_ARGS;
 8003048:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800304c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b04      	cmp	r3, #4
 8003054:	dc01      	bgt.n	800305a <Cmd_iou_tec_set_output+0x2e>
 8003056:	2303      	movs	r3, #3
 8003058:	e0ef      	b.n	800323a <Cmd_iou_tec_set_output+0x20e>
    if ((argc-1) > 4) return CMDLINE_TOO_MANY_ARGS;
 800305a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800305e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b05      	cmp	r3, #5
 8003066:	dd01      	ble.n	800306c <Cmd_iou_tec_set_output+0x40>
 8003068:	2302      	movs	r3, #2
 800306a:	e0e6      	b.n	800323a <Cmd_iou_tec_set_output+0x20e>
    uint8_t channel = atoi(argv[1]);
 800306c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003070:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3304      	adds	r3, #4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f00a f946 	bl	800d30c <atoi>
 8003080:	4603      	mov	r3, r0
 8003082:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8003086:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800308a:	2b03      	cmp	r3, #3
 800308c:	d901      	bls.n	8003092 <Cmd_iou_tec_set_output+0x66>
 800308e:	2304      	movs	r3, #4
 8003090:	e0d3      	b.n	800323a <Cmd_iou_tec_set_output+0x20e>

    uint8_t mode = atoi(argv[2]);
 8003092:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003096:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3308      	adds	r3, #8
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00a f933 	bl	800d30c <atoi>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 80030ac:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d901      	bls.n	80030b8 <Cmd_iou_tec_set_output+0x8c>
 80030b4:	2304      	movs	r3, #4
 80030b6:	e0c0      	b.n	800323a <Cmd_iou_tec_set_output+0x20e>

    uint16_t vol = atoi(argv[3]);
 80030b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030bc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f00a f920 	bl	800d30c <atoi>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 80030d2:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80030d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80030da:	d901      	bls.n	80030e0 <Cmd_iou_tec_set_output+0xb4>
 80030dc:	2304      	movs	r3, #4
 80030de:	e0ac      	b.n	800323a <Cmd_iou_tec_set_output+0x20e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80030e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030e4:	4857      	ldr	r0, [pc, #348]	@ (8003244 <Cmd_iou_tec_set_output+0x218>)
 80030e6:	f7ff f8db 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80030ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030ee:	4855      	ldr	r0, [pc, #340]	@ (8003244 <Cmd_iou_tec_set_output+0x218>)
 80030f0:	f7ff f8d6 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80030f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030f8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003102:	3b01      	subs	r3, #1
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800310a:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	4413      	add	r3, r2
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003118:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800311c:	4a4a      	ldr	r2, [pc, #296]	@ (8003248 <Cmd_iou_tec_set_output+0x21c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d103      	bne.n	800312a <Cmd_iou_tec_set_output+0xfe>
    	uart_choose_uart5 = 1;
 8003122:	4b4a      	ldr	r3, [pc, #296]	@ (800324c <Cmd_iou_tec_set_output+0x220>)
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e002      	b.n	8003130 <Cmd_iou_tec_set_output+0x104>
    }else{
    	uart_choose_uart5 = 0;
 800312a:	4b48      	ldr	r3, [pc, #288]	@ (800324c <Cmd_iou_tec_set_output+0x220>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 8003130:	2308      	movs	r3, #8
 8003132:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];
    payload[0] = channel;
 8003136:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800313a:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1] = mode;
 800313e:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003142:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(vol >> 8);   //high
 8003146:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b29b      	uxth	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(vol & 0xFF); //low
 8003154:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800315e:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003162:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003166:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	2301      	movs	r3, #1
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2305      	movs	r3, #5
 8003172:	2204      	movs	r2, #4
 8003174:	f007 faec 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003178:	f107 020b 	add.w	r2, r7, #11
 800317c:	f107 010c 	add.w	r1, r7, #12
 8003180:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003184:	4618      	mov	r0, r3
 8003186:	f007 fb69 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 800318a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800318e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02c      	beq.n	80031f2 <Cmd_iou_tec_set_output+0x1c6>
        for (int i = 0; i < frame_len; i++) {
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800319e:	e010      	b.n	80031c2 <Cmd_iou_tec_set_output+0x196>
            Uart_write(USART1, encoded_frame[i]);
 80031a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031a4:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 80031a8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80031ac:	4413      	add	r3, r2
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4619      	mov	r1, r3
 80031b2:	4827      	ldr	r0, [pc, #156]	@ (8003250 <Cmd_iou_tec_set_output+0x224>)
 80031b4:	f7fe fd7e 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80031b8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80031bc:	3301      	adds	r3, #1
 80031be:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80031c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031c6:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80031d2:	4293      	cmp	r3, r2
 80031d4:	dbe4      	blt.n	80031a0 <Cmd_iou_tec_set_output+0x174>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80031d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031da:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe ff9e 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80031ec:	f7fe ff84 	bl	80020f8 <set_send_flag>
 80031f0:	e022      	b.n	8003238 <Cmd_iou_tec_set_output+0x20c>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80031f2:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80031f6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80031fa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2301      	movs	r3, #1
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2305      	movs	r3, #5
 8003206:	2204      	movs	r2, #4
 8003208:	f007 faa2 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800320c:	f107 020b 	add.w	r2, r7, #11
 8003210:	f107 010c 	add.w	r1, r7, #12
 8003214:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003218:	4618      	mov	r0, r3
 800321a:	f007 fb1f 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800321e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003222:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003226:	781a      	ldrb	r2, [r3, #0]
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe ff7a 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003234:	f7fe ff60 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003238:	2305      	movs	r3, #5
}
 800323a:	4618      	mov	r0, r3
 800323c:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40020000 	.word	0x40020000
 8003248:	40005000 	.word	0x40005000
 800324c:	20004830 	.word	0x20004830
 8003250:	40011000 	.word	0x40011000

08003254 <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 8003254:	b580      	push	{r7, lr}
 8003256:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800325a:	af02      	add	r7, sp, #8
 800325c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003260:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003264:	6018      	str	r0, [r3, #0]
 8003266:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800326a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800326e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8003270:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003274:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b03      	cmp	r3, #3
 800327c:	dc01      	bgt.n	8003282 <Cmd_iou_tec_auto_vol+0x2e>
 800327e:	2303      	movs	r3, #3
 8003280:	e0d8      	b.n	8003434 <Cmd_iou_tec_auto_vol+0x1e0>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8003282:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003286:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b04      	cmp	r3, #4
 800328e:	dd01      	ble.n	8003294 <Cmd_iou_tec_auto_vol+0x40>
 8003290:	2302      	movs	r3, #2
 8003292:	e0cf      	b.n	8003434 <Cmd_iou_tec_auto_vol+0x1e0>
    uint8_t channel = atoi(argv[1]);
 8003294:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003298:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3304      	adds	r3, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f00a f832 	bl	800d30c <atoi>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80032ae:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d901      	bls.n	80032ba <Cmd_iou_tec_auto_vol+0x66>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e0bc      	b.n	8003434 <Cmd_iou_tec_auto_vol+0x1e0>

    uint16_t vol = atoi(argv[2]);
 80032ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f00a f81f 	bl	800d30c <atoi>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 80032d4:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80032d8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80032dc:	d901      	bls.n	80032e2 <Cmd_iou_tec_auto_vol+0x8e>
 80032de:	2304      	movs	r3, #4
 80032e0:	e0a8      	b.n	8003434 <Cmd_iou_tec_auto_vol+0x1e0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80032e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032e6:	4856      	ldr	r0, [pc, #344]	@ (8003440 <Cmd_iou_tec_auto_vol+0x1ec>)
 80032e8:	f7fe ffda 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80032ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032f0:	4853      	ldr	r0, [pc, #332]	@ (8003440 <Cmd_iou_tec_auto_vol+0x1ec>)
 80032f2:	f7fe ffd5 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80032f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032fa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003304:	3b01      	subs	r3, #1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800330c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4413      	add	r3, r2
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800331a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800331e:	4a49      	ldr	r2, [pc, #292]	@ (8003444 <Cmd_iou_tec_auto_vol+0x1f0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d103      	bne.n	800332c <Cmd_iou_tec_auto_vol+0xd8>
    	uart_choose_uart5 = 1;
 8003324:	4b48      	ldr	r3, [pc, #288]	@ (8003448 <Cmd_iou_tec_auto_vol+0x1f4>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e002      	b.n	8003332 <Cmd_iou_tec_auto_vol+0xde>
    }else{
    	uart_choose_uart5 = 0;
 800332c:	4b46      	ldr	r3, [pc, #280]	@ (8003448 <Cmd_iou_tec_auto_vol+0x1f4>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 8003332:	2309      	movs	r3, #9
 8003334:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0] = channel;
 8003338:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800333c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(vol >> 8);   //high
 8003340:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	b29b      	uxth	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(vol & 0xFF); //low
 800334e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003358:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800335c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003360:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	2301      	movs	r3, #1
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2305      	movs	r3, #5
 800336c:	2203      	movs	r2, #3
 800336e:	f007 f9ef 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003372:	f107 020f 	add.w	r2, r7, #15
 8003376:	f107 0110 	add.w	r1, r7, #16
 800337a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800337e:	4618      	mov	r0, r3
 8003380:	f007 fa6c 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 8003384:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003388:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d02c      	beq.n	80033ec <Cmd_iou_tec_auto_vol+0x198>
        for (int i = 0; i < frame_len; i++) {
 8003392:	2300      	movs	r3, #0
 8003394:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003398:	e010      	b.n	80033bc <Cmd_iou_tec_auto_vol+0x168>
            Uart_write(USART1, encoded_frame[i]);
 800339a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800339e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80033a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80033a6:	4413      	add	r3, r2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	4619      	mov	r1, r3
 80033ac:	4827      	ldr	r0, [pc, #156]	@ (800344c <Cmd_iou_tec_auto_vol+0x1f8>)
 80033ae:	f7fe fc81 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80033b2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80033b6:	3301      	adds	r3, #1
 80033b8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80033bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033c0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80033cc:	4293      	cmp	r3, r2
 80033ce:	dbe4      	blt.n	800339a <Cmd_iou_tec_auto_vol+0x146>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80033d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033d4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	f107 0310 	add.w	r3, r7, #16
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe fea1 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80033e6:	f7fe fe87 	bl	80020f8 <set_send_flag>
 80033ea:	e022      	b.n	8003432 <Cmd_iou_tec_auto_vol+0x1de>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80033ec:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80033f0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80033f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	2301      	movs	r3, #1
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2305      	movs	r3, #5
 8003400:	2203      	movs	r2, #3
 8003402:	f007 f9a5 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003406:	f107 020f 	add.w	r2, r7, #15
 800340a:	f107 0110 	add.w	r1, r7, #16
 800340e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003412:	4618      	mov	r0, r3
 8003414:	f007 fa22 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003418:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800341c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	f107 0310 	add.w	r3, r7, #16
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fe7d 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800342e:	f7fe fe63 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003432:	2305      	movs	r3, #5
}
 8003434:	4618      	mov	r0, r3
 8003436:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40020000 	.word	0x40020000
 8003444:	40005000 	.word	0x40005000
 8003448:	20004830 	.word	0x20004830
 800344c:	40011000 	.word	0x40011000

08003450 <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 8003450:	b580      	push	{r7, lr}
 8003452:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003456:	af00      	add	r7, sp, #0
 8003458:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800345c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003460:	6018      	str	r0, [r3, #0]
 8003462:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003466:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800346a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800346c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003470:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	dc01      	bgt.n	800347e <Cmd_iou_tec_status+0x2e>
 800347a:	2303      	movs	r3, #3
 800347c:	e097      	b.n	80035ae <Cmd_iou_tec_status+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800347e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003482:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b02      	cmp	r3, #2
 800348a:	dd01      	ble.n	8003490 <Cmd_iou_tec_status+0x40>
 800348c:	2302      	movs	r3, #2
 800348e:	e08e      	b.n	80035ae <Cmd_iou_tec_status+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003490:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003494:	4848      	ldr	r0, [pc, #288]	@ (80035b8 <Cmd_iou_tec_status+0x168>)
 8003496:	f7fe ff03 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800349a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800349e:	4846      	ldr	r0, [pc, #280]	@ (80035b8 <Cmd_iou_tec_status+0x168>)
 80034a0:	f7fe fefe 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80034a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80034a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034b2:	3b01      	subs	r3, #1
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80034ba:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80034c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80034cc:	4a3b      	ldr	r2, [pc, #236]	@ (80035bc <Cmd_iou_tec_status+0x16c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d103      	bne.n	80034da <Cmd_iou_tec_status+0x8a>
    	uart_choose_uart5 = 1;
 80034d2:	4b3b      	ldr	r3, [pc, #236]	@ (80035c0 <Cmd_iou_tec_status+0x170>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e002      	b.n	80034e0 <Cmd_iou_tec_status+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80034da:	4b39      	ldr	r3, [pc, #228]	@ (80035c0 <Cmd_iou_tec_status+0x170>)
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 80034e0:	230a      	movs	r3, #10
 80034e2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80034e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034ea:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80034ee:	2201      	movs	r2, #1
 80034f0:	2105      	movs	r1, #5
 80034f2:	f007 f905 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80034f6:	f107 020f 	add.w	r2, r7, #15
 80034fa:	f107 0110 	add.w	r1, r7, #16
 80034fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003502:	4618      	mov	r0, r3
 8003504:	f007 f9aa 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003508:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800350c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d02c      	beq.n	8003570 <Cmd_iou_tec_status+0x120>
        for (int i = 0; i < frame_len; i++) {
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800351c:	e010      	b.n	8003540 <Cmd_iou_tec_status+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 800351e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003522:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003526:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	4619      	mov	r1, r3
 8003530:	4824      	ldr	r0, [pc, #144]	@ (80035c4 <Cmd_iou_tec_status+0x174>)
 8003532:	f7fe fbbf 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003536:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800353a:	3301      	adds	r3, #1
 800353c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003540:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003544:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003550:	4293      	cmp	r3, r2
 8003552:	dbe4      	blt.n	800351e <Cmd_iou_tec_status+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003554:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003558:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	f107 0310 	add.w	r3, r7, #16
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fddf 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800356a:	f7fe fdc5 	bl	80020f8 <set_send_flag>
 800356e:	e01d      	b.n	80035ac <Cmd_iou_tec_status+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003570:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003574:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003578:	2201      	movs	r2, #1
 800357a:	2105      	movs	r1, #5
 800357c:	f007 f8c0 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003580:	f107 020f 	add.w	r2, r7, #15
 8003584:	f107 0110 	add.w	r1, r7, #16
 8003588:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800358c:	4618      	mov	r0, r3
 800358e:	f007 f965 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003592:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003596:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	f107 0310 	add.w	r3, r7, #16
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fdc0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80035a8:	f7fe fda6 	bl	80020f8 <set_send_flag>
    }
    return CMDLINE_PENDING;
 80035ac:	2305      	movs	r3, #5
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40005000 	.word	0x40005000
 80035c0:	20004830 	.word	0x20004830
 80035c4:	40011000 	.word	0x40011000

080035c8 <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80035d4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80035d8:	6018      	str	r0, [r3, #0]
 80035da:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80035de:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80035e2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80035e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80035e8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	dc01      	bgt.n	80035f6 <Cmd_iou_tec_log_ena+0x2e>
 80035f2:	2303      	movs	r3, #3
 80035f4:	e097      	b.n	8003726 <Cmd_iou_tec_log_ena+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80035f6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80035fa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b02      	cmp	r3, #2
 8003602:	dd01      	ble.n	8003608 <Cmd_iou_tec_log_ena+0x40>
 8003604:	2302      	movs	r3, #2
 8003606:	e08e      	b.n	8003726 <Cmd_iou_tec_log_ena+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800360c:	4848      	ldr	r0, [pc, #288]	@ (8003730 <Cmd_iou_tec_log_ena+0x168>)
 800360e:	f7fe fe47 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003616:	4846      	ldr	r0, [pc, #280]	@ (8003730 <Cmd_iou_tec_log_ena+0x168>)
 8003618:	f7fe fe42 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800361c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003620:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800362a:	3b01      	subs	r3, #1
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003632:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	4413      	add	r3, r2
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003640:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003644:	4a3b      	ldr	r2, [pc, #236]	@ (8003734 <Cmd_iou_tec_log_ena+0x16c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d103      	bne.n	8003652 <Cmd_iou_tec_log_ena+0x8a>
    	uart_choose_uart5 = 1;
 800364a:	4b3b      	ldr	r3, [pc, #236]	@ (8003738 <Cmd_iou_tec_log_ena+0x170>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e002      	b.n	8003658 <Cmd_iou_tec_log_ena+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003652:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <Cmd_iou_tec_log_ena+0x170>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 8003658:	230b      	movs	r3, #11
 800365a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800365e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003662:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003666:	2201      	movs	r2, #1
 8003668:	2105      	movs	r1, #5
 800366a:	f007 f849 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800366e:	f107 020f 	add.w	r2, r7, #15
 8003672:	f107 0110 	add.w	r1, r7, #16
 8003676:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800367a:	4618      	mov	r0, r3
 800367c:	f007 f8ee 	bl	800a85c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8003680:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003684:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02c      	beq.n	80036e8 <Cmd_iou_tec_log_ena+0x120>
        for (int i = 0; i < frame_len; i++) {
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003694:	e010      	b.n	80036b8 <Cmd_iou_tec_log_ena+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8003696:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800369a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800369e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4619      	mov	r1, r3
 80036a8:	4824      	ldr	r0, [pc, #144]	@ (800373c <Cmd_iou_tec_log_ena+0x174>)
 80036aa:	f7fe fb03 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80036ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80036b2:	3301      	adds	r3, #1
 80036b4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80036b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036bc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80036c8:	4293      	cmp	r3, r2
 80036ca:	dbe4      	blt.n	8003696 <Cmd_iou_tec_log_ena+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80036cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80036d0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	f107 0310 	add.w	r3, r7, #16
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fd23 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80036e2:	f7fe fd09 	bl	80020f8 <set_send_flag>
 80036e6:	e01d      	b.n	8003724 <Cmd_iou_tec_log_ena+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80036e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036ec:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80036f0:	2201      	movs	r2, #1
 80036f2:	2105      	movs	r1, #5
 80036f4:	f007 f804 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80036f8:	f107 020f 	add.w	r2, r7, #15
 80036fc:	f107 0110 	add.w	r1, r7, #16
 8003700:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003704:	4618      	mov	r0, r3
 8003706:	f007 f8a9 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800370a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800370e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	f107 0310 	add.w	r3, r7, #16
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fd04 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003720:	f7fe fcea 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003724:	2305      	movs	r3, #5
}
 8003726:	4618      	mov	r0, r3
 8003728:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40020000 	.word	0x40020000
 8003734:	40005000 	.word	0x40005000
 8003738:	20004830 	.word	0x20004830
 800373c:	40011000 	.word	0x40011000

08003740 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 8003740:	b580      	push	{r7, lr}
 8003742:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003746:	af00      	add	r7, sp, #0
 8003748:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800374c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003750:	6018      	str	r0, [r3, #0]
 8003752:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003756:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800375a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800375c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003760:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	dc01      	bgt.n	800376e <Cmd_iou_tec_log_dis+0x2e>
 800376a:	2303      	movs	r3, #3
 800376c:	e097      	b.n	800389e <Cmd_iou_tec_log_dis+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800376e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003772:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b02      	cmp	r3, #2
 800377a:	dd01      	ble.n	8003780 <Cmd_iou_tec_log_dis+0x40>
 800377c:	2302      	movs	r3, #2
 800377e:	e08e      	b.n	800389e <Cmd_iou_tec_log_dis+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003780:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003784:	4848      	ldr	r0, [pc, #288]	@ (80038a8 <Cmd_iou_tec_log_dis+0x168>)
 8003786:	f7fe fd8b 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800378a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800378e:	4846      	ldr	r0, [pc, #280]	@ (80038a8 <Cmd_iou_tec_log_dis+0x168>)
 8003790:	f7fe fd86 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003794:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003798:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037a2:	3b01      	subs	r3, #1
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80037aa:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80037b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037bc:	4a3b      	ldr	r2, [pc, #236]	@ (80038ac <Cmd_iou_tec_log_dis+0x16c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d103      	bne.n	80037ca <Cmd_iou_tec_log_dis+0x8a>
    	uart_choose_uart5 = 1;
 80037c2:	4b3b      	ldr	r3, [pc, #236]	@ (80038b0 <Cmd_iou_tec_log_dis+0x170>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e002      	b.n	80037d0 <Cmd_iou_tec_log_dis+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80037ca:	4b39      	ldr	r3, [pc, #228]	@ (80038b0 <Cmd_iou_tec_log_dis+0x170>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 80037d0:	230c      	movs	r3, #12
 80037d2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80037d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037da:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80037de:	2201      	movs	r2, #1
 80037e0:	2105      	movs	r1, #5
 80037e2:	f006 ff8d 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80037e6:	f107 020f 	add.w	r2, r7, #15
 80037ea:	f107 0110 	add.w	r1, r7, #16
 80037ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037f2:	4618      	mov	r0, r3
 80037f4:	f007 f832 	bl	800a85c <frame_encode>

//    SCH_Delay(5);
    if (frame_len > 0) {
 80037f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037fc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02c      	beq.n	8003860 <Cmd_iou_tec_log_dis+0x120>
        for (int i = 0; i < frame_len; i++) {
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800380c:	e010      	b.n	8003830 <Cmd_iou_tec_log_dis+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 800380e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003812:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003816:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	4824      	ldr	r0, [pc, #144]	@ (80038b4 <Cmd_iou_tec_log_dis+0x174>)
 8003822:	f7fe fa47 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003826:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800382a:	3301      	adds	r3, #1
 800382c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003830:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003834:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003840:	4293      	cmp	r3, r2
 8003842:	dbe4      	blt.n	800380e <Cmd_iou_tec_log_dis+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003844:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003848:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	f107 0310 	add.w	r3, r7, #16
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fc67 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800385a:	f7fe fc4d 	bl	80020f8 <set_send_flag>
 800385e:	e01d      	b.n	800389c <Cmd_iou_tec_log_dis+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003860:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003864:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003868:	2201      	movs	r2, #1
 800386a:	2105      	movs	r1, #5
 800386c:	f006 ff48 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003870:	f107 020f 	add.w	r2, r7, #15
 8003874:	f107 0110 	add.w	r1, r7, #16
 8003878:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800387c:	4618      	mov	r0, r3
 800387e:	f006 ffed 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003882:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003886:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	f107 0310 	add.w	r3, r7, #16
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fc48 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003898:	f7fe fc2e 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 800389c:	2305      	movs	r3, #5
}
 800389e:	4618      	mov	r0, r3
 80038a0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40020000 	.word	0x40020000
 80038ac:	40005000 	.word	0x40005000
 80038b0:	20004830 	.word	0x20004830
 80038b4:	40011000 	.word	0x40011000

080038b8 <Cmd_iou_ringled_setRGB>:

int Cmd_iou_ringled_setRGB(int argc, char *argv[])
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80038be:	af02      	add	r7, sp, #8
 80038c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038c4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80038c8:	6018      	str	r0, [r3, #0]
 80038ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038ce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80038d2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 5) return CMDLINE_TOO_FEW_ARGS;
 80038d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038d8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	dc01      	bgt.n	80038e6 <Cmd_iou_ringled_setRGB+0x2e>
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0e5      	b.n	8003ab2 <Cmd_iou_ringled_setRGB+0x1fa>
    if ((argc-1) > 5) return CMDLINE_TOO_MANY_ARGS;
 80038e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	dd01      	ble.n	80038f8 <Cmd_iou_ringled_setRGB+0x40>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e0dc      	b.n	8003ab2 <Cmd_iou_ringled_setRGB+0x1fa>
    uint8_t red = atoi(argv[1]);
 80038f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038fc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3304      	adds	r3, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f009 fd00 	bl	800d30c <atoi>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (red > 255)    return CMDLINE_INVALID_ARG;
    uint8_t green = atoi(argv[2]);
 8003912:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003916:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f009 fcf3 	bl	800d30c <atoi>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (green > 255)    return CMDLINE_INVALID_ARG;
    uint8_t blue = atoi(argv[3]);
 800392c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003930:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f009 fce6 	bl	800d30c <atoi>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
    if (blue > 255)    return CMDLINE_INVALID_ARG;
    uint8_t white = atoi(argv[4]);
 8003946:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800394a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3310      	adds	r3, #16
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f009 fcd9 	bl	800d30c <atoi>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003960:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003964:	4855      	ldr	r0, [pc, #340]	@ (8003abc <Cmd_iou_ringled_setRGB+0x204>)
 8003966:	f7fe fc9b 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800396a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800396e:	4853      	ldr	r0, [pc, #332]	@ (8003abc <Cmd_iou_ringled_setRGB+0x204>)
 8003970:	f7fe fc96 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003974:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003978:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003982:	3b01      	subs	r3, #1
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800398a:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	4413      	add	r3, r2
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003998:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800399c:	4a48      	ldr	r2, [pc, #288]	@ (8003ac0 <Cmd_iou_ringled_setRGB+0x208>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d103      	bne.n	80039aa <Cmd_iou_ringled_setRGB+0xf2>
    	uart_choose_uart5 = 1;
 80039a2:	4b48      	ldr	r3, [pc, #288]	@ (8003ac4 <Cmd_iou_ringled_setRGB+0x20c>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e002      	b.n	80039b0 <Cmd_iou_ringled_setRGB+0xf8>
    }else{
    	uart_choose_uart5 = 0;
 80039aa:	4b46      	ldr	r3, [pc, #280]	@ (8003ac4 <Cmd_iou_ringled_setRGB+0x20c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_RINGLED_SETRGB;
 80039b0:	230d      	movs	r3, #13
 80039b2:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];

    payload[0]  = red; //low
 80039b6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80039ba:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = green; //low
 80039be:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80039c2:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = blue; //low
 80039c6:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 80039ca:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = white; //low
 80039ce:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 80039d2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80039d6:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80039da:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80039de:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	2301      	movs	r3, #1
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2305      	movs	r3, #5
 80039ea:	2204      	movs	r2, #4
 80039ec:	f006 feb0 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80039f0:	f107 020b 	add.w	r2, r7, #11
 80039f4:	f107 010c 	add.w	r1, r7, #12
 80039f8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80039fc:	4618      	mov	r0, r3
 80039fe:	f006 ff2d 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003a02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003a06:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02c      	beq.n	8003a6a <Cmd_iou_ringled_setRGB+0x1b2>
        for (int i = 0; i < frame_len; i++) {
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003a16:	e010      	b.n	8003a3a <Cmd_iou_ringled_setRGB+0x182>
            Uart_write(USART1, encoded_frame[i]);
 8003a18:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003a1c:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003a20:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003a24:	4413      	add	r3, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4827      	ldr	r0, [pc, #156]	@ (8003ac8 <Cmd_iou_ringled_setRGB+0x210>)
 8003a2c:	f7fe f942 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003a30:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003a34:	3301      	adds	r3, #1
 8003a36:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003a3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003a3e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	dbe4      	blt.n	8003a18 <Cmd_iou_ringled_setRGB+0x160>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003a4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003a52:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fb62 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003a64:	f7fe fb48 	bl	80020f8 <set_send_flag>
 8003a68:	e022      	b.n	8003ab0 <Cmd_iou_ringled_setRGB+0x1f8>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003a6a:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003a6e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003a72:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	2301      	movs	r3, #1
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2305      	movs	r3, #5
 8003a7e:	2204      	movs	r2, #4
 8003a80:	f006 fe66 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003a84:	f107 020b 	add.w	r2, r7, #11
 8003a88:	f107 010c 	add.w	r1, r7, #12
 8003a8c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003a90:	4618      	mov	r0, r3
 8003a92:	f006 fee3 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003a96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003a9a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fb3e 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003aac:	f7fe fb24 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003ab0:	2305      	movs	r3, #5
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40005000 	.word	0x40005000
 8003ac4:	20004830 	.word	0x20004830
 8003ac8:	40011000 	.word	0x40011000

08003acc <Cmd_iou_ringled_getRGB>:

int Cmd_iou_ringled_getRGB(int argc, char *argv[])
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ad8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003adc:	6018      	str	r0, [r3, #0]
 8003ade:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ae2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003ae6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003ae8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003aec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	dc01      	bgt.n	8003afa <Cmd_iou_ringled_getRGB+0x2e>
 8003af6:	2303      	movs	r3, #3
 8003af8:	e097      	b.n	8003c2a <Cmd_iou_ringled_getRGB+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003afa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003afe:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	dd01      	ble.n	8003b0c <Cmd_iou_ringled_getRGB+0x40>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e08e      	b.n	8003c2a <Cmd_iou_ringled_getRGB+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003b0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b10:	4848      	ldr	r0, [pc, #288]	@ (8003c34 <Cmd_iou_ringled_getRGB+0x168>)
 8003b12:	f7fe fbc5 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003b16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b1a:	4846      	ldr	r0, [pc, #280]	@ (8003c34 <Cmd_iou_ringled_getRGB+0x168>)
 8003b1c:	f7fe fbc0 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003b20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b24:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003b36:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003b44:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003b48:	4a3b      	ldr	r2, [pc, #236]	@ (8003c38 <Cmd_iou_ringled_getRGB+0x16c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d103      	bne.n	8003b56 <Cmd_iou_ringled_getRGB+0x8a>
    	uart_choose_uart5 = 1;
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <Cmd_iou_ringled_getRGB+0x170>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e002      	b.n	8003b5c <Cmd_iou_ringled_getRGB+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003b56:	4b39      	ldr	r3, [pc, #228]	@ (8003c3c <Cmd_iou_ringled_getRGB+0x170>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_RINGLED_GETRGB;
 8003b5c:	230e      	movs	r3, #14
 8003b5e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003b62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b66:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2105      	movs	r1, #5
 8003b6e:	f006 fdc7 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003b72:	f107 020f 	add.w	r2, r7, #15
 8003b76:	f107 0110 	add.w	r1, r7, #16
 8003b7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f006 fe6c 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 8003b84:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b88:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02c      	beq.n	8003bec <Cmd_iou_ringled_getRGB+0x120>
        for (int i = 0; i < frame_len; i++) {
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b98:	e010      	b.n	8003bbc <Cmd_iou_ringled_getRGB+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8003b9a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b9e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003ba2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	4619      	mov	r1, r3
 8003bac:	4824      	ldr	r0, [pc, #144]	@ (8003c40 <Cmd_iou_ringled_getRGB+0x174>)
 8003bae:	f7fe f881 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003bb2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003bbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003bc0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	dbe4      	blt.n	8003b9a <Cmd_iou_ringled_getRGB+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003bd0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003bd4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	f107 0310 	add.w	r3, r7, #16
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe faa1 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003be6:	f7fe fa87 	bl	80020f8 <set_send_flag>
 8003bea:	e01d      	b.n	8003c28 <Cmd_iou_ringled_getRGB+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003bec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bf0:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2105      	movs	r1, #5
 8003bf8:	f006 fd82 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003bfc:	f107 020f 	add.w	r2, r7, #15
 8003c00:	f107 0110 	add.w	r1, r7, #16
 8003c04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f006 fe27 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003c0e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003c12:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	f107 0310 	add.w	r3, r7, #16
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fa82 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003c24:	f7fe fa68 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003c28:	2305      	movs	r3, #5
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40020000 	.word	0x40020000
 8003c38:	40005000 	.word	0x40005000
 8003c3c:	20004830 	.word	0x20004830
 8003c40:	40011000 	.word	0x40011000

08003c44 <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003c4a:	af02      	add	r7, sp, #8
 8003c4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c50:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c54:	6018      	str	r0, [r3, #0]
 8003c56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c5a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c5e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8003c60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c64:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	dc01      	bgt.n	8003c72 <Cmd_iou_irled_set_bright+0x2e>
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0b8      	b.n	8003de4 <Cmd_iou_irled_set_bright+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8003c72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c76:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	dd01      	ble.n	8003c84 <Cmd_iou_irled_set_bright+0x40>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0af      	b.n	8003de4 <Cmd_iou_irled_set_bright+0x1a0>
    uint8_t percent = atoi(argv[1]);
 8003c84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c88:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f009 fb3a 	bl	800d30c <atoi>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 8003c9e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003ca2:	2b64      	cmp	r3, #100	@ 0x64
 8003ca4:	d901      	bls.n	8003caa <Cmd_iou_irled_set_bright+0x66>
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	e09c      	b.n	8003de4 <Cmd_iou_irled_set_bright+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003caa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cae:	4850      	ldr	r0, [pc, #320]	@ (8003df0 <Cmd_iou_irled_set_bright+0x1ac>)
 8003cb0:	f7fe faf6 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cb8:	484d      	ldr	r0, [pc, #308]	@ (8003df0 <Cmd_iou_irled_set_bright+0x1ac>)
 8003cba:	f7fe faf1 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003cbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cc2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003cd4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003ce2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003ce6:	4a43      	ldr	r2, [pc, #268]	@ (8003df4 <Cmd_iou_irled_set_bright+0x1b0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d103      	bne.n	8003cf4 <Cmd_iou_irled_set_bright+0xb0>
    	uart_choose_uart5 = 1;
 8003cec:	4b42      	ldr	r3, [pc, #264]	@ (8003df8 <Cmd_iou_irled_set_bright+0x1b4>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e002      	b.n	8003cfa <Cmd_iou_irled_set_bright+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8003cf4:	4b40      	ldr	r3, [pc, #256]	@ (8003df8 <Cmd_iou_irled_set_bright+0x1b4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 8003cfa:	230f      	movs	r3, #15
 8003cfc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];

    payload[0]  = percent; //low
 8003d00:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003d04:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d08:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003d0c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003d10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2301      	movs	r3, #1
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2305      	movs	r3, #5
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f006 fd17 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003d22:	f107 020f 	add.w	r2, r7, #15
 8003d26:	f107 0110 	add.w	r1, r7, #16
 8003d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f006 fd94 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 8003d34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d38:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d02c      	beq.n	8003d9c <Cmd_iou_irled_set_bright+0x158>
        for (int i = 0; i < frame_len; i++) {
 8003d42:	2300      	movs	r3, #0
 8003d44:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003d48:	e010      	b.n	8003d6c <Cmd_iou_irled_set_bright+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8003d4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d4e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8003d52:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003d56:	4413      	add	r3, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4827      	ldr	r0, [pc, #156]	@ (8003dfc <Cmd_iou_irled_set_bright+0x1b8>)
 8003d5e:	f7fd ffa9 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003d62:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003d66:	3301      	adds	r3, #1
 8003d68:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003d6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d70:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	dbe4      	blt.n	8003d4a <Cmd_iou_irled_set_bright+0x106>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003d80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d84:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	f107 0310 	add.w	r3, r7, #16
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe f9c9 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003d96:	f7fe f9af 	bl	80020f8 <set_send_flag>
 8003d9a:	e022      	b.n	8003de2 <Cmd_iou_irled_set_bright+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d9c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003da0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003da4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	2301      	movs	r3, #1
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2305      	movs	r3, #5
 8003db0:	2201      	movs	r2, #1
 8003db2:	f006 fccd 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003db6:	f107 020f 	add.w	r2, r7, #15
 8003dba:	f107 0110 	add.w	r1, r7, #16
 8003dbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f006 fd4a 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003dc8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dcc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	f107 0310 	add.w	r3, r7, #16
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe f9a5 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003dde:	f7fe f98b 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003de2:	2305      	movs	r3, #5
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40005000 	.word	0x40005000
 8003df8:	20004830 	.word	0x20004830
 8003dfc:	40011000 	.word	0x40011000

08003e00 <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e0c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e10:	6018      	str	r0, [r3, #0]
 8003e12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e16:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e1a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003e1c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e20:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	dc01      	bgt.n	8003e2e <Cmd_iou_irled_get_bright+0x2e>
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e097      	b.n	8003f5e <Cmd_iou_irled_get_bright+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003e2e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e32:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	dd01      	ble.n	8003e40 <Cmd_iou_irled_get_bright+0x40>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e08e      	b.n	8003f5e <Cmd_iou_irled_get_bright+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003e40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e44:	4848      	ldr	r0, [pc, #288]	@ (8003f68 <Cmd_iou_irled_get_bright+0x168>)
 8003e46:	f7fe fa2b 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003e4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e4e:	4846      	ldr	r0, [pc, #280]	@ (8003f68 <Cmd_iou_irled_get_bright+0x168>)
 8003e50:	f7fe fa26 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003e54:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e58:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e62:	3b01      	subs	r3, #1
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003e6a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	4413      	add	r3, r2
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003e78:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8003f6c <Cmd_iou_irled_get_bright+0x16c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d103      	bne.n	8003e8a <Cmd_iou_irled_get_bright+0x8a>
    	uart_choose_uart5 = 1;
 8003e82:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <Cmd_iou_irled_get_bright+0x170>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e002      	b.n	8003e90 <Cmd_iou_irled_get_bright+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003e8a:	4b39      	ldr	r3, [pc, #228]	@ (8003f70 <Cmd_iou_irled_get_bright+0x170>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003e9a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	2105      	movs	r1, #5
 8003ea2:	f006 fc2d 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003ea6:	f107 020f 	add.w	r2, r7, #15
 8003eaa:	f107 0110 	add.w	r1, r7, #16
 8003eae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f006 fcd2 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 8003eb8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ebc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d02c      	beq.n	8003f20 <Cmd_iou_irled_get_bright+0x120>
        for (int i = 0; i < frame_len; i++) {
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003ecc:	e010      	b.n	8003ef0 <Cmd_iou_irled_get_bright+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8003ece:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ed2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003ed6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4824      	ldr	r0, [pc, #144]	@ (8003f74 <Cmd_iou_irled_get_bright+0x174>)
 8003ee2:	f7fd fee7 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003ee6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003eea:	3301      	adds	r3, #1
 8003eec:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003ef0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ef4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f00:	4293      	cmp	r3, r2
 8003f02:	dbe4      	blt.n	8003ece <Cmd_iou_irled_get_bright+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003f04:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f08:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	f107 0310 	add.w	r3, r7, #16
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe f907 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003f1a:	f7fe f8ed 	bl	80020f8 <set_send_flag>
 8003f1e:	e01d      	b.n	8003f5c <Cmd_iou_irled_get_bright+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f24:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2105      	movs	r1, #5
 8003f2c:	f006 fbe8 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003f30:	f107 020f 	add.w	r2, r7, #15
 8003f34:	f107 0110 	add.w	r1, r7, #16
 8003f38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f006 fc8d 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003f42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f46:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	f107 0310 	add.w	r3, r7, #16
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe f8e8 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003f58:	f7fe f8ce 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003f5c:	2305      	movs	r3, #5
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	40005000 	.word	0x40005000
 8003f70:	20004830 	.word	0x20004830
 8003f74:	40011000 	.word	0x40011000

08003f78 <Cmd_iou_get_accel>:



int Cmd_iou_get_accel(int argc, char *argv[])
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f84:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003f88:	6018      	str	r0, [r3, #0]
 8003f8a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f8e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003f92:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003f94:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f98:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	dc01      	bgt.n	8003fa6 <Cmd_iou_get_accel+0x2e>
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e097      	b.n	80040d6 <Cmd_iou_get_accel+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003fa6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003faa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	dd01      	ble.n	8003fb8 <Cmd_iou_get_accel+0x40>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e08e      	b.n	80040d6 <Cmd_iou_get_accel+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003fb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fbc:	4848      	ldr	r0, [pc, #288]	@ (80040e0 <Cmd_iou_get_accel+0x168>)
 8003fbe:	f7fe f96f 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003fc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fc6:	4846      	ldr	r0, [pc, #280]	@ (80040e0 <Cmd_iou_get_accel+0x168>)
 8003fc8:	f7fe f96a 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003fcc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fd0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003fe2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	4413      	add	r3, r2
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003ff0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80040e4 <Cmd_iou_get_accel+0x16c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d103      	bne.n	8004002 <Cmd_iou_get_accel+0x8a>
    	uart_choose_uart5 = 1;
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80040e8 <Cmd_iou_get_accel+0x170>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e002      	b.n	8004008 <Cmd_iou_get_accel+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004002:	4b39      	ldr	r3, [pc, #228]	@ (80040e8 <Cmd_iou_get_accel+0x170>)
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_GET_ACCEL_GYRO;
 8004008:	2311      	movs	r3, #17
 800400a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800400e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004012:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004016:	2201      	movs	r2, #1
 8004018:	2105      	movs	r1, #5
 800401a:	f006 fb71 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800401e:	f107 020f 	add.w	r2, r7, #15
 8004022:	f107 0110 	add.w	r1, r7, #16
 8004026:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800402a:	4618      	mov	r0, r3
 800402c:	f006 fc16 	bl	800a85c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8004030:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004034:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02c      	beq.n	8004098 <Cmd_iou_get_accel+0x120>
        for (int i = 0; i < frame_len; i++) {
 800403e:	2300      	movs	r3, #0
 8004040:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004044:	e010      	b.n	8004068 <Cmd_iou_get_accel+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8004046:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800404a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800404e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004052:	4413      	add	r3, r2
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	4619      	mov	r1, r3
 8004058:	4824      	ldr	r0, [pc, #144]	@ (80040ec <Cmd_iou_get_accel+0x174>)
 800405a:	f7fd fe2b 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800405e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004062:	3301      	adds	r3, #1
 8004064:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004068:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800406c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004078:	4293      	cmp	r3, r2
 800407a:	dbe4      	blt.n	8004046 <Cmd_iou_get_accel+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800407c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004080:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	f107 0310 	add.w	r3, r7, #16
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe f84b 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004092:	f7fe f831 	bl	80020f8 <set_send_flag>
 8004096:	e01d      	b.n	80040d4 <Cmd_iou_get_accel+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004098:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800409c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80040a0:	2201      	movs	r2, #1
 80040a2:	2105      	movs	r1, #5
 80040a4:	f006 fb2c 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80040a8:	f107 020f 	add.w	r2, r7, #15
 80040ac:	f107 0110 	add.w	r1, r7, #16
 80040b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040b4:	4618      	mov	r0, r3
 80040b6:	f006 fbd1 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80040ba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040be:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	f107 0310 	add.w	r3, r7, #16
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe f82c 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80040d0:	f7fe f812 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80040d4:	2305      	movs	r3, #5
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40020000 	.word	0x40020000
 80040e4:	40005000 	.word	0x40005000
 80040e8:	20004830 	.word	0x20004830
 80040ec:	40011000 	.word	0x40011000

080040f0 <Cmd_iou_get_press>:

int Cmd_iou_get_press(int argc, char *argv[])
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040fc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004100:	6018      	str	r0, [r3, #0]
 8004102:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004106:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800410a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800410c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004110:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b01      	cmp	r3, #1
 8004118:	dc01      	bgt.n	800411e <Cmd_iou_get_press+0x2e>
 800411a:	2303      	movs	r3, #3
 800411c:	e097      	b.n	800424e <Cmd_iou_get_press+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800411e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004122:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b02      	cmp	r3, #2
 800412a:	dd01      	ble.n	8004130 <Cmd_iou_get_press+0x40>
 800412c:	2302      	movs	r3, #2
 800412e:	e08e      	b.n	800424e <Cmd_iou_get_press+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004130:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004134:	4848      	ldr	r0, [pc, #288]	@ (8004258 <Cmd_iou_get_press+0x168>)
 8004136:	f7fe f8b3 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800413a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800413e:	4846      	ldr	r0, [pc, #280]	@ (8004258 <Cmd_iou_get_press+0x168>)
 8004140:	f7fe f8ae 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004144:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004148:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004152:	3b01      	subs	r3, #1
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800415a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4413      	add	r3, r2
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004168:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800416c:	4a3b      	ldr	r2, [pc, #236]	@ (800425c <Cmd_iou_get_press+0x16c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d103      	bne.n	800417a <Cmd_iou_get_press+0x8a>
    	uart_choose_uart5 = 1;
 8004172:	4b3b      	ldr	r3, [pc, #236]	@ (8004260 <Cmd_iou_get_press+0x170>)
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e002      	b.n	8004180 <Cmd_iou_get_press+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800417a:	4b39      	ldr	r3, [pc, #228]	@ (8004260 <Cmd_iou_get_press+0x170>)
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_GET_PRESS;
 8004180:	2312      	movs	r3, #18
 8004182:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004186:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800418a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800418e:	2201      	movs	r2, #1
 8004190:	2105      	movs	r1, #5
 8004192:	f006 fab5 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004196:	f107 020f 	add.w	r2, r7, #15
 800419a:	f107 0110 	add.w	r1, r7, #16
 800419e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80041a2:	4618      	mov	r0, r3
 80041a4:	f006 fb5a 	bl	800a85c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 80041a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041ac:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02c      	beq.n	8004210 <Cmd_iou_get_press+0x120>
        for (int i = 0; i < frame_len; i++) {
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80041bc:	e010      	b.n	80041e0 <Cmd_iou_get_press+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 80041be:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041c2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80041c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80041ca:	4413      	add	r3, r2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	4619      	mov	r1, r3
 80041d0:	4824      	ldr	r0, [pc, #144]	@ (8004264 <Cmd_iou_get_press+0x174>)
 80041d2:	f7fd fd6f 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80041d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80041da:	3301      	adds	r3, #1
 80041dc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80041e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041e4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80041f0:	4293      	cmp	r3, r2
 80041f2:	dbe4      	blt.n	80041be <Cmd_iou_get_press+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80041f4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041f8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	f107 0310 	add.w	r3, r7, #16
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd ff8f 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800420a:	f7fd ff75 	bl	80020f8 <set_send_flag>
 800420e:	e01d      	b.n	800424c <Cmd_iou_get_press+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004214:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004218:	2201      	movs	r2, #1
 800421a:	2105      	movs	r1, #5
 800421c:	f006 fa70 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004220:	f107 020f 	add.w	r2, r7, #15
 8004224:	f107 0110 	add.w	r1, r7, #16
 8004228:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800422c:	4618      	mov	r0, r3
 800422e:	f006 fb15 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004232:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004236:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	f107 0310 	add.w	r3, r7, #16
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f7fd ff70 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004248:	f7fd ff56 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800424c:	2305      	movs	r3, #5
}
 800424e:	4618      	mov	r0, r3
 8004250:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40020000 	.word	0x40020000
 800425c:	40005000 	.word	0x40005000
 8004260:	20004830 	.word	0x20004830
 8004264:	40011000 	.word	0x40011000

08004268 <Cmd_iou_get_parameters>:


int Cmd_iou_get_parameters(int argc, char *argv[])
{
 8004268:	b580      	push	{r7, lr}
 800426a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800426e:	af00      	add	r7, sp, #0
 8004270:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004274:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004278:	6018      	str	r0, [r3, #0]
 800427a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800427e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004282:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004284:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004288:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	dc01      	bgt.n	8004296 <Cmd_iou_get_parameters+0x2e>
 8004292:	2303      	movs	r3, #3
 8004294:	e097      	b.n	80043c6 <Cmd_iou_get_parameters+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8004296:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800429a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	dd01      	ble.n	80042a8 <Cmd_iou_get_parameters+0x40>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e08e      	b.n	80043c6 <Cmd_iou_get_parameters+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80042a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80042ac:	4848      	ldr	r0, [pc, #288]	@ (80043d0 <Cmd_iou_get_parameters+0x168>)
 80042ae:	f7fd fff7 	bl	80022a0 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80042b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80042b6:	4846      	ldr	r0, [pc, #280]	@ (80043d0 <Cmd_iou_get_parameters+0x168>)
 80042b8:	f7fd fff2 	bl	80022a0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80042bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042c0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042ca:	3b01      	subs	r3, #1
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80042d2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80042e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80042e4:	4a3b      	ldr	r2, [pc, #236]	@ (80043d4 <Cmd_iou_get_parameters+0x16c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d103      	bne.n	80042f2 <Cmd_iou_get_parameters+0x8a>
    	uart_choose_uart5 = 1;
 80042ea:	4b3b      	ldr	r3, [pc, #236]	@ (80043d8 <Cmd_iou_get_parameters+0x170>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	e002      	b.n	80042f8 <Cmd_iou_get_parameters+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80042f2:	4b39      	ldr	r3, [pc, #228]	@ (80043d8 <Cmd_iou_get_parameters+0x170>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_GET_PARAMETERS;
 80042f8:	2313      	movs	r3, #19
 80042fa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80042fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004302:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004306:	2201      	movs	r2, #1
 8004308:	2105      	movs	r1, #5
 800430a:	f006 f9f9 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800430e:	f107 020f 	add.w	r2, r7, #15
 8004312:	f107 0110 	add.w	r1, r7, #16
 8004316:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800431a:	4618      	mov	r0, r3
 800431c:	f006 fa9e 	bl	800a85c <frame_encode>

  //  SCH_Delay(5);.
    if (frame_len > 0) {
 8004320:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004324:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d02c      	beq.n	8004388 <Cmd_iou_get_parameters+0x120>
        for (int i = 0; i < frame_len; i++) {
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004334:	e010      	b.n	8004358 <Cmd_iou_get_parameters+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8004336:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800433a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800433e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004342:	4413      	add	r3, r2
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	4824      	ldr	r0, [pc, #144]	@ (80043dc <Cmd_iou_get_parameters+0x174>)
 800434a:	f7fd fcb3 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800434e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004352:	3301      	adds	r3, #1
 8004354:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004358:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800435c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004368:	4293      	cmp	r3, r2
 800436a:	dbe4      	blt.n	8004336 <Cmd_iou_get_parameters+0xce>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800436c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004370:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	f107 0310 	add.w	r3, r7, #16
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f7fd fed3 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004382:	f7fd feb9 	bl	80020f8 <set_send_flag>
 8004386:	e01d      	b.n	80043c4 <Cmd_iou_get_parameters+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800438c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004390:	2201      	movs	r2, #1
 8004392:	2105      	movs	r1, #5
 8004394:	f006 f9b4 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004398:	f107 020f 	add.w	r2, r7, #15
 800439c:	f107 0110 	add.w	r1, r7, #16
 80043a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043a4:	4618      	mov	r0, r3
 80043a6:	f006 fa59 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80043aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043ae:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	f107 0310 	add.w	r3, r7, #16
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd feb4 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80043c0:	f7fd fe9a 	bl	80020f8 <set_send_flag>

    }

    return CMDLINE_PENDING;
 80043c4:	2305      	movs	r3, #5
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40020000 	.word	0x40020000
 80043d4:	40005000 	.word	0x40005000
 80043d8:	20004830 	.word	0x20004830
 80043dc:	40011000 	.word	0x40011000

080043e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	041a      	lsls	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	619a      	str	r2, [r3, #24]
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <PDU_create_task>:
};



void PDU_create_task(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PDU_task_context.taskHandle, &PDU_task_context.taskProperty);
 8004404:	4906      	ldr	r1, [pc, #24]	@ (8004420 <PDU_create_task+0x20>)
 8004406:	4807      	ldr	r0, [pc, #28]	@ (8004424 <PDU_create_task+0x24>)
 8004408:	f005 fff6 	bl	800a3f8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 800440c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004410:	2006      	movs	r0, #6
 8004412:	f005 ffc5 	bl	800a3a0 <SCH_TIM_Start>
    Ringbuf_init();
 8004416:	f7fd faf1 	bl	80019fc <Ringbuf_init>
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000050 	.word	0x20000050
 8004424:	2000004c 	.word	0x2000004c

08004428 <PDU_update_task>:



void PDU_update_task(void) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
	if (auto_report_enabled) {
 800442e:	4b24      	ldr	r3, [pc, #144]	@ (80044c0 <PDU_update_task+0x98>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d040      	beq.n	80044b8 <PDU_update_task+0x90>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PDU))
 8004436:	2006      	movs	r0, #6
 8004438:	f005 ffc8 	bl	800a3cc <SCH_TIM_HasCompleted>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d03a      	beq.n	80044b8 <PDU_update_task+0x90>
		{

			if(!sendFlag){
 8004442:	4b20      	ldr	r3, [pc, #128]	@ (80044c4 <PDU_update_task+0x9c>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d135      	bne.n	80044b8 <PDU_update_task+0x90>
				if(!send_rs422){
 800444c:	4b1e      	ldr	r3, [pc, #120]	@ (80044c8 <PDU_update_task+0xa0>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d130      	bne.n	80044b8 <PDU_update_task+0x90>
					if(receive_iouFlag&&receive_pmuFlag){
 8004456:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <PDU_update_task+0xa4>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02b      	beq.n	80044b8 <PDU_update_task+0x90>
 8004460:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <PDU_update_task+0xa8>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d026      	beq.n	80044b8 <PDU_update_task+0x90>
						switch_board(0);
 800446a:	2000      	movs	r0, #0
 800446c:	f002 fc34 	bl	8006cd8 <switch_board>
						Uart_flush(USART1);
 8004470:	4818      	ldr	r0, [pc, #96]	@ (80044d4 <PDU_update_task+0xac>)
 8004472:	f7fd fd43 	bl	8001efc <Uart_flush>

						frame = pdu_frame;
 8004476:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <PDU_update_task+0xb0>)
 8004478:	60bb      	str	r3, [r7, #8]
						frame_len = sizeof(pdu_frame);
 800447a:	2309      	movs	r3, #9
 800447c:	71fb      	strb	r3, [r7, #7]
						for (int i = 0; i < frame_len; i++) {
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e00a      	b.n	800449a <PDU_update_task+0x72>
							Uart_write(USART1, frame[i]);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	4811      	ldr	r0, [pc, #68]	@ (80044d4 <PDU_update_task+0xac>)
 8004490:	f7fd fc10 	bl	8001cb4 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	429a      	cmp	r2, r3
 80044a0:	dbf0      	blt.n	8004484 <PDU_update_task+0x5c>
						}
						receive_pduFlag = 0;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <PDU_update_task+0xb4>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80044a8:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <PDU_update_task+0xa0>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 80044ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80044b2:	2006      	movs	r0, #6
 80044b4:	f005 ff74 	bl	800a3a0 <SCH_TIM_Start>
					}
				}
			}
		}
	}
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20004958 	.word	0x20004958
 80044c4:	2000472d 	.word	0x2000472d
 80044c8:	2000482f 	.word	0x2000482f
 80044cc:	2000003e 	.word	0x2000003e
 80044d0:	2000003d 	.word	0x2000003d
 80044d4:	40011000 	.word	0x40011000
 80044d8:	20000040 	.word	0x20000040
 80044dc:	2000003c 	.word	0x2000003c

080044e0 <Cmd_pdu_set_channel>:


#define DEST_ADDR FSP_ADR_PDU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pdu_set_channel(int argc, char *argv[])
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80044e6:	af02      	add	r7, sp, #8
 80044e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80044ec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80044f0:	6018      	str	r0, [r3, #0]
 80044f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80044f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80044fa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80044fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004500:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b03      	cmp	r3, #3
 8004508:	dc01      	bgt.n	800450e <Cmd_pdu_set_channel+0x2e>
 800450a:	2303      	movs	r3, #3
 800450c:	e0cf      	b.n	80046ae <Cmd_pdu_set_channel+0x1ce>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 800450e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004512:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b04      	cmp	r3, #4
 800451a:	dd01      	ble.n	8004520 <Cmd_pdu_set_channel+0x40>
 800451c:	2302      	movs	r3, #2
 800451e:	e0c6      	b.n	80046ae <Cmd_pdu_set_channel+0x1ce>
    uint8_t channel = atoi(argv[1]);
 8004520:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004524:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3304      	adds	r3, #4
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f008 feec 	bl	800d30c <atoi>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 800453a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800453e:	2b09      	cmp	r3, #9
 8004540:	d901      	bls.n	8004546 <Cmd_pdu_set_channel+0x66>
 8004542:	2304      	movs	r3, #4
 8004544:	e0b3      	b.n	80046ae <Cmd_pdu_set_channel+0x1ce>

    uint8_t state = atoi(argv[2]);
 8004546:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800454a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f008 fed9 	bl	800d30c <atoi>
 800455a:	4603      	mov	r3, r0
 800455c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004560:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004564:	2b01      	cmp	r3, #1
 8004566:	d901      	bls.n	800456c <Cmd_pdu_set_channel+0x8c>
 8004568:	2304      	movs	r3, #4
 800456a:	e0a0      	b.n	80046ae <Cmd_pdu_set_channel+0x1ce>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800456c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004570:	4851      	ldr	r0, [pc, #324]	@ (80046b8 <Cmd_pdu_set_channel+0x1d8>)
 8004572:	f7ff ff35 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004576:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800457a:	484f      	ldr	r0, [pc, #316]	@ (80046b8 <Cmd_pdu_set_channel+0x1d8>)
 800457c:	f7ff ff30 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004580:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004584:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800458e:	3b01      	subs	r3, #1
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004596:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	4413      	add	r3, r2
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80045a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045a8:	4a44      	ldr	r2, [pc, #272]	@ (80046bc <Cmd_pdu_set_channel+0x1dc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d103      	bne.n	80045b6 <Cmd_pdu_set_channel+0xd6>
    	uart_choose_uart5 = 1;
 80045ae:	4b44      	ldr	r3, [pc, #272]	@ (80046c0 <Cmd_pdu_set_channel+0x1e0>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e002      	b.n	80045bc <Cmd_pdu_set_channel+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 80045b6:	4b42      	ldr	r3, [pc, #264]	@ (80046c0 <Cmd_pdu_set_channel+0x1e0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = channel;
 80045c2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80045c6:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 80045ca:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80045ce:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80045d2:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80045d6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80045da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	2301      	movs	r3, #1
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	2303      	movs	r3, #3
 80045e6:	2202      	movs	r2, #2
 80045e8:	f006 f8b2 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80045ec:	f107 020f 	add.w	r2, r7, #15
 80045f0:	f107 0110 	add.w	r1, r7, #16
 80045f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045f8:	4618      	mov	r0, r3
 80045fa:	f006 f92f 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80045fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004602:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02c      	beq.n	8004666 <Cmd_pdu_set_channel+0x186>
        for (int i = 0; i < frame_len; i++) {
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004612:	e010      	b.n	8004636 <Cmd_pdu_set_channel+0x156>
            Uart_write(USART1, encoded_frame[i]);
 8004614:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004618:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800461c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004620:	4413      	add	r3, r2
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	4619      	mov	r1, r3
 8004626:	4827      	ldr	r0, [pc, #156]	@ (80046c4 <Cmd_pdu_set_channel+0x1e4>)
 8004628:	f7fd fb44 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800462c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004630:	3301      	adds	r3, #1
 8004632:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004636:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800463a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004646:	4293      	cmp	r3, r2
 8004648:	dbe4      	blt.n	8004614 <Cmd_pdu_set_channel+0x134>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800464a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800464e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	f107 0310 	add.w	r3, r7, #16
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f7fd fd64 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004660:	f7fd fd4a 	bl	80020f8 <set_send_flag>
 8004664:	e022      	b.n	80046ac <Cmd_pdu_set_channel+0x1cc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004666:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800466a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800466e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	2301      	movs	r3, #1
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2303      	movs	r3, #3
 800467a:	2202      	movs	r2, #2
 800467c:	f006 f868 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004680:	f107 020f 	add.w	r2, r7, #15
 8004684:	f107 0110 	add.w	r1, r7, #16
 8004688:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800468c:	4618      	mov	r0, r3
 800468e:	f006 f8e5 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004692:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004696:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	f107 0310 	add.w	r3, r7, #16
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fd40 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80046a8:	f7fd fd26 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80046ac:	2305      	movs	r3, #5
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40020000 	.word	0x40020000
 80046bc:	40005000 	.word	0x40005000
 80046c0:	20004830 	.word	0x20004830
 80046c4:	40011000 	.word	0x40011000

080046c8 <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80046ce:	af02      	add	r7, sp, #8
 80046d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80046d4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80046d8:	6018      	str	r0, [r3, #0]
 80046da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80046de:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80046e2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80046e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80046e8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	dc01      	bgt.n	80046f6 <Cmd_pdu_set_buck+0x2e>
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0cf      	b.n	8004896 <Cmd_pdu_set_buck+0x1ce>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80046f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80046fa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b04      	cmp	r3, #4
 8004702:	dd01      	ble.n	8004708 <Cmd_pdu_set_buck+0x40>
 8004704:	2302      	movs	r3, #2
 8004706:	e0c6      	b.n	8004896 <Cmd_pdu_set_buck+0x1ce>
    uint8_t buck = atoi(argv[1]);
 8004708:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800470c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3304      	adds	r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f008 fdf8 	bl	800d30c <atoi>
 800471c:	4603      	mov	r3, r0
 800471e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004722:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004726:	2b06      	cmp	r3, #6
 8004728:	d901      	bls.n	800472e <Cmd_pdu_set_buck+0x66>
 800472a:	2304      	movs	r3, #4
 800472c:	e0b3      	b.n	8004896 <Cmd_pdu_set_buck+0x1ce>

    uint8_t state = atoi(argv[2]);
 800472e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004732:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f008 fde5 	bl	800d30c <atoi>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004748:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 800474c:	2b01      	cmp	r3, #1
 800474e:	d901      	bls.n	8004754 <Cmd_pdu_set_buck+0x8c>
 8004750:	2304      	movs	r3, #4
 8004752:	e0a0      	b.n	8004896 <Cmd_pdu_set_buck+0x1ce>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004754:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004758:	4851      	ldr	r0, [pc, #324]	@ (80048a0 <Cmd_pdu_set_buck+0x1d8>)
 800475a:	f7ff fe41 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800475e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004762:	484f      	ldr	r0, [pc, #316]	@ (80048a0 <Cmd_pdu_set_buck+0x1d8>)
 8004764:	f7ff fe3c 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004768:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800476c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004776:	3b01      	subs	r3, #1
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800477e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	4413      	add	r3, r2
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800478c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004790:	4a44      	ldr	r2, [pc, #272]	@ (80048a4 <Cmd_pdu_set_buck+0x1dc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d103      	bne.n	800479e <Cmd_pdu_set_buck+0xd6>
    	uart_choose_uart5 = 1;
 8004796:	4b44      	ldr	r3, [pc, #272]	@ (80048a8 <Cmd_pdu_set_buck+0x1e0>)
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e002      	b.n	80047a4 <Cmd_pdu_set_buck+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 800479e:	4b42      	ldr	r3, [pc, #264]	@ (80048a8 <Cmd_pdu_set_buck+0x1e0>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 80047a4:	2302      	movs	r3, #2
 80047a6:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = buck;
 80047aa:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80047ae:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 80047b2:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80047b6:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80047ba:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80047be:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80047c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	2301      	movs	r3, #1
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2303      	movs	r3, #3
 80047ce:	2202      	movs	r2, #2
 80047d0:	f005 ffbe 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80047d4:	f107 020f 	add.w	r2, r7, #15
 80047d8:	f107 0110 	add.w	r1, r7, #16
 80047dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047e0:	4618      	mov	r0, r3
 80047e2:	f006 f83b 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80047e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80047ea:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02c      	beq.n	800484e <Cmd_pdu_set_buck+0x186>
        for (int i = 0; i < frame_len; i++) {
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80047fa:	e010      	b.n	800481e <Cmd_pdu_set_buck+0x156>
            Uart_write(USART1, encoded_frame[i]);
 80047fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004800:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004804:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004808:	4413      	add	r3, r2
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	4619      	mov	r1, r3
 800480e:	4827      	ldr	r0, [pc, #156]	@ (80048ac <Cmd_pdu_set_buck+0x1e4>)
 8004810:	f7fd fa50 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004814:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004818:	3301      	adds	r3, #1
 800481a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800481e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004822:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800482e:	4293      	cmp	r3, r2
 8004830:	dbe4      	blt.n	80047fc <Cmd_pdu_set_buck+0x134>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004832:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004836:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	f107 0310 	add.w	r3, r7, #16
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f7fd fc70 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004848:	f7fd fc56 	bl	80020f8 <set_send_flag>
 800484c:	e022      	b.n	8004894 <Cmd_pdu_set_buck+0x1cc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800484e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004852:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	2301      	movs	r3, #1
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2303      	movs	r3, #3
 8004862:	2202      	movs	r2, #2
 8004864:	f005 ff74 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004868:	f107 020f 	add.w	r2, r7, #15
 800486c:	f107 0110 	add.w	r1, r7, #16
 8004870:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004874:	4618      	mov	r0, r3
 8004876:	f005 fff1 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800487a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800487e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004882:	781a      	ldrb	r2, [r3, #0]
 8004884:	f107 0310 	add.w	r3, r7, #16
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f7fd fc4c 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004890:	f7fd fc32 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004894:	2305      	movs	r3, #5
}
 8004896:	4618      	mov	r0, r3
 8004898:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40020000 	.word	0x40020000
 80048a4:	40005000 	.word	0x40005000
 80048a8:	20004830 	.word	0x20004830
 80048ac:	40011000 	.word	0x40011000

080048b0 <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80048b6:	af02      	add	r7, sp, #8
 80048b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048bc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80048c0:	6018      	str	r0, [r3, #0]
 80048c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048c6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80048ca:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80048cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	dc01      	bgt.n	80048de <Cmd_pdu_set_all+0x2e>
 80048da:	2303      	movs	r3, #3
 80048dc:	e0b8      	b.n	8004a50 <Cmd_pdu_set_all+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80048de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048e2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	dd01      	ble.n	80048f0 <Cmd_pdu_set_all+0x40>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e0af      	b.n	8004a50 <Cmd_pdu_set_all+0x1a0>

    uint8_t state = atoi(argv[1]);
 80048f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048f4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3304      	adds	r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f008 fd04 	bl	800d30c <atoi>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1) return CMDLINE_INVALID_ARG;
 800490a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800490e:	2b01      	cmp	r3, #1
 8004910:	d901      	bls.n	8004916 <Cmd_pdu_set_all+0x66>
 8004912:	2304      	movs	r3, #4
 8004914:	e09c      	b.n	8004a50 <Cmd_pdu_set_all+0x1a0>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004916:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800491a:	4850      	ldr	r0, [pc, #320]	@ (8004a5c <Cmd_pdu_set_all+0x1ac>)
 800491c:	f7ff fd60 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004920:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004924:	484d      	ldr	r0, [pc, #308]	@ (8004a5c <Cmd_pdu_set_all+0x1ac>)
 8004926:	f7ff fd5b 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800492a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800492e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004938:	3b01      	subs	r3, #1
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004940:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	4413      	add	r3, r2
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800494e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004952:	4a43      	ldr	r2, [pc, #268]	@ (8004a60 <Cmd_pdu_set_all+0x1b0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d103      	bne.n	8004960 <Cmd_pdu_set_all+0xb0>
    	uart_choose_uart5 = 1;
 8004958:	4b42      	ldr	r3, [pc, #264]	@ (8004a64 <Cmd_pdu_set_all+0x1b4>)
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	e002      	b.n	8004966 <Cmd_pdu_set_all+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004960:	4b40      	ldr	r3, [pc, #256]	@ (8004a64 <Cmd_pdu_set_all+0x1b4>)
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 8004966:	2303      	movs	r3, #3
 8004968:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = state;
 800496c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004970:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004974:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004978:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800497c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	2301      	movs	r3, #1
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2303      	movs	r3, #3
 8004988:	2201      	movs	r2, #1
 800498a:	f005 fee1 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800498e:	f107 020f 	add.w	r2, r7, #15
 8004992:	f107 0110 	add.w	r1, r7, #16
 8004996:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800499a:	4618      	mov	r0, r3
 800499c:	f005 ff5e 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 80049a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049a4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d02c      	beq.n	8004a08 <Cmd_pdu_set_all+0x158>
        for (int i = 0; i < frame_len; i++) {
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80049b4:	e010      	b.n	80049d8 <Cmd_pdu_set_all+0x128>
            Uart_write(USART1, encoded_frame[i]);
 80049b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049ba:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80049be:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	4619      	mov	r1, r3
 80049c8:	4827      	ldr	r0, [pc, #156]	@ (8004a68 <Cmd_pdu_set_all+0x1b8>)
 80049ca:	f7fd f973 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80049ce:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80049d2:	3301      	adds	r3, #1
 80049d4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80049d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049dc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80049e8:	4293      	cmp	r3, r2
 80049ea:	dbe4      	blt.n	80049b6 <Cmd_pdu_set_all+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80049ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049f0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	f107 0310 	add.w	r3, r7, #16
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fd fb93 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004a02:	f7fd fb79 	bl	80020f8 <set_send_flag>
 8004a06:	e022      	b.n	8004a4e <Cmd_pdu_set_all+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004a08:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004a0c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004a10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	2301      	movs	r3, #1
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f005 fe97 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004a22:	f107 020f 	add.w	r2, r7, #15
 8004a26:	f107 0110 	add.w	r1, r7, #16
 8004a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f005 ff14 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004a34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a38:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	f107 0310 	add.w	r3, r7, #16
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fd fb6f 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004a4a:	f7fd fb55 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004a4e:	2305      	movs	r3, #5
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40020000 	.word	0x40020000
 8004a60:	40005000 	.word	0x40005000
 8004a64:	20004830 	.word	0x20004830
 8004a68:	40011000 	.word	0x40011000

08004a6c <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a78:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004a7c:	6018      	str	r0, [r3, #0]
 8004a7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a82:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004a86:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004a88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a8c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	dc01      	bgt.n	8004a9a <Cmd_pdu_get_channel+0x2e>
 8004a96:	2303      	movs	r3, #3
 8004a98:	e0b8      	b.n	8004c0c <Cmd_pdu_get_channel+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004a9a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a9e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	dd01      	ble.n	8004aac <Cmd_pdu_get_channel+0x40>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e0af      	b.n	8004c0c <Cmd_pdu_get_channel+0x1a0>
    uint8_t channel = atoi(argv[1]);
 8004aac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ab0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f008 fc26 	bl	800d30c <atoi>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8004ac6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004aca:	2b09      	cmp	r3, #9
 8004acc:	d901      	bls.n	8004ad2 <Cmd_pdu_get_channel+0x66>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	e09c      	b.n	8004c0c <Cmd_pdu_get_channel+0x1a0>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004ad2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ad6:	4850      	ldr	r0, [pc, #320]	@ (8004c18 <Cmd_pdu_get_channel+0x1ac>)
 8004ad8:	f7ff fc82 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004adc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ae0:	484d      	ldr	r0, [pc, #308]	@ (8004c18 <Cmd_pdu_get_channel+0x1ac>)
 8004ae2:	f7ff fc7d 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004ae6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004aea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004af4:	3b01      	subs	r3, #1
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004afc:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004b0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004b0e:	4a43      	ldr	r2, [pc, #268]	@ (8004c1c <Cmd_pdu_get_channel+0x1b0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d103      	bne.n	8004b1c <Cmd_pdu_get_channel+0xb0>
    	uart_choose_uart5 = 1;
 8004b14:	4b42      	ldr	r3, [pc, #264]	@ (8004c20 <Cmd_pdu_get_channel+0x1b4>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	e002      	b.n	8004b22 <Cmd_pdu_get_channel+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004b1c:	4b40      	ldr	r3, [pc, #256]	@ (8004c20 <Cmd_pdu_get_channel+0x1b4>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 8004b22:	2304      	movs	r3, #4
 8004b24:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = channel;
 8004b28:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004b2c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004b30:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004b34:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004b38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	2301      	movs	r3, #1
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	2303      	movs	r3, #3
 8004b44:	2201      	movs	r2, #1
 8004b46:	f005 fe03 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004b4a:	f107 020f 	add.w	r2, r7, #15
 8004b4e:	f107 0110 	add.w	r1, r7, #16
 8004b52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b56:	4618      	mov	r0, r3
 8004b58:	f005 fe80 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004b5c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b60:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d02c      	beq.n	8004bc4 <Cmd_pdu_get_channel+0x158>
        for (int i = 0; i < frame_len; i++) {
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004b70:	e010      	b.n	8004b94 <Cmd_pdu_get_channel+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8004b72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b76:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004b7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b7e:	4413      	add	r3, r2
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	4619      	mov	r1, r3
 8004b84:	4827      	ldr	r0, [pc, #156]	@ (8004c24 <Cmd_pdu_get_channel+0x1b8>)
 8004b86:	f7fd f895 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004b8a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b8e:	3301      	adds	r3, #1
 8004b90:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004b94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b98:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	dbe4      	blt.n	8004b72 <Cmd_pdu_get_channel+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004ba8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bac:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd fab5 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004bbe:	f7fd fa9b 	bl	80020f8 <set_send_flag>
 8004bc2:	e022      	b.n	8004c0a <Cmd_pdu_get_channel+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004bc4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004bc8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f005 fdb9 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004bde:	f107 020f 	add.w	r2, r7, #15
 8004be2:	f107 0110 	add.w	r1, r7, #16
 8004be6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bea:	4618      	mov	r0, r3
 8004bec:	f005 fe36 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004bf0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bf4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	f107 0310 	add.w	r3, r7, #16
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fd fa91 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004c06:	f7fd fa77 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004c0a:	2305      	movs	r3, #5
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40020000 	.word	0x40020000
 8004c1c:	40005000 	.word	0x40005000
 8004c20:	20004830 	.word	0x20004830
 8004c24:	40011000 	.word	0x40011000

08004c28 <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004c2e:	af02      	add	r7, sp, #8
 8004c30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c34:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c38:	6018      	str	r0, [r3, #0]
 8004c3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c3e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c42:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004c44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c48:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	dc01      	bgt.n	8004c56 <Cmd_pdu_get_buck+0x2e>
 8004c52:	2303      	movs	r3, #3
 8004c54:	e0b8      	b.n	8004dc8 <Cmd_pdu_get_buck+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004c56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c5a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	dd01      	ble.n	8004c68 <Cmd_pdu_get_buck+0x40>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e0af      	b.n	8004dc8 <Cmd_pdu_get_buck+0x1a0>
    uint8_t buck = atoi(argv[1]);
 8004c68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c6c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3304      	adds	r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f008 fb48 	bl	800d30c <atoi>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004c82:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d901      	bls.n	8004c8e <Cmd_pdu_get_buck+0x66>
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	e09c      	b.n	8004dc8 <Cmd_pdu_get_buck+0x1a0>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004c8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c92:	4850      	ldr	r0, [pc, #320]	@ (8004dd4 <Cmd_pdu_get_buck+0x1ac>)
 8004c94:	f7ff fba4 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004c98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c9c:	484d      	ldr	r0, [pc, #308]	@ (8004dd4 <Cmd_pdu_get_buck+0x1ac>)
 8004c9e:	f7ff fb9f 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004ca2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ca6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004cb8:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004cc6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004cca:	4a43      	ldr	r2, [pc, #268]	@ (8004dd8 <Cmd_pdu_get_buck+0x1b0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d103      	bne.n	8004cd8 <Cmd_pdu_get_buck+0xb0>
    	uart_choose_uart5 = 1;
 8004cd0:	4b42      	ldr	r3, [pc, #264]	@ (8004ddc <Cmd_pdu_get_buck+0x1b4>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <Cmd_pdu_get_buck+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004cd8:	4b40      	ldr	r3, [pc, #256]	@ (8004ddc <Cmd_pdu_get_buck+0x1b4>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 8004cde:	2305      	movs	r3, #5
 8004ce0:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = buck;
 8004ce4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004ce8:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004cec:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004cf0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004cf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2303      	movs	r3, #3
 8004d00:	2201      	movs	r2, #1
 8004d02:	f005 fd25 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004d06:	f107 020f 	add.w	r2, r7, #15
 8004d0a:	f107 0110 	add.w	r1, r7, #16
 8004d0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d12:	4618      	mov	r0, r3
 8004d14:	f005 fda2 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004d18:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d1c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02c      	beq.n	8004d80 <Cmd_pdu_get_buck+0x158>
        for (int i = 0; i < frame_len; i++) {
 8004d26:	2300      	movs	r3, #0
 8004d28:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004d2c:	e010      	b.n	8004d50 <Cmd_pdu_get_buck+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8004d2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d32:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004d36:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d3a:	4413      	add	r3, r2
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4827      	ldr	r0, [pc, #156]	@ (8004de0 <Cmd_pdu_get_buck+0x1b8>)
 8004d42:	f7fc ffb7 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004d46:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004d50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d54:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d60:	4293      	cmp	r3, r2
 8004d62:	dbe4      	blt.n	8004d2e <Cmd_pdu_get_buck+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004d64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d68:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	f107 0310 	add.w	r3, r7, #16
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fd f9d7 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004d7a:	f7fd f9bd 	bl	80020f8 <set_send_flag>
 8004d7e:	e022      	b.n	8004dc6 <Cmd_pdu_get_buck+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004d80:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004d84:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004d88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	2303      	movs	r3, #3
 8004d94:	2201      	movs	r2, #1
 8004d96:	f005 fcdb 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004d9a:	f107 020f 	add.w	r2, r7, #15
 8004d9e:	f107 0110 	add.w	r1, r7, #16
 8004da2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004da6:	4618      	mov	r0, r3
 8004da8:	f005 fd58 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004dac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004db0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	f107 0310 	add.w	r3, r7, #16
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fd f9b3 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004dc2:	f7fd f999 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004dc6:	2305      	movs	r3, #5
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40020000 	.word	0x40020000
 8004dd8:	40005000 	.word	0x40005000
 8004ddc:	20004830 	.word	0x20004830
 8004de0:	40011000 	.word	0x40011000

08004de4 <Cmd_pdu_get_all>:

int Cmd_pdu_get_all(int argc, char *argv[])
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004df0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004df4:	6018      	str	r0, [r3, #0]
 8004df6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004dfa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004dfe:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004e00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004e04:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	dc01      	bgt.n	8004e12 <Cmd_pdu_get_all+0x2e>
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e097      	b.n	8004f42 <Cmd_pdu_get_all+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8004e12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004e16:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	dd01      	ble.n	8004e24 <Cmd_pdu_get_all+0x40>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e08e      	b.n	8004f42 <Cmd_pdu_get_all+0x15e>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004e24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e28:	4848      	ldr	r0, [pc, #288]	@ (8004f4c <Cmd_pdu_get_all+0x168>)
 8004e2a:	f7ff fad9 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004e2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e32:	4846      	ldr	r0, [pc, #280]	@ (8004f4c <Cmd_pdu_get_all+0x168>)
 8004e34:	f7ff fad4 	bl	80043e0 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004e38:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004e3c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e46:	3b01      	subs	r3, #1
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004e4e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	4413      	add	r3, r2
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004e5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004e60:	4a3b      	ldr	r2, [pc, #236]	@ (8004f50 <Cmd_pdu_get_all+0x16c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d103      	bne.n	8004e6e <Cmd_pdu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 8004e66:	4b3b      	ldr	r3, [pc, #236]	@ (8004f54 <Cmd_pdu_get_all+0x170>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	e002      	b.n	8004e74 <Cmd_pdu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004e6e:	4b39      	ldr	r3, [pc, #228]	@ (8004f54 <Cmd_pdu_get_all+0x170>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PDU_GET_ALL;
 8004e74:	2306      	movs	r3, #6
 8004e76:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004e7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e7e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004e82:	2201      	movs	r2, #1
 8004e84:	2103      	movs	r1, #3
 8004e86:	f005 fc3b 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004e8a:	f107 020f 	add.w	r2, r7, #15
 8004e8e:	f107 0110 	add.w	r1, r7, #16
 8004e92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e96:	4618      	mov	r0, r3
 8004e98:	f005 fce0 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004e9c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ea0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d02c      	beq.n	8004f04 <Cmd_pdu_get_all+0x120>
        for (int i = 0; i < frame_len; i++) {
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004eb0:	e010      	b.n	8004ed4 <Cmd_pdu_get_all+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8004eb2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004eb6:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8004eba:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004ebe:	4413      	add	r3, r2
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4824      	ldr	r0, [pc, #144]	@ (8004f58 <Cmd_pdu_get_all+0x174>)
 8004ec6:	f7fc fef5 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004eca:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004ed4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ed8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	dbe4      	blt.n	8004eb2 <Cmd_pdu_get_all+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004ee8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004eec:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	f107 0310 	add.w	r3, r7, #16
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fd f915 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004efe:	f7fd f8fb 	bl	80020f8 <set_send_flag>
 8004f02:	e01d      	b.n	8004f40 <Cmd_pdu_get_all+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004f04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f08:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2103      	movs	r1, #3
 8004f10:	f005 fbf6 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004f14:	f107 020f 	add.w	r2, r7, #15
 8004f18:	f107 0110 	add.w	r1, r7, #16
 8004f1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f20:	4618      	mov	r0, r3
 8004f22:	f005 fc9b 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004f26:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f2a:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004f2e:	781a      	ldrb	r2, [r3, #0]
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fd f8f6 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004f3c:	f7fd f8dc 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004f40:	2305      	movs	r3, #5
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40020000 	.word	0x40020000
 8004f50:	40005000 	.word	0x40005000
 8004f54:	20004830 	.word	0x20004830
 8004f58:	40011000 	.word	0x40011000

08004f5c <LL_GPIO_SetOutputPin>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	619a      	str	r2, [r3, #24]
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <LL_GPIO_ResetOutputPin>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	041a      	lsls	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	619a      	str	r2, [r3, #24]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <PMU_create_task>:
};



void PMU_create_task(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PMU_task_context.taskHandle, &PMU_task_context.taskProperty);
 8004f9c:	4906      	ldr	r1, [pc, #24]	@ (8004fb8 <PMU_create_task+0x20>)
 8004f9e:	4807      	ldr	r0, [pc, #28]	@ (8004fbc <PMU_create_task+0x24>)
 8004fa0:	f005 fa2a 	bl	800a3f8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 8004fa4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004fa8:	2005      	movs	r0, #5
 8004faa:	f005 f9f9 	bl	800a3a0 <SCH_TIM_Start>
    Ringbuf_init();
 8004fae:	f7fc fd25 	bl	80019fc <Ringbuf_init>
}
 8004fb2:	bf00      	nop
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2000006c 	.word	0x2000006c
 8004fbc:	20000068 	.word	0x20000068

08004fc0 <PMU_update_task>:





void PMU_update_task(void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
	if (auto_report_enabled) {
 8004fc6:	4b24      	ldr	r3, [pc, #144]	@ (8005058 <PMU_update_task+0x98>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d040      	beq.n	8005050 <PMU_update_task+0x90>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PMU))
 8004fce:	2005      	movs	r0, #5
 8004fd0:	f005 f9fc 	bl	800a3cc <SCH_TIM_HasCompleted>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d03a      	beq.n	8005050 <PMU_update_task+0x90>
		{

			if(!sendFlag){
 8004fda:	4b20      	ldr	r3, [pc, #128]	@ (800505c <PMU_update_task+0x9c>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d135      	bne.n	8005050 <PMU_update_task+0x90>
				if(!send_rs422){
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <PMU_update_task+0xa0>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d130      	bne.n	8005050 <PMU_update_task+0x90>
					if(receive_iouFlag&&receive_pduFlag){
 8004fee:	4b1d      	ldr	r3, [pc, #116]	@ (8005064 <PMU_update_task+0xa4>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d02b      	beq.n	8005050 <PMU_update_task+0x90>
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8005068 <PMU_update_task+0xa8>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d026      	beq.n	8005050 <PMU_update_task+0x90>
						switch_board(1);
 8005002:	2001      	movs	r0, #1
 8005004:	f001 fe68 	bl	8006cd8 <switch_board>
						Uart_flush(USART1);
 8005008:	4818      	ldr	r0, [pc, #96]	@ (800506c <PMU_update_task+0xac>)
 800500a:	f7fc ff77 	bl	8001efc <Uart_flush>

						frame = pmu_frame;
 800500e:	4b18      	ldr	r3, [pc, #96]	@ (8005070 <PMU_update_task+0xb0>)
 8005010:	60bb      	str	r3, [r7, #8]
						frame_len = sizeof(pmu_frame);
 8005012:	2309      	movs	r3, #9
 8005014:	71fb      	strb	r3, [r7, #7]
						for (int i = 0; i < frame_len; i++) {
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e00a      	b.n	8005032 <PMU_update_task+0x72>
							Uart_write(USART1, frame[i]);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4413      	add	r3, r2
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	4619      	mov	r1, r3
 8005026:	4811      	ldr	r0, [pc, #68]	@ (800506c <PMU_update_task+0xac>)
 8005028:	f7fc fe44 	bl	8001cb4 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	429a      	cmp	r2, r3
 8005038:	dbf0      	blt.n	800501c <PMU_update_task+0x5c>
						}
						receive_pmuFlag = 0;
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <PMU_update_task+0xb4>)
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 8005040:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <PMU_update_task+0xa0>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 8005046:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800504a:	2005      	movs	r0, #5
 800504c:	f005 f9a8 	bl	800a3a0 <SCH_TIM_Start>
					}
				}
			}
		}
	}
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20004958 	.word	0x20004958
 800505c:	2000472d 	.word	0x2000472d
 8005060:	2000482f 	.word	0x2000482f
 8005064:	2000003e 	.word	0x2000003e
 8005068:	2000003c 	.word	0x2000003c
 800506c:	40011000 	.word	0x40011000
 8005070:	2000005c 	.word	0x2000005c
 8005074:	2000003d 	.word	0x2000003d

08005078 <Cmd_pmu_get_temp>:


#define DEST_ADDR FSP_ADR_PMU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pmu_get_temp(int argc, char *argv[])
{
 8005078:	b580      	push	{r7, lr}
 800507a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800507e:	af00      	add	r7, sp, #0
 8005080:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005084:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005088:	6018      	str	r0, [r3, #0]
 800508a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800508e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005092:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005094:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005098:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	dc01      	bgt.n	80050a6 <Cmd_pmu_get_temp+0x2e>
 80050a2:	2303      	movs	r3, #3
 80050a4:	e097      	b.n	80051d6 <Cmd_pmu_get_temp+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80050a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80050aa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	dd01      	ble.n	80050b8 <Cmd_pmu_get_temp+0x40>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e08e      	b.n	80051d6 <Cmd_pmu_get_temp+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80050b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050bc:	4848      	ldr	r0, [pc, #288]	@ (80051e0 <Cmd_pmu_get_temp+0x168>)
 80050be:	f7ff ff5b 	bl	8004f78 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80050c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050c6:	4846      	ldr	r0, [pc, #280]	@ (80051e0 <Cmd_pmu_get_temp+0x168>)
 80050c8:	f7ff ff48 	bl	8004f5c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80050cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80050d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050da:	3b01      	subs	r3, #1
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80050e2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80050f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80050f4:	4a3b      	ldr	r2, [pc, #236]	@ (80051e4 <Cmd_pmu_get_temp+0x16c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d103      	bne.n	8005102 <Cmd_pmu_get_temp+0x8a>
    	uart_choose_uart5 = 1;
 80050fa:	4b3b      	ldr	r3, [pc, #236]	@ (80051e8 <Cmd_pmu_get_temp+0x170>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e002      	b.n	8005108 <Cmd_pmu_get_temp+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005102:	4b39      	ldr	r3, [pc, #228]	@ (80051e8 <Cmd_pmu_get_temp+0x170>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800510e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005112:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005116:	2201      	movs	r2, #1
 8005118:	2102      	movs	r1, #2
 800511a:	f005 faf1 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800511e:	f107 020f 	add.w	r2, r7, #15
 8005122:	f107 0110 	add.w	r1, r7, #16
 8005126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800512a:	4618      	mov	r0, r3
 800512c:	f005 fb96 	bl	800a85c <frame_encode>

    if (frame_len > 0) {
 8005130:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005134:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d02c      	beq.n	8005198 <Cmd_pmu_get_temp+0x120>
        for (int i = 0; i < frame_len; i++) {
 800513e:	2300      	movs	r3, #0
 8005140:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005144:	e010      	b.n	8005168 <Cmd_pmu_get_temp+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8005146:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800514a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800514e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005152:	4413      	add	r3, r2
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	4619      	mov	r1, r3
 8005158:	4824      	ldr	r0, [pc, #144]	@ (80051ec <Cmd_pmu_get_temp+0x174>)
 800515a:	f7fc fdab 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800515e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005162:	3301      	adds	r3, #1
 8005164:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005168:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800516c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005178:	4293      	cmp	r3, r2
 800517a:	dbe4      	blt.n	8005146 <Cmd_pmu_get_temp+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800517c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005180:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005184:	781a      	ldrb	r2, [r3, #0]
 8005186:	f107 0310 	add.w	r3, r7, #16
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f7fc ffcb 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005192:	f7fc ffb1 	bl	80020f8 <set_send_flag>
 8005196:	e01d      	b.n	80051d4 <Cmd_pmu_get_temp+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800519c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80051a0:	2201      	movs	r2, #1
 80051a2:	2102      	movs	r1, #2
 80051a4:	f005 faac 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80051a8:	f107 020f 	add.w	r2, r7, #15
 80051ac:	f107 0110 	add.w	r1, r7, #16
 80051b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051b4:	4618      	mov	r0, r3
 80051b6:	f005 fb51 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80051ba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80051be:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80051c2:	781a      	ldrb	r2, [r3, #0]
 80051c4:	f107 0310 	add.w	r3, r7, #16
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fc ffac 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80051d0:	f7fc ff92 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80051d4:	2305      	movs	r3, #5
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40020000 	.word	0x40020000
 80051e4:	40005000 	.word	0x40005000
 80051e8:	20004830 	.word	0x20004830
 80051ec:	40011000 	.word	0x40011000

080051f0 <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80051fc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005200:	6018      	str	r0, [r3, #0]
 8005202:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005206:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800520a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800520c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005210:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b01      	cmp	r3, #1
 8005218:	dc01      	bgt.n	800521e <Cmd_pmu_bat_vol+0x2e>
 800521a:	2303      	movs	r3, #3
 800521c:	e097      	b.n	800534e <Cmd_pmu_bat_vol+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800521e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005222:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b02      	cmp	r3, #2
 800522a:	dd01      	ble.n	8005230 <Cmd_pmu_bat_vol+0x40>
 800522c:	2302      	movs	r3, #2
 800522e:	e08e      	b.n	800534e <Cmd_pmu_bat_vol+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005230:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005234:	4848      	ldr	r0, [pc, #288]	@ (8005358 <Cmd_pmu_bat_vol+0x168>)
 8005236:	f7ff fe9f 	bl	8004f78 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800523a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800523e:	4846      	ldr	r0, [pc, #280]	@ (8005358 <Cmd_pmu_bat_vol+0x168>)
 8005240:	f7ff fe8c 	bl	8004f5c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005244:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005248:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005252:	3b01      	subs	r3, #1
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800525a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	4413      	add	r3, r2
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005268:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800526c:	4a3b      	ldr	r2, [pc, #236]	@ (800535c <Cmd_pmu_bat_vol+0x16c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d103      	bne.n	800527a <Cmd_pmu_bat_vol+0x8a>
    	uart_choose_uart5 = 1;
 8005272:	4b3b      	ldr	r3, [pc, #236]	@ (8005360 <Cmd_pmu_bat_vol+0x170>)
 8005274:	2201      	movs	r2, #1
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e002      	b.n	8005280 <Cmd_pmu_bat_vol+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800527a:	4b39      	ldr	r3, [pc, #228]	@ (8005360 <Cmd_pmu_bat_vol+0x170>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_BAT_VOL;
 8005280:	2302      	movs	r3, #2
 8005282:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800528a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800528e:	2201      	movs	r2, #1
 8005290:	2102      	movs	r1, #2
 8005292:	f005 fa35 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005296:	f107 020f 	add.w	r2, r7, #15
 800529a:	f107 0110 	add.w	r1, r7, #16
 800529e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052a2:	4618      	mov	r0, r3
 80052a4:	f005 fada 	bl	800a85c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80052a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052ac:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02c      	beq.n	8005310 <Cmd_pmu_bat_vol+0x120>
        for (int i = 0; i < frame_len; i++) {
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80052bc:	e010      	b.n	80052e0 <Cmd_pmu_bat_vol+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 80052be:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052c2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80052c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80052ca:	4413      	add	r3, r2
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	4619      	mov	r1, r3
 80052d0:	4824      	ldr	r0, [pc, #144]	@ (8005364 <Cmd_pmu_bat_vol+0x174>)
 80052d2:	f7fc fcef 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80052d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80052da:	3301      	adds	r3, #1
 80052dc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80052e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052e4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80052f0:	4293      	cmp	r3, r2
 80052f2:	dbe4      	blt.n	80052be <Cmd_pmu_bat_vol+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80052f4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052f8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	f107 0310 	add.w	r3, r7, #16
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f7fc ff0f 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800530a:	f7fc fef5 	bl	80020f8 <set_send_flag>
 800530e:	e01d      	b.n	800534c <Cmd_pmu_bat_vol+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005310:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005314:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005318:	2201      	movs	r2, #1
 800531a:	2102      	movs	r1, #2
 800531c:	f005 f9f0 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005320:	f107 020f 	add.w	r2, r7, #15
 8005324:	f107 0110 	add.w	r1, r7, #16
 8005328:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800532c:	4618      	mov	r0, r3
 800532e:	f005 fa95 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005332:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005336:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800533a:	781a      	ldrb	r2, [r3, #0]
 800533c:	f107 0310 	add.w	r3, r7, #16
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f7fc fef0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005348:	f7fc fed6 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800534c:	2305      	movs	r3, #5
}
 800534e:	4618      	mov	r0, r3
 8005350:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40020000 	.word	0x40020000
 800535c:	40005000 	.word	0x40005000
 8005360:	20004830 	.word	0x20004830
 8005364:	40011000 	.word	0x40011000

08005368 <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 8005368:	b580      	push	{r7, lr}
 800536a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800536e:	af00      	add	r7, sp, #0
 8005370:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005374:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005378:	6018      	str	r0, [r3, #0]
 800537a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800537e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005382:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005384:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005388:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b01      	cmp	r3, #1
 8005390:	dc01      	bgt.n	8005396 <Cmd_pmu_parag_in+0x2e>
 8005392:	2303      	movs	r3, #3
 8005394:	e097      	b.n	80054c6 <Cmd_pmu_parag_in+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005396:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800539a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	dd01      	ble.n	80053a8 <Cmd_pmu_parag_in+0x40>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e08e      	b.n	80054c6 <Cmd_pmu_parag_in+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80053a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053ac:	4848      	ldr	r0, [pc, #288]	@ (80054d0 <Cmd_pmu_parag_in+0x168>)
 80053ae:	f7ff fde3 	bl	8004f78 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80053b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053b6:	4846      	ldr	r0, [pc, #280]	@ (80054d0 <Cmd_pmu_parag_in+0x168>)
 80053b8:	f7ff fdd0 	bl	8004f5c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80053bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80053c0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053ca:	3b01      	subs	r3, #1
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80053d2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80053e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80053e4:	4a3b      	ldr	r2, [pc, #236]	@ (80054d4 <Cmd_pmu_parag_in+0x16c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d103      	bne.n	80053f2 <Cmd_pmu_parag_in+0x8a>
    	uart_choose_uart5 = 1;
 80053ea:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <Cmd_pmu_parag_in+0x170>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e002      	b.n	80053f8 <Cmd_pmu_parag_in+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80053f2:	4b39      	ldr	r3, [pc, #228]	@ (80054d8 <Cmd_pmu_parag_in+0x170>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PARAG_IN;
 80053f8:	2303      	movs	r3, #3
 80053fa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80053fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005402:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005406:	2201      	movs	r2, #1
 8005408:	2102      	movs	r1, #2
 800540a:	f005 f979 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800540e:	f107 020f 	add.w	r2, r7, #15
 8005412:	f107 0110 	add.w	r1, r7, #16
 8005416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800541a:	4618      	mov	r0, r3
 800541c:	f005 fa1e 	bl	800a85c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005420:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005424:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d02c      	beq.n	8005488 <Cmd_pmu_parag_in+0x120>
        for (int i = 0; i < frame_len; i++) {
 800542e:	2300      	movs	r3, #0
 8005430:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005434:	e010      	b.n	8005458 <Cmd_pmu_parag_in+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8005436:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800543a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800543e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005442:	4413      	add	r3, r2
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	4824      	ldr	r0, [pc, #144]	@ (80054dc <Cmd_pmu_parag_in+0x174>)
 800544a:	f7fc fc33 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800544e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005452:	3301      	adds	r3, #1
 8005454:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005458:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800545c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005468:	4293      	cmp	r3, r2
 800546a:	dbe4      	blt.n	8005436 <Cmd_pmu_parag_in+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800546c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005470:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	f107 0310 	add.w	r3, r7, #16
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f7fc fe53 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005482:	f7fc fe39 	bl	80020f8 <set_send_flag>
 8005486:	e01d      	b.n	80054c4 <Cmd_pmu_parag_in+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800548c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005490:	2201      	movs	r2, #1
 8005492:	2102      	movs	r1, #2
 8005494:	f005 f934 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005498:	f107 020f 	add.w	r2, r7, #15
 800549c:	f107 0110 	add.w	r1, r7, #16
 80054a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054a4:	4618      	mov	r0, r3
 80054a6:	f005 f9d9 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80054aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054ae:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fc fe34 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80054c0:	f7fc fe1a 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80054c4:	2305      	movs	r3, #5
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40020000 	.word	0x40020000
 80054d4:	40005000 	.word	0x40005000
 80054d8:	20004830 	.word	0x20004830
 80054dc:	40011000 	.word	0x40011000

080054e0 <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054ec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80054f0:	6018      	str	r0, [r3, #0]
 80054f2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054f6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80054fa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80054fc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005500:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b01      	cmp	r3, #1
 8005508:	dc01      	bgt.n	800550e <Cmd_pmu_parag_out+0x2e>
 800550a:	2303      	movs	r3, #3
 800550c:	e097      	b.n	800563e <Cmd_pmu_parag_out+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800550e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005512:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b02      	cmp	r3, #2
 800551a:	dd01      	ble.n	8005520 <Cmd_pmu_parag_out+0x40>
 800551c:	2302      	movs	r3, #2
 800551e:	e08e      	b.n	800563e <Cmd_pmu_parag_out+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005520:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005524:	4848      	ldr	r0, [pc, #288]	@ (8005648 <Cmd_pmu_parag_out+0x168>)
 8005526:	f7ff fd27 	bl	8004f78 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800552a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800552e:	4846      	ldr	r0, [pc, #280]	@ (8005648 <Cmd_pmu_parag_out+0x168>)
 8005530:	f7ff fd14 	bl	8004f5c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005534:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005538:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005542:	3b01      	subs	r3, #1
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800554a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	4413      	add	r3, r2
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005558:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800555c:	4a3b      	ldr	r2, [pc, #236]	@ (800564c <Cmd_pmu_parag_out+0x16c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d103      	bne.n	800556a <Cmd_pmu_parag_out+0x8a>
    	uart_choose_uart5 = 1;
 8005562:	4b3b      	ldr	r3, [pc, #236]	@ (8005650 <Cmd_pmu_parag_out+0x170>)
 8005564:	2201      	movs	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e002      	b.n	8005570 <Cmd_pmu_parag_out+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800556a:	4b39      	ldr	r3, [pc, #228]	@ (8005650 <Cmd_pmu_parag_out+0x170>)
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 8005570:	2304      	movs	r3, #4
 8005572:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800557a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800557e:	2201      	movs	r2, #1
 8005580:	2102      	movs	r1, #2
 8005582:	f005 f8bd 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005586:	f107 020f 	add.w	r2, r7, #15
 800558a:	f107 0110 	add.w	r1, r7, #16
 800558e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005592:	4618      	mov	r0, r3
 8005594:	f005 f962 	bl	800a85c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005598:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800559c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02c      	beq.n	8005600 <Cmd_pmu_parag_out+0x120>
        for (int i = 0; i < frame_len; i++) {
 80055a6:	2300      	movs	r3, #0
 80055a8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80055ac:	e010      	b.n	80055d0 <Cmd_pmu_parag_out+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 80055ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055b2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80055b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	4619      	mov	r1, r3
 80055c0:	4824      	ldr	r0, [pc, #144]	@ (8005654 <Cmd_pmu_parag_out+0x174>)
 80055c2:	f7fc fb77 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80055c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80055ca:	3301      	adds	r3, #1
 80055cc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80055d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055d4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80055e0:	4293      	cmp	r3, r2
 80055e2:	dbe4      	blt.n	80055ae <Cmd_pmu_parag_out+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80055e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055e8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	f107 0310 	add.w	r3, r7, #16
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fc fd97 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80055fa:	f7fc fd7d 	bl	80020f8 <set_send_flag>
 80055fe:	e01d      	b.n	800563c <Cmd_pmu_parag_out+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005604:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005608:	2201      	movs	r2, #1
 800560a:	2102      	movs	r1, #2
 800560c:	f005 f878 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005610:	f107 020f 	add.w	r2, r7, #15
 8005614:	f107 0110 	add.w	r1, r7, #16
 8005618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800561c:	4618      	mov	r0, r3
 800561e:	f005 f91d 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005622:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005626:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f7fc fd78 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005638:	f7fc fd5e 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800563c:	2305      	movs	r3, #5
}
 800563e:	4618      	mov	r0, r3
 8005640:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40020000 	.word	0x40020000
 800564c:	40005000 	.word	0x40005000
 8005650:	20004830 	.word	0x20004830
 8005654:	40011000 	.word	0x40011000

08005658 <Cmd_pmu_set_temppoint>:

int Cmd_pmu_set_temppoint(int argc, char *argv[])
{
 8005658:	b580      	push	{r7, lr}
 800565a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800565e:	af02      	add	r7, sp, #8
 8005660:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005664:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005668:	6018      	str	r0, [r3, #0]
 800566a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800566e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005672:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8005674:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005678:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b03      	cmp	r3, #3
 8005680:	dc01      	bgt.n	8005686 <Cmd_pmu_set_temppoint+0x2e>
 8005682:	2303      	movs	r3, #3
 8005684:	e0db      	b.n	800583e <Cmd_pmu_set_temppoint+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8005686:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800568a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b04      	cmp	r3, #4
 8005692:	dd01      	ble.n	8005698 <Cmd_pmu_set_temppoint+0x40>
 8005694:	2302      	movs	r3, #2
 8005696:	e0d2      	b.n	800583e <Cmd_pmu_set_temppoint+0x1e6>
    uint16_t lowpoint = atoi(argv[1]);
 8005698:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800569c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3304      	adds	r3, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f007 fe30 	bl	800d30c <atoi>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
   // if (lowpoint > 6)   return CMDLINE_INVALID_ARG;
    uint16_t highpoint = atoi(argv[2]);
 80056b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056b6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3308      	adds	r3, #8
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f007 fe23 	bl	800d30c <atoi>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
   // if (highpoint > 6)   return CMDLINE_INVALID_ARG;
    if (highpoint < lowpoint)   return CMDLINE_INVALID_ARG;
 80056cc:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 80056d0:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d201      	bcs.n	80056dc <Cmd_pmu_set_temppoint+0x84>
 80056d8:	2304      	movs	r3, #4
 80056da:	e0b0      	b.n	800583e <Cmd_pmu_set_temppoint+0x1e6>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80056dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056e0:	4859      	ldr	r0, [pc, #356]	@ (8005848 <Cmd_pmu_set_temppoint+0x1f0>)
 80056e2:	f7ff fc49 	bl	8004f78 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80056e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056ea:	4857      	ldr	r0, [pc, #348]	@ (8005848 <Cmd_pmu_set_temppoint+0x1f0>)
 80056ec:	f7ff fc36 	bl	8004f5c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80056f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056f4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056fe:	3b01      	subs	r3, #1
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005706:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	4413      	add	r3, r2
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005714:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005718:	4a4c      	ldr	r2, [pc, #304]	@ (800584c <Cmd_pmu_set_temppoint+0x1f4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d103      	bne.n	8005726 <Cmd_pmu_set_temppoint+0xce>
    	uart_choose_uart5 = 1;
 800571e:	4b4c      	ldr	r3, [pc, #304]	@ (8005850 <Cmd_pmu_set_temppoint+0x1f8>)
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	e002      	b.n	800572c <Cmd_pmu_set_temppoint+0xd4>
    }else{
    	uart_choose_uart5 = 0;
 8005726:	4b4a      	ldr	r3, [pc, #296]	@ (8005850 <Cmd_pmu_set_temppoint+0x1f8>)
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_TEMP_POINT;
 800572c:	2305      	movs	r3, #5
 800572e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = (uint8_t)(lowpoint >> 8);
 8005732:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	b29b      	uxth	r3, r3
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(lowpoint & 0xFF);
 8005740:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005744:	b2db      	uxtb	r3, r3
 8005746:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(highpoint >> 8);
 800574a:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	b29b      	uxth	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(highpoint & 0xFF);
 8005758:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005762:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005766:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800576a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	2301      	movs	r3, #1
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	2302      	movs	r3, #2
 8005776:	2204      	movs	r2, #4
 8005778:	f004 ffea 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800577c:	f107 020b 	add.w	r2, r7, #11
 8005780:	f107 010c 	add.w	r1, r7, #12
 8005784:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005788:	4618      	mov	r0, r3
 800578a:	f005 f867 	bl	800a85c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 800578e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005792:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d02c      	beq.n	80057f6 <Cmd_pmu_set_temppoint+0x19e>
        for (int i = 0; i < frame_len; i++) {
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80057a2:	e010      	b.n	80057c6 <Cmd_pmu_set_temppoint+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 80057a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057a8:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 80057ac:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80057b0:	4413      	add	r3, r2
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	4827      	ldr	r0, [pc, #156]	@ (8005854 <Cmd_pmu_set_temppoint+0x1fc>)
 80057b8:	f7fc fa7c 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80057bc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80057c0:	3301      	adds	r3, #1
 80057c2:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80057c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057ca:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80057d6:	4293      	cmp	r3, r2
 80057d8:	dbe4      	blt.n	80057a4 <Cmd_pmu_set_temppoint+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80057da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057de:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80057e2:	781a      	ldrb	r2, [r3, #0]
 80057e4:	f107 030c 	add.w	r3, r7, #12
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fc fc9c 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80057f0:	f7fc fc82 	bl	80020f8 <set_send_flag>
 80057f4:	e022      	b.n	800583c <Cmd_pmu_set_temppoint+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80057f6:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80057fa:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80057fe:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	2301      	movs	r3, #1
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2302      	movs	r3, #2
 800580a:	2204      	movs	r2, #4
 800580c:	f004 ffa0 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005810:	f107 020b 	add.w	r2, r7, #11
 8005814:	f107 010c 	add.w	r1, r7, #12
 8005818:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800581c:	4618      	mov	r0, r3
 800581e:	f005 f81d 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005822:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005826:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	f107 030c 	add.w	r3, r7, #12
 8005830:	4611      	mov	r1, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f7fc fc78 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005838:	f7fc fc5e 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800583c:	2305      	movs	r3, #5
}
 800583e:	4618      	mov	r0, r3
 8005840:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40020000 	.word	0x40020000
 800584c:	40005000 	.word	0x40005000
 8005850:	20004830 	.word	0x20004830
 8005854:	40011000 	.word	0x40011000

08005858 <Cmd_pmu_set_output>:

int Cmd_pmu_set_output(int argc, char *argv[])
{
 8005858:	b580      	push	{r7, lr}
 800585a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800585e:	af02      	add	r7, sp, #8
 8005860:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005864:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005868:	6018      	str	r0, [r3, #0]
 800586a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800586e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005872:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005874:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005878:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	dc01      	bgt.n	8005886 <Cmd_pmu_set_output+0x2e>
 8005882:	2303      	movs	r3, #3
 8005884:	e0b8      	b.n	80059f8 <Cmd_pmu_set_output+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8005886:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800588a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b03      	cmp	r3, #3
 8005892:	dd01      	ble.n	8005898 <Cmd_pmu_set_output+0x40>
 8005894:	2302      	movs	r3, #2
 8005896:	e0af      	b.n	80059f8 <Cmd_pmu_set_output+0x1a0>
    uint8_t state = atoi(argv[1]);
 8005898:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800589c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3304      	adds	r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f007 fd30 	bl	800d30c <atoi>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1)   return CMDLINE_INVALID_ARG;
 80058b2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d901      	bls.n	80058be <Cmd_pmu_set_output+0x66>
 80058ba:	2304      	movs	r3, #4
 80058bc:	e09c      	b.n	80059f8 <Cmd_pmu_set_output+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80058be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058c2:	4850      	ldr	r0, [pc, #320]	@ (8005a04 <Cmd_pmu_set_output+0x1ac>)
 80058c4:	f7ff fb58 	bl	8004f78 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80058c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80058cc:	484d      	ldr	r0, [pc, #308]	@ (8005a04 <Cmd_pmu_set_output+0x1ac>)
 80058ce:	f7ff fb45 	bl	8004f5c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80058d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80058d6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058e0:	3b01      	subs	r3, #1
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80058e8:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	4413      	add	r3, r2
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80058f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80058fa:	4a43      	ldr	r2, [pc, #268]	@ (8005a08 <Cmd_pmu_set_output+0x1b0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d103      	bne.n	8005908 <Cmd_pmu_set_output+0xb0>
    	uart_choose_uart5 = 1;
 8005900:	4b42      	ldr	r3, [pc, #264]	@ (8005a0c <Cmd_pmu_set_output+0x1b4>)
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e002      	b.n	800590e <Cmd_pmu_set_output+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005908:	4b40      	ldr	r3, [pc, #256]	@ (8005a0c <Cmd_pmu_set_output+0x1b4>)
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_PMU_OUTPUT;
 800590e:	2306      	movs	r3, #6
 8005910:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = state;
 8005914:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005918:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800591c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005920:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005924:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	2301      	movs	r3, #1
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2302      	movs	r3, #2
 8005930:	2204      	movs	r2, #4
 8005932:	f004 ff0d 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005936:	f107 020b 	add.w	r2, r7, #11
 800593a:	f107 010c 	add.w	r1, r7, #12
 800593e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005942:	4618      	mov	r0, r3
 8005944:	f004 ff8a 	bl	800a85c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005948:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800594c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d02c      	beq.n	80059b0 <Cmd_pmu_set_output+0x158>
        for (int i = 0; i < frame_len; i++) {
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800595c:	e010      	b.n	8005980 <Cmd_pmu_set_output+0x128>
            Uart_write(USART1, encoded_frame[i]);
 800595e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005962:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005966:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800596a:	4413      	add	r3, r2
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	4827      	ldr	r0, [pc, #156]	@ (8005a10 <Cmd_pmu_set_output+0x1b8>)
 8005972:	f7fc f99f 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005976:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800597a:	3301      	adds	r3, #1
 800597c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005980:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005984:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005990:	4293      	cmp	r3, r2
 8005992:	dbe4      	blt.n	800595e <Cmd_pmu_set_output+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005994:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005998:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	f107 030c 	add.w	r3, r7, #12
 80059a2:	4611      	mov	r1, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fc fbbf 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80059aa:	f7fc fba5 	bl	80020f8 <set_send_flag>
 80059ae:	e022      	b.n	80059f6 <Cmd_pmu_set_output+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80059b0:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80059b4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80059b8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	2301      	movs	r3, #1
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	2302      	movs	r3, #2
 80059c4:	2204      	movs	r2, #4
 80059c6:	f004 fec3 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80059ca:	f107 020b 	add.w	r2, r7, #11
 80059ce:	f107 010c 	add.w	r1, r7, #12
 80059d2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80059d6:	4618      	mov	r0, r3
 80059d8:	f004 ff40 	bl	800a85c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 80059dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059e0:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	f107 030c 	add.w	r3, r7, #12
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fc fb9b 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80059f2:	f7fc fb81 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 80059f6:	2305      	movs	r3, #5
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40020000 	.word	0x40020000
 8005a08:	40005000 	.word	0x40005000
 8005a0c:	20004830 	.word	0x20004830
 8005a10:	40011000 	.word	0x40011000

08005a14 <Cmd_pmu_set_pwm>:

int Cmd_pmu_set_pwm(int argc, char *argv[])
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005a1a:	af02      	add	r7, sp, #8
 8005a1c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a20:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005a24:	6018      	str	r0, [r3, #0]
 8005a26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a2a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005a2e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005a30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a34:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	dc01      	bgt.n	8005a42 <Cmd_pmu_set_pwm+0x2e>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e0b8      	b.n	8005bb4 <Cmd_pmu_set_pwm+0x1a0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8005a42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a46:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	dd01      	ble.n	8005a54 <Cmd_pmu_set_pwm+0x40>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e0af      	b.n	8005bb4 <Cmd_pmu_set_pwm+0x1a0>
    uint8_t duty = atoi(argv[1]);
 8005a54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a58:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f007 fc52 	bl	800d30c <atoi>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (duty > 100)   return CMDLINE_INVALID_ARG;
 8005a6e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005a72:	2b64      	cmp	r3, #100	@ 0x64
 8005a74:	d901      	bls.n	8005a7a <Cmd_pmu_set_pwm+0x66>
 8005a76:	2304      	movs	r3, #4
 8005a78:	e09c      	b.n	8005bb4 <Cmd_pmu_set_pwm+0x1a0>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005a7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a7e:	4850      	ldr	r0, [pc, #320]	@ (8005bc0 <Cmd_pmu_set_pwm+0x1ac>)
 8005a80:	f7ff fa7a 	bl	8004f78 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005a84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a88:	484d      	ldr	r0, [pc, #308]	@ (8005bc0 <Cmd_pmu_set_pwm+0x1ac>)
 8005a8a:	f7ff fa67 	bl	8004f5c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005a8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a92:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005aa4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	4413      	add	r3, r2
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005ab2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005ab6:	4a43      	ldr	r2, [pc, #268]	@ (8005bc4 <Cmd_pmu_set_pwm+0x1b0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d103      	bne.n	8005ac4 <Cmd_pmu_set_pwm+0xb0>
    	uart_choose_uart5 = 1;
 8005abc:	4b42      	ldr	r3, [pc, #264]	@ (8005bc8 <Cmd_pmu_set_pwm+0x1b4>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e002      	b.n	8005aca <Cmd_pmu_set_pwm+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005ac4:	4b40      	ldr	r3, [pc, #256]	@ (8005bc8 <Cmd_pmu_set_pwm+0x1b4>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_PWM;
 8005aca:	2307      	movs	r3, #7
 8005acc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = duty;
 8005ad0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005ad4:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005ad8:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005adc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005ae0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	2302      	movs	r3, #2
 8005aec:	2204      	movs	r2, #4
 8005aee:	f004 fe2f 	bl	800a750 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005af2:	f107 020b 	add.w	r2, r7, #11
 8005af6:	f107 010c 	add.w	r1, r7, #12
 8005afa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005afe:	4618      	mov	r0, r3
 8005b00:	f004 feac 	bl	800a85c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005b04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b08:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d02c      	beq.n	8005b6c <Cmd_pmu_set_pwm+0x158>
        for (int i = 0; i < frame_len; i++) {
 8005b12:	2300      	movs	r3, #0
 8005b14:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005b18:	e010      	b.n	8005b3c <Cmd_pmu_set_pwm+0x128>
            Uart_write(USART1, encoded_frame[i]);
 8005b1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b1e:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005b22:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005b26:	4413      	add	r3, r2
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4827      	ldr	r0, [pc, #156]	@ (8005bcc <Cmd_pmu_set_pwm+0x1b8>)
 8005b2e:	f7fc f8c1 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005b32:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005b36:	3301      	adds	r3, #1
 8005b38:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005b3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b40:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	dbe4      	blt.n	8005b1a <Cmd_pmu_set_pwm+0x106>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005b50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b54:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	f107 030c 	add.w	r3, r7, #12
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fc fae1 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005b66:	f7fc fac7 	bl	80020f8 <set_send_flag>
 8005b6a:	e022      	b.n	8005bb2 <Cmd_pmu_set_pwm+0x19e>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005b6c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005b70:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005b74:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	2302      	movs	r3, #2
 8005b80:	2204      	movs	r2, #4
 8005b82:	f004 fde5 	bl	800a750 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005b86:	f107 020b 	add.w	r2, r7, #11
 8005b8a:	f107 010c 	add.w	r1, r7, #12
 8005b8e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005b92:	4618      	mov	r0, r3
 8005b94:	f004 fe62 	bl	800a85c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8005b98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b9c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	f107 030c 	add.w	r3, r7, #12
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fc fabd 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005bae:	f7fc faa3 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8005bb2:	2305      	movs	r3, #5
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40020000 	.word	0x40020000
 8005bc4:	40005000 	.word	0x40005000
 8005bc8:	20004830 	.word	0x20004830
 8005bcc:	40011000 	.word	0x40011000

08005bd0 <Cmd_pmu_get_all>:

int Cmd_pmu_get_all(int argc, char *argv[])
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005bdc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005be0:	6018      	str	r0, [r3, #0]
 8005be2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005be6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005bea:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005bec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005bf0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	dc01      	bgt.n	8005bfe <Cmd_pmu_get_all+0x2e>
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e097      	b.n	8005d2e <Cmd_pmu_get_all+0x15e>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005bfe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c02:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	dd01      	ble.n	8005c10 <Cmd_pmu_get_all+0x40>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e08e      	b.n	8005d2e <Cmd_pmu_get_all+0x15e>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005c10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c14:	4848      	ldr	r0, [pc, #288]	@ (8005d38 <Cmd_pmu_get_all+0x168>)
 8005c16:	f7ff f9af 	bl	8004f78 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005c1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005c1e:	4846      	ldr	r0, [pc, #280]	@ (8005d38 <Cmd_pmu_get_all+0x168>)
 8005c20:	f7ff f99c 	bl	8004f5c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005c24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c28:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c32:	3b01      	subs	r3, #1
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005c3a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	4413      	add	r3, r2
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005c48:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8005d3c <Cmd_pmu_get_all+0x16c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d103      	bne.n	8005c5a <Cmd_pmu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 8005c52:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <Cmd_pmu_get_all+0x170>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e002      	b.n	8005c60 <Cmd_pmu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005c5a:	4b39      	ldr	r3, [pc, #228]	@ (8005d40 <Cmd_pmu_get_all+0x170>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_ALL;
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005c66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c6a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2102      	movs	r1, #2
 8005c72:	f004 fd45 	bl	800a700 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005c76:	f107 020f 	add.w	r2, r7, #15
 8005c7a:	f107 0110 	add.w	r1, r7, #16
 8005c7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c82:	4618      	mov	r0, r3
 8005c84:	f004 fdea 	bl	800a85c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005c88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c8c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02c      	beq.n	8005cf0 <Cmd_pmu_get_all+0x120>
        for (int i = 0; i < frame_len; i++) {
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005c9c:	e010      	b.n	8005cc0 <Cmd_pmu_get_all+0xf0>
            Uart_write(USART1, encoded_frame[i]);
 8005c9e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ca2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005ca6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005caa:	4413      	add	r3, r2
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4824      	ldr	r0, [pc, #144]	@ (8005d44 <Cmd_pmu_get_all+0x174>)
 8005cb2:	f7fb ffff 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005cb6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005cc0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005cc4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	dbe4      	blt.n	8005c9e <Cmd_pmu_get_all+0xce>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005cd4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005cd8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	f107 0310 	add.w	r3, r7, #16
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fc fa1f 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005cea:	f7fc fa05 	bl	80020f8 <set_send_flag>
 8005cee:	e01d      	b.n	8005d2c <Cmd_pmu_get_all+0x15c>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005cf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cf4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	f004 fd00 	bl	800a700 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005d00:	f107 020f 	add.w	r2, r7, #15
 8005d04:	f107 0110 	add.w	r1, r7, #16
 8005d08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f004 fda5 	bl	800a85c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005d12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005d16:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	f107 0310 	add.w	r3, r7, #16
 8005d20:	4611      	mov	r1, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fc fa00 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8005d28:	f7fc f9e6 	bl	80020f8 <set_send_flag>
    }
    return CMDLINE_PENDING;
 8005d2c:	2305      	movs	r3, #5
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40020000 	.word	0x40020000
 8005d3c:	40005000 	.word	0x40005000
 8005d40:	20004830 	.word	0x20004830
 8005d44:	40011000 	.word	0x40011000

08005d48 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8005d5e:	e01f      	b.n	8005da0 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d105      	bne.n	8005d74 <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
 8005d72:	e012      	b.n	8005d9a <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b07      	cmp	r3, #7
 8005d7e:	d80a      	bhi.n	8005d96 <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8005d80:	4920      	ldr	r1, [pc, #128]	@ (8005e04 <CmdLineProcess+0xbc>)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	e001      	b.n	8005d9a <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8005d96:	2302      	movs	r3, #2
 8005d98:	e030      	b.n	8005dfc <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1db      	bne.n	8005d60 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d025      	beq.n	8005dfa <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 8005dae:	4915      	ldr	r1, [pc, #84]	@ (8005e04 <CmdLineProcess+0xbc>)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8005dbe:	4b12      	ldr	r3, [pc, #72]	@ (8005e08 <CmdLineProcess+0xc0>)
 8005dc0:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8005dc2:	e016      	b.n	8005df2 <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <CmdLineProcess+0xbc>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7fa f9fe 	bl	80001d0 <strcmp>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d108      	bne.n	8005dec <CmdLineProcess+0xa4>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4908      	ldr	r1, [pc, #32]	@ (8005e04 <CmdLineProcess+0xbc>)
 8005de2:	4610      	mov	r0, r2
 8005de4:	4798      	blx	r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	e007      	b.n	8005dfc <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	330c      	adds	r3, #12
 8005df0:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e4      	bne.n	8005dc4 <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8005dfa:	2301      	movs	r3, #1
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20004834 	.word	0x20004834
 8005e08:	20000090 	.word	0x20000090

08005e0c <__NVIC_SystemReset>:
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005e10:	f3bf 8f4f 	dsb	sy
}
 8005e14:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005e16:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <__NVIC_SystemReset+0x24>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005e1e:	4904      	ldr	r1, [pc, #16]	@ (8005e30 <__NVIC_SystemReset+0x24>)
 8005e20:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <__NVIC_SystemReset+0x28>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e26:	f3bf 8f4f 	dsb	sy
}
 8005e2a:	bf00      	nop
    __NOP();
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <__NVIC_SystemReset+0x20>
 8005e30:	e000ed00 	.word	0xe000ed00
 8005e34:	05fa0004 	.word	0x05fa0004

08005e38 <LL_GPIO_IsOutputPinSet>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <LL_GPIO_SetOutputPin>:
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	619a      	str	r2, [r3, #24]
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <LL_GPIO_ResetOutputPin>:
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	041a      	lsls	r2, r3, #16
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	619a      	str	r2, [r3, #24]
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <command_init>:
		command_task_update                // taskFunction;
	}
};

void	command_init(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8005ea2:	f7fb fdab 	bl	80019fc <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8005ea6:	22ff      	movs	r2, #255	@ 0xff
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	483b      	ldr	r0, [pc, #236]	@ (8005f98 <command_init+0xfc>)
 8005eac:	f008 fa49 	bl	800e342 <memset>
	s_commandBufferIndex = 0;
 8005eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8005f9c <command_init+0x100>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
	Uart_sendstring(UART5,"\r\n");
 8005eb6:	493a      	ldr	r1, [pc, #232]	@ (8005fa0 <command_init+0x104>)
 8005eb8:	483a      	ldr	r0, [pc, #232]	@ (8005fa4 <command_init+0x108>)
 8005eba:	f7fc f807 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"\r\n");
 8005ebe:	4938      	ldr	r1, [pc, #224]	@ (8005fa0 <command_init+0x104>)
 8005ec0:	4838      	ldr	r0, [pc, #224]	@ (8005fa4 <command_init+0x108>)
 8005ec2:	f7fc f803 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"> CPOC FIRMWARE V1.2.0 \r\n");
 8005ec6:	4938      	ldr	r1, [pc, #224]	@ (8005fa8 <command_init+0x10c>)
 8005ec8:	4836      	ldr	r0, [pc, #216]	@ (8005fa4 <command_init+0x108>)
 8005eca:	f7fb ffff 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"\r\n");
 8005ece:	4934      	ldr	r1, [pc, #208]	@ (8005fa0 <command_init+0x104>)
 8005ed0:	4834      	ldr	r0, [pc, #208]	@ (8005fa4 <command_init+0x108>)
 8005ed2:	f7fb fffb 	bl	8001ecc <Uart_sendstring>
	command_send_splash();
 8005ed6:	f000 fe37 	bl	8006b48 <command_send_splash>

    Uart_sendstring(USART6, "\r\n");
 8005eda:	4931      	ldr	r1, [pc, #196]	@ (8005fa0 <command_init+0x104>)
 8005edc:	4833      	ldr	r0, [pc, #204]	@ (8005fac <command_init+0x110>)
 8005ede:	f7fb fff5 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "\r\n");
 8005ee2:	492f      	ldr	r1, [pc, #188]	@ (8005fa0 <command_init+0x104>)
 8005ee4:	4831      	ldr	r0, [pc, #196]	@ (8005fac <command_init+0x110>)
 8005ee6:	f7fb fff1 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "> CPOC FIRMWARE V1.2.0 \r\n");
 8005eea:	492f      	ldr	r1, [pc, #188]	@ (8005fa8 <command_init+0x10c>)
 8005eec:	482f      	ldr	r0, [pc, #188]	@ (8005fac <command_init+0x110>)
 8005eee:	f7fb ffed 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "\r\n");
 8005ef2:	492b      	ldr	r1, [pc, #172]	@ (8005fa0 <command_init+0x104>)
 8005ef4:	482d      	ldr	r0, [pc, #180]	@ (8005fac <command_init+0x110>)
 8005ef6:	f7fb ffe9 	bl	8001ecc <Uart_sendstring>
    command_send_splash();
 8005efa:	f000 fe25 	bl	8006b48 <command_send_splash>

	tCmdLineEntry *pEntry;


	Uart_sendstring(UART5, "\nStart with <help_xxxx> command\r\n");
 8005efe:	492c      	ldr	r1, [pc, #176]	@ (8005fb0 <command_init+0x114>)
 8005f00:	4828      	ldr	r0, [pc, #160]	@ (8005fa4 <command_init+0x108>)
 8005f02:	f7fb ffe3 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "-------------------------------------\r\n");
 8005f06:	492b      	ldr	r1, [pc, #172]	@ (8005fb4 <command_init+0x118>)
 8005f08:	4826      	ldr	r0, [pc, #152]	@ (8005fa4 <command_init+0x108>)
 8005f0a:	f7fb ffdf 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "\nStart with <help_xxxx> command\r\n");
 8005f0e:	4928      	ldr	r1, [pc, #160]	@ (8005fb0 <command_init+0x114>)
 8005f10:	4826      	ldr	r0, [pc, #152]	@ (8005fac <command_init+0x110>)
 8005f12:	f7fb ffdb 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "-------------------------------------\r\n");
 8005f16:	4927      	ldr	r1, [pc, #156]	@ (8005fb4 <command_init+0x118>)
 8005f18:	4824      	ldr	r0, [pc, #144]	@ (8005fac <command_init+0x110>)
 8005f1a:	f7fb ffd7 	bl	8001ecc <Uart_sendstring>

	pEntry = &g_psCmdTable[0];
 8005f1e:	4b26      	ldr	r3, [pc, #152]	@ (8005fb8 <command_init+0x11c>)
 8005f20:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 8005f22:	e026      	b.n	8005f72 <command_init+0xd6>
		Uart_sendstring(UART5, pEntry->pcCmd);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	481e      	ldr	r0, [pc, #120]	@ (8005fa4 <command_init+0x108>)
 8005f2c:	f7fb ffce 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4619      	mov	r1, r3
 8005f36:	481b      	ldr	r0, [pc, #108]	@ (8005fa4 <command_init+0x108>)
 8005f38:	f7fb ffc8 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 8005f3c:	4918      	ldr	r1, [pc, #96]	@ (8005fa0 <command_init+0x104>)
 8005f3e:	4819      	ldr	r0, [pc, #100]	@ (8005fa4 <command_init+0x108>)
 8005f40:	f7fb ffc4 	bl	8001ecc <Uart_sendstring>

        Uart_sendstring(USART6, pEntry->pcCmd);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4818      	ldr	r0, [pc, #96]	@ (8005fac <command_init+0x110>)
 8005f4c:	f7fb ffbe 	bl	8001ecc <Uart_sendstring>
        Uart_sendstring(USART6, pEntry->pcHelp);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4619      	mov	r1, r3
 8005f56:	4815      	ldr	r0, [pc, #84]	@ (8005fac <command_init+0x110>)
 8005f58:	f7fb ffb8 	bl	8001ecc <Uart_sendstring>
        Uart_sendstring(USART6, "\r\n");
 8005f5c:	4910      	ldr	r1, [pc, #64]	@ (8005fa0 <command_init+0x104>)
 8005f5e:	4813      	ldr	r0, [pc, #76]	@ (8005fac <command_init+0x110>)
 8005f60:	f7fb ffb4 	bl	8001ecc <Uart_sendstring>

	    if (pEntry == &g_psCmdTable[11]) {
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a15      	ldr	r2, [pc, #84]	@ (8005fbc <command_init+0x120>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <command_init+0xe0>
	        break;
	    }
	    pEntry++;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1d4      	bne.n	8005f24 <command_init+0x88>
 8005f7a:	e000      	b.n	8005f7e <command_init+0xe2>
	        break;
 8005f7c:	bf00      	nop
	}

	Uart_sendstring(UART5, "\r\n> ");
 8005f7e:	4910      	ldr	r1, [pc, #64]	@ (8005fc0 <command_init+0x124>)
 8005f80:	4808      	ldr	r0, [pc, #32]	@ (8005fa4 <command_init+0x108>)
 8005f82:	f7fb ffa3 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "\r\n> ");
 8005f86:	490e      	ldr	r1, [pc, #56]	@ (8005fc0 <command_init+0x124>)
 8005f88:	4808      	ldr	r0, [pc, #32]	@ (8005fac <command_init+0x110>)
 8005f8a:	f7fb ff9f 	bl	8001ecc <Uart_sendstring>

}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20004858 	.word	0x20004858
 8005f9c:	20004957 	.word	0x20004957
 8005fa0:	08012db0 	.word	0x08012db0
 8005fa4:	40005000 	.word	0x40005000
 8005fa8:	08012db4 	.word	0x08012db4
 8005fac:	40011400 	.word	0x40011400
 8005fb0:	08012dd0 	.word	0x08012dd0
 8005fb4:	08012df4 	.word	0x08012df4
 8005fb8:	20000090 	.word	0x20000090
 8005fbc:	20000114 	.word	0x20000114
 8005fc0:	08012e1c 	.word	0x08012e1c

08005fc4 <command_task_update>:

void process_command(USART_TypeDef* USARTx, char rxData);


static void command_task_update(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
    char rxData;


    while (IsDataAvailable(UART5) || IsDataAvailable(USART6))
 8005fca:	e029      	b.n	8006020 <command_task_update+0x5c>
    {
        if (IsDataAvailable(UART5)) {
 8005fcc:	481d      	ldr	r0, [pc, #116]	@ (8006044 <command_task_update+0x80>)
 8005fce:	f7fb ff37 	bl	8001e40 <IsDataAvailable>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <command_task_update+0x32>
            rxData = Uart_read(UART5);
 8005fd8:	481a      	ldr	r0, [pc, #104]	@ (8006044 <command_task_update+0x80>)
 8005fda:	f7fb fdcd 	bl	8001b78 <Uart_read>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
            Uart_write(UART5, rxData);
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4817      	ldr	r0, [pc, #92]	@ (8006044 <command_task_update+0x80>)
 8005fe8:	f7fb fe64 	bl	8001cb4 <Uart_write>
            process_command(UART5, rxData);
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4814      	ldr	r0, [pc, #80]	@ (8006044 <command_task_update+0x80>)
 8005ff2:	f000 f82b 	bl	800604c <process_command>
        }

        if (IsDataAvailable(USART6)) {
 8005ff6:	4814      	ldr	r0, [pc, #80]	@ (8006048 <command_task_update+0x84>)
 8005ff8:	f7fb ff22 	bl	8001e40 <IsDataAvailable>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <command_task_update+0x5c>
            rxData = Uart_read(USART6);
 8006002:	4811      	ldr	r0, [pc, #68]	@ (8006048 <command_task_update+0x84>)
 8006004:	f7fb fdb8 	bl	8001b78 <Uart_read>
 8006008:	4603      	mov	r3, r0
 800600a:	71fb      	strb	r3, [r7, #7]
            Uart_write(USART6, rxData);
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	4619      	mov	r1, r3
 8006010:	480d      	ldr	r0, [pc, #52]	@ (8006048 <command_task_update+0x84>)
 8006012:	f7fb fe4f 	bl	8001cb4 <Uart_write>
            process_command(USART6, rxData);
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	4619      	mov	r1, r3
 800601a:	480b      	ldr	r0, [pc, #44]	@ (8006048 <command_task_update+0x84>)
 800601c:	f000 f816 	bl	800604c <process_command>
    while (IsDataAvailable(UART5) || IsDataAvailable(USART6))
 8006020:	4808      	ldr	r0, [pc, #32]	@ (8006044 <command_task_update+0x80>)
 8006022:	f7fb ff0d 	bl	8001e40 <IsDataAvailable>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1cf      	bne.n	8005fcc <command_task_update+0x8>
 800602c:	4806      	ldr	r0, [pc, #24]	@ (8006048 <command_task_update+0x84>)
 800602e:	f7fb ff07 	bl	8001e40 <IsDataAvailable>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1c9      	bne.n	8005fcc <command_task_update+0x8>
        }
    }
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40005000 	.word	0x40005000
 8006048:	40011400 	.word	0x40011400

0800604c <process_command>:

void process_command(USART_TypeDef* USARTx, char rxData)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
    int8_t ret_val;

    if ((rxData == '\r') || (rxData == '\n'))
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	2b0d      	cmp	r3, #13
 800605c:	d002      	beq.n	8006064 <process_command+0x18>
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	2b0a      	cmp	r3, #10
 8006062:	d12f      	bne.n	80060c4 <process_command+0x78>
    {
        if (s_commandBufferIndex > 0)
 8006064:	4b28      	ldr	r3, [pc, #160]	@ (8006108 <process_command+0xbc>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d026      	beq.n	80060ba <process_command+0x6e>
        {
            s_commandBuffer[s_commandBufferIndex] = 0;
 800606c:	4b26      	ldr	r3, [pc, #152]	@ (8006108 <process_command+0xbc>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	4b26      	ldr	r3, [pc, #152]	@ (800610c <process_command+0xc0>)
 8006074:	2100      	movs	r1, #0
 8006076:	5499      	strb	r1, [r3, r2]
            s_commandBufferIndex++;
 8006078:	4b23      	ldr	r3, [pc, #140]	@ (8006108 <process_command+0xbc>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	3301      	adds	r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	4b21      	ldr	r3, [pc, #132]	@ (8006108 <process_command+0xbc>)
 8006082:	701a      	strb	r2, [r3, #0]
            ret_val = CmdLineProcess(s_commandBuffer,USARTx);
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4821      	ldr	r0, [pc, #132]	@ (800610c <process_command+0xc0>)
 8006088:	f7ff fe5e 	bl	8005d48 <CmdLineProcess>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]
            s_commandBufferIndex = 0;
 8006090:	4b1d      	ldr	r3, [pc, #116]	@ (8006108 <process_command+0xbc>)
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
            Uart_sendstring(USARTx, "\r\n> ");
 8006096:	491e      	ldr	r1, [pc, #120]	@ (8006110 <process_command+0xc4>)
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fb ff17 	bl	8001ecc <Uart_sendstring>
            Uart_sendstring(USARTx, ErrorCode[ret_val]);
 800609e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006114 <process_command+0xc8>)
 80060a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fb ff0e 	bl	8001ecc <Uart_sendstring>
            Uart_sendstring(USARTx, "> ");
 80060b0:	4919      	ldr	r1, [pc, #100]	@ (8006118 <process_command+0xcc>)
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb ff0a 	bl	8001ecc <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 80060b8:	e022      	b.n	8006100 <process_command+0xb4>
        }
        else
        {
            Uart_sendstring(USARTx, "\r\n> ");
 80060ba:	4915      	ldr	r1, [pc, #84]	@ (8006110 <process_command+0xc4>)
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fb ff05 	bl	8001ecc <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 80060c2:	e01d      	b.n	8006100 <process_command+0xb4>
        }
    }
    else if ((rxData == 8) || (rxData == 127))
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d002      	beq.n	80060d0 <process_command+0x84>
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ce:	d10a      	bne.n	80060e6 <process_command+0x9a>
    {
        if (s_commandBufferIndex > 0)
 80060d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <process_command+0xbc>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d013      	beq.n	8006100 <process_command+0xb4>
        {
            s_commandBufferIndex--;
 80060d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006108 <process_command+0xbc>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3b01      	subs	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <process_command+0xbc>)
 80060e2:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > 0)
 80060e4:	e00c      	b.n	8006100 <process_command+0xb4>
        }
    }
    else
    {
        s_commandBuffer[s_commandBufferIndex] = rxData;
 80060e6:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <process_command+0xbc>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	4619      	mov	r1, r3
 80060ec:	4a07      	ldr	r2, [pc, #28]	@ (800610c <process_command+0xc0>)
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	5453      	strb	r3, [r2, r1]
        s_commandBufferIndex++;
 80060f2:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <process_command+0xbc>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	4b03      	ldr	r3, [pc, #12]	@ (8006108 <process_command+0xbc>)
 80060fc:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > COMMAND_MAX_LENGTH)
        {
            s_commandBufferIndex = 0;
        }
    }
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20004957 	.word	0x20004957
 800610c:	20004858 	.word	0x20004858
 8006110:	08012e1c 	.word	0x08012e1c
 8006114:	20000078 	.word	0x20000078
 8006118:	08012e24 	.word	0x08012e24

0800611c <Cmd_help>:

//USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];

int Cmd_help(int argc, char *argv[]) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
    tCmdLineEntry *pEntry;
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800612c:	3b01      	subs	r3, #1
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	4413      	add	r3, r2
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60bb      	str	r3, [r7, #8]

    Uart_sendstring(USARTx, "\nSimple commands\r\n");
 8006138:	4916      	ldr	r1, [pc, #88]	@ (8006194 <Cmd_help+0x78>)
 800613a:	68b8      	ldr	r0, [r7, #8]
 800613c:	f7fb fec6 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USARTx, "------------------\r\n");
 8006140:	4915      	ldr	r1, [pc, #84]	@ (8006198 <Cmd_help+0x7c>)
 8006142:	68b8      	ldr	r0, [r7, #8]
 8006144:	f7fb fec2 	bl	8001ecc <Uart_sendstring>
    pEntry = &g_psCmdTable[0];
 8006148:	4b14      	ldr	r3, [pc, #80]	@ (800619c <Cmd_help+0x80>)
 800614a:	60fb      	str	r3, [r7, #12]

    while (pEntry->pcCmd) {
 800614c:	e016      	b.n	800617c <Cmd_help+0x60>
        Uart_sendstring(USARTx, pEntry->pcCmd);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4619      	mov	r1, r3
 8006154:	68b8      	ldr	r0, [r7, #8]
 8006156:	f7fb feb9 	bl	8001ecc <Uart_sendstring>
        Uart_sendstring(USARTx, pEntry->pcHelp);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	4619      	mov	r1, r3
 8006160:	68b8      	ldr	r0, [r7, #8]
 8006162:	f7fb feb3 	bl	8001ecc <Uart_sendstring>
        Uart_sendstring(USARTx, "\r\n");
 8006166:	490e      	ldr	r1, [pc, #56]	@ (80061a0 <Cmd_help+0x84>)
 8006168:	68b8      	ldr	r0, [r7, #8]
 800616a:	f7fb feaf 	bl	8001ecc <Uart_sendstring>
        if (pEntry == &g_psCmdTable[11]) {
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a0c      	ldr	r2, [pc, #48]	@ (80061a4 <Cmd_help+0x88>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <Cmd_help+0x6a>
            break;
        }
        pEntry++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	330c      	adds	r3, #12
 800617a:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd) {
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e4      	bne.n	800614e <Cmd_help+0x32>
 8006184:	e000      	b.n	8006188 <Cmd_help+0x6c>
            break;
 8006186:	bf00      	nop
    }

    return (CMDLINE_OK);
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	08012e28 	.word	0x08012e28
 8006198:	08012e3c 	.word	0x08012e3c
 800619c:	20000090 	.word	0x20000090
 80061a0:	08012db0 	.word	0x08012db0
 80061a4:	20000114 	.word	0x20000114

080061a8 <Cmd_help_all>:

// 9table <-> 8 o day
int Cmd_help_all(int argc, char *argv[]) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061b8:	3b01      	subs	r3, #1
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	4413      	add	r3, r2
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60bb      	str	r3, [r7, #8]
	Uart_sendstring(USARTx, "\nAvailable commands\r\n");
 80061c4:	492b      	ldr	r1, [pc, #172]	@ (8006274 <Cmd_help_all+0xcc>)
 80061c6:	68b8      	ldr	r0, [r7, #8]
 80061c8:	f7fb fe80 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USARTx, "------------------\r\n");
 80061cc:	492a      	ldr	r1, [pc, #168]	@ (8006278 <Cmd_help_all+0xd0>)
 80061ce:	68b8      	ldr	r0, [r7, #8]
 80061d0:	f7fb fe7c 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 80061d4:	4b29      	ldr	r3, [pc, #164]	@ (800627c <Cmd_help_all+0xd4>)
 80061d6:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80061d8:	e03e      	b.n	8006258 <Cmd_help_all+0xb0>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4619      	mov	r1, r3
 80061e0:	68b8      	ldr	r0, [r7, #8]
 80061e2:	f7fb fe73 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	4619      	mov	r1, r3
 80061ec:	68b8      	ldr	r0, [r7, #8]
 80061ee:	f7fb fe6d 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 80061f2:	4923      	ldr	r1, [pc, #140]	@ (8006280 <Cmd_help_all+0xd8>)
 80061f4:	68b8      	ldr	r0, [r7, #8]
 80061f6:	f7fb fe69 	bl	8001ecc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[11]) {
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4a21      	ldr	r2, [pc, #132]	@ (8006284 <Cmd_help_all+0xdc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d104      	bne.n	800620c <Cmd_help_all+0x64>
	        Uart_sendstring(USARTx, "\n--------------CPOC Command List-------------\r\n");
 8006202:	4921      	ldr	r1, [pc, #132]	@ (8006288 <Cmd_help_all+0xe0>)
 8006204:	68b8      	ldr	r0, [r7, #8]
 8006206:	f7fb fe61 	bl	8001ecc <Uart_sendstring>
 800620a:	e022      	b.n	8006252 <Cmd_help_all+0xaa>
	    }

	    else if (pEntry == &g_psCmdTable[27]) {
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a1f      	ldr	r2, [pc, #124]	@ (800628c <Cmd_help_all+0xe4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d104      	bne.n	800621e <Cmd_help_all+0x76>
	        Uart_sendstring(USARTx, "\n--------------PMU Command List-------------\r\n");
 8006214:	491e      	ldr	r1, [pc, #120]	@ (8006290 <Cmd_help_all+0xe8>)
 8006216:	68b8      	ldr	r0, [r7, #8]
 8006218:	f7fb fe58 	bl	8001ecc <Uart_sendstring>
 800621c:	e019      	b.n	8006252 <Cmd_help_all+0xaa>
	    }

	    else if (pEntry == &g_psCmdTable[34]) {
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4a1c      	ldr	r2, [pc, #112]	@ (8006294 <Cmd_help_all+0xec>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d104      	bne.n	8006230 <Cmd_help_all+0x88>
	        Uart_sendstring(USARTx, "\n--------------PDU Command List-------------\r\n");
 8006226:	491c      	ldr	r1, [pc, #112]	@ (8006298 <Cmd_help_all+0xf0>)
 8006228:	68b8      	ldr	r0, [r7, #8]
 800622a:	f7fb fe4f 	bl	8001ecc <Uart_sendstring>
 800622e:	e010      	b.n	8006252 <Cmd_help_all+0xaa>
	    }

	    else if (pEntry == &g_psCmdTable[40]) {
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a1a      	ldr	r2, [pc, #104]	@ (800629c <Cmd_help_all+0xf4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d104      	bne.n	8006242 <Cmd_help_all+0x9a>
	        Uart_sendstring(USARTx, "\n--------------CAM Command List-------------\r\n");
 8006238:	4919      	ldr	r1, [pc, #100]	@ (80062a0 <Cmd_help_all+0xf8>)
 800623a:	68b8      	ldr	r0, [r7, #8]
 800623c:	f7fb fe46 	bl	8001ecc <Uart_sendstring>
 8006240:	e007      	b.n	8006252 <Cmd_help_all+0xaa>
	    }

	    else if (pEntry == &g_psCmdTable[41]) {
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a17      	ldr	r2, [pc, #92]	@ (80062a4 <Cmd_help_all+0xfc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d103      	bne.n	8006252 <Cmd_help_all+0xaa>
	        Uart_sendstring(USARTx, "\n--------------IOU Command List-------------\r\n");
 800624a:	4917      	ldr	r1, [pc, #92]	@ (80062a8 <Cmd_help_all+0x100>)
 800624c:	68b8      	ldr	r0, [r7, #8]
 800624e:	f7fb fe3d 	bl	8001ecc <Uart_sendstring>
	    }


		// Advance to the next entry in the table.
		pEntry++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	330c      	adds	r3, #12
 8006256:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1bc      	bne.n	80061da <Cmd_help_all+0x32>

	}
	Uart_sendstring(USARTx, "--------------    END    -------------\r\n");
 8006260:	4912      	ldr	r1, [pc, #72]	@ (80062ac <Cmd_help_all+0x104>)
 8006262:	68b8      	ldr	r0, [r7, #8]
 8006264:	f7fb fe32 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	08012e54 	.word	0x08012e54
 8006278:	08012e3c 	.word	0x08012e3c
 800627c:	20000090 	.word	0x20000090
 8006280:	08012db0 	.word	0x08012db0
 8006284:	20000114 	.word	0x20000114
 8006288:	08012e6c 	.word	0x08012e6c
 800628c:	200001d4 	.word	0x200001d4
 8006290:	08012e9c 	.word	0x08012e9c
 8006294:	20000228 	.word	0x20000228
 8006298:	08012ecc 	.word	0x08012ecc
 800629c:	20000270 	.word	0x20000270
 80062a0:	08012efc 	.word	0x08012efc
 80062a4:	2000027c 	.word	0x2000027c
 80062a8:	08012f2c 	.word	0x08012f2c
 80062ac:	08012f5c 	.word	0x08012f5c

080062b0 <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062c0:	3b01      	subs	r3, #1
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	4413      	add	r3, r2
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CPOC Command List-------------\r\n");
 80062cc:	4914      	ldr	r1, [pc, #80]	@ (8006320 <Cmd_help_cpoc+0x70>)
 80062ce:	68b8      	ldr	r0, [r7, #8]
 80062d0:	f7fb fdfc 	bl	8001ecc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[12];
 80062d4:	4b13      	ldr	r3, [pc, #76]	@ (8006324 <Cmd_help_cpoc+0x74>)
 80062d6:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80062d8:	e016      	b.n	8006308 <Cmd_help_cpoc+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	68b8      	ldr	r0, [r7, #8]
 80062e2:	f7fb fdf3 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	4619      	mov	r1, r3
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f7fb fded 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 80062f2:	490d      	ldr	r1, [pc, #52]	@ (8006328 <Cmd_help_cpoc+0x78>)
 80062f4:	68b8      	ldr	r0, [r7, #8]
 80062f6:	f7fb fde9 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[27]) {
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a0b      	ldr	r2, [pc, #44]	@ (800632c <Cmd_help_cpoc+0x7c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d007      	beq.n	8006312 <Cmd_help_cpoc+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	330c      	adds	r3, #12
 8006306:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e4      	bne.n	80062da <Cmd_help_cpoc+0x2a>
 8006310:	e000      	b.n	8006314 <Cmd_help_cpoc+0x64>
	        break;
 8006312:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006314:	2300      	movs	r3, #0

}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	08012f88 	.word	0x08012f88
 8006324:	20000120 	.word	0x20000120
 8006328:	08012db0 	.word	0x08012db0
 800632c:	200001d4 	.word	0x200001d4

08006330 <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006340:	3b01      	subs	r3, #1
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	4413      	add	r3, r2
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PMU Command List-------------\r\n");
 800634c:	4914      	ldr	r1, [pc, #80]	@ (80063a0 <Cmd_help_pmu+0x70>)
 800634e:	68b8      	ldr	r0, [r7, #8]
 8006350:	f7fb fdbc 	bl	8001ecc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[28];
 8006354:	4b13      	ldr	r3, [pc, #76]	@ (80063a4 <Cmd_help_pmu+0x74>)
 8006356:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006358:	e016      	b.n	8006388 <Cmd_help_pmu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4619      	mov	r1, r3
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f7fb fdb3 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	4619      	mov	r1, r3
 800636c:	68b8      	ldr	r0, [r7, #8]
 800636e:	f7fb fdad 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006372:	490d      	ldr	r1, [pc, #52]	@ (80063a8 <Cmd_help_pmu+0x78>)
 8006374:	68b8      	ldr	r0, [r7, #8]
 8006376:	f7fb fda9 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a0b      	ldr	r2, [pc, #44]	@ (80063ac <Cmd_help_pmu+0x7c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <Cmd_help_pmu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	330c      	adds	r3, #12
 8006386:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e4      	bne.n	800635a <Cmd_help_pmu+0x2a>
 8006390:	e000      	b.n	8006394 <Cmd_help_pmu+0x64>
	        break;
 8006392:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	08012fb8 	.word	0x08012fb8
 80063a4:	200001e0 	.word	0x200001e0
 80063a8:	08012db0 	.word	0x08012db0
 80063ac:	20000228 	.word	0x20000228

080063b0 <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063c0:	3b01      	subs	r3, #1
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	4413      	add	r3, r2
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PDU Command List-------------\r\n");
 80063cc:	4914      	ldr	r1, [pc, #80]	@ (8006420 <Cmd_help_pdu+0x70>)
 80063ce:	68b8      	ldr	r0, [r7, #8]
 80063d0:	f7fb fd7c 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 80063d4:	4b13      	ldr	r3, [pc, #76]	@ (8006424 <Cmd_help_pdu+0x74>)
 80063d6:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80063d8:	e016      	b.n	8006408 <Cmd_help_pdu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4619      	mov	r1, r3
 80063e0:	68b8      	ldr	r0, [r7, #8]
 80063e2:	f7fb fd73 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	4619      	mov	r1, r3
 80063ec:	68b8      	ldr	r0, [r7, #8]
 80063ee:	f7fb fd6d 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 80063f2:	490d      	ldr	r1, [pc, #52]	@ (8006428 <Cmd_help_pdu+0x78>)
 80063f4:	68b8      	ldr	r0, [r7, #8]
 80063f6:	f7fb fd69 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[40]) {
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a0b      	ldr	r2, [pc, #44]	@ (800642c <Cmd_help_pdu+0x7c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <Cmd_help_pdu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	330c      	adds	r3, #12
 8006406:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e4      	bne.n	80063da <Cmd_help_pdu+0x2a>
 8006410:	e000      	b.n	8006414 <Cmd_help_pdu+0x64>
	        break;
 8006412:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	08012fe8 	.word	0x08012fe8
 8006424:	20000234 	.word	0x20000234
 8006428:	08012db0 	.word	0x08012db0
 800642c:	20000270 	.word	0x20000270

08006430 <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006440:	3b01      	subs	r3, #1
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	4413      	add	r3, r2
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CAM Command List-------------\r\n");
 800644c:	4914      	ldr	r1, [pc, #80]	@ (80064a0 <Cmd_help_cam+0x70>)
 800644e:	68b8      	ldr	r0, [r7, #8]
 8006450:	f7fb fd3c 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[41];
 8006454:	4b13      	ldr	r3, [pc, #76]	@ (80064a4 <Cmd_help_cam+0x74>)
 8006456:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006458:	e016      	b.n	8006488 <Cmd_help_cam+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	68b8      	ldr	r0, [r7, #8]
 8006462:	f7fb fd33 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	4619      	mov	r1, r3
 800646c:	68b8      	ldr	r0, [r7, #8]
 800646e:	f7fb fd2d 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006472:	490d      	ldr	r1, [pc, #52]	@ (80064a8 <Cmd_help_cam+0x78>)
 8006474:	68b8      	ldr	r0, [r7, #8]
 8006476:	f7fb fd29 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[41]) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4a09      	ldr	r2, [pc, #36]	@ (80064a4 <Cmd_help_cam+0x74>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <Cmd_help_cam+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	330c      	adds	r3, #12
 8006486:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e4      	bne.n	800645a <Cmd_help_cam+0x2a>
 8006490:	e000      	b.n	8006494 <Cmd_help_cam+0x64>
	        break;
 8006492:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	08013018 	.word	0x08013018
 80064a4:	2000027c 	.word	0x2000027c
 80064a8:	08012db0 	.word	0x08012db0

080064ac <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064bc:	3b01      	subs	r3, #1
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	4413      	add	r3, r2
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------IOU Command List-------------\r\n");
 80064c8:	4914      	ldr	r1, [pc, #80]	@ (800651c <Cmd_help_iou+0x70>)
 80064ca:	68b8      	ldr	r0, [r7, #8]
 80064cc:	f7fb fcfe 	bl	8001ecc <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[42];
 80064d0:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <Cmd_help_iou+0x74>)
 80064d2:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80064d4:	e016      	b.n	8006504 <Cmd_help_iou+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4619      	mov	r1, r3
 80064dc:	68b8      	ldr	r0, [r7, #8]
 80064de:	f7fb fcf5 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	4619      	mov	r1, r3
 80064e8:	68b8      	ldr	r0, [r7, #8]
 80064ea:	f7fb fcef 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 80064ee:	490d      	ldr	r1, [pc, #52]	@ (8006524 <Cmd_help_iou+0x78>)
 80064f0:	68b8      	ldr	r0, [r7, #8]
 80064f2:	f7fb fceb 	bl	8001ecc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006528 <Cmd_help_iou+0x7c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <Cmd_help_iou+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	330c      	adds	r3, #12
 8006502:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e4      	bne.n	80064d6 <Cmd_help_iou+0x2a>
 800650c:	e000      	b.n	8006510 <Cmd_help_iou+0x64>
	        break;
 800650e:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	08013048 	.word	0x08013048
 8006520:	20000288 	.word	0x20000288
 8006524:	08012db0 	.word	0x08012db0
 8006528:	200001a4 	.word	0x200001a4

0800652c <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800653c:	3b01      	subs	r3, #1
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	4413      	add	r3, r2
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]
	Uart_sendstring(USARTx, "\nThis function is not defined yet \r\n");
 8006548:	4904      	ldr	r1, [pc, #16]	@ (800655c <NotYetDefine+0x30>)
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7fb fcbe 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	08013078 	.word	0x08013078

08006560 <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	command_send_splash();
 800656a:	f000 faed 	bl	8006b48 <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 8006578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657a:	b0a5      	sub	sp, #148	@ 0x94
 800657c:	af04      	add	r7, sp, #16
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006588:	3b01      	subs	r3, #1
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	4413      	add	r3, r2
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8006594:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8006598:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 800659c:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 80065a0:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 80065a4:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 80065a8:	9302      	str	r3, [sp, #8]
 80065aa:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4623      	mov	r3, r4
 80065b8:	f7fa ff54 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 80065bc:	f7fa fffa 	bl	80015b4 <DS3231_GetTemperature>
 80065c0:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78

    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 80065c4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80065c8:	461d      	mov	r5, r3
 80065ca:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80065ce:	461e      	mov	r6, r3
 80065d0:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80065d4:	461a      	mov	r2, r3
 80065d6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80065da:	4619      	mov	r1, r3
 80065dc:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80065e0:	461c      	mov	r4, r3
 80065e2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80065e6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80065ea:	f107 000c 	add.w	r0, r7, #12
 80065ee:	9303      	str	r3, [sp, #12]
 80065f0:	9402      	str	r4, [sp, #8]
 80065f2:	9101      	str	r1, [sp, #4]
 80065f4:	9200      	str	r2, [sp, #0]
 80065f6:	4633      	mov	r3, r6
 80065f8:	462a      	mov	r2, r5
 80065fa:	4931      	ldr	r1, [pc, #196]	@ (80066c0 <Cmd_status_now+0x148>)
 80065fc:	f007 fe3e 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	4619      	mov	r1, r3
 8006606:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006608:	f7fb fc60 	bl	8001ecc <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f *C\r\n", temp);
 800660c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800660e:	f7f9 ffab 	bl	8000568 <__aeabi_f2d>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	f107 000c 	add.w	r0, r7, #12
 800661a:	492a      	ldr	r1, [pc, #168]	@ (80066c4 <Cmd_status_now+0x14c>)
 800661c:	f007 fe2e 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006620:	f107 030c 	add.w	r3, r7, #12
 8006624:	4619      	mov	r1, r3
 8006626:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006628:	f7fb fc50 	bl	8001ecc <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 800662c:	f107 030c 	add.w	r3, r7, #12
 8006630:	4925      	ldr	r1, [pc, #148]	@ (80066c8 <Cmd_status_now+0x150>)
 8006632:	4618      	mov	r0, r3
 8006634:	f007 fe22 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006638:	f107 030c 	add.w	r3, r7, #12
 800663c:	4619      	mov	r1, r3
 800663e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006640:	f7fb fc44 	bl	8001ecc <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.2.0\r\n");
 8006644:	f107 030c 	add.w	r3, r7, #12
 8006648:	4920      	ldr	r1, [pc, #128]	@ (80066cc <Cmd_status_now+0x154>)
 800664a:	4618      	mov	r0, r3
 800664c:	f007 fe16 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006650:	f107 030c 	add.w	r3, r7, #12
 8006654:	4619      	mov	r1, r3
 8006656:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006658:	f7fb fc38 	bl	8001ecc <Uart_sendstring>

    if (LL_GPIO_IsOutputPinSet(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin)) {
 800665c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006660:	481b      	ldr	r0, [pc, #108]	@ (80066d0 <Cmd_status_now+0x158>)
 8006662:	f7ff fbe9 	bl	8005e38 <LL_GPIO_IsOutputPinSet>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00c      	beq.n	8006686 <Cmd_status_now+0x10e>
        sprintf(buffer, "Enable: RF[OFF]\r\n");
 800666c:	f107 030c 	add.w	r3, r7, #12
 8006670:	4918      	ldr	r1, [pc, #96]	@ (80066d4 <Cmd_status_now+0x15c>)
 8006672:	4618      	mov	r0, r3
 8006674:	f007 fe02 	bl	800e27c <siprintf>
        Uart_sendstring(USARTx, buffer);
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	4619      	mov	r1, r3
 800667e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006680:	f7fb fc24 	bl	8001ecc <Uart_sendstring>
 8006684:	e00b      	b.n	800669e <Cmd_status_now+0x126>
    } else {
        sprintf(buffer, "Enable: RF[ON]\r\n");
 8006686:	f107 030c 	add.w	r3, r7, #12
 800668a:	4913      	ldr	r1, [pc, #76]	@ (80066d8 <Cmd_status_now+0x160>)
 800668c:	4618      	mov	r0, r3
 800668e:	f007 fdf5 	bl	800e27c <siprintf>
        Uart_sendstring(USARTx, buffer);
 8006692:	f107 030c 	add.w	r3, r7, #12
 8006696:	4619      	mov	r1, r3
 8006698:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800669a:	f7fb fc17 	bl	8001ecc <Uart_sendstring>
    }

    sprintf(buffer, "MuxMode: Auto\r\n");
 800669e:	f107 030c 	add.w	r3, r7, #12
 80066a2:	490e      	ldr	r1, [pc, #56]	@ (80066dc <Cmd_status_now+0x164>)
 80066a4:	4618      	mov	r0, r3
 80066a6:	f007 fde9 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	4619      	mov	r1, r3
 80066b0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80066b2:	f7fb fc0b 	bl	8001ecc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3784      	adds	r7, #132	@ 0x84
 80066bc:	46bd      	mov	sp, r7
 80066be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c0:	080130a0 	.word	0x080130a0
 80066c4:	080130c4 	.word	0x080130c4
 80066c8:	080130dc 	.word	0x080130dc
 80066cc:	08013100 	.word	0x08013100
 80066d0:	40020400 	.word	0x40020400
 80066d4:	08013124 	.word	0x08013124
 80066d8:	08013138 	.word	0x08013138
 80066dc:	0801314c 	.word	0x0801314c

080066e0 <Cmd_auto_report_ena>:
uint8_t auto_report_enabled = 0;
uint32_t RS422_PERIOD = 3000;


int Cmd_auto_report_ena(int argc, char *argv[])
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b092      	sub	sp, #72	@ 0x48
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	dc01      	bgt.n	80066f4 <Cmd_auto_report_ena+0x14>
 80066f0:	2303      	movs	r3, #3
 80066f2:	e03f      	b.n	8006774 <Cmd_auto_report_ena+0x94>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	dd01      	ble.n	80066fe <Cmd_auto_report_ena+0x1e>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e03a      	b.n	8006774 <Cmd_auto_report_ena+0x94>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006704:	3b01      	subs	r3, #1
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	4413      	add	r3, r2
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	647b      	str	r3, [r7, #68]	@ 0x44
    int sec = atoi(argv[1]);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	3304      	adds	r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f006 fdf8 	bl	800d30c <atoi>
 800671c:	6438      	str	r0, [r7, #64]	@ 0x40
    if (sec <= 0) {
 800671e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	dc05      	bgt.n	8006730 <Cmd_auto_report_ena+0x50>
        Uart_sendstring(USARTx,"\nPlease provide a positive integer.\n");
 8006724:	4915      	ldr	r1, [pc, #84]	@ (800677c <Cmd_auto_report_ena+0x9c>)
 8006726:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006728:	f7fb fbd0 	bl	8001ecc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 800672c:	2304      	movs	r3, #4
 800672e:	e021      	b.n	8006774 <Cmd_auto_report_ena+0x94>
    }

    if (sec > 20)
 8006730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006732:	2b14      	cmp	r3, #20
 8006734:	dd05      	ble.n	8006742 <Cmd_auto_report_ena+0x62>
    	{
    	Uart_sendstring(USARTx,"Arg < 20\n");
 8006736:	4912      	ldr	r1, [pc, #72]	@ (8006780 <Cmd_auto_report_ena+0xa0>)
 8006738:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800673a:	f7fb fbc7 	bl	8001ecc <Uart_sendstring>
    	return CMDLINE_INVALID_ARG;
 800673e:	2304      	movs	r3, #4
 8006740:	e018      	b.n	8006774 <Cmd_auto_report_ena+0x94>
    	}

    auto_report_enabled = 1;
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <Cmd_auto_report_ena+0xa4>)
 8006744:	2201      	movs	r2, #1
 8006746:	701a      	strb	r2, [r3, #0]
    RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds
 8006748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800674a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	461a      	mov	r2, r3
 8006754:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <Cmd_auto_report_ena+0xa8>)
 8006756:	601a      	str	r2, [r3, #0]

    char msg[50];
    sprintf(msg, "\nAuto report %d seconds.\n", sec);
 8006758:	f107 030c 	add.w	r3, r7, #12
 800675c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800675e:	490b      	ldr	r1, [pc, #44]	@ (800678c <Cmd_auto_report_ena+0xac>)
 8006760:	4618      	mov	r0, r3
 8006762:	f007 fd8b 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, msg);
 8006766:	f107 030c 	add.w	r3, r7, #12
 800676a:	4619      	mov	r1, r3
 800676c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800676e:	f7fb fbad 	bl	8001ecc <Uart_sendstring>
    return CMDLINE_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3748      	adds	r7, #72	@ 0x48
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	0801315c 	.word	0x0801315c
 8006780:	08013184 	.word	0x08013184
 8006784:	20004958 	.word	0x20004958
 8006788:	20000394 	.word	0x20000394
 800678c:	08013190 	.word	0x08013190

08006790 <Cmd_auto_report_dis>:


int Cmd_auto_report_dis(int argc, char *argv[])
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b01      	cmp	r3, #1
 800679e:	dc01      	bgt.n	80067a4 <Cmd_auto_report_dis+0x14>
 80067a0:	2303      	movs	r3, #3
 80067a2:	e015      	b.n	80067d0 <Cmd_auto_report_dis+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	dd01      	ble.n	80067ae <Cmd_auto_report_dis+0x1e>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e010      	b.n	80067d0 <Cmd_auto_report_dis+0x40>
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067b4:	3b01      	subs	r3, #1
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	4413      	add	r3, r2
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]
    auto_report_enabled = 0;
 80067c0:	4b05      	ldr	r3, [pc, #20]	@ (80067d8 <Cmd_auto_report_dis+0x48>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]

    Uart_sendstring(USARTx, "Auto report disabled.\n");
 80067c6:	4905      	ldr	r1, [pc, #20]	@ (80067dc <Cmd_auto_report_dis+0x4c>)
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7fb fb7f 	bl	8001ecc <Uart_sendstring>
    return CMDLINE_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20004958 	.word	0x20004958
 80067dc:	080131ac 	.word	0x080131ac

080067e0 <Cmd_memory_usage>:

int Cmd_memory_usage(int argc, char *argv[]) {
 80067e0:	b5b0      	push	{r4, r5, r7, lr}
 80067e2:	b0a6      	sub	sp, #152	@ 0x98
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	4674      	mov	r4, lr
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067f2:	3b01      	subs	r3, #1
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	4413      	add	r3, r2
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    // STM32F405RGT7 có 192KB SRAM [[5]]
    uint32_t totalRAM = 192 * 1024;
 8006800:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8006804:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8006808:	f3ef 8308 	mrs	r3, MSP
 800680c:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 800680e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    uint32_t usedRAM = SRAM1_BASE + totalRAM - __get_MSP();
 8006810:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800681a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float ramUsage = (float)usedRAM / totalRAM * 100;
 800681e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80068b8 <Cmd_memory_usage+0xd8>
 800683e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006842:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

    // STM32F405RGT7 có 1MB Flash [[1]] [[4]]
    uint32_t totalFlash = 1 * 1024 * 1024;
 8006846:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800684a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t usedFlash = (uint32_t)__builtin_return_address(0) - FLASH_BASE;
 800684c:	4623      	mov	r3, r4
 800684e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8006852:	67bb      	str	r3, [r7, #120]	@ 0x78
    float flashUsage = (float)usedFlash / totalFlash * 100;
 8006854:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006860:	ee07 3a90 	vmov	s15, r3
 8006864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80068b8 <Cmd_memory_usage+0xd8>
 8006870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006874:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74


    char buffer[100];
    sprintf(buffer, "\nRAM: %.2f%% used\r\nFlash: %.2f%% used\r\n", ramUsage, flashUsage);
 8006878:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800687c:	f7f9 fe74 	bl	8000568 <__aeabi_f2d>
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
 8006884:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006886:	f7f9 fe6f 	bl	8000568 <__aeabi_f2d>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	f107 000c 	add.w	r0, r7, #12
 8006892:	e9cd 2300 	strd	r2, r3, [sp]
 8006896:	4622      	mov	r2, r4
 8006898:	462b      	mov	r3, r5
 800689a:	4908      	ldr	r1, [pc, #32]	@ (80068bc <Cmd_memory_usage+0xdc>)
 800689c:	f007 fcee 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80068a0:	f107 030c 	add.w	r3, r7, #12
 80068a4:	4619      	mov	r1, r3
 80068a6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80068aa:	f7fb fb0f 	bl	8001ecc <Uart_sendstring>

    return CMDLINE_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3790      	adds	r7, #144	@ 0x90
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bdb0      	pop	{r4, r5, r7, pc}
 80068b8:	42c80000 	.word	0x42c80000
 80068bc:	080131c4 	.word	0x080131c4

080068c0 <Cmd_time_get>:


int Cmd_time_get(int argc, char *argv[]){
 80068c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c2:	b0a3      	sub	sp, #140	@ 0x8c
 80068c4:	af04      	add	r7, sp, #16
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068d0:	3b01      	subs	r3, #1
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	677b      	str	r3, [r7, #116]	@ 0x74
    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 80068dc:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80068e0:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 80068e4:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 80068e8:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 80068ec:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	4623      	mov	r3, r4
 8006900:	f7fa fdb0 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8006904:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006908:	461d      	mov	r5, r3
 800690a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800690e:	461e      	mov	r6, r3
 8006910:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8006914:	461a      	mov	r2, r3
 8006916:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800691a:	4619      	mov	r1, r3
 800691c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8006920:	461c      	mov	r4, r3
 8006922:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8006926:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800692a:	f107 0008 	add.w	r0, r7, #8
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	9402      	str	r4, [sp, #8]
 8006932:	9101      	str	r1, [sp, #4]
 8006934:	9200      	str	r2, [sp, #0]
 8006936:	4633      	mov	r3, r6
 8006938:	462a      	mov	r2, r5
 800693a:	4907      	ldr	r1, [pc, #28]	@ (8006958 <Cmd_time_get+0x98>)
 800693c:	f007 fc9e 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006940:	f107 0308 	add.w	r3, r7, #8
 8006944:	4619      	mov	r1, r3
 8006946:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006948:	f7fb fac0 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	377c      	adds	r7, #124	@ 0x7c
 8006952:	46bd      	mov	sp, r7
 8006954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006956:	bf00      	nop
 8006958:	080130a0 	.word	0x080130a0

0800695c <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 800695c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800695e:	b0a3      	sub	sp, #140	@ 0x8c
 8006960:	af04      	add	r7, sp, #16
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 7) return CMDLINE_TOO_FEW_ARGS;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b07      	cmp	r3, #7
 800696a:	dc01      	bgt.n	8006970 <Cmd_time_set+0x14>
 800696c:	2303      	movs	r3, #3
 800696e:	e091      	b.n	8006a94 <Cmd_time_set+0x138>
    if ((argc-1) > 7) return CMDLINE_TOO_MANY_ARGS;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b08      	cmp	r3, #8
 8006974:	dd01      	ble.n	800697a <Cmd_time_set+0x1e>
 8006976:	2302      	movs	r3, #2
 8006978:	e08c      	b.n	8006a94 <Cmd_time_set+0x138>
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006980:	3b01      	subs	r3, #1
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	4413      	add	r3, r2
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	677b      	str	r3, [r7, #116]	@ 0x74
    uint8_t hour = atoi(argv[1]);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	3304      	adds	r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f006 fcba 	bl	800d30c <atoi>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t min = atoi(argv[2]);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f006 fcb1 	bl	800d30c <atoi>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    uint8_t sec = atoi(argv[3]);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	330c      	adds	r3, #12
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f006 fca8 	bl	800d30c <atoi>
 80069bc:	4603      	mov	r3, r0
 80069be:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    uint8_t date = atoi(argv[4]);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	3310      	adds	r3, #16
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f006 fc9f 	bl	800d30c <atoi>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
    uint8_t month = atoi(argv[5]);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f006 fc96 	bl	800d30c <atoi>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t year = atoi(argv[6]);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	3318      	adds	r3, #24
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f006 fc8d 	bl	800d30c <atoi>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 80069f8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80069fc:	2b17      	cmp	r3, #23
 80069fe:	d813      	bhi.n	8006a28 <Cmd_time_set+0xcc>
 8006a00:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006a04:	2b3b      	cmp	r3, #59	@ 0x3b
 8006a06:	d80f      	bhi.n	8006a28 <Cmd_time_set+0xcc>
 8006a08:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8006a0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8006a0e:	d80b      	bhi.n	8006a28 <Cmd_time_set+0xcc>
 8006a10:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8006a14:	2b1f      	cmp	r3, #31
 8006a16:	d807      	bhi.n	8006a28 <Cmd_time_set+0xcc>
 8006a18:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d803      	bhi.n	8006a28 <Cmd_time_set+0xcc>
 8006a20:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8006a24:	2b63      	cmp	r3, #99	@ 0x63
 8006a26:	d901      	bls.n	8006a2c <Cmd_time_set+0xd0>
        return CMDLINE_INVALID_ARG;
 8006a28:	2304      	movs	r3, #4
 8006a2a:	e033      	b.n	8006a94 <Cmd_time_set+0x138>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 8006a2c:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 8006a30:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8006a34:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 8006a38:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8006a3c:	9302      	str	r3, [sp, #8]
 8006a3e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	f7fa fc4b 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "Time set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8006a52:	f897 5073 	ldrb.w	r5, [r7, #115]	@ 0x73
 8006a56:	f897 6072 	ldrb.w	r6, [r7, #114]	@ 0x72
 8006a5a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8006a5e:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8006a62:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8006a66:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 8006a6a:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8006a6e:	f107 0408 	add.w	r4, r7, #8
 8006a72:	9003      	str	r0, [sp, #12]
 8006a74:	9102      	str	r1, [sp, #8]
 8006a76:	9201      	str	r2, [sp, #4]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	4633      	mov	r3, r6
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	4907      	ldr	r1, [pc, #28]	@ (8006a9c <Cmd_time_set+0x140>)
 8006a80:	4620      	mov	r0, r4
 8006a82:	f007 fbfb 	bl	800e27c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8006a86:	f107 0308 	add.w	r3, r7, #8
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006a8e:	f7fb fa1d 	bl	8001ecc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	377c      	adds	r7, #124	@ 0x7c
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9c:	080131ec 	.word	0x080131ec

08006aa0 <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 8006aaa:	f7ff f9af 	bl	8005e0c <__NVIC_SystemReset>
	...

08006ab0 <Cmd_rf_ena>:
//	Cmd_pmu_board_alive();
//	Cmd_pmu_board_alive();
//
//}

int Cmd_rf_ena(int argc, char *argv[]){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8006acc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006ad0:	4805      	ldr	r0, [pc, #20]	@ (8006ae8 <Cmd_rf_ena+0x38>)
 8006ad2:	f7ff f9d4 	bl	8005e7e <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(USARTx, "\nRF Set to Enable\r\n");
 8006ad6:	4905      	ldr	r1, [pc, #20]	@ (8006aec <Cmd_rf_ena+0x3c>)
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7fb f9f7 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40020400 	.word	0x40020400
 8006aec:	0801321c 	.word	0x0801321c

08006af0 <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b00:	3b01      	subs	r3, #1
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	4413      	add	r3, r2
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8006b0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006b10:	4805      	ldr	r0, [pc, #20]	@ (8006b28 <Cmd_rf_dis+0x38>)
 8006b12:	f7ff f9a6 	bl	8005e62 <LL_GPIO_SetOutputPin>
	Uart_sendstring(USARTx, "\nRF Disable\r\n");
 8006b16:	4905      	ldr	r1, [pc, #20]	@ (8006b2c <Cmd_rf_dis+0x3c>)
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7fb f9d7 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40020400 	.word	0x40020400
 8006b2c:	08013230 	.word	0x08013230

08006b30 <command_create_task>:




void	command_create_task(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8006b34:	4902      	ldr	r1, [pc, #8]	@ (8006b40 <command_create_task+0x10>)
 8006b36:	4803      	ldr	r0, [pc, #12]	@ (8006b44 <command_create_task+0x14>)
 8006b38:	f003 fc5e 	bl	800a3f8 <SCH_TASK_CreateTask>
}
 8006b3c:	bf00      	nop
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20000388 	.word	0x20000388
 8006b44:	20000384 	.word	0x20000384

08006b48 <command_send_splash>:

void	command_send_splash(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
	Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8006b4c:	4938      	ldr	r1, [pc, #224]	@ (8006c30 <command_send_splash+0xe8>)
 8006b4e:	4839      	ldr	r0, [pc, #228]	@ (8006c34 <command_send_splash+0xec>)
 8006b50:	f7fb f9bc 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--        ____                                --\r\n");
 8006b54:	4938      	ldr	r1, [pc, #224]	@ (8006c38 <command_send_splash+0xf0>)
 8006b56:	4837      	ldr	r0, [pc, #220]	@ (8006c34 <command_send_splash+0xec>)
 8006b58:	f7fb f9b8 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       / ___| _ __   __ _  ___ ___          --\r\n");
 8006b5c:	4937      	ldr	r1, [pc, #220]	@ (8006c3c <command_send_splash+0xf4>)
 8006b5e:	4835      	ldr	r0, [pc, #212]	@ (8006c34 <command_send_splash+0xec>)
 8006b60:	f7fb f9b4 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       \\___ \\| '_ \\ / _` |/ __/ _ \\         --  \r\n");
 8006b64:	4936      	ldr	r1, [pc, #216]	@ (8006c40 <command_send_splash+0xf8>)
 8006b66:	4833      	ldr	r0, [pc, #204]	@ (8006c34 <command_send_splash+0xec>)
 8006b68:	f7fb f9b0 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--        ___) | |_) | (_| | (_|  __/         --\r\n");
 8006b6c:	4935      	ldr	r1, [pc, #212]	@ (8006c44 <command_send_splash+0xfc>)
 8006b6e:	4831      	ldr	r0, [pc, #196]	@ (8006c34 <command_send_splash+0xec>)
 8006b70:	f7fb f9ac 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       |____/| -__/ \\__,_|\\___\\___|         --  \r\n");
 8006b74:	4934      	ldr	r1, [pc, #208]	@ (8006c48 <command_send_splash+0x100>)
 8006b76:	482f      	ldr	r0, [pc, #188]	@ (8006c34 <command_send_splash+0xec>)
 8006b78:	f7fb f9a8 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--             |_|                            --\r\n");
 8006b7c:	4933      	ldr	r1, [pc, #204]	@ (8006c4c <command_send_splash+0x104>)
 8006b7e:	482d      	ldr	r0, [pc, #180]	@ (8006c34 <command_send_splash+0xec>)
 8006b80:	f7fb f9a4 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--     _     _ _     _____         _          --\r\n");
 8006b84:	4932      	ldr	r1, [pc, #200]	@ (8006c50 <command_send_splash+0x108>)
 8006b86:	482b      	ldr	r0, [pc, #172]	@ (8006c34 <command_send_splash+0xec>)
 8006b88:	f7fb f9a0 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |   (_|_)_ _|_   _|__  ___| |__       --\r\n");
 8006b8c:	4931      	ldr	r1, [pc, #196]	@ (8006c54 <command_send_splash+0x10c>)
 8006b8e:	4829      	ldr	r0, [pc, #164]	@ (8006c34 <command_send_splash+0xec>)
 8006b90:	f7fb f99c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      --\r\n");
 8006b94:	4930      	ldr	r1, [pc, #192]	@ (8006c58 <command_send_splash+0x110>)
 8006b96:	4827      	ldr	r0, [pc, #156]	@ (8006c34 <command_send_splash+0xec>)
 8006b98:	f7fb f998 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |___| | | | | | |  __/ (__| | | |     --\r\n");
 8006b9c:	492f      	ldr	r1, [pc, #188]	@ (8006c5c <command_send_splash+0x114>)
 8006b9e:	4825      	ldr	r0, [pc, #148]	@ (8006c34 <command_send_splash+0xec>)
 8006ba0:	f7fb f994 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     --\r\n");
 8006ba4:	492e      	ldr	r1, [pc, #184]	@ (8006c60 <command_send_splash+0x118>)
 8006ba6:	4823      	ldr	r0, [pc, #140]	@ (8006c34 <command_send_splash+0xec>)
 8006ba8:	f7fb f990 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8006bac:	4920      	ldr	r1, [pc, #128]	@ (8006c30 <command_send_splash+0xe8>)
 8006bae:	4821      	ldr	r0, [pc, #132]	@ (8006c34 <command_send_splash+0xec>)
 8006bb0:	f7fb f98c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--           ____ ____   ___   ____           --\r\n");
 8006bb4:	492b      	ldr	r1, [pc, #172]	@ (8006c64 <command_send_splash+0x11c>)
 8006bb6:	481f      	ldr	r0, [pc, #124]	@ (8006c34 <command_send_splash+0xec>)
 8006bb8:	f7fb f988 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          / ___|  _ \\ / _ \\ / ___|          --\r\n");
 8006bbc:	492a      	ldr	r1, [pc, #168]	@ (8006c68 <command_send_splash+0x120>)
 8006bbe:	481d      	ldr	r0, [pc, #116]	@ (8006c34 <command_send_splash+0xec>)
 8006bc0:	f7fb f984 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--         | |   | |_) | | | | |              --\r\n");
 8006bc4:	4929      	ldr	r1, [pc, #164]	@ (8006c6c <command_send_splash+0x124>)
 8006bc6:	481b      	ldr	r0, [pc, #108]	@ (8006c34 <command_send_splash+0xec>)
 8006bc8:	f7fb f980 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--         | |___|  __/| |_| | |___           --\r\n");
 8006bcc:	4928      	ldr	r1, [pc, #160]	@ (8006c70 <command_send_splash+0x128>)
 8006bce:	4819      	ldr	r0, [pc, #100]	@ (8006c34 <command_send_splash+0xec>)
 8006bd0:	f7fb f97c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          \\____|_|    \\___/ \\____|          -- \r\n");
 8006bd4:	4927      	ldr	r1, [pc, #156]	@ (8006c74 <command_send_splash+0x12c>)
 8006bd6:	4817      	ldr	r0, [pc, #92]	@ (8006c34 <command_send_splash+0xec>)
 8006bd8:	f7fb f978 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--                  _   ___   ___             --\r\n");
 8006bdc:	4926      	ldr	r1, [pc, #152]	@ (8006c78 <command_send_splash+0x130>)
 8006bde:	4815      	ldr	r0, [pc, #84]	@ (8006c34 <command_send_splash+0xec>)
 8006be0:	f7fb f974 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          __   __/ | / _ \\ / _ \\            -- \r\n");
 8006be4:	4925      	ldr	r1, [pc, #148]	@ (8006c7c <command_send_splash+0x134>)
 8006be6:	4813      	ldr	r0, [pc, #76]	@ (8006c34 <command_send_splash+0xec>)
 8006be8:	f7fb f970 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          \\ \\ / /| || | | | | | |           --  \r\n");
 8006bec:	4924      	ldr	r1, [pc, #144]	@ (8006c80 <command_send_splash+0x138>)
 8006bee:	4811      	ldr	r0, [pc, #68]	@ (8006c34 <command_send_splash+0xec>)
 8006bf0:	f7fb f96c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--           \\ V / | || |_| | |_| |           -- \r\n");
 8006bf4:	4923      	ldr	r1, [pc, #140]	@ (8006c84 <command_send_splash+0x13c>)
 8006bf6:	480f      	ldr	r0, [pc, #60]	@ (8006c34 <command_send_splash+0xec>)
 8006bf8:	f7fb f968 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--            \\_/  |_(_)___(_)___/            -- \r\n");
 8006bfc:	4922      	ldr	r1, [pc, #136]	@ (8006c88 <command_send_splash+0x140>)
 8006bfe:	480d      	ldr	r0, [pc, #52]	@ (8006c34 <command_send_splash+0xec>)
 8006c00:	f7fb f964 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8006c04:	490a      	ldr	r1, [pc, #40]	@ (8006c30 <command_send_splash+0xe8>)
 8006c06:	480b      	ldr	r0, [pc, #44]	@ (8006c34 <command_send_splash+0xec>)
 8006c08:	f7fb f960 	bl	8001ecc <Uart_sendstring>

	Uart_sendstring(USART6, "> ");
 8006c0c:	491f      	ldr	r1, [pc, #124]	@ (8006c8c <command_send_splash+0x144>)
 8006c0e:	4809      	ldr	r0, [pc, #36]	@ (8006c34 <command_send_splash+0xec>)
 8006c10:	f7fb f95c 	bl	8001ecc <Uart_sendstring>

	Uart_sendstring(UART5, "\r\n");
 8006c14:	491e      	ldr	r1, [pc, #120]	@ (8006c90 <command_send_splash+0x148>)
 8006c16:	481f      	ldr	r0, [pc, #124]	@ (8006c94 <command_send_splash+0x14c>)
 8006c18:	f7fb f958 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, ">>>>> CPOC V1.2.0 RS422 <<<<<\r\n");
 8006c1c:	491e      	ldr	r1, [pc, #120]	@ (8006c98 <command_send_splash+0x150>)
 8006c1e:	481d      	ldr	r0, [pc, #116]	@ (8006c94 <command_send_splash+0x14c>)
 8006c20:	f7fb f954 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "> ");
 8006c24:	4919      	ldr	r1, [pc, #100]	@ (8006c8c <command_send_splash+0x144>)
 8006c26:	481b      	ldr	r0, [pc, #108]	@ (8006c94 <command_send_splash+0x14c>)
 8006c28:	f7fb f950 	bl	8001ecc <Uart_sendstring>
}
 8006c2c:	bf00      	nop
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	08013240 	.word	0x08013240
 8006c34:	40011400 	.word	0x40011400
 8006c38:	08013274 	.word	0x08013274
 8006c3c:	080132a8 	.word	0x080132a8
 8006c40:	080132dc 	.word	0x080132dc
 8006c44:	08013314 	.word	0x08013314
 8006c48:	08013348 	.word	0x08013348
 8006c4c:	08013380 	.word	0x08013380
 8006c50:	080133b4 	.word	0x080133b4
 8006c54:	080133e8 	.word	0x080133e8
 8006c58:	0801341c 	.word	0x0801341c
 8006c5c:	08013450 	.word	0x08013450
 8006c60:	08013484 	.word	0x08013484
 8006c64:	080134b8 	.word	0x080134b8
 8006c68:	080134ec 	.word	0x080134ec
 8006c6c:	08013520 	.word	0x08013520
 8006c70:	08013554 	.word	0x08013554
 8006c74:	08013588 	.word	0x08013588
 8006c78:	080135bc 	.word	0x080135bc
 8006c7c:	080135f0 	.word	0x080135f0
 8006c80:	08013624 	.word	0x08013624
 8006c84:	0801365c 	.word	0x0801365c
 8006c88:	08013690 	.word	0x08013690
 8006c8c:	08012e24 	.word	0x08012e24
 8006c90:	08012db0 	.word	0x08012db0
 8006c94:	40005000 	.word	0x40005000
 8006c98:	080136c4 	.word	0x080136c4

08006c9c <LL_GPIO_SetOutputPin>:
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	619a      	str	r2, [r3, #24]
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <LL_GPIO_ResetOutputPin>:
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	041a      	lsls	r2, r3, #16
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	619a      	str	r2, [r3, #24]
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
	...

08006cd8 <switch_board>:
//	}
//};



void switch_board(uint8_t board_id) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
    switch (board_id) {
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d837      	bhi.n	8006d58 <switch_board+0x80>
 8006ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <switch_board+0x18>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d17 	.word	0x08006d17
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d43 	.word	0x08006d43
        case 0: // PDU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006d00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d04:	4816      	ldr	r0, [pc, #88]	@ (8006d60 <switch_board+0x88>)
 8006d06:	f7ff ffd7 	bl	8006cb8 <LL_GPIO_ResetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006d0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006d0e:	4814      	ldr	r0, [pc, #80]	@ (8006d60 <switch_board+0x88>)
 8006d10:	f7ff ffd2 	bl	8006cb8 <LL_GPIO_ResetOutputPin>
            break;
 8006d14:	e020      	b.n	8006d58 <switch_board+0x80>
        case 1: // PMU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006d16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d1a:	4811      	ldr	r0, [pc, #68]	@ (8006d60 <switch_board+0x88>)
 8006d1c:	f7ff ffcc 	bl	8006cb8 <LL_GPIO_ResetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006d24:	480e      	ldr	r0, [pc, #56]	@ (8006d60 <switch_board+0x88>)
 8006d26:	f7ff ffb9 	bl	8006c9c <LL_GPIO_SetOutputPin>
            break;
 8006d2a:	e015      	b.n	8006d58 <switch_board+0x80>
        case 2: // CAM
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006d2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d30:	480b      	ldr	r0, [pc, #44]	@ (8006d60 <switch_board+0x88>)
 8006d32:	f7ff ffb3 	bl	8006c9c <LL_GPIO_SetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006d36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006d3a:	4809      	ldr	r0, [pc, #36]	@ (8006d60 <switch_board+0x88>)
 8006d3c:	f7ff ffbc 	bl	8006cb8 <LL_GPIO_ResetOutputPin>
            break;
 8006d40:	e00a      	b.n	8006d58 <switch_board+0x80>
        case 3: // IOU
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006d42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d46:	4806      	ldr	r0, [pc, #24]	@ (8006d60 <switch_board+0x88>)
 8006d48:	f7ff ffa8 	bl	8006c9c <LL_GPIO_SetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006d4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006d50:	4803      	ldr	r0, [pc, #12]	@ (8006d60 <switch_board+0x88>)
 8006d52:	f7ff ffa3 	bl	8006c9c <LL_GPIO_SetOutputPin>
            break;
 8006d56:	bf00      	nop
    }
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40020000 	.word	0x40020000

08006d64 <frame_processing_rs422>:
//
//		}
//	}
//}

void frame_processing_rs422(fsp_packet_t *fsp_pkt){
 8006d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d68:	f5ad 6db8 	sub.w	sp, sp, #1472	@ 0x5c0
 8006d6c:	af2c      	add	r7, sp, #176	@ 0xb0
 8006d6e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006d72:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006d76:	6018      	str	r0, [r3, #0]
	switch(fsp_pkt->payload[0])
 8006d78:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006d7c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	795b      	ldrb	r3, [r3, #5]
 8006d84:	2b13      	cmp	r3, #19
 8006d86:	f000 8575 	beq.w	8007874 <frame_processing_rs422+0xb10>
 8006d8a:	2b13      	cmp	r3, #19
 8006d8c:	f301 8170 	bgt.w	8008070 <frame_processing_rs422+0x130c>
 8006d90:	2b06      	cmp	r3, #6
 8006d92:	f000 828f 	beq.w	80072b4 <frame_processing_rs422+0x550>
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	f041 816a 	bne.w	8008070 <frame_processing_rs422+0x130c>
	{
		case 0x08:
	    {
	    	Uart_sendstring(UART5, "\nPMU:\n");
 8006d9c:	49b6      	ldr	r1, [pc, #728]	@ (8007078 <frame_processing_rs422+0x314>)
 8006d9e:	48b7      	ldr	r0, [pc, #732]	@ (800707c <frame_processing_rs422+0x318>)
 8006da0:	f7fb f894 	bl	8001ecc <Uart_sendstring>
	    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8006da4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006da8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	799b      	ldrb	r3, [r3, #6]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	b21a      	sxth	r2, r3
 8006db4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006db8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	79db      	ldrb	r3, [r3, #7]
 8006dc0:	b21b      	sxth	r3, r3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8a7 34ea 	strh.w	r3, [r7, #1258]	@ 0x4ea
	    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8006dc8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006dcc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	7a1b      	ldrb	r3, [r3, #8]
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	b21a      	sxth	r2, r3
 8006dd8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ddc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	7a5b      	ldrb	r3, [r3, #9]
 8006de4:	b21b      	sxth	r3, r3
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8a7 34e8 	strh.w	r3, [r7, #1256]	@ 0x4e8
	    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8006dec:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006df0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	7a9b      	ldrb	r3, [r3, #10]
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	b21a      	sxth	r2, r3
 8006dfc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e00:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	7adb      	ldrb	r3, [r3, #11]
 8006e08:	b21b      	sxth	r3, r3
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
	    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 8006e10:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e14:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	7b1b      	ldrb	r3, [r3, #12]
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	b21a      	sxth	r2, r3
 8006e20:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e24:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	7b5b      	ldrb	r3, [r3, #13]
 8006e2c:	b21b      	sxth	r3, r3
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4

	    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8006e34:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e38:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	7b9b      	ldrb	r3, [r3, #14]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	b21a      	sxth	r2, r3
 8006e44:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e48:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	7bdb      	ldrb	r3, [r3, #15]
 8006e50:	b21b      	sxth	r3, r3
 8006e52:	4313      	orrs	r3, r2
 8006e54:	b21b      	sxth	r3, r3
 8006e56:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
	    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8006e5a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e5e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	7c1b      	ldrb	r3, [r3, #16]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	b21a      	sxth	r2, r3
 8006e6a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e6e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	7c5b      	ldrb	r3, [r3, #17]
 8006e76:	b21b      	sxth	r3, r3
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	b21b      	sxth	r3, r3
 8006e7c:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
	    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8006e80:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e84:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	7c9b      	ldrb	r3, [r3, #18]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	b21a      	sxth	r2, r3
 8006e90:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e94:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	7cdb      	ldrb	r3, [r3, #19]
 8006e9c:	b21b      	sxth	r3, r3
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b21b      	sxth	r3, r3
 8006ea2:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
	    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8006ea6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006eaa:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	7d1b      	ldrb	r3, [r3, #20]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	b21a      	sxth	r2, r3
 8006eb6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006eba:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	7d5b      	ldrb	r3, [r3, #21]
 8006ec2:	b21b      	sxth	r3, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	b21b      	sxth	r3, r3
 8006ec8:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc

	    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8006ecc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ed0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	7d9b      	ldrb	r3, [r3, #22]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	b21a      	sxth	r2, r3
 8006edc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ee0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	7ddb      	ldrb	r3, [r3, #23]
 8006ee8:	b21b      	sxth	r3, r3
 8006eea:	4313      	orrs	r3, r2
 8006eec:	b21b      	sxth	r3, r3
 8006eee:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
	    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 8006ef2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ef6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	7e1b      	ldrb	r3, [r3, #24]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	b21a      	sxth	r2, r3
 8006f02:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f06:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	7e5b      	ldrb	r3, [r3, #25]
 8006f0e:	b21b      	sxth	r3, r3
 8006f10:	4313      	orrs	r3, r2
 8006f12:	b21b      	sxth	r3, r3
 8006f14:	f8a7 34d8 	strh.w	r3, [r7, #1240]	@ 0x4d8

	    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8006f18:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f1c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	7e9b      	ldrb	r3, [r3, #26]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	b21a      	sxth	r2, r3
 8006f28:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f2c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	7edb      	ldrb	r3, [r3, #27]
 8006f34:	b21b      	sxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b21b      	sxth	r3, r3
 8006f3a:	f8a7 34d6 	strh.w	r3, [r7, #1238]	@ 0x4d6
	    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 8006f3e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f42:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	7f1b      	ldrb	r3, [r3, #28]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	b21a      	sxth	r2, r3
 8006f4e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f52:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	7f5b      	ldrb	r3, [r3, #29]
 8006f5a:	b21b      	sxth	r3, r3
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	b21b      	sxth	r3, r3
 8006f60:	f8a7 34d4 	strh.w	r3, [r7, #1236]	@ 0x4d4

	    	char buffer_0x08[500];
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006f64:	f9b7 34ea 	ldrsh.w	r3, [r7, #1258]	@ 0x4ea
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da03      	bge.n	8006f74 <frame_processing_rs422+0x210>
 8006f6c:	4b44      	ldr	r3, [pc, #272]	@ (8007080 <frame_processing_rs422+0x31c>)
 8006f6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f72:	e002      	b.n	8006f7a <frame_processing_rs422+0x216>
 8006f74:	4b43      	ldr	r3, [pc, #268]	@ (8007084 <frame_processing_rs422+0x320>)
 8006f76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8006f7a:	f9b7 34ea 	ldrsh.w	r3, [r7, #1258]	@ 0x4ea
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfb8      	it	lt
 8006f82:	425b      	neglt	r3, r3
 8006f84:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006f86:	4a40      	ldr	r2, [pc, #256]	@ (8007088 <frame_processing_rs422+0x324>)
 8006f88:	fb82 1203 	smull	r1, r2, r2, r3
 8006f8c:	1152      	asrs	r2, r2, #5
 8006f8e:	17db      	asrs	r3, r3, #31
 8006f90:	eba2 0c03 	sub.w	ip, r2, r3
	    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8006f94:	f9b7 34ea 	ldrsh.w	r3, [r7, #1258]	@ 0x4ea
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bfb8      	it	lt
 8006f9c:	425b      	neglt	r3, r3
 8006f9e:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006fa0:	4a39      	ldr	r2, [pc, #228]	@ (8007088 <frame_processing_rs422+0x324>)
 8006fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8006fa6:	1151      	asrs	r1, r2, #5
 8006fa8:	17da      	asrs	r2, r3, #31
 8006faa:	1a8a      	subs	r2, r1, r2
 8006fac:	4611      	mov	r1, r2
 8006fae:	2264      	movs	r2, #100	@ 0x64
 8006fb0:	fb01 f202 	mul.w	r2, r1, r2
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fba:	f9b7 34e8 	ldrsh.w	r3, [r7, #1256]	@ 0x4e8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	da03      	bge.n	8006fca <frame_processing_rs422+0x266>
 8006fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8007080 <frame_processing_rs422+0x31c>)
 8006fc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fc8:	e002      	b.n	8006fd0 <frame_processing_rs422+0x26c>
 8006fca:	4b2e      	ldr	r3, [pc, #184]	@ (8007084 <frame_processing_rs422+0x320>)
 8006fcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 8006fd0:	f9b7 34e8 	ldrsh.w	r3, [r7, #1256]	@ 0x4e8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bfb8      	it	lt
 8006fd8:	425b      	neglt	r3, r3
 8006fda:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8007088 <frame_processing_rs422+0x324>)
 8006fde:	fb82 1203 	smull	r1, r2, r2, r3
 8006fe2:	1152      	asrs	r2, r2, #5
 8006fe4:	17db      	asrs	r3, r3, #31
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 8006fec:	f9b7 34e8 	ldrsh.w	r3, [r7, #1256]	@ 0x4e8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bfb8      	it	lt
 8006ff4:	425b      	neglt	r3, r3
 8006ff6:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006ff8:	4a23      	ldr	r2, [pc, #140]	@ (8007088 <frame_processing_rs422+0x324>)
 8006ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8006ffe:	1151      	asrs	r1, r2, #5
 8007000:	17da      	asrs	r2, r3, #31
 8007002:	1a8a      	subs	r2, r1, r2
 8007004:	4611      	mov	r1, r2
 8007006:	2264      	movs	r2, #100	@ 0x64
 8007008:	fb01 f202 	mul.w	r2, r1, r2
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007012:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 8007016:	2b00      	cmp	r3, #0
 8007018:	da03      	bge.n	8007022 <frame_processing_rs422+0x2be>
 800701a:	4b19      	ldr	r3, [pc, #100]	@ (8007080 <frame_processing_rs422+0x31c>)
 800701c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007020:	e002      	b.n	8007028 <frame_processing_rs422+0x2c4>
 8007022:	4b18      	ldr	r3, [pc, #96]	@ (8007084 <frame_processing_rs422+0x320>)
 8007024:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 8007028:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 800702c:	2b00      	cmp	r3, #0
 800702e:	bfb8      	it	lt
 8007030:	425b      	neglt	r3, r3
 8007032:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8007034:	4a14      	ldr	r2, [pc, #80]	@ (8007088 <frame_processing_rs422+0x324>)
 8007036:	fb82 1203 	smull	r1, r2, r2, r3
 800703a:	1152      	asrs	r2, r2, #5
 800703c:	17db      	asrs	r3, r3, #31
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	67fb      	str	r3, [r7, #124]	@ 0x7c
	    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 8007042:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 8007046:	2b00      	cmp	r3, #0
 8007048:	bfb8      	it	lt
 800704a:	425b      	neglt	r3, r3
 800704c:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800704e:	4a0e      	ldr	r2, [pc, #56]	@ (8007088 <frame_processing_rs422+0x324>)
 8007050:	fb82 1203 	smull	r1, r2, r2, r3
 8007054:	1151      	asrs	r1, r2, #5
 8007056:	17da      	asrs	r2, r3, #31
 8007058:	1a8a      	subs	r2, r1, r2
 800705a:	4611      	mov	r1, r2
 800705c:	2264      	movs	r2, #100	@ 0x64
 800705e:	fb01 f202 	mul.w	r2, r1, r2
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007066:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 800706a:	2b00      	cmp	r3, #0
 800706c:	da0e      	bge.n	800708c <frame_processing_rs422+0x328>
 800706e:	4b04      	ldr	r3, [pc, #16]	@ (8007080 <frame_processing_rs422+0x31c>)
 8007070:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007074:	e00d      	b.n	8007092 <frame_processing_rs422+0x32e>
 8007076:	bf00      	nop
 8007078:	080136e4 	.word	0x080136e4
 800707c:	40005000 	.word	0x40005000
 8007080:	080136ec 	.word	0x080136ec
 8007084:	080136f0 	.word	0x080136f0
 8007088:	51eb851f 	.word	0x51eb851f
 800708c:	4b84      	ldr	r3, [pc, #528]	@ (80072a0 <frame_processing_rs422+0x53c>)
 800708e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 8007092:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfb8      	it	lt
 800709a:	425b      	neglt	r3, r3
 800709c:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800709e:	4a81      	ldr	r2, [pc, #516]	@ (80072a4 <frame_processing_rs422+0x540>)
 80070a0:	fb82 1203 	smull	r1, r2, r2, r3
 80070a4:	1152      	asrs	r2, r2, #5
 80070a6:	17db      	asrs	r3, r3, #31
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	677b      	str	r3, [r7, #116]	@ 0x74
	    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 80070ac:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bfb8      	it	lt
 80070b4:	425b      	neglt	r3, r3
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4619      	mov	r1, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80070ba:	4b7a      	ldr	r3, [pc, #488]	@ (80072a4 <frame_processing_rs422+0x540>)
 80070bc:	fb83 2301 	smull	r2, r3, r3, r1
 80070c0:	115a      	asrs	r2, r3, #5
 80070c2:	17cb      	asrs	r3, r1, #31
 80070c4:	1ad6      	subs	r6, r2, r3
 80070c6:	2364      	movs	r3, #100	@ 0x64
 80070c8:	fb06 f303 	mul.w	r3, r6, r3
 80070cc:	1ace      	subs	r6, r1, r3
 80070ce:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	@ 0x4e2
 80070d2:	4a74      	ldr	r2, [pc, #464]	@ (80072a4 <frame_processing_rs422+0x540>)
 80070d4:	fba2 2303 	umull	r2, r3, r2, r3
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	b29b      	uxth	r3, r3
 80070dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80070de:	f8b7 14e2 	ldrh.w	r1, [r7, #1250]	@ 0x4e2
 80070e2:	4b70      	ldr	r3, [pc, #448]	@ (80072a4 <frame_processing_rs422+0x540>)
 80070e4:	fba3 2301 	umull	r2, r3, r3, r1
 80070e8:	095a      	lsrs	r2, r3, #5
 80070ea:	2364      	movs	r3, #100	@ 0x64
 80070ec:	fb02 f303 	mul.w	r3, r2, r3
 80070f0:	1acb      	subs	r3, r1, r3
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070f6:	f8b7 24e0 	ldrh.w	r2, [r7, #1248]	@ 0x4e0
 80070fa:	4b6a      	ldr	r3, [pc, #424]	@ (80072a4 <frame_processing_rs422+0x540>)
 80070fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	b29b      	uxth	r3, r3
 8007104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007106:	f8b7 14e0 	ldrh.w	r1, [r7, #1248]	@ 0x4e0
 800710a:	4b66      	ldr	r3, [pc, #408]	@ (80072a4 <frame_processing_rs422+0x540>)
 800710c:	fba3 2301 	umull	r2, r3, r3, r1
 8007110:	095a      	lsrs	r2, r3, #5
 8007112:	2364      	movs	r3, #100	@ 0x64
 8007114:	fb02 f303 	mul.w	r3, r2, r3
 8007118:	1acb      	subs	r3, r1, r3
 800711a:	b29b      	uxth	r3, r3
 800711c:	667b      	str	r3, [r7, #100]	@ 0x64
 800711e:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8007122:	4b60      	ldr	r3, [pc, #384]	@ (80072a4 <frame_processing_rs422+0x540>)
 8007124:	fba3 2302 	umull	r2, r3, r3, r2
 8007128:	095b      	lsrs	r3, r3, #5
 800712a:	b29b      	uxth	r3, r3
 800712c:	663b      	str	r3, [r7, #96]	@ 0x60
 800712e:	f8b7 14de 	ldrh.w	r1, [r7, #1246]	@ 0x4de
 8007132:	4b5c      	ldr	r3, [pc, #368]	@ (80072a4 <frame_processing_rs422+0x540>)
 8007134:	fba3 2301 	umull	r2, r3, r3, r1
 8007138:	095a      	lsrs	r2, r3, #5
 800713a:	2364      	movs	r3, #100	@ 0x64
 800713c:	fb02 f303 	mul.w	r3, r2, r3
 8007140:	1acb      	subs	r3, r1, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007146:	f8b7 24dc 	ldrh.w	r2, [r7, #1244]	@ 0x4dc
 800714a:	4b56      	ldr	r3, [pc, #344]	@ (80072a4 <frame_processing_rs422+0x540>)
 800714c:	fba3 2302 	umull	r2, r3, r3, r2
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	b29b      	uxth	r3, r3
 8007154:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007156:	f8b7 14dc 	ldrh.w	r1, [r7, #1244]	@ 0x4dc
 800715a:	4b52      	ldr	r3, [pc, #328]	@ (80072a4 <frame_processing_rs422+0x540>)
 800715c:	fba3 2301 	umull	r2, r3, r3, r1
 8007160:	095a      	lsrs	r2, r3, #5
 8007162:	2364      	movs	r3, #100	@ 0x64
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	1acb      	subs	r3, r1, r3
 800716a:	b29b      	uxth	r3, r3
 800716c:	657b      	str	r3, [r7, #84]	@ 0x54
 800716e:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8007172:	4b4c      	ldr	r3, [pc, #304]	@ (80072a4 <frame_processing_rs422+0x540>)
 8007174:	fba3 2302 	umull	r2, r3, r3, r2
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	b29b      	uxth	r3, r3
 800717c:	653b      	str	r3, [r7, #80]	@ 0x50
 800717e:	f8b7 14da 	ldrh.w	r1, [r7, #1242]	@ 0x4da
 8007182:	4b48      	ldr	r3, [pc, #288]	@ (80072a4 <frame_processing_rs422+0x540>)
 8007184:	fba3 2301 	umull	r2, r3, r3, r1
 8007188:	095a      	lsrs	r2, r3, #5
 800718a:	2364      	movs	r3, #100	@ 0x64
 800718c:	fb02 f303 	mul.w	r3, r2, r3
 8007190:	1acb      	subs	r3, r1, r3
 8007192:	b29b      	uxth	r3, r3
 8007194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007196:	f8b7 24d8 	ldrh.w	r2, [r7, #1240]	@ 0x4d8
 800719a:	4b42      	ldr	r3, [pc, #264]	@ (80072a4 <frame_processing_rs422+0x540>)
 800719c:	fba3 2302 	umull	r2, r3, r3, r2
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071a6:	f8b7 14d8 	ldrh.w	r1, [r7, #1240]	@ 0x4d8
 80071aa:	4b3e      	ldr	r3, [pc, #248]	@ (80072a4 <frame_processing_rs422+0x540>)
 80071ac:	fba3 2301 	umull	r2, r3, r3, r1
 80071b0:	095a      	lsrs	r2, r3, #5
 80071b2:	2364      	movs	r3, #100	@ 0x64
 80071b4:	fb02 f303 	mul.w	r3, r2, r3
 80071b8:	1acb      	subs	r3, r1, r3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80071be:	f8b7 24d6 	ldrh.w	r2, [r7, #1238]	@ 0x4d6
 80071c2:	4b38      	ldr	r3, [pc, #224]	@ (80072a4 <frame_processing_rs422+0x540>)
 80071c4:	fba3 2302 	umull	r2, r3, r3, r2
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ce:	f8b7 14d6 	ldrh.w	r1, [r7, #1238]	@ 0x4d6
 80071d2:	4b34      	ldr	r3, [pc, #208]	@ (80072a4 <frame_processing_rs422+0x540>)
 80071d4:	fba3 2301 	umull	r2, r3, r3, r1
 80071d8:	095a      	lsrs	r2, r3, #5
 80071da:	2364      	movs	r3, #100	@ 0x64
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
 80071e0:	1acb      	subs	r3, r1, r3
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	461d      	mov	r5, r3
 80071e6:	f8b7 24d4 	ldrh.w	r2, [r7, #1236]	@ 0x4d4
 80071ea:	4b2e      	ldr	r3, [pc, #184]	@ (80072a4 <frame_processing_rs422+0x540>)
 80071ec:	fba3 2302 	umull	r2, r3, r3, r2
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	461c      	mov	r4, r3
 80071f6:	f8b7 14d4 	ldrh.w	r1, [r7, #1236]	@ 0x4d4
 80071fa:	4b2a      	ldr	r3, [pc, #168]	@ (80072a4 <frame_processing_rs422+0x540>)
 80071fc:	fba3 2301 	umull	r2, r3, r3, r1
 8007200:	095a      	lsrs	r2, r3, #5
 8007202:	2364      	movs	r3, #100	@ 0x64
 8007204:	fb02 f303 	mul.w	r3, r2, r3
 8007208:	1acb      	subs	r3, r1, r3
 800720a:	b29b      	uxth	r3, r3
 800720c:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8007210:	9319      	str	r3, [sp, #100]	@ 0x64
 8007212:	9418      	str	r4, [sp, #96]	@ 0x60
 8007214:	9517      	str	r5, [sp, #92]	@ 0x5c
 8007216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007218:	9216      	str	r2, [sp, #88]	@ 0x58
 800721a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800721c:	9215      	str	r2, [sp, #84]	@ 0x54
 800721e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007220:	9214      	str	r2, [sp, #80]	@ 0x50
 8007222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007224:	9213      	str	r2, [sp, #76]	@ 0x4c
 8007226:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007228:	9212      	str	r2, [sp, #72]	@ 0x48
 800722a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800722c:	9211      	str	r2, [sp, #68]	@ 0x44
 800722e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007230:	9210      	str	r2, [sp, #64]	@ 0x40
 8007232:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007234:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007236:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007238:	920e      	str	r2, [sp, #56]	@ 0x38
 800723a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800723c:	920d      	str	r2, [sp, #52]	@ 0x34
 800723e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007240:	920c      	str	r2, [sp, #48]	@ 0x30
 8007242:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007244:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007246:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007248:	920a      	str	r2, [sp, #40]	@ 0x28
 800724a:	9609      	str	r6, [sp, #36]	@ 0x24
 800724c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800724e:	9308      	str	r3, [sp, #32]
 8007250:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007258:	9306      	str	r3, [sp, #24]
 800725a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800725c:	9305      	str	r3, [sp, #20]
 800725e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800726e:	9302      	str	r3, [sp, #8]
 8007270:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007274:	9301      	str	r3, [sp, #4]
 8007276:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	4663      	mov	r3, ip
 800727e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007282:	4909      	ldr	r1, [pc, #36]	@ (80072a8 <frame_processing_rs422+0x544>)
 8007284:	f006 fffa 	bl	800e27c <siprintf>
	    	        bat0 / 100, bat0 % 100, bat1 / 100, bat1 % 100,
	    	        bat2 / 100, bat2 % 100, bat3 / 100, bat3 % 100,
	    	        vin / 100, vin % 100, iin / 100, iin % 100,
	    	        vout / 100, vout % 100, iout / 100, iout % 100);
	    	Uart_sendstring(UART5, buffer_0x08);
 8007288:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800728c:	4619      	mov	r1, r3
 800728e:	4807      	ldr	r0, [pc, #28]	@ (80072ac <frame_processing_rs422+0x548>)
 8007290:	f7fa fe1c 	bl	8001ecc <Uart_sendstring>

			receive_pmuFlag = 1;
 8007294:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <frame_processing_rs422+0x54c>)
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
	    }
	    break;
 800729a:	f000 beee 	b.w	800807a <frame_processing_rs422+0x1316>
 800729e:	bf00      	nop
 80072a0:	080136f0 	.word	0x080136f0
 80072a4:	51eb851f 	.word	0x51eb851f
 80072a8:	080136f4 	.word	0x080136f4
 80072ac:	40005000 	.word	0x40005000
 80072b0:	2000003d 	.word	0x2000003d

		case 0x06:
		{

			Uart_sendstring(UART5, "\nPDU:\n");
 80072b4:	49c9      	ldr	r1, [pc, #804]	@ (80075dc <frame_processing_rs422+0x878>)
 80072b6:	48ca      	ldr	r0, [pc, #808]	@ (80075e0 <frame_processing_rs422+0x87c>)
 80072b8:	f7fa fe08 	bl	8001ecc <Uart_sendstring>
			uint8_t tec1buck_status = fsp_pkt->payload[1];
 80072bc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80072c0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	799b      	ldrb	r3, [r3, #6]
 80072c8:	f887 34d3 	strb.w	r3, [r7, #1235]	@ 0x4d3
			uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 80072cc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80072d0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	79db      	ldrb	r3, [r3, #7]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	b21a      	sxth	r2, r3
 80072dc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80072e0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	7a1b      	ldrb	r3, [r3, #8]
 80072e8:	b21b      	sxth	r3, r3
 80072ea:	4313      	orrs	r3, r2
 80072ec:	b21b      	sxth	r3, r3
 80072ee:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0

			uint8_t tec2buck_status = fsp_pkt->payload[4];
 80072f2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80072f6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	7a5b      	ldrb	r3, [r3, #9]
 80072fe:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
			uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 8007302:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007306:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	7a9b      	ldrb	r3, [r3, #10]
 800730e:	021b      	lsls	r3, r3, #8
 8007310:	b21a      	sxth	r2, r3
 8007312:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007316:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	7adb      	ldrb	r3, [r3, #11]
 800731e:	b21b      	sxth	r3, r3
 8007320:	4313      	orrs	r3, r2
 8007322:	b21b      	sxth	r3, r3
 8007324:	f8a7 34cc 	strh.w	r3, [r7, #1228]	@ 0x4cc

			uint8_t tec3buck_status = fsp_pkt->payload[7];
 8007328:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800732c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	7b1b      	ldrb	r3, [r3, #12]
 8007334:	f887 34cb 	strb.w	r3, [r7, #1227]	@ 0x4cb
			uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 8007338:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800733c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	7b5b      	ldrb	r3, [r3, #13]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	b21a      	sxth	r2, r3
 8007348:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800734c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	7b9b      	ldrb	r3, [r3, #14]
 8007354:	b21b      	sxth	r3, r3
 8007356:	4313      	orrs	r3, r2
 8007358:	b21b      	sxth	r3, r3
 800735a:	f8a7 34c8 	strh.w	r3, [r7, #1224]	@ 0x4c8

			uint8_t tec4buck_status = fsp_pkt->payload[10];
 800735e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007362:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	7bdb      	ldrb	r3, [r3, #15]
 800736a:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
			uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800736e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007372:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	7c1b      	ldrb	r3, [r3, #16]
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	b21a      	sxth	r2, r3
 800737e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007382:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	7c5b      	ldrb	r3, [r3, #17]
 800738a:	b21b      	sxth	r3, r3
 800738c:	4313      	orrs	r3, r2
 800738e:	b21b      	sxth	r3, r3
 8007390:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4

			uint8_t mcubuck_status = fsp_pkt->payload[13];
 8007394:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007398:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	7c9b      	ldrb	r3, [r3, #18]
 80073a0:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3
			uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 80073a4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80073a8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	7cdb      	ldrb	r3, [r3, #19]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	b21a      	sxth	r2, r3
 80073b4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80073b8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	7d1b      	ldrb	r3, [r3, #20]
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	4313      	orrs	r3, r2
 80073c4:	b21b      	sxth	r3, r3
 80073c6:	f8a7 34c0 	strh.w	r3, [r7, #1216]	@ 0x4c0

			uint8_t ledbuck_status = fsp_pkt->payload[16];
 80073ca:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80073ce:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	7d5b      	ldrb	r3, [r3, #21]
 80073d6:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
			uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 80073da:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80073de:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	7d9b      	ldrb	r3, [r3, #22]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	b21a      	sxth	r2, r3
 80073ea:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80073ee:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	7ddb      	ldrb	r3, [r3, #23]
 80073f6:	b21b      	sxth	r3, r3
 80073f8:	4313      	orrs	r3, r2
 80073fa:	b21b      	sxth	r3, r3
 80073fc:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc

			uint8_t cm4buck_status = fsp_pkt->payload[19];
 8007400:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007404:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	7e1b      	ldrb	r3, [r3, #24]
 800740c:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
			uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 8007410:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007414:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	7e5b      	ldrb	r3, [r3, #25]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	b21a      	sxth	r2, r3
 8007420:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007424:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	7e9b      	ldrb	r3, [r3, #26]
 800742c:	b21b      	sxth	r3, r3
 800742e:	4313      	orrs	r3, r2
 8007430:	b21b      	sxth	r3, r3
 8007432:	f8a7 34b8 	strh.w	r3, [r7, #1208]	@ 0x4b8

			uint8_t tec1_status = fsp_pkt->payload[22];
 8007436:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800743a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	7edb      	ldrb	r3, [r3, #27]
 8007442:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
			uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 8007446:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800744a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	7f1b      	ldrb	r3, [r3, #28]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	b21a      	sxth	r2, r3
 8007456:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800745a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	7f5b      	ldrb	r3, [r3, #29]
 8007462:	b21b      	sxth	r3, r3
 8007464:	4313      	orrs	r3, r2
 8007466:	b21b      	sxth	r3, r3
 8007468:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4

			uint8_t tec2_status = fsp_pkt->payload[25];
 800746c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007470:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	7f9b      	ldrb	r3, [r3, #30]
 8007478:	f887 34b3 	strb.w	r3, [r7, #1203]	@ 0x4b3
			uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800747c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007480:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	7fdb      	ldrb	r3, [r3, #31]
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	b21a      	sxth	r2, r3
 800748c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007490:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800749a:	b21b      	sxth	r3, r3
 800749c:	4313      	orrs	r3, r2
 800749e:	b21b      	sxth	r3, r3
 80074a0:	f8a7 34b0 	strh.w	r3, [r7, #1200]	@ 0x4b0

			uint8_t tec3_status = fsp_pkt->payload[28];
 80074a4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80074a8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80074b2:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
			uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 80074b6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80074ba:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	b21a      	sxth	r2, r3
 80074c8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80074cc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80074d6:	b21b      	sxth	r3, r3
 80074d8:	4313      	orrs	r3, r2
 80074da:	b21b      	sxth	r3, r3
 80074dc:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac

			uint8_t tec4_status = fsp_pkt->payload[31];
 80074e0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80074e4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074ee:	f887 34ab 	strb.w	r3, [r7, #1195]	@ 0x4ab
			uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 80074f2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80074f6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	b21a      	sxth	r2, r3
 8007504:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007508:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007512:	b21b      	sxth	r3, r3
 8007514:	4313      	orrs	r3, r2
 8007516:	b21b      	sxth	r3, r3
 8007518:	f8a7 34a8 	strh.w	r3, [r7, #1192]	@ 0x4a8

			uint8_t copc_status = fsp_pkt->payload[34];
 800751c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007520:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800752a:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
			uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800752e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007532:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	b21a      	sxth	r2, r3
 8007540:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007544:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800754e:	b21b      	sxth	r3, r3
 8007550:	4313      	orrs	r3, r2
 8007552:	b21b      	sxth	r3, r3
 8007554:	f8a7 34a4 	strh.w	r3, [r7, #1188]	@ 0x4a4

			uint8_t iou_status = fsp_pkt->payload[37];
 8007558:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800755c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8007566:	f887 34a3 	strb.w	r3, [r7, #1187]	@ 0x4a3
			uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800756a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800756e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	b21a      	sxth	r2, r3
 800757c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007580:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800758a:	b21b      	sxth	r3, r3
 800758c:	4313      	orrs	r3, r2
 800758e:	b21b      	sxth	r3, r3
 8007590:	f8a7 34a0 	strh.w	r3, [r7, #1184]	@ 0x4a0

			uint8_t rgb_status = fsp_pkt->payload[40];
 8007594:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007598:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80075a2:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
			uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 80075a6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80075aa:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	b21a      	sxth	r2, r3
 80075b8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80075bc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80075c6:	b21b      	sxth	r3, r3
 80075c8:	4313      	orrs	r3, r2
 80075ca:	b21b      	sxth	r3, r3
 80075cc:	f8a7 349c 	strh.w	r3, [r7, #1180]	@ 0x49c

			uint8_t ir_status = fsp_pkt->payload[43];
 80075d0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80075d4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	e003      	b.n	80075e4 <frame_processing_rs422+0x880>
 80075dc:	080137e4 	.word	0x080137e4
 80075e0:	40005000 	.word	0x40005000
 80075e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80075e8:	f887 349b 	strb.w	r3, [r7, #1179]	@ 0x49b
			uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 80075ec:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80075f0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	b21a      	sxth	r2, r3
 80075fe:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007602:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800760c:	b21b      	sxth	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b21b      	sxth	r3, r3
 8007612:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498

			uint8_t cm4_status = fsp_pkt->payload[46];
 8007616:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800761a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8007624:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
			uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 8007628:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800762c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	b21a      	sxth	r2, r3
 800763a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800763e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007648:	b21b      	sxth	r3, r3
 800764a:	4313      	orrs	r3, r2
 800764c:	b21b      	sxth	r3, r3
 800764e:	f8a7 3494 	strh.w	r3, [r7, #1172]	@ 0x494

			uint8_t vin_status = fsp_pkt->payload[49];
 8007652:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007656:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007660:	f887 3493 	strb.w	r3, [r7, #1171]	@ 0x493
			uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 8007664:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007668:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	b21a      	sxth	r2, r3
 8007676:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800767a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007684:	b21b      	sxth	r3, r3
 8007686:	4313      	orrs	r3, r2
 8007688:	b21b      	sxth	r3, r3
 800768a:	f8a7 3490 	strh.w	r3, [r7, #1168]	@ 0x490

			uint8_t vbus_status = fsp_pkt->payload[52];
 800768e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007692:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800769c:	f887 348f 	strb.w	r3, [r7, #1167]	@ 0x48f
			uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 80076a0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80076a4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	b21a      	sxth	r2, r3
 80076b2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80076b6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80076c0:	b21b      	sxth	r3, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	b21b      	sxth	r3, r3
 80076c6:	f8a7 348c 	strh.w	r3, [r7, #1164]	@ 0x48c


		            char buffer_0x06[1000];
		            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 80076ca:	f897 e4d3 	ldrb.w	lr, [r7, #1235]	@ 0x4d3
 80076ce:	f8b7 84d0 	ldrh.w	r8, [r7, #1232]	@ 0x4d0
 80076d2:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80076d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076da:	f8b7 24cc 	ldrh.w	r2, [r7, #1228]	@ 0x4cc
 80076de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076e2:	f897 14cb 	ldrb.w	r1, [r7, #1227]	@ 0x4cb
 80076e6:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80076ea:	f8b7 04c8 	ldrh.w	r0, [r7, #1224]	@ 0x4c8
 80076ee:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80076f2:	f897 44c7 	ldrb.w	r4, [r7, #1223]	@ 0x4c7
 80076f6:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 80076fa:	f8b7 54c4 	ldrh.w	r5, [r7, #1220]	@ 0x4c4
 80076fe:	f8c7 5084 	str.w	r5, [r7, #132]	@ 0x84
 8007702:	f897 64c3 	ldrb.w	r6, [r7, #1219]	@ 0x4c3
 8007706:	f8c7 6080 	str.w	r6, [r7, #128]	@ 0x80
 800770a:	f8b7 c4c0 	ldrh.w	ip, [r7, #1216]	@ 0x4c0
 800770e:	4663      	mov	r3, ip
 8007710:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007712:	f897 c4bf 	ldrb.w	ip, [r7, #1215]	@ 0x4bf
 8007716:	4662      	mov	r2, ip
 8007718:	67ba      	str	r2, [r7, #120]	@ 0x78
 800771a:	f8b7 c4bc 	ldrh.w	ip, [r7, #1212]	@ 0x4bc
 800771e:	4661      	mov	r1, ip
 8007720:	6779      	str	r1, [r7, #116]	@ 0x74
 8007722:	f897 c4bb 	ldrb.w	ip, [r7, #1211]	@ 0x4bb
 8007726:	4660      	mov	r0, ip
 8007728:	6738      	str	r0, [r7, #112]	@ 0x70
 800772a:	f8b7 c4b8 	ldrh.w	ip, [r7, #1208]	@ 0x4b8
 800772e:	4664      	mov	r4, ip
 8007730:	66fc      	str	r4, [r7, #108]	@ 0x6c
 8007732:	f897 c4b7 	ldrb.w	ip, [r7, #1207]	@ 0x4b7
 8007736:	4665      	mov	r5, ip
 8007738:	66bd      	str	r5, [r7, #104]	@ 0x68
 800773a:	f8b7 c4b4 	ldrh.w	ip, [r7, #1204]	@ 0x4b4
 800773e:	4666      	mov	r6, ip
 8007740:	667e      	str	r6, [r7, #100]	@ 0x64
 8007742:	f897 c4b3 	ldrb.w	ip, [r7, #1203]	@ 0x4b3
 8007746:	4663      	mov	r3, ip
 8007748:	663b      	str	r3, [r7, #96]	@ 0x60
 800774a:	f8b7 c4b0 	ldrh.w	ip, [r7, #1200]	@ 0x4b0
 800774e:	4662      	mov	r2, ip
 8007750:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007752:	f897 c4af 	ldrb.w	ip, [r7, #1199]	@ 0x4af
 8007756:	4661      	mov	r1, ip
 8007758:	65b9      	str	r1, [r7, #88]	@ 0x58
 800775a:	f8b7 c4ac 	ldrh.w	ip, [r7, #1196]	@ 0x4ac
 800775e:	4660      	mov	r0, ip
 8007760:	6578      	str	r0, [r7, #84]	@ 0x54
 8007762:	f897 c4ab 	ldrb.w	ip, [r7, #1195]	@ 0x4ab
 8007766:	4664      	mov	r4, ip
 8007768:	653c      	str	r4, [r7, #80]	@ 0x50
 800776a:	f8b7 c4a8 	ldrh.w	ip, [r7, #1192]	@ 0x4a8
 800776e:	4665      	mov	r5, ip
 8007770:	64fd      	str	r5, [r7, #76]	@ 0x4c
 8007772:	f897 c4a7 	ldrb.w	ip, [r7, #1191]	@ 0x4a7
 8007776:	4666      	mov	r6, ip
 8007778:	64be      	str	r6, [r7, #72]	@ 0x48
 800777a:	f8b7 c4a4 	ldrh.w	ip, [r7, #1188]	@ 0x4a4
 800777e:	4663      	mov	r3, ip
 8007780:	647b      	str	r3, [r7, #68]	@ 0x44
 8007782:	f897 c4a3 	ldrb.w	ip, [r7, #1187]	@ 0x4a3
 8007786:	4662      	mov	r2, ip
 8007788:	643a      	str	r2, [r7, #64]	@ 0x40
 800778a:	f8b7 c4a0 	ldrh.w	ip, [r7, #1184]	@ 0x4a0
 800778e:	4661      	mov	r1, ip
 8007790:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007792:	f897 c49f 	ldrb.w	ip, [r7, #1183]	@ 0x49f
 8007796:	4660      	mov	r0, ip
 8007798:	63b8      	str	r0, [r7, #56]	@ 0x38
 800779a:	f8b7 c49c 	ldrh.w	ip, [r7, #1180]	@ 0x49c
 800779e:	4664      	mov	r4, ip
 80077a0:	637c      	str	r4, [r7, #52]	@ 0x34
 80077a2:	f897 c49b 	ldrb.w	ip, [r7, #1179]	@ 0x49b
 80077a6:	4665      	mov	r5, ip
 80077a8:	633d      	str	r5, [r7, #48]	@ 0x30
 80077aa:	f8b7 6498 	ldrh.w	r6, [r7, #1176]	@ 0x498
 80077ae:	f897 5497 	ldrb.w	r5, [r7, #1175]	@ 0x497
 80077b2:	f8b7 4494 	ldrh.w	r4, [r7, #1172]	@ 0x494
 80077b6:	f897 0493 	ldrb.w	r0, [r7, #1171]	@ 0x493
 80077ba:	f8b7 1490 	ldrh.w	r1, [r7, #1168]	@ 0x490
 80077be:	f897 248f 	ldrb.w	r2, [r7, #1167]	@ 0x48f
 80077c2:	f8b7 348c 	ldrh.w	r3, [r7, #1164]	@ 0x48c
 80077c6:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 80077ca:	9321      	str	r3, [sp, #132]	@ 0x84
 80077cc:	9220      	str	r2, [sp, #128]	@ 0x80
 80077ce:	911f      	str	r1, [sp, #124]	@ 0x7c
 80077d0:	901e      	str	r0, [sp, #120]	@ 0x78
 80077d2:	941d      	str	r4, [sp, #116]	@ 0x74
 80077d4:	951c      	str	r5, [sp, #112]	@ 0x70
 80077d6:	961b      	str	r6, [sp, #108]	@ 0x6c
 80077d8:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 80077da:	951a      	str	r5, [sp, #104]	@ 0x68
 80077dc:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80077de:	9419      	str	r4, [sp, #100]	@ 0x64
 80077e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077e2:	9018      	str	r0, [sp, #96]	@ 0x60
 80077e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077e6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80077e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077ea:	9216      	str	r2, [sp, #88]	@ 0x58
 80077ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80077f0:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 80077f2:	9614      	str	r6, [sp, #80]	@ 0x50
 80077f4:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 80077f6:	9513      	str	r5, [sp, #76]	@ 0x4c
 80077f8:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 80077fa:	9412      	str	r4, [sp, #72]	@ 0x48
 80077fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80077fe:	9011      	str	r0, [sp, #68]	@ 0x44
 8007800:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007802:	9110      	str	r1, [sp, #64]	@ 0x40
 8007804:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007806:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800780a:	930e      	str	r3, [sp, #56]	@ 0x38
 800780c:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 800780e:	960d      	str	r6, [sp, #52]	@ 0x34
 8007810:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 8007812:	950c      	str	r5, [sp, #48]	@ 0x30
 8007814:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8007816:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007818:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800781a:	900a      	str	r0, [sp, #40]	@ 0x28
 800781c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800781e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007820:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007822:	9208      	str	r2, [sp, #32]
 8007824:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	f8d7 6080 	ldr.w	r6, [r7, #128]	@ 0x80
 800782c:	9606      	str	r6, [sp, #24]
 800782e:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 8007832:	9505      	str	r5, [sp, #20]
 8007834:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 8007838:	9404      	str	r4, [sp, #16]
 800783a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800783e:	9003      	str	r0, [sp, #12]
 8007840:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007844:	9102      	str	r1, [sp, #8]
 8007846:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800784a:	9201      	str	r2, [sp, #4]
 800784c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	4643      	mov	r3, r8
 8007854:	4672      	mov	r2, lr
 8007856:	49af      	ldr	r1, [pc, #700]	@ (8007b14 <frame_processing_rs422+0xdb0>)
 8007858:	4660      	mov	r0, ip
 800785a:	f006 fd0f 	bl	800e27c <siprintf>
		                ir_status, ir_current,
		                cm4_status, cm4_current,
		                vin_status, vin_voltage,
		                vbus_status, vbus_voltage);

		            Uart_sendstring(UART5, buffer_0x06);
 800785e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007862:	4619      	mov	r1, r3
 8007864:	48ac      	ldr	r0, [pc, #688]	@ (8007b18 <frame_processing_rs422+0xdb4>)
 8007866:	f7fa fb31 	bl	8001ecc <Uart_sendstring>
					receive_pduFlag = 1;
 800786a:	4bac      	ldr	r3, [pc, #688]	@ (8007b1c <frame_processing_rs422+0xdb8>)
 800786c:	2201      	movs	r2, #1
 800786e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007870:	f000 bc03 	b.w	800807a <frame_processing_rs422+0x1316>


		case 0x13:
		{
			Uart_sendstring(UART5, "\nIOU:\n");
 8007874:	49aa      	ldr	r1, [pc, #680]	@ (8007b20 <frame_processing_rs422+0xdbc>)
 8007876:	48a8      	ldr	r0, [pc, #672]	@ (8007b18 <frame_processing_rs422+0xdb4>)
 8007878:	f7fa fb28 	bl	8001ecc <Uart_sendstring>
			int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800787c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007880:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	799b      	ldrb	r3, [r3, #6]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b21a      	sxth	r2, r3
 800788c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007890:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	79db      	ldrb	r3, [r3, #7]
 8007898:	b21b      	sxth	r3, r3
 800789a:	4313      	orrs	r3, r2
 800789c:	f8a7 350e 	strh.w	r3, [r7, #1294]	@ 0x50e
			int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 80078a0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80078a4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	7a1b      	ldrb	r3, [r3, #8]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	b21a      	sxth	r2, r3
 80078b0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80078b4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	7a5b      	ldrb	r3, [r3, #9]
 80078bc:	b21b      	sxth	r3, r3
 80078be:	4313      	orrs	r3, r2
 80078c0:	f8a7 350c 	strh.w	r3, [r7, #1292]	@ 0x50c
			int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 80078c4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80078c8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	7a9b      	ldrb	r3, [r3, #10]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	b21a      	sxth	r2, r3
 80078d4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80078d8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	7adb      	ldrb	r3, [r3, #11]
 80078e0:	b21b      	sxth	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8a7 350a 	strh.w	r3, [r7, #1290]	@ 0x50a
			int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 80078e8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80078ec:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	7b1b      	ldrb	r3, [r3, #12]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	b21a      	sxth	r2, r3
 80078f8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80078fc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	7b5b      	ldrb	r3, [r3, #13]
 8007904:	b21b      	sxth	r3, r3
 8007906:	4313      	orrs	r3, r2
 8007908:	f8a7 3508 	strh.w	r3, [r7, #1288]	@ 0x508

			int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800790c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007910:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	7b9b      	ldrb	r3, [r3, #14]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	b21a      	sxth	r2, r3
 800791c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007920:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	7bdb      	ldrb	r3, [r3, #15]
 8007928:	b21b      	sxth	r3, r3
 800792a:	4313      	orrs	r3, r2
 800792c:	f8a7 3506 	strh.w	r3, [r7, #1286]	@ 0x506
			int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8007930:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007934:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	7c1b      	ldrb	r3, [r3, #16]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	b21a      	sxth	r2, r3
 8007940:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007944:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	7c5b      	ldrb	r3, [r3, #17]
 800794c:	b21b      	sxth	r3, r3
 800794e:	4313      	orrs	r3, r2
 8007950:	f8a7 3504 	strh.w	r3, [r7, #1284]	@ 0x504

			int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8007954:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007958:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	7c9b      	ldrb	r3, [r3, #18]
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	b21a      	sxth	r2, r3
 8007964:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007968:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	7cdb      	ldrb	r3, [r3, #19]
 8007970:	b21b      	sxth	r3, r3
 8007972:	4313      	orrs	r3, r2
 8007974:	f8a7 3502 	strh.w	r3, [r7, #1282]	@ 0x502

			int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8007978:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800797c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	7d1b      	ldrb	r3, [r3, #20]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	b21a      	sxth	r2, r3
 8007988:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800798c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	7d5b      	ldrb	r3, [r3, #21]
 8007994:	b21b      	sxth	r3, r3
 8007996:	4313      	orrs	r3, r2
 8007998:	f8a7 3500 	strh.w	r3, [r7, #1280]	@ 0x500
			int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800799c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80079a0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	7d9b      	ldrb	r3, [r3, #22]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	b21a      	sxth	r2, r3
 80079ac:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80079b0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	7ddb      	ldrb	r3, [r3, #23]
 80079b8:	b21b      	sxth	r3, r3
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8a7 34fe 	strh.w	r3, [r7, #1278]	@ 0x4fe
			int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 80079c0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80079c4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	7e1b      	ldrb	r3, [r3, #24]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	b21a      	sxth	r2, r3
 80079d0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80079d4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	7e5b      	ldrb	r3, [r3, #25]
 80079dc:	b21b      	sxth	r3, r3
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8a7 34fc 	strh.w	r3, [r7, #1276]	@ 0x4fc
			int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 80079e4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80079e8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	7e9b      	ldrb	r3, [r3, #26]
 80079f0:	021b      	lsls	r3, r3, #8
 80079f2:	b21a      	sxth	r2, r3
 80079f4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80079f8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	7edb      	ldrb	r3, [r3, #27]
 8007a00:	b21b      	sxth	r3, r3
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8a7 34fa 	strh.w	r3, [r7, #1274]	@ 0x4fa

			uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 8007a08:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007a0c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	7f1b      	ldrb	r3, [r3, #28]
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	b21a      	sxth	r2, r3
 8007a18:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007a1c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	7f5b      	ldrb	r3, [r3, #29]
 8007a24:	b21b      	sxth	r3, r3
 8007a26:	4313      	orrs	r3, r2
 8007a28:	b21b      	sxth	r3, r3
 8007a2a:	f8a7 34f8 	strh.w	r3, [r7, #1272]	@ 0x4f8
			uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 8007a2e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007a32:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	7f9b      	ldrb	r3, [r3, #30]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	b21a      	sxth	r2, r3
 8007a3e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007a42:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	7fdb      	ldrb	r3, [r3, #31]
 8007a4a:	b21b      	sxth	r3, r3
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	b21b      	sxth	r3, r3
 8007a50:	f8a7 34f6 	strh.w	r3, [r7, #1270]	@ 0x4f6
			uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 8007a54:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007a58:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	b21a      	sxth	r2, r3
 8007a66:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007a6a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a74:	b21b      	sxth	r3, r3
 8007a76:	4313      	orrs	r3, r2
 8007a78:	b21b      	sxth	r3, r3
 8007a7a:	f8a7 34f4 	strh.w	r3, [r7, #1268]	@ 0x4f4
			uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 8007a7e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007a82:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	b21a      	sxth	r2, r3
 8007a90:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007a94:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007a9e:	b21b      	sxth	r3, r3
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	b21b      	sxth	r3, r3
 8007aa4:	f8a7 34f2 	strh.w	r3, [r7, #1266]	@ 0x4f2

			uint8_t neo_led_r = fsp_pkt->payload[31];
 8007aa8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007aac:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ab6:	f887 34f1 	strb.w	r3, [r7, #1265]	@ 0x4f1
			uint8_t neo_led_g = fsp_pkt->payload[32];
 8007aba:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007abe:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ac8:	f887 34f0 	strb.w	r3, [r7, #1264]	@ 0x4f0
			uint8_t neo_led_b = fsp_pkt->payload[33];
 8007acc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007ad0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007ada:	f887 34ef 	strb.w	r3, [r7, #1263]	@ 0x4ef
			uint8_t neo_led_w = fsp_pkt->payload[34];
 8007ade:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007ae2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007aec:	f887 34ee 	strb.w	r3, [r7, #1262]	@ 0x4ee

			uint8_t ir_led_duty = fsp_pkt->payload[35];
 8007af0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007af4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007afe:	f887 34ed 	strb.w	r3, [r7, #1261]	@ 0x4ed

			char buffer_0x13[1000];
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007b02:	f9b7 350e 	ldrsh.w	r3, [r7, #1294]	@ 0x50e
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da0e      	bge.n	8007b28 <frame_processing_rs422+0xdc4>
 8007b0a:	4b06      	ldr	r3, [pc, #24]	@ (8007b24 <frame_processing_rs422+0xdc0>)
 8007b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b10:	e00d      	b.n	8007b2e <frame_processing_rs422+0xdca>
 8007b12:	bf00      	nop
 8007b14:	080137ec 	.word	0x080137ec
 8007b18:	40005000 	.word	0x40005000
 8007b1c:	2000003c 	.word	0x2000003c
 8007b20:	08013a34 	.word	0x08013a34
 8007b24:	080136ec 	.word	0x080136ec
 8007b28:	4bb0      	ldr	r3, [pc, #704]	@ (8007dec <frame_processing_rs422+0x1088>)
 8007b2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			                     "Sensor Temp: %s%d.%d\n"
			                     "Setpoint Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
			                     "TEC Voltage: Ch0=%d.%02d, Ch1=%d.%02d, Ch2=%d.%02d, Ch3=%d.%02d\n"
			                     "Neo LED: R=%u, G=%u, B=%u, W=%u\n"
			                     "IR LED Duty: %u%%]\n",
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 8007b2e:	f9b7 350e 	ldrsh.w	r3, [r7, #1294]	@ 0x50e
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bfb8      	it	lt
 8007b36:	425b      	neglt	r3, r3
 8007b38:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007b3a:	4aad      	ldr	r2, [pc, #692]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8007b40:	1092      	asrs	r2, r2, #2
 8007b42:	17db      	asrs	r3, r3, #31
 8007b44:	eba2 0e03 	sub.w	lr, r2, r3
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 8007b48:	f9b7 350e 	ldrsh.w	r3, [r7, #1294]	@ 0x50e
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bfb8      	it	lt
 8007b50:	425b      	neglt	r3, r3
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007b56:	4ba6      	ldr	r3, [pc, #664]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007b58:	fb83 1302 	smull	r1, r3, r3, r2
 8007b5c:	1099      	asrs	r1, r3, #2
 8007b5e:	17d3      	asrs	r3, r2, #31
 8007b60:	1acb      	subs	r3, r1, r3
 8007b62:	4619      	mov	r1, r3
 8007b64:	460b      	mov	r3, r1
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	440b      	add	r3, r1
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b70:	f9b7 350c 	ldrsh.w	r3, [r7, #1292]	@ 0x50c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da03      	bge.n	8007b80 <frame_processing_rs422+0xe1c>
 8007b78:	4b9e      	ldr	r3, [pc, #632]	@ (8007df4 <frame_processing_rs422+0x1090>)
 8007b7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b7e:	e002      	b.n	8007b86 <frame_processing_rs422+0xe22>
 8007b80:	4b9a      	ldr	r3, [pc, #616]	@ (8007dec <frame_processing_rs422+0x1088>)
 8007b82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8007b86:	f9b7 350c 	ldrsh.w	r3, [r7, #1292]	@ 0x50c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bfb8      	it	lt
 8007b8e:	425b      	neglt	r3, r3
 8007b90:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007b92:	4a97      	ldr	r2, [pc, #604]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007b94:	fb82 1203 	smull	r1, r2, r2, r3
 8007b98:	1092      	asrs	r2, r2, #2
 8007b9a:	17db      	asrs	r3, r3, #31
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8007ba0:	f9b7 350c 	ldrsh.w	r3, [r7, #1292]	@ 0x50c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bfb8      	it	lt
 8007ba8:	425b      	neglt	r3, r3
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007bae:	4b90      	ldr	r3, [pc, #576]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007bb0:	fb83 1302 	smull	r1, r3, r3, r2
 8007bb4:	1099      	asrs	r1, r3, #2
 8007bb6:	17d3      	asrs	r3, r2, #31
 8007bb8:	1acb      	subs	r3, r1, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007bc8:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	da03      	bge.n	8007bd8 <frame_processing_rs422+0xe74>
 8007bd0:	4b88      	ldr	r3, [pc, #544]	@ (8007df4 <frame_processing_rs422+0x1090>)
 8007bd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bd6:	e002      	b.n	8007bde <frame_processing_rs422+0xe7a>
 8007bd8:	4b84      	ldr	r3, [pc, #528]	@ (8007dec <frame_processing_rs422+0x1088>)
 8007bda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 8007bde:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfb8      	it	lt
 8007be6:	425b      	neglt	r3, r3
 8007be8:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007bea:	4a81      	ldr	r2, [pc, #516]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007bec:	fb82 1203 	smull	r1, r2, r2, r3
 8007bf0:	1092      	asrs	r2, r2, #2
 8007bf2:	17db      	asrs	r3, r3, #31
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	663b      	str	r3, [r7, #96]	@ 0x60
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 8007bf8:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfb8      	it	lt
 8007c00:	425b      	neglt	r3, r3
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007c06:	4b7a      	ldr	r3, [pc, #488]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007c08:	fb83 1302 	smull	r1, r3, r3, r2
 8007c0c:	1099      	asrs	r1, r3, #2
 8007c0e:	17d3      	asrs	r3, r2, #31
 8007c10:	1acb      	subs	r3, r1, r3
 8007c12:	4619      	mov	r1, r3
 8007c14:	460b      	mov	r3, r1
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c20:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	da03      	bge.n	8007c30 <frame_processing_rs422+0xecc>
 8007c28:	4b72      	ldr	r3, [pc, #456]	@ (8007df4 <frame_processing_rs422+0x1090>)
 8007c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c2e:	e002      	b.n	8007c36 <frame_processing_rs422+0xed2>
 8007c30:	4b6e      	ldr	r3, [pc, #440]	@ (8007dec <frame_processing_rs422+0x1088>)
 8007c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 8007c36:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bfb8      	it	lt
 8007c3e:	425b      	neglt	r3, r3
 8007c40:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007c42:	4a6b      	ldr	r2, [pc, #428]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007c44:	fb82 1203 	smull	r1, r2, r2, r3
 8007c48:	1092      	asrs	r2, r2, #2
 8007c4a:	17db      	asrs	r3, r3, #31
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 8007c50:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfb8      	it	lt
 8007c58:	425b      	neglt	r3, r3
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007c5e:	4b64      	ldr	r3, [pc, #400]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007c60:	fb83 2301 	smull	r2, r3, r3, r1
 8007c64:	109a      	asrs	r2, r3, #2
 8007c66:	17cb      	asrs	r3, r1, #31
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	1acb      	subs	r3, r1, r3
 8007c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c78:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da03      	bge.n	8007c88 <frame_processing_rs422+0xf24>
 8007c80:	4b5c      	ldr	r3, [pc, #368]	@ (8007df4 <frame_processing_rs422+0x1090>)
 8007c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c86:	e002      	b.n	8007c8e <frame_processing_rs422+0xf2a>
 8007c88:	4b58      	ldr	r3, [pc, #352]	@ (8007dec <frame_processing_rs422+0x1088>)
 8007c8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 8007c8e:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bfb8      	it	lt
 8007c96:	425b      	neglt	r3, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007c9c:	4b54      	ldr	r3, [pc, #336]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007c9e:	fb83 2301 	smull	r2, r3, r3, r1
 8007ca2:	109a      	asrs	r2, r3, #2
 8007ca4:	17cb      	asrs	r3, r1, #31
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	653b      	str	r3, [r7, #80]	@ 0x50
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 8007caa:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfb8      	it	lt
 8007cb2:	425b      	neglt	r3, r3
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007cba:	fb83 2301 	smull	r2, r3, r3, r1
 8007cbe:	109a      	asrs	r2, r3, #2
 8007cc0:	17cb      	asrs	r3, r1, #31
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	1acb      	subs	r3, r1, r3
 8007cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd2:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da03      	bge.n	8007ce2 <frame_processing_rs422+0xf7e>
 8007cda:	4b46      	ldr	r3, [pc, #280]	@ (8007df4 <frame_processing_rs422+0x1090>)
 8007cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ce0:	e002      	b.n	8007ce8 <frame_processing_rs422+0xf84>
 8007ce2:	4b42      	ldr	r3, [pc, #264]	@ (8007dec <frame_processing_rs422+0x1088>)
 8007ce4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8007ce8:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bfb8      	it	lt
 8007cf0:	425b      	neglt	r3, r3
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007cf8:	fb83 2301 	smull	r2, r3, r3, r1
 8007cfc:	109a      	asrs	r2, r3, #2
 8007cfe:	17cb      	asrs	r3, r1, #31
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	64bb      	str	r3, [r7, #72]	@ 0x48
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8007d04:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bfb8      	it	lt
 8007d0c:	425b      	neglt	r3, r3
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007d12:	4b37      	ldr	r3, [pc, #220]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007d14:	fb83 2301 	smull	r2, r3, r3, r1
 8007d18:	109a      	asrs	r2, r3, #2
 8007d1a:	17cb      	asrs	r3, r1, #31
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	1acb      	subs	r3, r1, r3
 8007d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d2c:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	da03      	bge.n	8007d3c <frame_processing_rs422+0xfd8>
 8007d34:	4b2f      	ldr	r3, [pc, #188]	@ (8007df4 <frame_processing_rs422+0x1090>)
 8007d36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d3a:	e002      	b.n	8007d42 <frame_processing_rs422+0xfde>
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007dec <frame_processing_rs422+0x1088>)
 8007d3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 8007d42:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bfb8      	it	lt
 8007d4a:	425b      	neglt	r3, r3
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007d50:	4b27      	ldr	r3, [pc, #156]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007d52:	fb83 2301 	smull	r2, r3, r3, r1
 8007d56:	109a      	asrs	r2, r3, #2
 8007d58:	17cb      	asrs	r3, r1, #31
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	643b      	str	r3, [r7, #64]	@ 0x40
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 8007d5e:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfb8      	it	lt
 8007d66:	425b      	neglt	r3, r3
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007d6c:	4b20      	ldr	r3, [pc, #128]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007d6e:	fb83 2301 	smull	r2, r3, r3, r1
 8007d72:	109a      	asrs	r2, r3, #2
 8007d74:	17cb      	asrs	r3, r1, #31
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	1acb      	subs	r3, r1, r3
 8007d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d86:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da02      	bge.n	8007d94 <frame_processing_rs422+0x1030>
 8007d8e:	4b19      	ldr	r3, [pc, #100]	@ (8007df4 <frame_processing_rs422+0x1090>)
 8007d90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d92:	e001      	b.n	8007d98 <frame_processing_rs422+0x1034>
 8007d94:	4b15      	ldr	r3, [pc, #84]	@ (8007dec <frame_processing_rs422+0x1088>)
 8007d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 8007d98:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bfb8      	it	lt
 8007da0:	425b      	neglt	r3, r3
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007da6:	4b12      	ldr	r3, [pc, #72]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007da8:	fb83 2301 	smull	r2, r3, r3, r1
 8007dac:	109a      	asrs	r2, r3, #2
 8007dae:	17cb      	asrs	r3, r1, #31
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	63bb      	str	r3, [r7, #56]	@ 0x38
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 8007db4:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bfb8      	it	lt
 8007dbc:	425b      	neglt	r3, r3
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007df0 <frame_processing_rs422+0x108c>)
 8007dc4:	fb83 2301 	smull	r2, r3, r3, r1
 8007dc8:	109a      	asrs	r2, r3, #2
 8007dca:	17cb      	asrs	r3, r1, #31
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	1acb      	subs	r3, r1, r3
 8007dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ddc:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	da09      	bge.n	8007df8 <frame_processing_rs422+0x1094>
 8007de4:	4b03      	ldr	r3, [pc, #12]	@ (8007df4 <frame_processing_rs422+0x1090>)
 8007de6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007de8:	e008      	b.n	8007dfc <frame_processing_rs422+0x1098>
 8007dea:	bf00      	nop
 8007dec:	080136f0 	.word	0x080136f0
 8007df0:	66666667 	.word	0x66666667
 8007df4:	080136ec 	.word	0x080136ec
 8007df8:	4ba3      	ldr	r3, [pc, #652]	@ (8008088 <frame_processing_rs422+0x1324>)
 8007dfa:	67bb      	str	r3, [r7, #120]	@ 0x78
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 8007dfc:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfb8      	it	lt
 8007e04:	425b      	neglt	r3, r3
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007e0a:	4ba0      	ldr	r3, [pc, #640]	@ (800808c <frame_processing_rs422+0x1328>)
 8007e0c:	fb83 2301 	smull	r2, r3, r3, r1
 8007e10:	109a      	asrs	r2, r3, #2
 8007e12:	17cb      	asrs	r3, r1, #31
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	633b      	str	r3, [r7, #48]	@ 0x30
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 8007e18:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfb8      	it	lt
 8007e20:	425b      	neglt	r3, r3
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007e26:	4b99      	ldr	r3, [pc, #612]	@ (800808c <frame_processing_rs422+0x1328>)
 8007e28:	fb83 2301 	smull	r2, r3, r3, r1
 8007e2c:	109a      	asrs	r2, r3, #2
 8007e2e:	17cb      	asrs	r3, r1, #31
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	461a      	mov	r2, r3
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	1acb      	subs	r3, r1, r3
 8007e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e40:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	da02      	bge.n	8007e4e <frame_processing_rs422+0x10ea>
 8007e48:	4b91      	ldr	r3, [pc, #580]	@ (8008090 <frame_processing_rs422+0x132c>)
 8007e4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e4c:	e001      	b.n	8007e52 <frame_processing_rs422+0x10ee>
 8007e4e:	4b8e      	ldr	r3, [pc, #568]	@ (8008088 <frame_processing_rs422+0x1324>)
 8007e50:	677b      	str	r3, [r7, #116]	@ 0x74
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 8007e52:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bfb8      	it	lt
 8007e5a:	425b      	neglt	r3, r3
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007e60:	4b8a      	ldr	r3, [pc, #552]	@ (800808c <frame_processing_rs422+0x1328>)
 8007e62:	fb83 2301 	smull	r2, r3, r3, r1
 8007e66:	109a      	asrs	r2, r3, #2
 8007e68:	17cb      	asrs	r3, r1, #31
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 8007e6e:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfb8      	it	lt
 8007e76:	425b      	neglt	r3, r3
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007e7c:	4b83      	ldr	r3, [pc, #524]	@ (800808c <frame_processing_rs422+0x1328>)
 8007e7e:	fb83 2301 	smull	r2, r3, r3, r1
 8007e82:	109a      	asrs	r2, r3, #2
 8007e84:	17cb      	asrs	r3, r1, #31
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	1acb      	subs	r3, r1, r3
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e96:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da02      	bge.n	8007ea4 <frame_processing_rs422+0x1140>
 8007e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8008090 <frame_processing_rs422+0x132c>)
 8007ea0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ea2:	e001      	b.n	8007ea8 <frame_processing_rs422+0x1144>
 8007ea4:	4b78      	ldr	r3, [pc, #480]	@ (8008088 <frame_processing_rs422+0x1324>)
 8007ea6:	673b      	str	r3, [r7, #112]	@ 0x70
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8007ea8:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bfb8      	it	lt
 8007eb0:	425b      	neglt	r3, r3
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007eb6:	4b75      	ldr	r3, [pc, #468]	@ (800808c <frame_processing_rs422+0x1328>)
 8007eb8:	fb83 2301 	smull	r2, r3, r3, r1
 8007ebc:	109a      	asrs	r2, r3, #2
 8007ebe:	17cb      	asrs	r3, r1, #31
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	623b      	str	r3, [r7, #32]
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8007ec4:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bfb8      	it	lt
 8007ecc:	425b      	neglt	r3, r3
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800808c <frame_processing_rs422+0x1328>)
 8007ed4:	fb83 2301 	smull	r2, r3, r3, r1
 8007ed8:	109a      	asrs	r2, r3, #2
 8007eda:	17cb      	asrs	r3, r1, #31
 8007edc:	1ad6      	subs	r6, r2, r3
 8007ede:	4633      	mov	r3, r6
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4433      	add	r3, r6
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	1ace      	subs	r6, r1, r3
 8007ee8:	f8b7 24f8 	ldrh.w	r2, [r7, #1272]	@ 0x4f8
 8007eec:	4b69      	ldr	r3, [pc, #420]	@ (8008094 <frame_processing_rs422+0x1330>)
 8007eee:	fba3 2302 	umull	r2, r3, r3, r2
 8007ef2:	095b      	lsrs	r3, r3, #5
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	f8b7 14f8 	ldrh.w	r1, [r7, #1272]	@ 0x4f8
 8007efc:	4b65      	ldr	r3, [pc, #404]	@ (8008094 <frame_processing_rs422+0x1330>)
 8007efe:	fba3 2301 	umull	r2, r3, r3, r1
 8007f02:	095a      	lsrs	r2, r3, #5
 8007f04:	2364      	movs	r3, #100	@ 0x64
 8007f06:	fb02 f303 	mul.w	r3, r2, r3
 8007f0a:	1acb      	subs	r3, r1, r3
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	f8b7 24f6 	ldrh.w	r2, [r7, #1270]	@ 0x4f6
 8007f14:	4b5f      	ldr	r3, [pc, #380]	@ (8008094 <frame_processing_rs422+0x1330>)
 8007f16:	fba3 2302 	umull	r2, r3, r3, r2
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	f8b7 14f6 	ldrh.w	r1, [r7, #1270]	@ 0x4f6
 8007f24:	4b5b      	ldr	r3, [pc, #364]	@ (8008094 <frame_processing_rs422+0x1330>)
 8007f26:	fba3 2301 	umull	r2, r3, r3, r1
 8007f2a:	095a      	lsrs	r2, r3, #5
 8007f2c:	2364      	movs	r3, #100	@ 0x64
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	1acb      	subs	r3, r1, r3
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	@ 0x4f4
 8007f3c:	4b55      	ldr	r3, [pc, #340]	@ (8008094 <frame_processing_rs422+0x1330>)
 8007f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f42:	095b      	lsrs	r3, r3, #5
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	f8b7 14f4 	ldrh.w	r1, [r7, #1268]	@ 0x4f4
 8007f4c:	4b51      	ldr	r3, [pc, #324]	@ (8008094 <frame_processing_rs422+0x1330>)
 8007f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f52:	095a      	lsrs	r2, r3, #5
 8007f54:	2364      	movs	r3, #100	@ 0x64
 8007f56:	fb02 f303 	mul.w	r3, r2, r3
 8007f5a:	1acb      	subs	r3, r1, r3
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	60bb      	str	r3, [r7, #8]
 8007f60:	f8b7 24f2 	ldrh.w	r2, [r7, #1266]	@ 0x4f2
 8007f64:	4b4b      	ldr	r3, [pc, #300]	@ (8008094 <frame_processing_rs422+0x1330>)
 8007f66:	fba3 2302 	umull	r2, r3, r3, r2
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	f8b7 14f2 	ldrh.w	r1, [r7, #1266]	@ 0x4f2
 8007f74:	4b47      	ldr	r3, [pc, #284]	@ (8008094 <frame_processing_rs422+0x1330>)
 8007f76:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7a:	095a      	lsrs	r2, r3, #5
 8007f7c:	2364      	movs	r3, #100	@ 0x64
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	1acb      	subs	r3, r1, r3
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	461d      	mov	r5, r3
 8007f88:	f897 44f1 	ldrb.w	r4, [r7, #1265]	@ 0x4f1
 8007f8c:	f897 04f0 	ldrb.w	r0, [r7, #1264]	@ 0x4f0
 8007f90:	f897 14ef 	ldrb.w	r1, [r7, #1263]	@ 0x4ef
 8007f94:	f897 24ee 	ldrb.w	r2, [r7, #1262]	@ 0x4ee
 8007f98:	f897 34ed 	ldrb.w	r3, [r7, #1261]	@ 0x4ed
 8007f9c:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8007fa0:	932b      	str	r3, [sp, #172]	@ 0xac
 8007fa2:	922a      	str	r2, [sp, #168]	@ 0xa8
 8007fa4:	9129      	str	r1, [sp, #164]	@ 0xa4
 8007fa6:	9028      	str	r0, [sp, #160]	@ 0xa0
 8007fa8:	9427      	str	r4, [sp, #156]	@ 0x9c
 8007faa:	9526      	str	r5, [sp, #152]	@ 0x98
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	9225      	str	r2, [sp, #148]	@ 0x94
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	9224      	str	r2, [sp, #144]	@ 0x90
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	9222      	str	r2, [sp, #136]	@ 0x88
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	9221      	str	r2, [sp, #132]	@ 0x84
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	9220      	str	r2, [sp, #128]	@ 0x80
 8007fc4:	69fa      	ldr	r2, [r7, #28]
 8007fc6:	921f      	str	r2, [sp, #124]	@ 0x7c
 8007fc8:	961e      	str	r6, [sp, #120]	@ 0x78
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	931d      	str	r3, [sp, #116]	@ 0x74
 8007fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fd0:	931c      	str	r3, [sp, #112]	@ 0x70
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8007fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe0:	9318      	str	r3, [sp, #96]	@ 0x60
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fe8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fec:	9315      	str	r3, [sp, #84]	@ 0x54
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	9314      	str	r3, [sp, #80]	@ 0x50
 8007ff2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ff4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff8:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ffc:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008002:	9310      	str	r3, [sp, #64]	@ 0x40
 8008004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008006:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800800a:	930e      	str	r3, [sp, #56]	@ 0x38
 800800c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008010:	930d      	str	r3, [sp, #52]	@ 0x34
 8008012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008014:	930c      	str	r3, [sp, #48]	@ 0x30
 8008016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800801a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800801e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008022:	9309      	str	r3, [sp, #36]	@ 0x24
 8008024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008026:	9308      	str	r3, [sp, #32]
 8008028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800802c:	9307      	str	r3, [sp, #28]
 800802e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008030:	9306      	str	r3, [sp, #24]
 8008032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008034:	9305      	str	r3, [sp, #20]
 8008036:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	4673      	mov	r3, lr
 8008050:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008054:	4910      	ldr	r1, [pc, #64]	@ (8008098 <frame_processing_rs422+0x1334>)
 8008056:	4660      	mov	r0, ip
 8008058:	f006 f910 	bl	800e27c <siprintf>
			        voltage_out_tec_channel2 / 100, voltage_out_tec_channel2 % 100,
			        voltage_out_tec_channel3 / 100, voltage_out_tec_channel3 % 100,
			        neo_led_r, neo_led_g, neo_led_b, neo_led_w,
			        ir_led_duty);

			Uart_sendstring(UART5, buffer_0x13);
 800805c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8008060:	4619      	mov	r1, r3
 8008062:	480e      	ldr	r0, [pc, #56]	@ (800809c <frame_processing_rs422+0x1338>)
 8008064:	f7f9 ff32 	bl	8001ecc <Uart_sendstring>

			receive_iouFlag = 1;
 8008068:	4b0d      	ldr	r3, [pc, #52]	@ (80080a0 <frame_processing_rs422+0x133c>)
 800806a:	2201      	movs	r2, #1
 800806c:	701a      	strb	r2, [r3, #0]

		}
		break;
 800806e:	e004      	b.n	800807a <frame_processing_rs422+0x1316>


		default:
			Uart_sendstring(USART6, "Failed to get all");
 8008070:	490c      	ldr	r1, [pc, #48]	@ (80080a4 <frame_processing_rs422+0x1340>)
 8008072:	480d      	ldr	r0, [pc, #52]	@ (80080a8 <frame_processing_rs422+0x1344>)
 8008074:	f7f9 ff2a 	bl	8001ecc <Uart_sendstring>
			break;
 8008078:	bf00      	nop
	}

}
 800807a:	bf00      	nop
 800807c:	f507 67a2 	add.w	r7, r7, #1296	@ 0x510
 8008080:	46bd      	mov	sp, r7
 8008082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008086:	bf00      	nop
 8008088:	080136f0 	.word	0x080136f0
 800808c:	66666667 	.word	0x66666667
 8008090:	080136ec 	.word	0x080136ec
 8008094:	51eb851f 	.word	0x51eb851f
 8008098:	08013a3c 	.word	0x08013a3c
 800809c:	40005000 	.word	0x40005000
 80080a0:	2000003e 	.word	0x2000003e
 80080a4:	08013b84 	.word	0x08013b84
 80080a8:	40011400 	.word	0x40011400

080080ac <COPC_init>:
		COPC_task_update                // taskFunction;
	}
};

void	COPC_init(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
	Ringbuf_init();
 80080b0:	f7f9 fca4 	bl	80019fc <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 80080b4:	2001      	movs	r0, #1
 80080b6:	f002 fb0d 	bl	800a6d4 <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 80080ba:	4b02      	ldr	r3, [pc, #8]	@ (80080c4 <COPC_init+0x18>)
 80080bc:	4a02      	ldr	r2, [pc, #8]	@ (80080c8 <COPC_init+0x1c>)
 80080be:	601a      	str	r2, [r3, #0]
}
 80080c0:	bf00      	nop
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20004a5c 	.word	0x20004a5c
 80080c8:	20004961 	.word	0x20004961

080080cc <COPC_task_update>:
volatile uint8_t receiving = 0;
volatile uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
volatile uint8_t receive_index = 0;

static void COPC_task_update(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b0d0      	sub	sp, #320	@ 0x140
 80080d0:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 80080d2:	e074      	b.n	80081be <COPC_task_update+0xf2>
    {
        rxData = Uart_read(USART1);
 80080d4:	4840      	ldr	r0, [pc, #256]	@ (80081d8 <COPC_task_update+0x10c>)
 80080d6:	f7f9 fd4f 	bl	8001b78 <Uart_read>
 80080da:	4603      	mov	r3, r0
 80080dc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

//		char pos_str2[10];
//		sprintf(pos_str2, "%d", rxData);
//		Uart_sendstring(UART5, pos_str2);

        if (!receiving) {
 80080e0:	4b3e      	ldr	r3, [pc, #248]	@ (80081dc <COPC_task_update+0x110>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <COPC_task_update+0x34>
            if (rxData == FSP_PKT_SOD) {
 80080ea:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80080ee:	2bca      	cmp	r3, #202	@ 0xca
 80080f0:	d165      	bne.n	80081be <COPC_task_update+0xf2>
                receiving = 1;
 80080f2:	4b3a      	ldr	r3, [pc, #232]	@ (80081dc <COPC_task_update+0x110>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
                receive_index = 0;
 80080f8:	4b39      	ldr	r3, [pc, #228]	@ (80081e0 <COPC_task_update+0x114>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e05e      	b.n	80081be <COPC_task_update+0xf2>
            }
        } else {

            if (rxData == FSP_PKT_EOF) {
 8008100:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8008104:	2bef      	cmp	r3, #239	@ 0xef
 8008106:	d146      	bne.n	8008196 <COPC_task_update+0xca>
                receiving = 0;
 8008108:	4b34      	ldr	r3, [pc, #208]	@ (80081dc <COPC_task_update+0x110>)
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
                fsp_packet_t fsp_pkt;
                if(send_rs422){
 800810e:	4b35      	ldr	r3, [pc, #212]	@ (80081e4 <COPC_task_update+0x118>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01a      	beq.n	800814e <COPC_task_update+0x82>
					frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 8008118:	4b31      	ldr	r3, [pc, #196]	@ (80081e0 <COPC_task_update+0x114>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8008122:	4619      	mov	r1, r3
 8008124:	4830      	ldr	r0, [pc, #192]	@ (80081e8 <COPC_task_update+0x11c>)
 8008126:	f002 feff 	bl	800af28 <frame_decode_rs422>
					frame_processing_rs422(&fsp_pkt);
 800812a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fe18 	bl	8006d64 <frame_processing_rs422>
					receive_pduFlag = 1;
 8008134:	4b2d      	ldr	r3, [pc, #180]	@ (80081ec <COPC_task_update+0x120>)
 8008136:	2201      	movs	r2, #1
 8008138:	701a      	strb	r2, [r3, #0]
					receive_pmuFlag = 1;
 800813a:	4b2d      	ldr	r3, [pc, #180]	@ (80081f0 <COPC_task_update+0x124>)
 800813c:	2201      	movs	r2, #1
 800813e:	701a      	strb	r2, [r3, #0]
					receive_iouFlag = 1;
 8008140:	4b2c      	ldr	r3, [pc, #176]	@ (80081f4 <COPC_task_update+0x128>)
 8008142:	2201      	movs	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
					send_rs422 = 0;
 8008146:	4b27      	ldr	r3, [pc, #156]	@ (80081e4 <COPC_task_update+0x118>)
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e02f      	b.n	80081ae <COPC_task_update+0xe2>
                }else{
                    int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 800814e:	4b24      	ldr	r3, [pc, #144]	@ (80081e0 <COPC_task_update+0x114>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8008158:	4619      	mov	r1, r3
 800815a:	4823      	ldr	r0, [pc, #140]	@ (80081e8 <COPC_task_update+0x11c>)
 800815c:	f002 fd82 	bl	800ac64 <frame_decode>
 8008160:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                    if (ret > 0) {
 8008164:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008168:	2b00      	cmp	r3, #0
 800816a:	dd20      	ble.n	80081ae <COPC_task_update+0xe2>
                        char error_msg[50];
                        sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 800816c:	4a22      	ldr	r2, [pc, #136]	@ (80081f8 <COPC_task_update+0x12c>)
 800816e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008172:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008176:	1d3b      	adds	r3, r7, #4
 8008178:	4920      	ldr	r1, [pc, #128]	@ (80081fc <COPC_task_update+0x130>)
 800817a:	4618      	mov	r0, r3
 800817c:	f006 f87e 	bl	800e27c <siprintf>
                        Uart_sendstring(UART5, error_msg);
 8008180:	1d3b      	adds	r3, r7, #4
 8008182:	4619      	mov	r1, r3
 8008184:	481e      	ldr	r0, [pc, #120]	@ (8008200 <COPC_task_update+0x134>)
 8008186:	f7f9 fea1 	bl	8001ecc <Uart_sendstring>
                        Uart_sendstring(USART6, error_msg);
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	4619      	mov	r1, r3
 800818e:	481d      	ldr	r0, [pc, #116]	@ (8008204 <COPC_task_update+0x138>)
 8008190:	f7f9 fe9c 	bl	8001ecc <Uart_sendstring>
 8008194:	e00b      	b.n	80081ae <COPC_task_update+0xe2>
                }



            }else{
            	receive_buffer[receive_index++] = rxData;
 8008196:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <COPC_task_update+0x114>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	b2d1      	uxtb	r1, r2
 80081a0:	4a0f      	ldr	r2, [pc, #60]	@ (80081e0 <COPC_task_update+0x114>)
 80081a2:	7011      	strb	r1, [r2, #0]
 80081a4:	4619      	mov	r1, r3
 80081a6:	4a10      	ldr	r2, [pc, #64]	@ (80081e8 <COPC_task_update+0x11c>)
 80081a8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80081ac:	5453      	strb	r3, [r2, r1]
            }

            if (receive_index >= FSP_PKT_MAX_LENGTH) {
 80081ae:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <COPC_task_update+0x114>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2bff      	cmp	r3, #255	@ 0xff
 80081b6:	d102      	bne.n	80081be <COPC_task_update+0xf2>
                // Frame quá dài, reset lại

                receiving = 0;
 80081b8:	4b08      	ldr	r3, [pc, #32]	@ (80081dc <COPC_task_update+0x110>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 80081be:	4806      	ldr	r0, [pc, #24]	@ (80081d8 <COPC_task_update+0x10c>)
 80081c0:	f7f9 fe3e 	bl	8001e40 <IsDataAvailable>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d184      	bne.n	80080d4 <COPC_task_update+0x8>
            }
    }
}

}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	40011000 	.word	0x40011000
 80081dc:	20004a60 	.word	0x20004a60
 80081e0:	20004b63 	.word	0x20004b63
 80081e4:	2000482f 	.word	0x2000482f
 80081e8:	20004a64 	.word	0x20004a64
 80081ec:	2000003c 	.word	0x2000003c
 80081f0:	2000003d 	.word	0x2000003d
 80081f4:	2000003e 	.word	0x2000003e
 80081f8:	20000398 	.word	0x20000398
 80081fc:	08013c24 	.word	0x08013c24
 8008200:	40005000 	.word	0x40005000
 8008204:	40011400 	.word	0x40011400

08008208 <COPC_create_task>:
void	COPC_create_task(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
	COPC_init();
 800820c:	f7ff ff4e 	bl	80080ac <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 8008210:	4902      	ldr	r1, [pc, #8]	@ (800821c <COPC_create_task+0x14>)
 8008212:	4803      	ldr	r0, [pc, #12]	@ (8008220 <COPC_create_task+0x18>)
 8008214:	f002 f8f0 	bl	800a3f8 <SCH_TASK_CreateTask>
}
 8008218:	bf00      	nop
 800821a:	bd80      	pop	{r7, pc}
 800821c:	200003b8 	.word	0x200003b8
 8008220:	200003b4 	.word	0x200003b4

08008224 <LL_GPIO_SetOutputPin>:
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	619a      	str	r2, [r3, #24]
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <LL_GPIO_ResetOutputPin>:
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	041a      	lsls	r2, r3, #16
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	619a      	str	r2, [r3, #24]
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
	...

08008260 <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 8008264:	4a06      	ldr	r2, [pc, #24]	@ (8008280 <status_led_init+0x20>)
 8008266:	7813      	ldrb	r3, [r2, #0]
 8008268:	f36f 0300 	bfc	r3, #0, #1
 800826c:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 800826e:	4a04      	ldr	r2, [pc, #16]	@ (8008280 <status_led_init+0x20>)
 8008270:	7813      	ldrb	r3, [r2, #0]
 8008272:	f36f 0347 	bfc	r3, #1, #7
 8008276:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 8008278:	f000 f804 	bl	8008284 <status_led_off>
}
 800827c:	bf00      	nop
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20004b64 	.word	0x20004b64

08008284 <status_led_off>:

static void status_led_off(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 8008288:	2120      	movs	r1, #32
 800828a:	4802      	ldr	r0, [pc, #8]	@ (8008294 <status_led_off+0x10>)
 800828c:	f7ff ffd8 	bl	8008240 <LL_GPIO_ResetOutputPin>
}
 8008290:	bf00      	nop
 8008292:	bd80      	pop	{r7, pc}
 8008294:	40020800 	.word	0x40020800

08008298 <status_led_on>:

static void status_led_on(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 800829c:	2120      	movs	r1, #32
 800829e:	4802      	ldr	r0, [pc, #8]	@ (80082a8 <status_led_on+0x10>)
 80082a0:	f7ff ffc0 	bl	8008224 <LL_GPIO_SetOutputPin>
}
 80082a4:	bf00      	nop
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40020800 	.word	0x40020800

080082ac <status_led_update>:

void	status_led_update(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 80082b0:	4b0d      	ldr	r3, [pc, #52]	@ (80082e8 <status_led_update+0x3c>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d811      	bhi.n	80082e2 <status_led_update+0x36>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <status_led_update+0x18>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082db 	.word	0x080082db
 80082cc:	080082e1 	.word	0x080082e1
 80082d0:	080082e1 	.word	0x080082e1
	case POWERUP:
		status_led_powerup();
 80082d4:	f000 f80a 	bl	80082ec <status_led_powerup>
		break;
 80082d8:	e003      	b.n	80082e2 <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 80082da:	f000 f841 	bl	8008360 <status_led_normal>
		break;
 80082de:	e000      	b.n	80082e2 <status_led_update+0x36>
	case POWERING_SUB:
		break;
 80082e0:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 80082e2:	bf00      	nop
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20004b64 	.word	0x20004b64

080082ec <status_led_powerup>:

static void status_led_powerup(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 80082f0:	4b1a      	ldr	r3, [pc, #104]	@ (800835c <status_led_powerup+0x70>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d012      	beq.n	8008324 <status_led_powerup+0x38>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 80082fe:	2000      	movs	r0, #0
 8008300:	f002 f864 	bl	800a3cc <SCH_TIM_HasCompleted>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d025      	beq.n	8008356 <status_led_powerup+0x6a>
        {
            s_led_display_status.led = 0;
 800830a:	4a14      	ldr	r2, [pc, #80]	@ (800835c <status_led_powerup+0x70>)
 800830c:	7813      	ldrb	r3, [r2, #0]
 800830e:	f36f 0300 	bfc	r3, #0, #1
 8008312:	7013      	strb	r3, [r2, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 8008314:	f7ff ffb6 	bl	8008284 <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8008318:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800831c:	2000      	movs	r0, #0
 800831e:	f002 f83f 	bl	800a3a0 <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 8008322:	e018      	b.n	8008356 <status_led_powerup+0x6a>
    else if (s_led_display_status.led == 0) // LED is OFF
 8008324:	4b0d      	ldr	r3, [pc, #52]	@ (800835c <status_led_powerup+0x70>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d111      	bne.n	8008356 <status_led_powerup+0x6a>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8008332:	2000      	movs	r0, #0
 8008334:	f002 f84a 	bl	800a3cc <SCH_TIM_HasCompleted>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00b      	beq.n	8008356 <status_led_powerup+0x6a>
            s_led_display_status.led = 1;
 800833e:	4a07      	ldr	r2, [pc, #28]	@ (800835c <status_led_powerup+0x70>)
 8008340:	7813      	ldrb	r3, [r2, #0]
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	7013      	strb	r3, [r2, #0]
            status_led_on();
 8008348:	f7ff ffa6 	bl	8008298 <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 800834c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008350:	2000      	movs	r0, #0
 8008352:	f002 f825 	bl	800a3a0 <SCH_TIM_Start>
}
 8008356:	bf00      	nop
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20004b64 	.word	0x20004b64

08008360 <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 8008364:	bf00      	nop
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
	...

08008370 <status_led_create_task>:

void	status_led_create_task(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8008374:	4902      	ldr	r1, [pc, #8]	@ (8008380 <status_led_create_task+0x10>)
 8008376:	4803      	ldr	r0, [pc, #12]	@ (8008384 <status_led_create_task+0x14>)
 8008378:	f002 f83e 	bl	800a3f8 <SCH_TASK_CreateTask>
}
 800837c:	bf00      	nop
 800837e:	bd80      	pop	{r7, pc}
 8008380:	200003c8 	.word	0x200003c8
 8008384:	200003c4 	.word	0x200003c4

08008388 <__NVIC_SetPriorityGrouping>:
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008398:	4b0c      	ldr	r3, [pc, #48]	@ (80083cc <__NVIC_SetPriorityGrouping+0x44>)
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80083a4:	4013      	ands	r3, r2
 80083a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80083b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083ba:	4a04      	ldr	r2, [pc, #16]	@ (80083cc <__NVIC_SetPriorityGrouping+0x44>)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	60d3      	str	r3, [r2, #12]
}
 80083c0:	bf00      	nop
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	e000ed00 	.word	0xe000ed00

080083d0 <__NVIC_GetPriorityGrouping>:
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083d4:	4b04      	ldr	r3, [pc, #16]	@ (80083e8 <__NVIC_GetPriorityGrouping+0x18>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	0a1b      	lsrs	r3, r3, #8
 80083da:	f003 0307 	and.w	r3, r3, #7
}
 80083de:	4618      	mov	r0, r3
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	e000ed00 	.word	0xe000ed00

080083ec <__NVIC_EnableIRQ>:
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	db0b      	blt.n	8008416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	f003 021f 	and.w	r2, r3, #31
 8008404:	4907      	ldr	r1, [pc, #28]	@ (8008424 <__NVIC_EnableIRQ+0x38>)
 8008406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	2001      	movs	r0, #1
 800840e:	fa00 f202 	lsl.w	r2, r0, r2
 8008412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	e000e100 	.word	0xe000e100

08008428 <__NVIC_SetPriority>:
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008438:	2b00      	cmp	r3, #0
 800843a:	db0a      	blt.n	8008452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	b2da      	uxtb	r2, r3
 8008440:	490c      	ldr	r1, [pc, #48]	@ (8008474 <__NVIC_SetPriority+0x4c>)
 8008442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008446:	0112      	lsls	r2, r2, #4
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	440b      	add	r3, r1
 800844c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008450:	e00a      	b.n	8008468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	b2da      	uxtb	r2, r3
 8008456:	4908      	ldr	r1, [pc, #32]	@ (8008478 <__NVIC_SetPriority+0x50>)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	3b04      	subs	r3, #4
 8008460:	0112      	lsls	r2, r2, #4
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	440b      	add	r3, r1
 8008466:	761a      	strb	r2, [r3, #24]
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	e000e100 	.word	0xe000e100
 8008478:	e000ed00 	.word	0xe000ed00

0800847c <NVIC_EncodePriority>:
{
 800847c:	b480      	push	{r7}
 800847e:	b089      	sub	sp, #36	@ 0x24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	f1c3 0307 	rsb	r3, r3, #7
 8008496:	2b04      	cmp	r3, #4
 8008498:	bf28      	it	cs
 800849a:	2304      	movcs	r3, #4
 800849c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	3304      	adds	r3, #4
 80084a2:	2b06      	cmp	r3, #6
 80084a4:	d902      	bls.n	80084ac <NVIC_EncodePriority+0x30>
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	3b03      	subs	r3, #3
 80084aa:	e000      	b.n	80084ae <NVIC_EncodePriority+0x32>
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084b0:	f04f 32ff 	mov.w	r2, #4294967295
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ba:	43da      	mvns	r2, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	401a      	ands	r2, r3
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084c4:	f04f 31ff 	mov.w	r1, #4294967295
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	fa01 f303 	lsl.w	r3, r1, r3
 80084ce:	43d9      	mvns	r1, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d4:	4313      	orrs	r3, r2
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3724      	adds	r7, #36	@ 0x24
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <LL_I2C_EnableClockStretching>:
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	601a      	str	r2, [r3, #0]
}
 80084f6:	bf00      	nop
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <LL_I2C_DisableGeneralCall>:
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	601a      	str	r2, [r3, #0]
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <LL_I2C_SetOwnAddress2>:
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60da      	str	r2, [r3, #12]
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <LL_I2C_DisableOwnAddress2>:
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f023 0201 	bic.w	r2, r3, #1
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	60da      	str	r2, [r3, #12]
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800856c:	4b05      	ldr	r3, [pc, #20]	@ (8008584 <LL_RCC_HSE_Enable+0x1c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a04      	ldr	r2, [pc, #16]	@ (8008584 <LL_RCC_HSE_Enable+0x1c>)
 8008572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008576:	6013      	str	r3, [r2, #0]
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40023800 	.word	0x40023800

08008588 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800858c:	4b07      	ldr	r3, [pc, #28]	@ (80085ac <LL_RCC_HSE_IsReady+0x24>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008598:	bf0c      	ite	eq
 800859a:	2301      	moveq	r3, #1
 800859c:	2300      	movne	r3, #0
 800859e:	b2db      	uxtb	r3, r3
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	40023800 	.word	0x40023800

080085b0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80085b8:	4b06      	ldr	r3, [pc, #24]	@ (80085d4 <LL_RCC_SetSysClkSource+0x24>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f023 0203 	bic.w	r2, r3, #3
 80085c0:	4904      	ldr	r1, [pc, #16]	@ (80085d4 <LL_RCC_SetSysClkSource+0x24>)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	608b      	str	r3, [r1, #8]
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	40023800 	.word	0x40023800

080085d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80085dc:	4b04      	ldr	r3, [pc, #16]	@ (80085f0 <LL_RCC_GetSysClkSource+0x18>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 030c 	and.w	r3, r3, #12
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40023800 	.word	0x40023800

080085f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80085fc:	4b06      	ldr	r3, [pc, #24]	@ (8008618 <LL_RCC_SetAHBPrescaler+0x24>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008604:	4904      	ldr	r1, [pc, #16]	@ (8008618 <LL_RCC_SetAHBPrescaler+0x24>)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4313      	orrs	r3, r2
 800860a:	608b      	str	r3, [r1, #8]
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	40023800 	.word	0x40023800

0800861c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008624:	4b06      	ldr	r3, [pc, #24]	@ (8008640 <LL_RCC_SetAPB1Prescaler+0x24>)
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800862c:	4904      	ldr	r1, [pc, #16]	@ (8008640 <LL_RCC_SetAPB1Prescaler+0x24>)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4313      	orrs	r3, r2
 8008632:	608b      	str	r3, [r1, #8]
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	40023800 	.word	0x40023800

08008644 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800864c:	4b06      	ldr	r3, [pc, #24]	@ (8008668 <LL_RCC_SetAPB2Prescaler+0x24>)
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008654:	4904      	ldr	r1, [pc, #16]	@ (8008668 <LL_RCC_SetAPB2Prescaler+0x24>)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4313      	orrs	r3, r2
 800865a:	608b      	str	r3, [r1, #8]
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	40023800 	.word	0x40023800

0800866c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008670:	4b05      	ldr	r3, [pc, #20]	@ (8008688 <LL_RCC_PLL_Enable+0x1c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a04      	ldr	r2, [pc, #16]	@ (8008688 <LL_RCC_PLL_Enable+0x1c>)
 8008676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800867a:	6013      	str	r3, [r2, #0]
}
 800867c:	bf00      	nop
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	40023800 	.word	0x40023800

0800868c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8008690:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <LL_RCC_PLL_IsReady+0x24>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008698:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800869c:	bf0c      	ite	eq
 800869e:	2301      	moveq	r3, #1
 80086a0:	2300      	movne	r3, #0
 80086a2:	b2db      	uxtb	r3, r3
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40023800 	.word	0x40023800

080086b4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80086c2:	4b0d      	ldr	r3, [pc, #52]	@ (80086f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4b0d      	ldr	r3, [pc, #52]	@ (80086fc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80086c8:	4013      	ands	r3, r2
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	4311      	orrs	r1, r2
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	0192      	lsls	r2, r2, #6
 80086d4:	430a      	orrs	r2, r1
 80086d6:	4908      	ldr	r1, [pc, #32]	@ (80086f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80086dc:	4b06      	ldr	r3, [pc, #24]	@ (80086f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80086e4:	4904      	ldr	r1, [pc, #16]	@ (80086f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80086ec:	bf00      	nop
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	40023800 	.word	0x40023800
 80086fc:	ffbf8000 	.word	0xffbf8000

08008700 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008708:	4b08      	ldr	r3, [pc, #32]	@ (800872c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800870a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800870c:	4907      	ldr	r1, [pc, #28]	@ (800872c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4313      	orrs	r3, r2
 8008712:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008714:	4b05      	ldr	r3, [pc, #20]	@ (800872c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4013      	ands	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800871e:	68fb      	ldr	r3, [r7, #12]
}
 8008720:	bf00      	nop
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	40023800 	.word	0x40023800

08008730 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8008738:	4b08      	ldr	r3, [pc, #32]	@ (800875c <LL_APB1_GRP1_EnableClock+0x2c>)
 800873a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800873c:	4907      	ldr	r1, [pc, #28]	@ (800875c <LL_APB1_GRP1_EnableClock+0x2c>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4313      	orrs	r3, r2
 8008742:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008744:	4b05      	ldr	r3, [pc, #20]	@ (800875c <LL_APB1_GRP1_EnableClock+0x2c>)
 8008746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4013      	ands	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800874e:	68fb      	ldr	r3, [r7, #12]
}
 8008750:	bf00      	nop
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	40023800 	.word	0x40023800

08008760 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008768:	4b08      	ldr	r3, [pc, #32]	@ (800878c <LL_APB2_GRP1_EnableClock+0x2c>)
 800876a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800876c:	4907      	ldr	r1, [pc, #28]	@ (800878c <LL_APB2_GRP1_EnableClock+0x2c>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4313      	orrs	r3, r2
 8008772:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008774:	4b05      	ldr	r3, [pc, #20]	@ (800878c <LL_APB2_GRP1_EnableClock+0x2c>)
 8008776:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4013      	ands	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800877e:	68fb      	ldr	r3, [r7, #12]
}
 8008780:	bf00      	nop
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	40023800 	.word	0x40023800

08008790 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8008798:	4b06      	ldr	r3, [pc, #24]	@ (80087b4 <LL_FLASH_SetLatency+0x24>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f023 0207 	bic.w	r2, r3, #7
 80087a0:	4904      	ldr	r1, [pc, #16]	@ (80087b4 <LL_FLASH_SetLatency+0x24>)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	600b      	str	r3, [r1, #0]
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	40023c00 	.word	0x40023c00

080087b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80087bc:	4b04      	ldr	r3, [pc, #16]	@ (80087d0 <LL_FLASH_GetLatency+0x18>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0307 	and.w	r3, r3, #7
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40023c00 	.word	0x40023c00

080087d4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80087dc:	4b06      	ldr	r3, [pc, #24]	@ (80087f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087e4:	4904      	ldr	r1, [pc, #16]	@ (80087f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	600b      	str	r3, [r1, #0]
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40007000 	.word	0x40007000

080087fc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8008800:	4b07      	ldr	r3, [pc, #28]	@ (8008820 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800880c:	bf0c      	ite	eq
 800880e:	2301      	moveq	r3, #1
 8008810:	2300      	movne	r3, #0
 8008812:	b2db      	uxtb	r3, r3
}
 8008814:	4618      	mov	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40007000 	.word	0x40007000

08008824 <LL_USART_Enable>:
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60da      	str	r2, [r3, #12]
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <LL_USART_ConfigAsyncMode>:
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	615a      	str	r2, [r3, #20]
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <LL_GPIO_ResetOutputPin>:
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	041a      	lsls	r2, r3, #16
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	619a      	str	r2, [r3, #24]
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
	...

08008890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8008894:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008898:	f7ff ff62 	bl	8008760 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800889c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80088a0:	f7ff ff46 	bl	8008730 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088a4:	2003      	movs	r0, #3
 80088a6:	f7ff fd6f 	bl	8008388 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80088aa:	f7ff fd91 	bl	80083d0 <__NVIC_GetPriorityGrouping>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2200      	movs	r2, #0
 80088b2:	210f      	movs	r1, #15
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fde1 	bl	800847c <NVIC_EncodePriority>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4619      	mov	r1, r3
 80088be:	f04f 30ff 	mov.w	r0, #4294967295
 80088c2:	f7ff fdb1 	bl	8008428 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80088c6:	f000 f83b 	bl	8008940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088ca:	f000 fba7 	bl	800901c <MX_GPIO_Init>
  MX_I2C1_Init();
 80088ce:	f000 f881 	bl	80089d4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80088d2:	f000 fb43 	bl	8008f5c <MX_USART6_UART_Init>
  MX_UART5_Init();
 80088d6:	f000 f9a7 	bl	8008c28 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80088da:	f000 fa1d 	bl	8008d18 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80088de:	f000 f941 	bl	8008b64 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80088e2:	f000 fad9 	bl	8008e98 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 80088e6:	f000 f8cd 	bl	8008a84 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80088ea:	f000 fa75 	bl	8008dd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 80088ee:	f7fd fad5 	bl	8005e9c <command_init>

  fsp_init(FSP_ADR_CPOC);
 80088f2:	2001      	movs	r0, #1
 80088f4:	f001 feee 	bl	800a6d4 <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 80088f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80088fc:	480f      	ldr	r0, [pc, #60]	@ (800893c <main+0xac>)
 80088fe:	f7ff ffb7 	bl	8008870 <LL_GPIO_ResetOutputPin>

  status_led_init();
 8008902:	f7ff fcad 	bl	8008260 <status_led_init>



  WDT_init();
 8008906:	f000 fd8b 	bl	8009420 <WDT_init>

  SCH_Initialize();
 800890a:	f001 fd1f 	bl	800a34c <SCH_Initialize>

  status_led_create_task();
 800890e:	f7ff fd2f 	bl	8008370 <status_led_create_task>

  send_packet_init();
 8008912:	f7f9 fbdf 	bl	80020d4 <send_packet_init>
  send_packet_create_task();
 8008916:	f7f9 fc3b 	bl	8002190 <send_packet_create_task>


  command_create_task();
 800891a:	f7fe f909 	bl	8006b30 <command_create_task>

  COPC_create_task();
 800891e:	f7ff fc73 	bl	8008208 <COPC_create_task>

  WDT_create_task();
 8008922:	f000 fd89 	bl	8009438 <WDT_create_task>

  IOU_create_task();
 8008926:	f7f9 fcc9 	bl	80022bc <IOU_create_task>
  PMU_create_task();
 800892a:	f7fc fb35 	bl	8004f98 <PMU_create_task>
  PDU_create_task();
 800892e:	f7fb fd67 	bl	8004400 <PDU_create_task>

  SCH_StartSchedular();
 8008932:	f001 fe33 	bl	800a59c <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8008936:	f001 fe37 	bl	800a5a8 <SCH_HandleScheduledTask>
 800893a:	e7fc      	b.n	8008936 <main+0xa6>
 800893c:	40020800 	.word	0x40020800

08008940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8008944:	2001      	movs	r0, #1
 8008946:	f7ff ff23 	bl	8008790 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800894a:	bf00      	nop
 800894c:	f7ff ff34 	bl	80087b8 <LL_FLASH_GetLatency>
 8008950:	4603      	mov	r3, r0
 8008952:	2b01      	cmp	r3, #1
 8008954:	d1fa      	bne.n	800894c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8008956:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800895a:	f7ff ff3b 	bl	80087d4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800895e:	f7ff fe03 	bl	8008568 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8008962:	bf00      	nop
 8008964:	f7ff fe10 	bl	8008588 <LL_RCC_HSE_IsReady>
 8008968:	4603      	mov	r3, r0
 800896a:	2b01      	cmp	r3, #1
 800896c:	d1fa      	bne.n	8008964 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 800896e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008972:	22c0      	movs	r2, #192	@ 0xc0
 8008974:	2104      	movs	r1, #4
 8008976:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800897a:	f7ff fe9b 	bl	80086b4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800897e:	f7ff fe75 	bl	800866c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8008982:	bf00      	nop
 8008984:	f7ff fe82 	bl	800868c <LL_RCC_PLL_IsReady>
 8008988:	4603      	mov	r3, r0
 800898a:	2b01      	cmp	r3, #1
 800898c:	d1fa      	bne.n	8008984 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800898e:	bf00      	nop
 8008990:	f7ff ff34 	bl	80087fc <LL_PWR_IsActiveFlag_VOS>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0fa      	beq.n	8008990 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 800899a:	2080      	movs	r0, #128	@ 0x80
 800899c:	f7ff fe2a 	bl	80085f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80089a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80089a4:	f7ff fe3a 	bl	800861c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80089a8:	2000      	movs	r0, #0
 80089aa:	f7ff fe4b 	bl	8008644 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80089ae:	2002      	movs	r0, #2
 80089b0:	f7ff fdfe 	bl	80085b0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80089b4:	bf00      	nop
 80089b6:	f7ff fe0f 	bl	80085d8 <LL_RCC_GetSysClkSource>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d1fa      	bne.n	80089b6 <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(48000000);
 80089c0:	4803      	ldr	r0, [pc, #12]	@ (80089d0 <SystemClock_Config+0x90>)
 80089c2:	f001 fca5 	bl	800a310 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 80089c6:	4802      	ldr	r0, [pc, #8]	@ (80089d0 <SystemClock_Config+0x90>)
 80089c8:	f001 fcb0 	bl	800a32c <LL_SetSystemCoreClock>
}
 80089cc:	bf00      	nop
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	02dc6c00 	.word	0x02dc6c00

080089d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08c      	sub	sp, #48	@ 0x30
 80089d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80089da:	f107 0318 	add.w	r3, r7, #24
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	605a      	str	r2, [r3, #4]
 80089e4:	609a      	str	r2, [r3, #8]
 80089e6:	60da      	str	r2, [r3, #12]
 80089e8:	611a      	str	r2, [r3, #16]
 80089ea:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089ec:	463b      	mov	r3, r7
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	605a      	str	r2, [r3, #4]
 80089f4:	609a      	str	r2, [r3, #8]
 80089f6:	60da      	str	r2, [r3, #12]
 80089f8:	611a      	str	r2, [r3, #16]
 80089fa:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80089fc:	2002      	movs	r0, #2
 80089fe:	f7ff fe7f 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8008a02:	23c0      	movs	r3, #192	@ 0xc0
 8008a04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008a06:	2302      	movs	r3, #2
 8008a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8008a16:	2304      	movs	r3, #4
 8008a18:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4816      	ldr	r0, [pc, #88]	@ (8008a78 <MX_I2C1_Init+0xa4>)
 8008a20:	f000 fe91 	bl	8009746 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8008a24:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008a28:	f7ff fe82 	bl	8008730 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8008a2c:	4813      	ldr	r0, [pc, #76]	@ (8008a7c <MX_I2C1_Init+0xa8>)
 8008a2e:	f7ff fd8b 	bl	8008548 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8008a32:	4812      	ldr	r0, [pc, #72]	@ (8008a7c <MX_I2C1_Init+0xa8>)
 8008a34:	f7ff fd65 	bl	8008502 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8008a38:	4810      	ldr	r0, [pc, #64]	@ (8008a7c <MX_I2C1_Init+0xa8>)
 8008a3a:	f7ff fd52 	bl	80084e2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8008a42:	4b0f      	ldr	r3, [pc, #60]	@ (8008a80 <MX_I2C1_Init+0xac>)
 8008a44:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8008a46:	2300      	movs	r3, #0
 8008a48:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8008a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8008a54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8008a5a:	f107 0318 	add.w	r3, r7, #24
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4806      	ldr	r0, [pc, #24]	@ (8008a7c <MX_I2C1_Init+0xa8>)
 8008a62:	f000 ffe7 	bl	8009a34 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8008a66:	2100      	movs	r1, #0
 8008a68:	4804      	ldr	r0, [pc, #16]	@ (8008a7c <MX_I2C1_Init+0xa8>)
 8008a6a:	f7ff fd5a 	bl	8008522 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008a6e:	bf00      	nop
 8008a70:	3730      	adds	r7, #48	@ 0x30
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40020400 	.word	0x40020400
 8008a7c:	40005400 	.word	0x40005400
 8008a80:	000186a0 	.word	0x000186a0

08008a84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08c      	sub	sp, #48	@ 0x30
 8008a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8008a8a:	f107 0318 	add.w	r3, r7, #24
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	605a      	str	r2, [r3, #4]
 8008a94:	609a      	str	r2, [r3, #8]
 8008a96:	60da      	str	r2, [r3, #12]
 8008a98:	611a      	str	r2, [r3, #16]
 8008a9a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a9c:	463b      	mov	r3, r7
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	605a      	str	r2, [r3, #4]
 8008aa4:	609a      	str	r2, [r3, #8]
 8008aa6:	60da      	str	r2, [r3, #12]
 8008aa8:	611a      	str	r2, [r3, #16]
 8008aaa:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008aac:	2004      	movs	r0, #4
 8008aae:	f7ff fe27 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	f7ff fe24 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8008ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008abc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008aca:	2300      	movs	r3, #0
 8008acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8008ace:	2304      	movs	r3, #4
 8008ad0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	481f      	ldr	r0, [pc, #124]	@ (8008b54 <MX_I2C3_Init+0xd0>)
 8008ad8:	f000 fe35 	bl	8009746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8008adc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ae0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8008aea:	2301      	movs	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008aee:	2300      	movs	r3, #0
 8008af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8008af2:	2304      	movs	r3, #4
 8008af4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008af6:	463b      	mov	r3, r7
 8008af8:	4619      	mov	r1, r3
 8008afa:	4817      	ldr	r0, [pc, #92]	@ (8008b58 <MX_I2C3_Init+0xd4>)
 8008afc:	f000 fe23 	bl	8009746 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8008b00:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8008b04:	f7ff fe14 	bl	8008730 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8008b08:	4814      	ldr	r0, [pc, #80]	@ (8008b5c <MX_I2C3_Init+0xd8>)
 8008b0a:	f7ff fd1d 	bl	8008548 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8008b0e:	4813      	ldr	r0, [pc, #76]	@ (8008b5c <MX_I2C3_Init+0xd8>)
 8008b10:	f7ff fcf7 	bl	8008502 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8008b14:	4811      	ldr	r0, [pc, #68]	@ (8008b5c <MX_I2C3_Init+0xd8>)
 8008b16:	f7ff fce4 	bl	80084e2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8008b1e:	4b10      	ldr	r3, [pc, #64]	@ (8008b60 <MX_I2C3_Init+0xdc>)
 8008b20:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8008b22:	2300      	movs	r3, #0
 8008b24:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8008b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8008b30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8008b36:	f107 0318 	add.w	r3, r7, #24
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4807      	ldr	r0, [pc, #28]	@ (8008b5c <MX_I2C3_Init+0xd8>)
 8008b3e:	f000 ff79 	bl	8009a34 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8008b42:	2100      	movs	r1, #0
 8008b44:	4805      	ldr	r0, [pc, #20]	@ (8008b5c <MX_I2C3_Init+0xd8>)
 8008b46:	f7ff fcec 	bl	8008522 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8008b4a:	bf00      	nop
 8008b4c:	3730      	adds	r7, #48	@ 0x30
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40020800 	.word	0x40020800
 8008b58:	40020000 	.word	0x40020000
 8008b5c:	40005c00 	.word	0x40005c00
 8008b60:	000186a0 	.word	0x000186a0

08008b64 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08e      	sub	sp, #56	@ 0x38
 8008b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008b6a:	f107 031c 	add.w	r3, r7, #28
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	605a      	str	r2, [r3, #4]
 8008b74:	609a      	str	r2, [r3, #8]
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	611a      	str	r2, [r3, #16]
 8008b7a:	615a      	str	r2, [r3, #20]
 8008b7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b7e:	1d3b      	adds	r3, r7, #4
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	605a      	str	r2, [r3, #4]
 8008b86:	609a      	str	r2, [r3, #8]
 8008b88:	60da      	str	r2, [r3, #12]
 8008b8a:	611a      	str	r2, [r3, #16]
 8008b8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8008b8e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008b92:	f7ff fdcd 	bl	8008730 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008b96:	2004      	movs	r0, #4
 8008b98:	f7ff fdb2 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8008b9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008ba0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bb6:	1d3b      	adds	r3, r7, #4
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4819      	ldr	r0, [pc, #100]	@ (8008c20 <MX_UART4_Init+0xbc>)
 8008bbc:	f000 fdc3 	bl	8009746 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008bc0:	f7ff fc06 	bl	80083d0 <__NVIC_GetPriorityGrouping>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fc56 	bl	800847c <NVIC_EncodePriority>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	2034      	movs	r0, #52	@ 0x34
 8008bd6:	f7ff fc27 	bl	8008428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8008bda:	2034      	movs	r0, #52	@ 0x34
 8008bdc:	f7ff fc06 	bl	80083ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8008be0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008be4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008be6:	2300      	movs	r3, #0
 8008be8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008bea:	2300      	movs	r3, #0
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8008bfe:	f107 031c 	add.w	r3, r7, #28
 8008c02:	4619      	mov	r1, r3
 8008c04:	4807      	ldr	r0, [pc, #28]	@ (8008c24 <MX_UART4_Init+0xc0>)
 8008c06:	f001 fae9 	bl	800a1dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8008c0a:	4806      	ldr	r0, [pc, #24]	@ (8008c24 <MX_UART4_Init+0xc0>)
 8008c0c:	f7ff fe1a 	bl	8008844 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8008c10:	4804      	ldr	r0, [pc, #16]	@ (8008c24 <MX_UART4_Init+0xc0>)
 8008c12:	f7ff fe07 	bl	8008824 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008c16:	bf00      	nop
 8008c18:	3738      	adds	r7, #56	@ 0x38
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	40020800 	.word	0x40020800
 8008c24:	40004c00 	.word	0x40004c00

08008c28 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08e      	sub	sp, #56	@ 0x38
 8008c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008c2e:	f107 031c 	add.w	r3, r7, #28
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	605a      	str	r2, [r3, #4]
 8008c38:	609a      	str	r2, [r3, #8]
 8008c3a:	60da      	str	r2, [r3, #12]
 8008c3c:	611a      	str	r2, [r3, #16]
 8008c3e:	615a      	str	r2, [r3, #20]
 8008c40:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c42:	1d3b      	adds	r3, r7, #4
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	605a      	str	r2, [r3, #4]
 8008c4a:	609a      	str	r2, [r3, #8]
 8008c4c:	60da      	str	r2, [r3, #12]
 8008c4e:	611a      	str	r2, [r3, #16]
 8008c50:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8008c52:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008c56:	f7ff fd6b 	bl	8008730 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008c5a:	2004      	movs	r0, #4
 8008c5c:	f7ff fd50 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8008c60:	2008      	movs	r0, #8
 8008c62:	f7ff fd4d 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8008c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008c70:	2303      	movs	r3, #3
 8008c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008c74:	2300      	movs	r3, #0
 8008c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8008c7c:	2308      	movs	r3, #8
 8008c7e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c80:	1d3b      	adds	r3, r7, #4
 8008c82:	4619      	mov	r1, r3
 8008c84:	4821      	ldr	r0, [pc, #132]	@ (8008d0c <MX_UART5_Init+0xe4>)
 8008c86:	f000 fd5e 	bl	8009746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8008c8a:	2304      	movs	r3, #4
 8008c8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008c8e:	2302      	movs	r3, #2
 8008c90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008c92:	2303      	movs	r3, #3
 8008c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8008c9e:	2308      	movs	r3, #8
 8008ca0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ca2:	1d3b      	adds	r3, r7, #4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	481a      	ldr	r0, [pc, #104]	@ (8008d10 <MX_UART5_Init+0xe8>)
 8008ca8:	f000 fd4d 	bl	8009746 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008cac:	f7ff fb90 	bl	80083d0 <__NVIC_GetPriorityGrouping>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fbe0 	bl	800847c <NVIC_EncodePriority>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	2035      	movs	r0, #53	@ 0x35
 8008cc2:	f7ff fbb1 	bl	8008428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8008cc6:	2035      	movs	r0, #53	@ 0x35
 8008cc8:	f7ff fb90 	bl	80083ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8008ccc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8008cd0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008cde:	230c      	movs	r3, #12
 8008ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8008cea:	f107 031c 	add.w	r3, r7, #28
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4808      	ldr	r0, [pc, #32]	@ (8008d14 <MX_UART5_Init+0xec>)
 8008cf2:	f001 fa73 	bl	800a1dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8008cf6:	4807      	ldr	r0, [pc, #28]	@ (8008d14 <MX_UART5_Init+0xec>)
 8008cf8:	f7ff fda4 	bl	8008844 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8008cfc:	4805      	ldr	r0, [pc, #20]	@ (8008d14 <MX_UART5_Init+0xec>)
 8008cfe:	f7ff fd91 	bl	8008824 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8008d02:	bf00      	nop
 8008d04:	3738      	adds	r7, #56	@ 0x38
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40020800 	.word	0x40020800
 8008d10:	40020c00 	.word	0x40020c00
 8008d14:	40005000 	.word	0x40005000

08008d18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08e      	sub	sp, #56	@ 0x38
 8008d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008d1e:	f107 031c 	add.w	r3, r7, #28
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	605a      	str	r2, [r3, #4]
 8008d28:	609a      	str	r2, [r3, #8]
 8008d2a:	60da      	str	r2, [r3, #12]
 8008d2c:	611a      	str	r2, [r3, #16]
 8008d2e:	615a      	str	r2, [r3, #20]
 8008d30:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d32:	1d3b      	adds	r3, r7, #4
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	605a      	str	r2, [r3, #4]
 8008d3a:	609a      	str	r2, [r3, #8]
 8008d3c:	60da      	str	r2, [r3, #12]
 8008d3e:	611a      	str	r2, [r3, #16]
 8008d40:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8008d42:	2010      	movs	r0, #16
 8008d44:	f7ff fd0c 	bl	8008760 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008d48:	2001      	movs	r0, #1
 8008d4a:	f7ff fcd9 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8008d4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008d52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008d54:	2302      	movs	r3, #2
 8008d56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008d64:	2307      	movs	r3, #7
 8008d66:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d68:	1d3b      	adds	r3, r7, #4
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4818      	ldr	r0, [pc, #96]	@ (8008dd0 <MX_USART1_UART_Init+0xb8>)
 8008d6e:	f000 fcea 	bl	8009746 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008d72:	f7ff fb2d 	bl	80083d0 <__NVIC_GetPriorityGrouping>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7ff fb7d 	bl	800847c <NVIC_EncodePriority>
 8008d82:	4603      	mov	r3, r0
 8008d84:	4619      	mov	r1, r3
 8008d86:	2025      	movs	r0, #37	@ 0x25
 8008d88:	f7ff fb4e 	bl	8008428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8008d8c:	2025      	movs	r0, #37	@ 0x25
 8008d8e:	f7ff fb2d 	bl	80083ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8008d92:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8008d96:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008da0:	2300      	movs	r3, #0
 8008da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008da4:	230c      	movs	r3, #12
 8008da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008da8:	2300      	movs	r3, #0
 8008daa:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008dac:	2300      	movs	r3, #0
 8008dae:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8008db0:	f107 031c 	add.w	r3, r7, #28
 8008db4:	4619      	mov	r1, r3
 8008db6:	4807      	ldr	r0, [pc, #28]	@ (8008dd4 <MX_USART1_UART_Init+0xbc>)
 8008db8:	f001 fa10 	bl	800a1dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8008dbc:	4805      	ldr	r0, [pc, #20]	@ (8008dd4 <MX_USART1_UART_Init+0xbc>)
 8008dbe:	f7ff fd41 	bl	8008844 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8008dc2:	4804      	ldr	r0, [pc, #16]	@ (8008dd4 <MX_USART1_UART_Init+0xbc>)
 8008dc4:	f7ff fd2e 	bl	8008824 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008dc8:	bf00      	nop
 8008dca:	3738      	adds	r7, #56	@ 0x38
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40020000 	.word	0x40020000
 8008dd4:	40011000 	.word	0x40011000

08008dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08e      	sub	sp, #56	@ 0x38
 8008ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008dde:	f107 031c 	add.w	r3, r7, #28
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	605a      	str	r2, [r3, #4]
 8008de8:	609a      	str	r2, [r3, #8]
 8008dea:	60da      	str	r2, [r3, #12]
 8008dec:	611a      	str	r2, [r3, #16]
 8008dee:	615a      	str	r2, [r3, #20]
 8008df0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008df2:	1d3b      	adds	r3, r7, #4
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	605a      	str	r2, [r3, #4]
 8008dfa:	609a      	str	r2, [r3, #8]
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	611a      	str	r2, [r3, #16]
 8008e00:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8008e02:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008e06:	f7ff fc93 	bl	8008730 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	f7ff fc78 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8008e10:	230c      	movs	r3, #12
 8008e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008e14:	2302      	movs	r3, #2
 8008e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008e24:	2307      	movs	r3, #7
 8008e26:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e28:	1d3b      	adds	r3, r7, #4
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4818      	ldr	r0, [pc, #96]	@ (8008e90 <MX_USART2_UART_Init+0xb8>)
 8008e2e:	f000 fc8a 	bl	8009746 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008e32:	f7ff facd 	bl	80083d0 <__NVIC_GetPriorityGrouping>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fb1d 	bl	800847c <NVIC_EncodePriority>
 8008e42:	4603      	mov	r3, r0
 8008e44:	4619      	mov	r1, r3
 8008e46:	2026      	movs	r0, #38	@ 0x26
 8008e48:	f7ff faee 	bl	8008428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8008e4c:	2026      	movs	r0, #38	@ 0x26
 8008e4e:	f7ff facd 	bl	80083ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8008e52:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8008e56:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008e60:	2300      	movs	r3, #0
 8008e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008e64:	230c      	movs	r3, #12
 8008e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8008e70:	f107 031c 	add.w	r3, r7, #28
 8008e74:	4619      	mov	r1, r3
 8008e76:	4807      	ldr	r0, [pc, #28]	@ (8008e94 <MX_USART2_UART_Init+0xbc>)
 8008e78:	f001 f9b0 	bl	800a1dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8008e7c:	4805      	ldr	r0, [pc, #20]	@ (8008e94 <MX_USART2_UART_Init+0xbc>)
 8008e7e:	f7ff fce1 	bl	8008844 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8008e82:	4804      	ldr	r0, [pc, #16]	@ (8008e94 <MX_USART2_UART_Init+0xbc>)
 8008e84:	f7ff fcce 	bl	8008824 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008e88:	bf00      	nop
 8008e8a:	3738      	adds	r7, #56	@ 0x38
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	40020000 	.word	0x40020000
 8008e94:	40004400 	.word	0x40004400

08008e98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08e      	sub	sp, #56	@ 0x38
 8008e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008e9e:	f107 031c 	add.w	r3, r7, #28
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	605a      	str	r2, [r3, #4]
 8008ea8:	609a      	str	r2, [r3, #8]
 8008eaa:	60da      	str	r2, [r3, #12]
 8008eac:	611a      	str	r2, [r3, #16]
 8008eae:	615a      	str	r2, [r3, #20]
 8008eb0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb2:	1d3b      	adds	r3, r7, #4
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	609a      	str	r2, [r3, #8]
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	611a      	str	r2, [r3, #16]
 8008ec0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8008ec2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008ec6:	f7ff fc33 	bl	8008730 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008eca:	2002      	movs	r0, #2
 8008ecc:	f7ff fc18 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8008ed0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008ed4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008eda:	2303      	movs	r3, #3
 8008edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008ee6:	2307      	movs	r3, #7
 8008ee8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eea:	1d3b      	adds	r3, r7, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4819      	ldr	r0, [pc, #100]	@ (8008f54 <MX_USART3_UART_Init+0xbc>)
 8008ef0:	f000 fc29 	bl	8009746 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008ef4:	f7ff fa6c 	bl	80083d0 <__NVIC_GetPriorityGrouping>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2200      	movs	r2, #0
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fabc 	bl	800847c <NVIC_EncodePriority>
 8008f04:	4603      	mov	r3, r0
 8008f06:	4619      	mov	r1, r3
 8008f08:	2027      	movs	r0, #39	@ 0x27
 8008f0a:	f7ff fa8d 	bl	8008428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8008f0e:	2027      	movs	r0, #39	@ 0x27
 8008f10:	f7ff fa6c 	bl	80083ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8008f14:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008f18:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008f26:	230c      	movs	r3, #12
 8008f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8008f32:	f107 031c 	add.w	r3, r7, #28
 8008f36:	4619      	mov	r1, r3
 8008f38:	4807      	ldr	r0, [pc, #28]	@ (8008f58 <MX_USART3_UART_Init+0xc0>)
 8008f3a:	f001 f94f 	bl	800a1dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8008f3e:	4806      	ldr	r0, [pc, #24]	@ (8008f58 <MX_USART3_UART_Init+0xc0>)
 8008f40:	f7ff fc80 	bl	8008844 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8008f44:	4804      	ldr	r0, [pc, #16]	@ (8008f58 <MX_USART3_UART_Init+0xc0>)
 8008f46:	f7ff fc6d 	bl	8008824 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008f4a:	bf00      	nop
 8008f4c:	3738      	adds	r7, #56	@ 0x38
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40020400 	.word	0x40020400
 8008f58:	40004800 	.word	0x40004800

08008f5c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08e      	sub	sp, #56	@ 0x38
 8008f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008f62:	f107 031c 	add.w	r3, r7, #28
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	605a      	str	r2, [r3, #4]
 8008f6c:	609a      	str	r2, [r3, #8]
 8008f6e:	60da      	str	r2, [r3, #12]
 8008f70:	611a      	str	r2, [r3, #16]
 8008f72:	615a      	str	r2, [r3, #20]
 8008f74:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f76:	1d3b      	adds	r3, r7, #4
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	609a      	str	r2, [r3, #8]
 8008f80:	60da      	str	r2, [r3, #12]
 8008f82:	611a      	str	r2, [r3, #16]
 8008f84:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8008f86:	2020      	movs	r0, #32
 8008f88:	f7ff fbea 	bl	8008760 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008f8c:	2004      	movs	r0, #4
 8008f8e:	f7ff fbb7 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8008f92:	23c0      	movs	r3, #192	@ 0xc0
 8008f94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008f96:	2302      	movs	r3, #2
 8008f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8008fa6:	2308      	movs	r3, #8
 8008fa8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008faa:	1d3b      	adds	r3, r7, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4819      	ldr	r0, [pc, #100]	@ (8009014 <MX_USART6_UART_Init+0xb8>)
 8008fb0:	f000 fbc9 	bl	8009746 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008fb4:	f7ff fa0c 	bl	80083d0 <__NVIC_GetPriorityGrouping>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff fa5c 	bl	800847c <NVIC_EncodePriority>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	2047      	movs	r0, #71	@ 0x47
 8008fca:	f7ff fa2d 	bl	8008428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8008fce:	2047      	movs	r0, #71	@ 0x47
 8008fd0:	f7ff fa0c 	bl	80083ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8008fd4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8008fd8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008fea:	2300      	movs	r3, #0
 8008fec:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8008ff2:	f107 031c 	add.w	r3, r7, #28
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4807      	ldr	r0, [pc, #28]	@ (8009018 <MX_USART6_UART_Init+0xbc>)
 8008ffa:	f001 f8ef 	bl	800a1dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8008ffe:	4806      	ldr	r0, [pc, #24]	@ (8009018 <MX_USART6_UART_Init+0xbc>)
 8009000:	f7ff fc20 	bl	8008844 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8009004:	4804      	ldr	r0, [pc, #16]	@ (8009018 <MX_USART6_UART_Init+0xbc>)
 8009006:	f7ff fc0d 	bl	8008824 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800900a:	bf00      	nop
 800900c:	3738      	adds	r7, #56	@ 0x38
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	40020800 	.word	0x40020800
 8009018:	40011400 	.word	0x40011400

0800901c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009022:	463b      	mov	r3, r7
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	605a      	str	r2, [r3, #4]
 800902a:	609a      	str	r2, [r3, #8]
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	611a      	str	r2, [r3, #16]
 8009030:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8009032:	2004      	movs	r0, #4
 8009034:	f7ff fb64 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8009038:	2080      	movs	r0, #128	@ 0x80
 800903a:	f7ff fb61 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800903e:	2001      	movs	r0, #1
 8009040:	f7ff fb5e 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8009044:	2002      	movs	r0, #2
 8009046:	f7ff fb5b 	bl	8008700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800904a:	2008      	movs	r0, #8
 800904c:	f7ff fb58 	bl	8008700 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 8009050:	f641 0102 	movw	r1, #6146	@ 0x1802
 8009054:	4826      	ldr	r0, [pc, #152]	@ (80090f0 <MX_GPIO_Init+0xd4>)
 8009056:	f7ff fc0b 	bl	8008870 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 800905a:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800905e:	4825      	ldr	r0, [pc, #148]	@ (80090f4 <MX_GPIO_Init+0xd8>)
 8009060:	f7ff fc06 	bl	8008870 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8009064:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009068:	4823      	ldr	r0, [pc, #140]	@ (80090f8 <MX_GPIO_Init+0xdc>)
 800906a:	f7ff fc01 	bl	8008870 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 800906e:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 8009072:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8009074:	2300      	movs	r3, #0
 8009076:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009078:	2300      	movs	r3, #0
 800907a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800907c:	463b      	mov	r3, r7
 800907e:	4619      	mov	r1, r3
 8009080:	481c      	ldr	r0, [pc, #112]	@ (80090f4 <MX_GPIO_Init+0xd8>)
 8009082:	f000 fb60 	bl	8009746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 8009086:	f641 0302 	movw	r3, #6146	@ 0x1802
 800908a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800908c:	2301      	movs	r3, #1
 800908e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8009090:	2300      	movs	r3, #0
 8009092:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009094:	2300      	movs	r3, #0
 8009096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009098:	2300      	movs	r3, #0
 800909a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800909c:	463b      	mov	r3, r7
 800909e:	4619      	mov	r1, r3
 80090a0:	4813      	ldr	r0, [pc, #76]	@ (80090f0 <MX_GPIO_Init+0xd4>)
 80090a2:	f000 fb50 	bl	8009746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 80090a6:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80090aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80090ac:	2301      	movs	r3, #1
 80090ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80090b8:	2300      	movs	r3, #0
 80090ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090bc:	463b      	mov	r3, r7
 80090be:	4619      	mov	r1, r3
 80090c0:	480c      	ldr	r0, [pc, #48]	@ (80090f4 <MX_GPIO_Init+0xd8>)
 80090c2:	f000 fb40 	bl	8009746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 80090c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80090cc:	2301      	movs	r3, #1
 80090ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80090d8:	2300      	movs	r3, #0
 80090da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 80090dc:	463b      	mov	r3, r7
 80090de:	4619      	mov	r1, r3
 80090e0:	4805      	ldr	r0, [pc, #20]	@ (80090f8 <MX_GPIO_Init+0xdc>)
 80090e2:	f000 fb30 	bl	8009746 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80090e6:	bf00      	nop
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	40020000 	.word	0x40020000
 80090f4:	40020800 	.word	0x40020800
 80090f8:	40020400 	.word	0x40020400

080090fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <NMI_Handler+0x4>

08009104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009104:	b480      	push	{r7}
 8009106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009108:	bf00      	nop
 800910a:	e7fd      	b.n	8009108 <HardFault_Handler+0x4>

0800910c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009110:	bf00      	nop
 8009112:	e7fd      	b.n	8009110 <MemManage_Handler+0x4>

08009114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009114:	b480      	push	{r7}
 8009116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009118:	bf00      	nop
 800911a:	e7fd      	b.n	8009118 <BusFault_Handler+0x4>

0800911c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009120:	bf00      	nop
 8009122:	e7fd      	b.n	8009120 <UsageFault_Handler+0x4>

08009124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009128:	bf00      	nop
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009132:	b480      	push	{r7}
 8009134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009136:	bf00      	nop
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009144:	bf00      	nop
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 8009154:	4b04      	ldr	r3, [pc, #16]	@ (8009168 <SysTick_Handler+0x18>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3301      	adds	r3, #1
 800915a:	4a03      	ldr	r2, [pc, #12]	@ (8009168 <SysTick_Handler+0x18>)
 800915c:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800915e:	f001 f989 	bl	800a474 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009162:	bf00      	nop
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20004b68 	.word	0x20004b68

0800916c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 8009170:	4802      	ldr	r0, [pc, #8]	@ (800917c <USART1_IRQHandler+0x10>)
 8009172:	f7f8 ff07 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009176:	bf00      	nop
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	40011000 	.word	0x40011000

08009180 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (USART2);
 8009184:	4802      	ldr	r0, [pc, #8]	@ (8009190 <USART2_IRQHandler+0x10>)
 8009186:	f7f8 fefd 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800918a:	bf00      	nop
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	40004400 	.word	0x40004400

08009194 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 8009198:	4802      	ldr	r0, [pc, #8]	@ (80091a4 <USART3_IRQHandler+0x10>)
 800919a:	f7f8 fef3 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800919e:	bf00      	nop
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	40004800 	.word	0x40004800

080091a8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 80091ac:	4802      	ldr	r0, [pc, #8]	@ (80091b8 <UART4_IRQHandler+0x10>)
 80091ae:	f7f8 fee9 	bl	8001f84 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80091b2:	bf00      	nop
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	40004c00 	.word	0x40004c00

080091bc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 80091c0:	4802      	ldr	r0, [pc, #8]	@ (80091cc <UART5_IRQHandler+0x10>)
 80091c2:	f7f8 fedf 	bl	8001f84 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80091c6:	bf00      	nop
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	40005000 	.word	0x40005000

080091d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 80091d4:	4802      	ldr	r0, [pc, #8]	@ (80091e0 <USART6_IRQHandler+0x10>)
 80091d6:	f7f8 fed5 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80091da:	bf00      	nop
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	40011400 	.word	0x40011400

080091e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
  return 1;
 80091e8:	2301      	movs	r3, #1
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <_kill>:

int _kill(int pid, int sig)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80091fe:	f005 f8f3 	bl	800e3e8 <__errno>
 8009202:	4603      	mov	r3, r0
 8009204:	2216      	movs	r2, #22
 8009206:	601a      	str	r2, [r3, #0]
  return -1;
 8009208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <_exit>:

void _exit (int status)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800921c:	f04f 31ff 	mov.w	r1, #4294967295
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff ffe7 	bl	80091f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009226:	bf00      	nop
 8009228:	e7fd      	b.n	8009226 <_exit+0x12>

0800922a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b086      	sub	sp, #24
 800922e:	af00      	add	r7, sp, #0
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009236:	2300      	movs	r3, #0
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	e00a      	b.n	8009252 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800923c:	f3af 8000 	nop.w
 8009240:	4601      	mov	r1, r0
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	60ba      	str	r2, [r7, #8]
 8009248:	b2ca      	uxtb	r2, r1
 800924a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	3301      	adds	r3, #1
 8009250:	617b      	str	r3, [r7, #20]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	429a      	cmp	r2, r3
 8009258:	dbf0      	blt.n	800923c <_read+0x12>
  }

  return len;
 800925a:	687b      	ldr	r3, [r7, #4]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009270:	2300      	movs	r3, #0
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	e009      	b.n	800928a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	60ba      	str	r2, [r7, #8]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	3301      	adds	r3, #1
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	429a      	cmp	r2, r3
 8009290:	dbf1      	blt.n	8009276 <_write+0x12>
  }
  return len;
 8009292:	687b      	ldr	r3, [r7, #4]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <_close>:

int _close(int file)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80092a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80092c4:	605a      	str	r2, [r3, #4]
  return 0;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <_isatty>:

int _isatty(int file)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80092dc:	2301      	movs	r3, #1
}
 80092de:	4618      	mov	r0, r3
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b085      	sub	sp, #20
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800930c:	4a14      	ldr	r2, [pc, #80]	@ (8009360 <_sbrk+0x5c>)
 800930e:	4b15      	ldr	r3, [pc, #84]	@ (8009364 <_sbrk+0x60>)
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009318:	4b13      	ldr	r3, [pc, #76]	@ (8009368 <_sbrk+0x64>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009320:	4b11      	ldr	r3, [pc, #68]	@ (8009368 <_sbrk+0x64>)
 8009322:	4a12      	ldr	r2, [pc, #72]	@ (800936c <_sbrk+0x68>)
 8009324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009326:	4b10      	ldr	r3, [pc, #64]	@ (8009368 <_sbrk+0x64>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	429a      	cmp	r2, r3
 8009332:	d207      	bcs.n	8009344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009334:	f005 f858 	bl	800e3e8 <__errno>
 8009338:	4603      	mov	r3, r0
 800933a:	220c      	movs	r2, #12
 800933c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800933e:	f04f 33ff 	mov.w	r3, #4294967295
 8009342:	e009      	b.n	8009358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009344:	4b08      	ldr	r3, [pc, #32]	@ (8009368 <_sbrk+0x64>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800934a:	4b07      	ldr	r3, [pc, #28]	@ (8009368 <_sbrk+0x64>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4413      	add	r3, r2
 8009352:	4a05      	ldr	r2, [pc, #20]	@ (8009368 <_sbrk+0x64>)
 8009354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20020000 	.word	0x20020000
 8009364:	00000400 	.word	0x00000400
 8009368:	20004b6c 	.word	0x20004b6c
 800936c:	20004e10 	.word	0x20004e10

08009370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009374:	4b06      	ldr	r3, [pc, #24]	@ (8009390 <SystemInit+0x20>)
 8009376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800937a:	4a05      	ldr	r2, [pc, #20]	@ (8009390 <SystemInit+0x20>)
 800937c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	e000ed00 	.word	0xe000ed00

08009394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80093cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009398:	f7ff ffea 	bl	8009370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800939c:	480c      	ldr	r0, [pc, #48]	@ (80093d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800939e:	490d      	ldr	r1, [pc, #52]	@ (80093d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80093a0:	4a0d      	ldr	r2, [pc, #52]	@ (80093d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80093a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80093a4:	e002      	b.n	80093ac <LoopCopyDataInit>

080093a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80093a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80093a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80093aa:	3304      	adds	r3, #4

080093ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80093ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80093ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80093b0:	d3f9      	bcc.n	80093a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80093b2:	4a0a      	ldr	r2, [pc, #40]	@ (80093dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80093b4:	4c0a      	ldr	r4, [pc, #40]	@ (80093e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80093b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80093b8:	e001      	b.n	80093be <LoopFillZerobss>

080093ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80093ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80093bc:	3204      	adds	r2, #4

080093be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80093be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80093c0:	d3fb      	bcc.n	80093ba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80093c2:	f005 f817 	bl	800e3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80093c6:	f7ff fa63 	bl	8008890 <main>
  bx  lr    
 80093ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80093cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80093d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80093d4:	200005b0 	.word	0x200005b0
  ldr r2, =_sidata
 80093d8:	080148f0 	.word	0x080148f0
  ldr r2, =_sbss
 80093dc:	200005b0 	.word	0x200005b0
  ldr r4, =_ebss
 80093e0:	20004e10 	.word	0x20004e10

080093e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80093e4:	e7fe      	b.n	80093e4 <ADC_IRQHandler>

080093e6 <LL_GPIO_SetOutputPin>:
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	619a      	str	r2, [r3, #24]
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <LL_GPIO_ResetOutputPin>:
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	041a      	lsls	r2, r3, #16
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	619a      	str	r2, [r3, #24]
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <WDT_init>:




void WDT_init(void)
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 8009424:	4b03      	ldr	r3, [pc, #12]	@ (8009434 <WDT_init+0x14>)
 8009426:	2200      	movs	r2, #0
 8009428:	701a      	strb	r2, [r3, #0]

}
 800942a:	bf00      	nop
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	20004b70 	.word	0x20004b70

08009438 <WDT_create_task>:

void WDT_create_task(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800943c:	4902      	ldr	r1, [pc, #8]	@ (8009448 <WDT_create_task+0x10>)
 800943e:	4803      	ldr	r0, [pc, #12]	@ (800944c <WDT_create_task+0x14>)
 8009440:	f000 ffda 	bl	800a3f8 <SCH_TASK_CreateTask>

}
 8009444:	bf00      	nop
 8009446:	bd80      	pop	{r7, pc}
 8009448:	200003dc 	.word	0x200003dc
 800944c:	200003d8 	.word	0x200003d8

08009450 <status_wdt_update>:

void	status_wdt_update(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0

		if (WDT_Current){
 8009454:	4b14      	ldr	r3, [pc, #80]	@ (80094a8 <status_wdt_update+0x58>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d012      	beq.n	8009482 <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800945c:	2001      	movs	r0, #1
 800945e:	f000 ffb5 	bl	800a3cc <SCH_TIM_HasCompleted>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01d      	beq.n	80094a4 <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 8009468:	4b0f      	ldr	r3, [pc, #60]	@ (80094a8 <status_wdt_update+0x58>)
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800946e:	2102      	movs	r1, #2
 8009470:	480e      	ldr	r0, [pc, #56]	@ (80094ac <status_wdt_update+0x5c>)
 8009472:	f7ff ffc6 	bl	8009402 <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 8009476:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800947a:	2001      	movs	r0, #1
 800947c:	f000 ff90 	bl	800a3a0 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 8009480:	e010      	b.n	80094a4 <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8009482:	2001      	movs	r0, #1
 8009484:	f000 ffa2 	bl	800a3cc <SCH_TIM_HasCompleted>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <status_wdt_update+0x54>
				WDT_Current = 1;
 800948e:	4b06      	ldr	r3, [pc, #24]	@ (80094a8 <status_wdt_update+0x58>)
 8009490:	2201      	movs	r2, #1
 8009492:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8009494:	2102      	movs	r1, #2
 8009496:	4805      	ldr	r0, [pc, #20]	@ (80094ac <status_wdt_update+0x5c>)
 8009498:	f7ff ffa5 	bl	80093e6 <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800949c:	21c8      	movs	r1, #200	@ 0xc8
 800949e:	2001      	movs	r0, #1
 80094a0:	f000 ff7e 	bl	800a3a0 <SCH_TIM_Start>
}
 80094a4:	bf00      	nop
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20004b70 	.word	0x20004b70
 80094ac:	40020000 	.word	0x40020000

080094b0 <LL_GPIO_SetPinMode>:
{
 80094b0:	b480      	push	{r7}
 80094b2:	b08b      	sub	sp, #44	@ 0x2c
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	fa93 f3a3 	rbit	r3, r3
 80094ca:	613b      	str	r3, [r7, #16]
  return result;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80094d6:	2320      	movs	r3, #32
 80094d8:	e003      	b.n	80094e2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	fab3 f383 	clz	r3, r3
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	2103      	movs	r1, #3
 80094e6:	fa01 f303 	lsl.w	r3, r1, r3
 80094ea:	43db      	mvns	r3, r3
 80094ec:	401a      	ands	r2, r3
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	fa93 f3a3 	rbit	r3, r3
 80094f8:	61fb      	str	r3, [r7, #28]
  return result;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80094fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009504:	2320      	movs	r3, #32
 8009506:	e003      	b.n	8009510 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950a:	fab3 f383 	clz	r3, r3
 800950e:	b2db      	uxtb	r3, r3
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	fa01 f303 	lsl.w	r3, r1, r3
 8009518:	431a      	orrs	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	601a      	str	r2, [r3, #0]
}
 800951e:	bf00      	nop
 8009520:	372c      	adds	r7, #44	@ 0x2c
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <LL_GPIO_SetPinOutputType>:
{
 800952a:	b480      	push	{r7}
 800952c:	b085      	sub	sp, #20
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	43db      	mvns	r3, r3
 800953e:	401a      	ands	r2, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	fb01 f303 	mul.w	r3, r1, r3
 8009548:	431a      	orrs	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	605a      	str	r2, [r3, #4]
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <LL_GPIO_SetPinSpeed>:
{
 800955a:	b480      	push	{r7}
 800955c:	b08b      	sub	sp, #44	@ 0x2c
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	fa93 f3a3 	rbit	r3, r3
 8009574:	613b      	str	r3, [r7, #16]
  return result;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009580:	2320      	movs	r3, #32
 8009582:	e003      	b.n	800958c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	fab3 f383 	clz	r3, r3
 800958a:	b2db      	uxtb	r3, r3
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	2103      	movs	r1, #3
 8009590:	fa01 f303 	lsl.w	r3, r1, r3
 8009594:	43db      	mvns	r3, r3
 8009596:	401a      	ands	r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	fa93 f3a3 	rbit	r3, r3
 80095a2:	61fb      	str	r3, [r7, #28]
  return result;
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80095ae:	2320      	movs	r3, #32
 80095b0:	e003      	b.n	80095ba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	fab3 f383 	clz	r3, r3
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	fa01 f303 	lsl.w	r3, r1, r3
 80095c2:	431a      	orrs	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	609a      	str	r2, [r3, #8]
}
 80095c8:	bf00      	nop
 80095ca:	372c      	adds	r7, #44	@ 0x2c
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <LL_GPIO_SetPinPull>:
{
 80095d4:	b480      	push	{r7}
 80095d6:	b08b      	sub	sp, #44	@ 0x2c
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	fa93 f3a3 	rbit	r3, r3
 80095ee:	613b      	str	r3, [r7, #16]
  return result;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80095fa:	2320      	movs	r3, #32
 80095fc:	e003      	b.n	8009606 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	fab3 f383 	clz	r3, r3
 8009604:	b2db      	uxtb	r3, r3
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	2103      	movs	r1, #3
 800960a:	fa01 f303 	lsl.w	r3, r1, r3
 800960e:	43db      	mvns	r3, r3
 8009610:	401a      	ands	r2, r3
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	fa93 f3a3 	rbit	r3, r3
 800961c:	61fb      	str	r3, [r7, #28]
  return result;
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009628:	2320      	movs	r3, #32
 800962a:	e003      	b.n	8009634 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	fab3 f383 	clz	r3, r3
 8009632:	b2db      	uxtb	r3, r3
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	fa01 f303 	lsl.w	r3, r1, r3
 800963c:	431a      	orrs	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	60da      	str	r2, [r3, #12]
}
 8009642:	bf00      	nop
 8009644:	372c      	adds	r7, #44	@ 0x2c
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <LL_GPIO_SetAFPin_0_7>:
{
 800964e:	b480      	push	{r7}
 8009650:	b08b      	sub	sp, #44	@ 0x2c
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1a      	ldr	r2, [r3, #32]
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	fa93 f3a3 	rbit	r3, r3
 8009668:	613b      	str	r3, [r7, #16]
  return result;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009674:	2320      	movs	r3, #32
 8009676:	e003      	b.n	8009680 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	fab3 f383 	clz	r3, r3
 800967e:	b2db      	uxtb	r3, r3
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	210f      	movs	r1, #15
 8009684:	fa01 f303 	lsl.w	r3, r1, r3
 8009688:	43db      	mvns	r3, r3
 800968a:	401a      	ands	r2, r3
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	fa93 f3a3 	rbit	r3, r3
 8009696:	61fb      	str	r3, [r7, #28]
  return result;
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80096a2:	2320      	movs	r3, #32
 80096a4:	e003      	b.n	80096ae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	fab3 f383 	clz	r3, r3
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	fa01 f303 	lsl.w	r3, r1, r3
 80096b6:	431a      	orrs	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	621a      	str	r2, [r3, #32]
}
 80096bc:	bf00      	nop
 80096be:	372c      	adds	r7, #44	@ 0x2c
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <LL_GPIO_SetAFPin_8_15>:
{
 80096c8:	b480      	push	{r7}
 80096ca:	b08b      	sub	sp, #44	@ 0x2c
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	0a1b      	lsrs	r3, r3, #8
 80096dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	fa93 f3a3 	rbit	r3, r3
 80096e4:	613b      	str	r3, [r7, #16]
  return result;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80096f0:	2320      	movs	r3, #32
 80096f2:	e003      	b.n	80096fc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	fab3 f383 	clz	r3, r3
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	210f      	movs	r1, #15
 8009700:	fa01 f303 	lsl.w	r3, r1, r3
 8009704:	43db      	mvns	r3, r3
 8009706:	401a      	ands	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	0a1b      	lsrs	r3, r3, #8
 800970c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	fa93 f3a3 	rbit	r3, r3
 8009714:	61fb      	str	r3, [r7, #28]
  return result;
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009720:	2320      	movs	r3, #32
 8009722:	e003      	b.n	800972c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	fab3 f383 	clz	r3, r3
 800972a:	b2db      	uxtb	r3, r3
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	fa01 f303 	lsl.w	r3, r1, r3
 8009734:	431a      	orrs	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800973a:	bf00      	nop
 800973c:	372c      	adds	r7, #44	@ 0x2c
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b08a      	sub	sp, #40	@ 0x28
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8009750:	2300      	movs	r3, #0
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8009754:	2300      	movs	r3, #0
 8009756:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	fa93 f3a3 	rbit	r3, r3
 8009764:	617b      	str	r3, [r7, #20]
  return result;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <LL_GPIO_Init+0x2e>
    return 32U;
 8009770:	2320      	movs	r3, #32
 8009772:	e003      	b.n	800977c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	fab3 f383 	clz	r3, r3
 800977a:	b2db      	uxtb	r3, r3
 800977c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800977e:	e057      	b.n	8009830 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	2101      	movs	r1, #1
 8009786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009788:	fa01 f303 	lsl.w	r3, r1, r3
 800978c:	4013      	ands	r3, r2
 800978e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d049      	beq.n	800982a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d003      	beq.n	80097a6 <LL_GPIO_Init+0x60>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d10d      	bne.n	80097c2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	461a      	mov	r2, r3
 80097ac:	6a39      	ldr	r1, [r7, #32]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff fed3 	bl	800955a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	461a      	mov	r2, r3
 80097ba:	6a39      	ldr	r1, [r7, #32]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff feb4 	bl	800952a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	461a      	mov	r2, r3
 80097c8:	6a39      	ldr	r1, [r7, #32]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff ff02 	bl	80095d4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d121      	bne.n	800981c <LL_GPIO_Init+0xd6>
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	fa93 f3a3 	rbit	r3, r3
 80097e2:	60bb      	str	r3, [r7, #8]
  return result;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <LL_GPIO_Init+0xac>
    return 32U;
 80097ee:	2320      	movs	r3, #32
 80097f0:	e003      	b.n	80097fa <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	fab3 f383 	clz	r3, r3
 80097f8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80097fa:	2b07      	cmp	r3, #7
 80097fc:	d807      	bhi.n	800980e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	461a      	mov	r2, r3
 8009804:	6a39      	ldr	r1, [r7, #32]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff ff21 	bl	800964e <LL_GPIO_SetAFPin_0_7>
 800980c:	e006      	b.n	800981c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	461a      	mov	r2, r3
 8009814:	6a39      	ldr	r1, [r7, #32]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff ff56 	bl	80096c8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	461a      	mov	r2, r3
 8009822:	6a39      	ldr	r1, [r7, #32]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff fe43 	bl	80094b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	3301      	adds	r3, #1
 800982e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009836:	fa22 f303 	lsr.w	r3, r2, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1a0      	bne.n	8009780 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3728      	adds	r7, #40	@ 0x28
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <LL_I2C_Enable>:
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f043 0201 	orr.w	r2, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	601a      	str	r2, [r3, #0]
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <LL_I2C_Disable>:
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f023 0201 	bic.w	r2, r3, #1
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	601a      	str	r2, [r3, #0]
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <LL_I2C_SetOwnAddress1>:
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800989c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	431a      	orrs	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	609a      	str	r2, [r3, #8]
}
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <LL_I2C_ConfigSpeed>:
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	4a42      	ldr	r2, [pc, #264]	@ (80099dc <LL_I2C_ConfigSpeed+0x124>)
 80098d2:	fba2 2303 	umull	r2, r3, r2, r3
 80098d6:	0c9b      	lsrs	r3, r3, #18
 80098d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	431a      	orrs	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	493a      	ldr	r1, [pc, #232]	@ (80099e0 <LL_I2C_ConfigSpeed+0x128>)
 80098f6:	428b      	cmp	r3, r1
 80098f8:	d802      	bhi.n	8009900 <LL_I2C_ConfigSpeed+0x48>
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	3301      	adds	r3, #1
 80098fe:	e009      	b.n	8009914 <LL_I2C_ConfigSpeed+0x5c>
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8009906:	fb01 f303 	mul.w	r3, r1, r3
 800990a:	4936      	ldr	r1, [pc, #216]	@ (80099e4 <LL_I2C_ConfigSpeed+0x12c>)
 800990c:	fba1 1303 	umull	r1, r3, r1, r3
 8009910:	099b      	lsrs	r3, r3, #6
 8009912:	3301      	adds	r3, #1
 8009914:	431a      	orrs	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a30      	ldr	r2, [pc, #192]	@ (80099e0 <LL_I2C_ConfigSpeed+0x128>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d939      	bls.n	8009996 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d117      	bne.n	8009958 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	4613      	mov	r3, r2
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	4413      	add	r3, r2
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	fbb2 f3f3 	udiv	r3, r2, r3
 8009936:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800993a:	2b00      	cmp	r3, #0
 800993c:	d009      	beq.n	8009952 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	4613      	mov	r3, r2
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	4413      	add	r3, r2
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800994c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009950:	e01d      	b.n	800998e <LL_I2C_ConfigSpeed+0xd6>
 8009952:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009956:	e01a      	b.n	800998e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009a      	lsls	r2, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	fbb2 f3f3 	udiv	r3, r2, r3
 800996a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00b      	beq.n	800998a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	009a      	lsls	r2, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8009984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009988:	e001      	b.n	800998e <LL_I2C_ConfigSpeed+0xd6>
 800998a:	f248 0301 	movw	r3, #32769	@ 0x8001
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	4313      	orrs	r3, r2
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e011      	b.n	80099ba <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	fbb2 f2f3 	udiv	r2, r2, r3
 80099a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80099a4:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d005      	beq.n	80099b6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b4:	e000      	b.n	80099b8 <LL_I2C_ConfigSpeed+0x100>
 80099b6:	2304      	movs	r3, #4
 80099b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 80099c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	61da      	str	r2, [r3, #28]
}
 80099ce:	bf00      	nop
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	431bde83 	.word	0x431bde83
 80099e0:	000186a0 	.word	0x000186a0
 80099e4:	10624dd3 	.word	0x10624dd3

080099e8 <LL_I2C_SetMode>:
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f023 021a 	bic.w	r2, r3, #26
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	601a      	str	r2, [r3, #0]
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <LL_I2C_AcknowledgeNextData>:
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b083      	sub	sp, #12
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7ff ff12 	bl	8009868 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8009a44:	f107 0308 	add.w	r3, r7, #8
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f895 	bl	8009b78 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8009a4e:	6939      	ldr	r1, [r7, #16]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff ff2d 	bl	80098b8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68d9      	ldr	r1, [r3, #12]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	461a      	mov	r2, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff ff0d 	bl	8009888 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff ffb7 	bl	80099e8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff fee4 	bl	8009848 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff ffc1 	bl	8009a0e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <LL_RCC_GetSysClkSource>:
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009a9c:	4b04      	ldr	r3, [pc, #16]	@ (8009ab0 <LL_RCC_GetSysClkSource+0x18>)
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f003 030c 	and.w	r3, r3, #12
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	40023800 	.word	0x40023800

08009ab4 <LL_RCC_GetAHBPrescaler>:
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009ab8:	4b04      	ldr	r3, [pc, #16]	@ (8009acc <LL_RCC_GetAHBPrescaler+0x18>)
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40023800 	.word	0x40023800

08009ad0 <LL_RCC_GetAPB1Prescaler>:
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009ad4:	4b04      	ldr	r3, [pc, #16]	@ (8009ae8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	40023800 	.word	0x40023800

08009aec <LL_RCC_GetAPB2Prescaler>:
{
 8009aec:	b480      	push	{r7}
 8009aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009af0:	4b04      	ldr	r3, [pc, #16]	@ (8009b04 <LL_RCC_GetAPB2Prescaler+0x18>)
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40023800 	.word	0x40023800

08009b08 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009b0c:	4b04      	ldr	r3, [pc, #16]	@ (8009b20 <LL_RCC_PLL_GetMainSource+0x18>)
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	40023800 	.word	0x40023800

08009b24 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009b24:	b480      	push	{r7}
 8009b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009b28:	4b04      	ldr	r3, [pc, #16]	@ (8009b3c <LL_RCC_PLL_GetN+0x18>)
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	099b      	lsrs	r3, r3, #6
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	40023800 	.word	0x40023800

08009b40 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8009b44:	4b04      	ldr	r3, [pc, #16]	@ (8009b58 <LL_RCC_PLL_GetP+0x18>)
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	40023800 	.word	0x40023800

08009b5c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009b60:	4b04      	ldr	r3, [pc, #16]	@ (8009b74 <LL_RCC_PLL_GetDivider+0x18>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	40023800 	.word	0x40023800

08009b78 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009b80:	f000 f820 	bl	8009bc4 <RCC_GetSystemClockFreq>
 8009b84:	4602      	mov	r2, r0
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 f840 	bl	8009c14 <RCC_GetHCLKClockFreq>
 8009b94:	4602      	mov	r2, r0
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f84e 	bl	8009c40 <RCC_GetPCLK1ClockFreq>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f85a 	bl	8009c68 <RCC_GetPCLK2ClockFreq>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009bce:	f7ff ff63 	bl	8009a98 <LL_RCC_GetSysClkSource>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d00c      	beq.n	8009bf2 <RCC_GetSystemClockFreq+0x2e>
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d80f      	bhi.n	8009bfc <RCC_GetSystemClockFreq+0x38>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <RCC_GetSystemClockFreq+0x22>
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	d003      	beq.n	8009bec <RCC_GetSystemClockFreq+0x28>
 8009be4:	e00a      	b.n	8009bfc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8009be6:	4b09      	ldr	r3, [pc, #36]	@ (8009c0c <RCC_GetSystemClockFreq+0x48>)
 8009be8:	607b      	str	r3, [r7, #4]
      break;
 8009bea:	e00a      	b.n	8009c02 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8009bec:	4b08      	ldr	r3, [pc, #32]	@ (8009c10 <RCC_GetSystemClockFreq+0x4c>)
 8009bee:	607b      	str	r3, [r7, #4]
      break;
 8009bf0:	e007      	b.n	8009c02 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8009bf2:	2008      	movs	r0, #8
 8009bf4:	f000 f84c 	bl	8009c90 <RCC_PLL_GetFreqDomain_SYS>
 8009bf8:	6078      	str	r0, [r7, #4]
      break;
 8009bfa:	e002      	b.n	8009c02 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8009bfc:	4b03      	ldr	r3, [pc, #12]	@ (8009c0c <RCC_GetSystemClockFreq+0x48>)
 8009bfe:	607b      	str	r3, [r7, #4]
      break;
 8009c00:	bf00      	nop
  }

  return frequency;
 8009c02:	687b      	ldr	r3, [r7, #4]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	00f42400 	.word	0x00f42400
 8009c10:	007a1200 	.word	0x007a1200

08009c14 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009c1c:	f7ff ff4a 	bl	8009ab4 <LL_RCC_GetAHBPrescaler>
 8009c20:	4603      	mov	r3, r0
 8009c22:	091b      	lsrs	r3, r3, #4
 8009c24:	f003 030f 	and.w	r3, r3, #15
 8009c28:	4a04      	ldr	r2, [pc, #16]	@ (8009c3c <RCC_GetHCLKClockFreq+0x28>)
 8009c2a:	5cd3      	ldrb	r3, [r2, r3]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	40d3      	lsrs	r3, r2
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	0801449c 	.word	0x0801449c

08009c40 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009c48:	f7ff ff42 	bl	8009ad0 <LL_RCC_GetAPB1Prescaler>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	0a9b      	lsrs	r3, r3, #10
 8009c50:	4a04      	ldr	r2, [pc, #16]	@ (8009c64 <RCC_GetPCLK1ClockFreq+0x24>)
 8009c52:	5cd3      	ldrb	r3, [r2, r3]
 8009c54:	461a      	mov	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	40d3      	lsrs	r3, r2
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	080144ac 	.word	0x080144ac

08009c68 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009c70:	f7ff ff3c 	bl	8009aec <LL_RCC_GetAPB2Prescaler>
 8009c74:	4603      	mov	r3, r0
 8009c76:	0b5b      	lsrs	r3, r3, #13
 8009c78:	4a04      	ldr	r2, [pc, #16]	@ (8009c8c <RCC_GetPCLK2ClockFreq+0x24>)
 8009c7a:	5cd3      	ldrb	r3, [r2, r3]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	40d3      	lsrs	r3, r2
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	080144ac 	.word	0x080144ac

08009c90 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8009c90:	b590      	push	{r4, r7, lr}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009ca4:	f7ff ff30 	bl	8009b08 <LL_RCC_PLL_GetMainSource>
 8009ca8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d004      	beq.n	8009cba <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009cb6:	d003      	beq.n	8009cc0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8009cb8:	e005      	b.n	8009cc6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009cba:	4b12      	ldr	r3, [pc, #72]	@ (8009d04 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8009cbc:	617b      	str	r3, [r7, #20]
      break;
 8009cbe:	e005      	b.n	8009ccc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009cc0:	4b11      	ldr	r3, [pc, #68]	@ (8009d08 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8009cc2:	617b      	str	r3, [r7, #20]
      break;
 8009cc4:	e002      	b.n	8009ccc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8009cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8009d04 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8009cc8:	617b      	str	r3, [r7, #20]
      break;
 8009cca:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	d113      	bne.n	8009cfa <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009cd2:	f7ff ff43 	bl	8009b5c <LL_RCC_PLL_GetDivider>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	fbb3 f4f2 	udiv	r4, r3, r2
 8009cde:	f7ff ff21 	bl	8009b24 <LL_RCC_PLL_GetN>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	fb03 f404 	mul.w	r4, r3, r4
 8009ce8:	f7ff ff2a 	bl	8009b40 <LL_RCC_PLL_GetP>
 8009cec:	4603      	mov	r3, r0
 8009cee:	0c1b      	lsrs	r3, r3, #16
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	fbb4 f3f3 	udiv	r3, r4, r3
 8009cf8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8009cfa:	693b      	ldr	r3, [r7, #16]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd90      	pop	{r4, r7, pc}
 8009d04:	00f42400 	.word	0x00f42400
 8009d08:	007a1200 	.word	0x007a1200

08009d0c <LL_USART_IsEnabled>:
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d20:	bf0c      	ite	eq
 8009d22:	2301      	moveq	r3, #1
 8009d24:	2300      	movne	r3, #0
 8009d26:	b2db      	uxtb	r3, r3
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <LL_USART_SetStopBitsLength>:
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	611a      	str	r2, [r3, #16]
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <LL_USART_SetHWFlowCtrl>:
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	615a      	str	r2, [r3, #20]
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <LL_USART_SetBaudRate>:
{
 8009d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d84:	b0c0      	sub	sp, #256	@ 0x100
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009d8c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8009d90:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009d94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009da0:	f040 810c 	bne.w	8009fbc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8009da4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009dae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009db6:	4622      	mov	r2, r4
 8009db8:	462b      	mov	r3, r5
 8009dba:	1891      	adds	r1, r2, r2
 8009dbc:	6639      	str	r1, [r7, #96]	@ 0x60
 8009dbe:	415b      	adcs	r3, r3
 8009dc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	eb12 0801 	adds.w	r8, r2, r1
 8009dcc:	4629      	mov	r1, r5
 8009dce:	eb43 0901 	adc.w	r9, r3, r1
 8009dd2:	f04f 0200 	mov.w	r2, #0
 8009dd6:	f04f 0300 	mov.w	r3, #0
 8009dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009de6:	4690      	mov	r8, r2
 8009de8:	4699      	mov	r9, r3
 8009dea:	4623      	mov	r3, r4
 8009dec:	eb18 0303 	adds.w	r3, r8, r3
 8009df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009df4:	462b      	mov	r3, r5
 8009df6:	eb49 0303 	adc.w	r3, r9, r3
 8009dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009dfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e02:	2200      	movs	r2, #0
 8009e04:	469a      	mov	sl, r3
 8009e06:	4693      	mov	fp, r2
 8009e08:	eb1a 030a 	adds.w	r3, sl, sl
 8009e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e0e:	eb4b 030b 	adc.w	r3, fp, fp
 8009e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009e1c:	f7f6 ff44 	bl	8000ca8 <__aeabi_uldivmod>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4b64      	ldr	r3, [pc, #400]	@ (8009fb8 <LL_USART_SetBaudRate+0x238>)
 8009e26:	fba3 2302 	umull	r2, r3, r3, r2
 8009e2a:	095b      	lsrs	r3, r3, #5
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	b29c      	uxth	r4, r3
 8009e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009e3c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009e40:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	1891      	adds	r1, r2, r2
 8009e4a:	6539      	str	r1, [r7, #80]	@ 0x50
 8009e4c:	415b      	adcs	r3, r3
 8009e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009e54:	4641      	mov	r1, r8
 8009e56:	1851      	adds	r1, r2, r1
 8009e58:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	414b      	adcs	r3, r1
 8009e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	f04f 0300 	mov.w	r3, #0
 8009e68:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8009e6c:	4659      	mov	r1, fp
 8009e6e:	00cb      	lsls	r3, r1, #3
 8009e70:	4651      	mov	r1, sl
 8009e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e76:	4651      	mov	r1, sl
 8009e78:	00ca      	lsls	r2, r1, #3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	4642      	mov	r2, r8
 8009e82:	189b      	adds	r3, r3, r2
 8009e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e88:	464b      	mov	r3, r9
 8009e8a:	460a      	mov	r2, r1
 8009e8c:	eb42 0303 	adc.w	r3, r2, r3
 8009e90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009e94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e9e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8009ea2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	18db      	adds	r3, r3, r3
 8009eaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eac:	4613      	mov	r3, r2
 8009eae:	eb42 0303 	adc.w	r3, r2, r3
 8009eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009eb8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8009ebc:	f7f6 fef4 	bl	8000ca8 <__aeabi_uldivmod>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8009fb8 <LL_USART_SetBaudRate+0x238>)
 8009ec8:	fba3 2301 	umull	r2, r3, r3, r1
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	2264      	movs	r2, #100	@ 0x64
 8009ed0:	fb02 f303 	mul.w	r3, r2, r3
 8009ed4:	1acb      	subs	r3, r1, r3
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009edc:	4b36      	ldr	r3, [pc, #216]	@ (8009fb8 <LL_USART_SetBaudRate+0x238>)
 8009ede:	fba3 2302 	umull	r2, r3, r3, r2
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	4423      	add	r3, r4
 8009ef2:	b29c      	uxth	r4, r3
 8009ef4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009efe:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009f02:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8009f06:	4642      	mov	r2, r8
 8009f08:	464b      	mov	r3, r9
 8009f0a:	1891      	adds	r1, r2, r2
 8009f0c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009f0e:	415b      	adcs	r3, r3
 8009f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009f16:	4641      	mov	r1, r8
 8009f18:	1851      	adds	r1, r2, r1
 8009f1a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	414b      	adcs	r3, r1
 8009f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009f2e:	4659      	mov	r1, fp
 8009f30:	00cb      	lsls	r3, r1, #3
 8009f32:	4651      	mov	r1, sl
 8009f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f38:	4651      	mov	r1, sl
 8009f3a:	00ca      	lsls	r2, r1, #3
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4603      	mov	r3, r0
 8009f42:	4642      	mov	r2, r8
 8009f44:	189b      	adds	r3, r3, r2
 8009f46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	460a      	mov	r2, r1
 8009f4e:	eb42 0303 	adc.w	r3, r2, r3
 8009f52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009f56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f60:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8009f64:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	18db      	adds	r3, r3, r3
 8009f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f6e:	4613      	mov	r3, r2
 8009f70:	eb42 0303 	adc.w	r3, r2, r3
 8009f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009f7a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8009f7e:	f7f6 fe93 	bl	8000ca8 <__aeabi_uldivmod>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb8 <LL_USART_SetBaudRate+0x238>)
 8009f88:	fba3 1302 	umull	r1, r3, r3, r2
 8009f8c:	095b      	lsrs	r3, r3, #5
 8009f8e:	2164      	movs	r1, #100	@ 0x64
 8009f90:	fb01 f303 	mul.w	r3, r1, r3
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	3332      	adds	r3, #50	@ 0x32
 8009f9a:	4a07      	ldr	r2, [pc, #28]	@ (8009fb8 <LL_USART_SetBaudRate+0x238>)
 8009f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa0:	095b      	lsrs	r3, r3, #5
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	f003 0307 	and.w	r3, r3, #7
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4423      	add	r3, r4
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fb4:	609a      	str	r2, [r3, #8]
}
 8009fb6:	e108      	b.n	800a1ca <LL_USART_SetBaudRate+0x44a>
 8009fb8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009fbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009fc6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009fca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8009fce:	4642      	mov	r2, r8
 8009fd0:	464b      	mov	r3, r9
 8009fd2:	1891      	adds	r1, r2, r2
 8009fd4:	6239      	str	r1, [r7, #32]
 8009fd6:	415b      	adcs	r3, r3
 8009fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fde:	4641      	mov	r1, r8
 8009fe0:	1854      	adds	r4, r2, r1
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	eb43 0501 	adc.w	r5, r3, r1
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	00eb      	lsls	r3, r5, #3
 8009ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ff6:	00e2      	lsls	r2, r4, #3
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	461d      	mov	r5, r3
 8009ffc:	4643      	mov	r3, r8
 8009ffe:	18e3      	adds	r3, r4, r3
 800a000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a004:	464b      	mov	r3, r9
 800a006:	eb45 0303 	adc.w	r3, r5, r3
 800a00a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a00e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a012:	2200      	movs	r2, #0
 800a014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a018:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	f04f 0300 	mov.w	r3, #0
 800a024:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800a028:	4629      	mov	r1, r5
 800a02a:	008b      	lsls	r3, r1, #2
 800a02c:	4621      	mov	r1, r4
 800a02e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a032:	4621      	mov	r1, r4
 800a034:	008a      	lsls	r2, r1, #2
 800a036:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800a03a:	f7f6 fe35 	bl	8000ca8 <__aeabi_uldivmod>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4b65      	ldr	r3, [pc, #404]	@ (800a1d8 <LL_USART_SetBaudRate+0x458>)
 800a044:	fba3 2302 	umull	r2, r3, r3, r2
 800a048:	095b      	lsrs	r3, r3, #5
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	011b      	lsls	r3, r3, #4
 800a04e:	b29c      	uxth	r4, r3
 800a050:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a054:	2200      	movs	r2, #0
 800a056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a05a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a05e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800a062:	4642      	mov	r2, r8
 800a064:	464b      	mov	r3, r9
 800a066:	1891      	adds	r1, r2, r2
 800a068:	61b9      	str	r1, [r7, #24]
 800a06a:	415b      	adcs	r3, r3
 800a06c:	61fb      	str	r3, [r7, #28]
 800a06e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a072:	4641      	mov	r1, r8
 800a074:	1851      	adds	r1, r2, r1
 800a076:	6139      	str	r1, [r7, #16]
 800a078:	4649      	mov	r1, r9
 800a07a:	414b      	adcs	r3, r1
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	f04f 0200 	mov.w	r2, #0
 800a082:	f04f 0300 	mov.w	r3, #0
 800a086:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a08a:	4659      	mov	r1, fp
 800a08c:	00cb      	lsls	r3, r1, #3
 800a08e:	4651      	mov	r1, sl
 800a090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a094:	4651      	mov	r1, sl
 800a096:	00ca      	lsls	r2, r1, #3
 800a098:	4610      	mov	r0, r2
 800a09a:	4619      	mov	r1, r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	4642      	mov	r2, r8
 800a0a0:	189b      	adds	r3, r3, r2
 800a0a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a0a6:	464b      	mov	r3, r9
 800a0a8:	460a      	mov	r2, r1
 800a0aa:	eb42 0303 	adc.w	r3, r2, r3
 800a0ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a0b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800a0c0:	f04f 0200 	mov.w	r2, #0
 800a0c4:	f04f 0300 	mov.w	r3, #0
 800a0c8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	008b      	lsls	r3, r1, #2
 800a0d0:	4641      	mov	r1, r8
 800a0d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0d6:	4641      	mov	r1, r8
 800a0d8:	008a      	lsls	r2, r1, #2
 800a0da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800a0de:	f7f6 fde3 	bl	8000ca8 <__aeabi_uldivmod>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4b3b      	ldr	r3, [pc, #236]	@ (800a1d8 <LL_USART_SetBaudRate+0x458>)
 800a0ea:	fba3 2301 	umull	r2, r3, r3, r1
 800a0ee:	095b      	lsrs	r3, r3, #5
 800a0f0:	2264      	movs	r2, #100	@ 0x64
 800a0f2:	fb02 f303 	mul.w	r3, r2, r3
 800a0f6:	1acb      	subs	r3, r1, r3
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	3332      	adds	r3, #50	@ 0x32
 800a0fc:	4a36      	ldr	r2, [pc, #216]	@ (800a1d8 <LL_USART_SetBaudRate+0x458>)
 800a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a102:	095b      	lsrs	r3, r3, #5
 800a104:	b29b      	uxth	r3, r3
 800a106:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	4423      	add	r3, r4
 800a10e:	b29c      	uxth	r4, r3
 800a110:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a114:	2200      	movs	r2, #0
 800a116:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a118:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a11a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a11e:	4642      	mov	r2, r8
 800a120:	464b      	mov	r3, r9
 800a122:	1891      	adds	r1, r2, r2
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	415b      	adcs	r3, r3
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a12e:	4641      	mov	r1, r8
 800a130:	1851      	adds	r1, r2, r1
 800a132:	6039      	str	r1, [r7, #0]
 800a134:	4649      	mov	r1, r9
 800a136:	414b      	adcs	r3, r1
 800a138:	607b      	str	r3, [r7, #4]
 800a13a:	f04f 0200 	mov.w	r2, #0
 800a13e:	f04f 0300 	mov.w	r3, #0
 800a142:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a146:	4659      	mov	r1, fp
 800a148:	00cb      	lsls	r3, r1, #3
 800a14a:	4651      	mov	r1, sl
 800a14c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a150:	4651      	mov	r1, sl
 800a152:	00ca      	lsls	r2, r1, #3
 800a154:	4610      	mov	r0, r2
 800a156:	4619      	mov	r1, r3
 800a158:	4603      	mov	r3, r0
 800a15a:	4642      	mov	r2, r8
 800a15c:	189b      	adds	r3, r3, r2
 800a15e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a160:	464b      	mov	r3, r9
 800a162:	460a      	mov	r2, r1
 800a164:	eb42 0303 	adc.w	r3, r2, r3
 800a168:	677b      	str	r3, [r7, #116]	@ 0x74
 800a16a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a16e:	2200      	movs	r2, #0
 800a170:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a172:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	f04f 0300 	mov.w	r3, #0
 800a17c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800a180:	4649      	mov	r1, r9
 800a182:	008b      	lsls	r3, r1, #2
 800a184:	4641      	mov	r1, r8
 800a186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a18a:	4641      	mov	r1, r8
 800a18c:	008a      	lsls	r2, r1, #2
 800a18e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800a192:	f7f6 fd89 	bl	8000ca8 <__aeabi_uldivmod>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d8 <LL_USART_SetBaudRate+0x458>)
 800a19c:	fba3 1302 	umull	r1, r3, r3, r2
 800a1a0:	095b      	lsrs	r3, r3, #5
 800a1a2:	2164      	movs	r1, #100	@ 0x64
 800a1a4:	fb01 f303 	mul.w	r3, r1, r3
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	3332      	adds	r3, #50	@ 0x32
 800a1ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a1d8 <LL_USART_SetBaudRate+0x458>)
 800a1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b4:	095b      	lsrs	r3, r3, #5
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f003 030f 	and.w	r3, r3, #15
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	4423      	add	r3, r4
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1c8:	609a      	str	r2, [r3, #8]
}
 800a1ca:	bf00      	nop
 800a1cc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1d6:	bf00      	nop
 800a1d8:	51eb851f 	.word	0x51eb851f

0800a1dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff fd8c 	bl	8009d0c <LL_USART_IsEnabled>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d15e      	bne.n	800a2b8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800a202:	f023 030c 	bic.w	r3, r3, #12
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	6851      	ldr	r1, [r2, #4]
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	68d2      	ldr	r2, [r2, #12]
 800a20e:	4311      	orrs	r1, r2
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	6912      	ldr	r2, [r2, #16]
 800a214:	4311      	orrs	r1, r2
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	6992      	ldr	r2, [r2, #24]
 800a21a:	430a      	orrs	r2, r1
 800a21c:	431a      	orrs	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff fd83 	bl	8009d34 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fd90 	bl	8009d5a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800a23a:	f107 0308 	add.w	r3, r7, #8
 800a23e:	4618      	mov	r0, r3
 800a240:	f7ff fc9a 	bl	8009b78 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a1f      	ldr	r2, [pc, #124]	@ (800a2c4 <LL_USART_Init+0xe8>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d102      	bne.n	800a252 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	61bb      	str	r3, [r7, #24]
 800a250:	e021      	b.n	800a296 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a1c      	ldr	r2, [pc, #112]	@ (800a2c8 <LL_USART_Init+0xec>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d102      	bne.n	800a260 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	61bb      	str	r3, [r7, #24]
 800a25e:	e01a      	b.n	800a296 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a1a      	ldr	r2, [pc, #104]	@ (800a2cc <LL_USART_Init+0xf0>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d102      	bne.n	800a26e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	61bb      	str	r3, [r7, #24]
 800a26c:	e013      	b.n	800a296 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a17      	ldr	r2, [pc, #92]	@ (800a2d0 <LL_USART_Init+0xf4>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d102      	bne.n	800a27c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	e00c      	b.n	800a296 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a15      	ldr	r2, [pc, #84]	@ (800a2d4 <LL_USART_Init+0xf8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d102      	bne.n	800a28a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	61bb      	str	r3, [r7, #24]
 800a288:	e005      	b.n	800a296 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a12      	ldr	r2, [pc, #72]	@ (800a2d8 <LL_USART_Init+0xfc>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d101      	bne.n	800a296 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00d      	beq.n	800a2b8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d009      	beq.n	800a2b8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a2b0:	69b9      	ldr	r1, [r7, #24]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fd64 	bl	8009d80 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a2b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3720      	adds	r7, #32
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	40011000 	.word	0x40011000
 800a2c8:	40004400 	.word	0x40004400
 800a2cc:	40004800 	.word	0x40004800
 800a2d0:	40011400 	.word	0x40011400
 800a2d4:	40004c00 	.word	0x40004c00
 800a2d8:	40005000 	.word	0x40005000

0800a2dc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ee:	4a07      	ldr	r2, [pc, #28]	@ (800a30c <LL_InitTick+0x30>)
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <LL_InitTick+0x30>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2fa:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <LL_InitTick+0x30>)
 800a2fc:	2205      	movs	r2, #5
 800a2fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	e000e010 	.word	0xe000e010

0800a310 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800a318:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff ffdd 	bl	800a2dc <LL_InitTick>
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800a334:	4a04      	ldr	r2, [pc, #16]	@ (800a348 <LL_SetSystemCoreClock+0x1c>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6013      	str	r3, [r2, #0]
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	200003d4 	.word	0x200003d4

0800a34c <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800a350:	4b0d      	ldr	r3, [pc, #52]	@ (800a388 <SCH_Initialize+0x3c>)
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800a356:	4b0d      	ldr	r3, [pc, #52]	@ (800a38c <SCH_Initialize+0x40>)
 800a358:	2200      	movs	r2, #0
 800a35a:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 800a35c:	4b0c      	ldr	r3, [pc, #48]	@ (800a390 <SCH_Initialize+0x44>)
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800a362:	2290      	movs	r2, #144	@ 0x90
 800a364:	2100      	movs	r1, #0
 800a366:	480b      	ldr	r0, [pc, #44]	@ (800a394 <SCH_Initialize+0x48>)
 800a368:	f003 ffeb 	bl	800e342 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 800a36c:	2290      	movs	r2, #144	@ 0x90
 800a36e:	2100      	movs	r1, #0
 800a370:	4809      	ldr	r0, [pc, #36]	@ (800a398 <SCH_Initialize+0x4c>)
 800a372:	f003 ffe6 	bl	800e342 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800a376:	2220      	movs	r2, #32
 800a378:	2100      	movs	r1, #0
 800a37a:	4808      	ldr	r0, [pc, #32]	@ (800a39c <SCH_Initialize+0x50>)
 800a37c:	f003 ffe1 	bl	800e342 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 800a380:	f7f7 f9a4 	bl	80016cc <systick_timer_init>
}
 800a384:	bf00      	nop
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20004c9c 	.word	0x20004c9c
 800a38c:	20004c04 	.word	0x20004c04
 800a390:	20004c98 	.word	0x20004c98
 800a394:	20004b74 	.word	0x20004b74
 800a398:	20004c08 	.word	0x20004c08
 800a39c:	20004ca0 	.word	0x20004ca0

0800a3a0 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	6039      	str	r1, [r7, #0]
 800a3aa:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	2b07      	cmp	r3, #7
 800a3b0:	d804      	bhi.n	800a3bc <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	4904      	ldr	r1, [pc, #16]	@ (800a3c8 <SCH_TIM_Start+0x28>)
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	20004ca0 	.word	0x20004ca0

0800a3cc <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	4a06      	ldr	r2, [pc, #24]	@ (800a3f4 <SCH_TIM_HasCompleted+0x28>)
 800a3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	bf0c      	ite	eq
 800a3e2:	2301      	moveq	r3, #1
 800a3e4:	2300      	movne	r3, #0
 800a3e6:	b2db      	uxtb	r3, r3
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	20004ca0 	.word	0x20004ca0

0800a3f8 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d028      	beq.n	800a45e <SCH_TASK_CreateTask+0x66>
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d025      	beq.n	800a45e <SCH_TASK_CreateTask+0x66>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800a412:	4b16      	ldr	r3, [pc, #88]	@ (800a46c <SCH_TASK_CreateTask+0x74>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b0a      	cmp	r3, #10
 800a418:	d821      	bhi.n	800a45e <SCH_TASK_CreateTask+0x66>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800a41a:	4b14      	ldr	r3, [pc, #80]	@ (800a46c <SCH_TASK_CreateTask+0x74>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	4613      	mov	r3, r2
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4a11      	ldr	r2, [pc, #68]	@ (800a470 <SCH_TASK_CreateTask+0x78>)
 800a42a:	4413      	add	r3, r2
 800a42c:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2200      	movs	r2, #0
 800a438:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = RESET;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2200      	movs	r2, #0
 800a43e:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2201      	movs	r2, #1
 800a444:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 800a446:	4b09      	ldr	r3, [pc, #36]	@ (800a46c <SCH_TASK_CreateTask+0x74>)
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800a44e:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <SCH_TASK_CreateTask+0x74>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	3301      	adds	r3, #1
 800a454:	b2da      	uxtb	r2, r3
 800a456:	4b05      	ldr	r3, [pc, #20]	@ (800a46c <SCH_TASK_CreateTask+0x74>)
 800a458:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	20004c04 	.word	0x20004c04
 800a470:	20004b74 	.word	0x20004b74

0800a474 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800a47a:	4b42      	ldr	r3, [pc, #264]	@ (800a584 <SCH_RunSystemTickTimer+0x110>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3301      	adds	r3, #1
 800a480:	4a40      	ldr	r2, [pc, #256]	@ (800a584 <SCH_RunSystemTickTimer+0x110>)
 800a482:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
 800a488:	e025      	b.n	800a4d6 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800a48a:	7bfa      	ldrb	r2, [r7, #15]
 800a48c:	4613      	mov	r3, r2
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	4413      	add	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4a3c      	ldr	r2, [pc, #240]	@ (800a588 <SCH_RunSystemTickTimer+0x114>)
 800a496:	4413      	add	r3, r2
 800a498:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d115      	bne.n	800a4d0 <SCH_RunSystemTickTimer+0x5c>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d111      	bne.n	800a4d0 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d305      	bcc.n	800a4d0 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	73fb      	strb	r3, [r7, #15]
 800a4d6:	4b2d      	ldr	r3, [pc, #180]	@ (800a58c <SCH_RunSystemTickTimer+0x118>)
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	7bfa      	ldrb	r2, [r7, #15]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d3d4      	bcc.n	800a48a <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73bb      	strb	r3, [r7, #14]
 800a4e4:	e02b      	b.n	800a53e <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800a4e6:	7bba      	ldrb	r2, [r7, #14]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	4413      	add	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4a27      	ldr	r2, [pc, #156]	@ (800a590 <SCH_RunSystemTickTimer+0x11c>)
 800a4f2:	4413      	add	r3, r2
 800a4f4:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d11c      	bne.n	800a538 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	429a      	cmp	r2, r3
 800a514:	d310      	bcc.n	800a538 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2201      	movs	r2, #1
 800a51a:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2200      	movs	r2, #0
 800a520:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	bf0c      	ite	eq
 800a52c:	2301      	moveq	r3, #1
 800a52e:	2300      	movne	r3, #0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	461a      	mov	r2, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	3301      	adds	r3, #1
 800a53c:	73bb      	strb	r3, [r7, #14]
 800a53e:	4b15      	ldr	r3, [pc, #84]	@ (800a594 <SCH_RunSystemTickTimer+0x120>)
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	7bba      	ldrb	r2, [r7, #14]
 800a544:	429a      	cmp	r2, r3
 800a546:	d3ce      	bcc.n	800a4e6 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800a548:	2300      	movs	r3, #0
 800a54a:	73bb      	strb	r3, [r7, #14]
 800a54c:	e010      	b.n	800a570 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	4a11      	ldr	r2, [pc, #68]	@ (800a598 <SCH_RunSystemTickTimer+0x124>)
 800a552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <SCH_RunSystemTickTimer+0xf6>
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	4a0e      	ldr	r2, [pc, #56]	@ (800a598 <SCH_RunSystemTickTimer+0x124>)
 800a55e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a562:	3a01      	subs	r2, #1
 800a564:	490c      	ldr	r1, [pc, #48]	@ (800a598 <SCH_RunSystemTickTimer+0x124>)
 800a566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	3301      	adds	r3, #1
 800a56e:	73bb      	strb	r3, [r7, #14]
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	2b07      	cmp	r3, #7
 800a574:	d9eb      	bls.n	800a54e <SCH_RunSystemTickTimer+0xda>
}
 800a576:	bf00      	nop
 800a578:	bf00      	nop
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	20004c9c 	.word	0x20004c9c
 800a588:	20004b74 	.word	0x20004b74
 800a58c:	20004c04 	.word	0x20004c04
 800a590:	20004c08 	.word	0x20004c08
 800a594:	20004c98 	.word	0x20004c98
 800a598:	20004ca0 	.word	0x20004ca0

0800a59c <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800a5a0:	f7f7 f884 	bl	80016ac <systick_timer_start>
}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73fb      	strb	r3, [r7, #15]
 800a5b2:	e01e      	b.n	800a5f2 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800a5b4:	7bfa      	ldrb	r2, [r7, #15]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4a23      	ldr	r2, [pc, #140]	@ (800a64c <SCH_HandleScheduledTask+0xa4>)
 800a5c0:	4413      	add	r3, r2
 800a5c2:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	885b      	ldrh	r3, [r3, #2]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d10f      	bne.n	800a5ec <SCH_HandleScheduledTask+0x44>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d10b      	bne.n	800a5ec <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d003      	beq.n	800a5ec <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	73fb      	strb	r3, [r7, #15]
 800a5f2:	4b17      	ldr	r3, [pc, #92]	@ (800a650 <SCH_HandleScheduledTask+0xa8>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	7bfa      	ldrb	r2, [r7, #15]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d3db      	bcc.n	800a5b4 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73bb      	strb	r3, [r7, #14]
 800a600:	e01a      	b.n	800a638 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800a602:	7bba      	ldrb	r2, [r7, #14]
 800a604:	4613      	mov	r3, r2
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	4413      	add	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4a11      	ldr	r2, [pc, #68]	@ (800a654 <SCH_HandleScheduledTask+0xac>)
 800a60e:	4413      	add	r3, r2
 800a610:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	885b      	ldrh	r3, [r3, #2]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d10b      	bne.n	800a632 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2200      	movs	r2, #0
 800a61e:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800a632:	7bbb      	ldrb	r3, [r7, #14]
 800a634:	3301      	adds	r3, #1
 800a636:	73bb      	strb	r3, [r7, #14]
 800a638:	4b07      	ldr	r3, [pc, #28]	@ (800a658 <SCH_HandleScheduledTask+0xb0>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	7bba      	ldrb	r2, [r7, #14]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d3df      	bcc.n	800a602 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800a642:	bf00      	nop
 800a644:	bf00      	nop
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20004b74 	.word	0x20004b74
 800a650:	20004c04 	.word	0x20004c04
 800a654:	20004c08 	.word	0x20004c08
 800a658:	20004c98 	.word	0x20004c98

0800a65c <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	4603      	mov	r3, r0
 800a664:	6039      	str	r1, [r7, #0]
 800a666:	80fb      	strh	r3, [r7, #6]
 800a668:	4613      	mov	r3, r2
 800a66a:	717b      	strb	r3, [r7, #5]
    uint8_t x;
    uint16_t crc = initial_value;
 800a66c:	88fb      	ldrh	r3, [r7, #6]
 800a66e:	81fb      	strh	r3, [r7, #14]

    while(size--)
 800a670:	e023      	b.n	800a6ba <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 800a672:	89fb      	ldrh	r3, [r7, #14]
 800a674:	0a1b      	lsrs	r3, r3, #8
 800a676:	b29b      	uxth	r3, r3
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	6039      	str	r1, [r7, #0]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	4053      	eors	r3, r2
 800a684:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 800a686:	7b7b      	ldrb	r3, [r7, #13]
 800a688:	091b      	lsrs	r3, r3, #4
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	7b7b      	ldrb	r3, [r7, #13]
 800a68e:	4053      	eors	r3, r2
 800a690:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 800a692:	89fb      	ldrh	r3, [r7, #14]
 800a694:	021b      	lsls	r3, r3, #8
 800a696:	b21a      	sxth	r2, r3
 800a698:	7b7b      	ldrb	r3, [r7, #13]
 800a69a:	b21b      	sxth	r3, r3
 800a69c:	031b      	lsls	r3, r3, #12
 800a69e:	b21b      	sxth	r3, r3
 800a6a0:	4053      	eors	r3, r2
 800a6a2:	b21a      	sxth	r2, r3
 800a6a4:	7b7b      	ldrb	r3, [r7, #13]
 800a6a6:	b21b      	sxth	r3, r3
 800a6a8:	015b      	lsls	r3, r3, #5
 800a6aa:	b21b      	sxth	r3, r3
 800a6ac:	4053      	eors	r3, r2
 800a6ae:	b21a      	sxth	r2, r3
 800a6b0:	7b7b      	ldrb	r3, [r7, #13]
 800a6b2:	b21b      	sxth	r3, r3
 800a6b4:	4053      	eors	r3, r2
 800a6b6:	b21b      	sxth	r3, r3
 800a6b8:	81fb      	strh	r3, [r7, #14]
    while(size--)
 800a6ba:	797b      	ldrb	r3, [r7, #5]
 800a6bc:	1e5a      	subs	r2, r3, #1
 800a6be:	717a      	strb	r2, [r7, #5]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1d6      	bne.n	800a672 <crc16_CCITT+0x16>
    }

    return crc;
 800a6c4:	89fb      	ldrh	r3, [r7, #14]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
	...

0800a6d4 <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 800a6de:	4a06      	ldr	r2, [pc, #24]	@ (800a6f8 <fsp_init+0x24>)
 800a6e0:	79fb      	ldrb	r3, [r7, #7]
 800a6e2:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 800a6e4:	4b05      	ldr	r3, [pc, #20]	@ (800a6fc <fsp_init+0x28>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	701a      	strb	r2, [r3, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	20004cc0 	.word	0x20004cc0
 800a6fc:	20004cc1 	.word	0x20004cc1

0800a700 <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af02      	add	r7, sp, #8
 800a706:	603b      	str	r3, [r7, #0]
 800a708:	4603      	mov	r3, r0
 800a70a:	71fb      	strb	r3, [r7, #7]
 800a70c:	460b      	mov	r3, r1
 800a70e:	71bb      	strb	r3, [r7, #6]
 800a710:	4613      	mov	r3, r2
 800a712:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800a714:	797b      	ldrb	r3, [r7, #5]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d10b      	bne.n	800a732 <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 800a71a:	79ba      	ldrb	r2, [r7, #6]
 800a71c:	1df8      	adds	r0, r7, #7
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	2304      	movs	r3, #4
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	4613      	mov	r3, r2
 800a728:	2200      	movs	r2, #0
 800a72a:	2100      	movs	r1, #0
 800a72c:	f000 f83a 	bl	800a7a4 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 800a730:	e00a      	b.n	800a748 <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 800a732:	79ba      	ldrb	r2, [r7, #6]
 800a734:	1df8      	adds	r0, r7, #7
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	2303      	movs	r3, #3
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	4613      	mov	r3, r2
 800a740:	2200      	movs	r2, #0
 800a742:	2100      	movs	r1, #0
 800a744:	f000 f82e 	bl	800a7a4 <fsp_gen_pkt>
}
 800a748:	bf00      	nop
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af02      	add	r7, sp, #8
 800a756:	6039      	str	r1, [r7, #0]
 800a758:	4611      	mov	r1, r2
 800a75a:	461a      	mov	r2, r3
 800a75c:	4603      	mov	r3, r0
 800a75e:	71fb      	strb	r3, [r7, #7]
 800a760:	460b      	mov	r3, r1
 800a762:	71bb      	strb	r3, [r7, #6]
 800a764:	4613      	mov	r3, r2
 800a766:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800a768:	7c3b      	ldrb	r3, [r7, #16]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d10b      	bne.n	800a786 <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800a76e:	7979      	ldrb	r1, [r7, #5]
 800a770:	79ba      	ldrb	r2, [r7, #6]
 800a772:	1df8      	adds	r0, r7, #7
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	2308      	movs	r3, #8
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	460b      	mov	r3, r1
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	f000 f810 	bl	800a7a4 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 800a784:	e00a      	b.n	800a79c <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 800a786:	7979      	ldrb	r1, [r7, #5]
 800a788:	79ba      	ldrb	r2, [r7, #6]
 800a78a:	1df8      	adds	r0, r7, #7
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	2307      	movs	r3, #7
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	460b      	mov	r3, r1
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	f000 f804 	bl	800a7a4 <fsp_gen_pkt>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	71fb      	strb	r3, [r7, #7]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7bc:	22ca      	movs	r2, #202	@ 0xca
 800a7be:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 800a7c0:	4b25      	ldr	r3, [pc, #148]	@ (800a858 <fsp_gen_pkt+0xb4>)
 800a7c2:	781a      	ldrb	r2, [r3, #0]
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	79ba      	ldrb	r2, [r7, #6]
 800a7cc:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d0:	79fa      	ldrb	r2, [r7, #7]
 800a7d2:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a7da:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00e      	beq.n	800a808 <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ec:	78db      	ldrb	r3, [r3, #3]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f4:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 800a7f6:	7dbb      	ldrb	r3, [r7, #22]
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	75ba      	strb	r2, [r7, #22]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	781a      	ldrb	r2, [r3, #0]
 800a802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a804:	440b      	add	r3, r1
 800a806:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 800a808:	2300      	movs	r3, #0
 800a80a:	75fb      	strb	r3, [r7, #23]
 800a80c:	e00d      	b.n	800a82a <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	441a      	add	r2, r3
 800a814:	7dbb      	ldrb	r3, [r7, #22]
 800a816:	1c59      	adds	r1, r3, #1
 800a818:	75b9      	strb	r1, [r7, #22]
 800a81a:	4619      	mov	r1, r3
 800a81c:	7812      	ldrb	r2, [r2, #0]
 800a81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a820:	440b      	add	r3, r1
 800a822:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	3301      	adds	r3, #1
 800a828:	75fb      	strb	r3, [r7, #23]
 800a82a:	7dfa      	ldrb	r2, [r7, #23]
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d3ed      	bcc.n	800a80e <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	1c59      	adds	r1, r3, #1
 800a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a838:	78db      	ldrb	r3, [r3, #3]
 800a83a:	3304      	adds	r3, #4
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	461a      	mov	r2, r3
 800a840:	2000      	movs	r0, #0
 800a842:	f7ff ff0b 	bl	800a65c <crc16_CCITT>
 800a846:	4603      	mov	r3, r0
 800a848:	461a      	mov	r2, r3
 800a84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 800a850:	bf00      	nop
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20004cc0 	.word	0x20004cc0

0800a85c <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b0c8      	sub	sp, #288	@ 0x120
 800a860:	af00      	add	r7, sp, #0
 800a862:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a866:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a86a:	6018      	str	r0, [r3, #0]
 800a86c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a870:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800a874:	6019      	str	r1, [r3, #0]
 800a876:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a87a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800a87e:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 800a886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a890:	461a      	mov	r2, r3
 800a892:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a896:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	7819      	ldrb	r1, [r3, #0]
 800a89e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a8a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8a6:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 800a8a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a8b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	7859      	ldrb	r1, [r3, #1]
 800a8c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a8c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8c8:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 800a8ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a8da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	7899      	ldrb	r1, [r3, #2]
 800a8e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a8e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8ea:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 800a8ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a8fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	78d9      	ldrb	r1, [r3, #3]
 800a904:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a908:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a90c:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 800a90e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a918:	461a      	mov	r2, r3
 800a91a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a91e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	7919      	ldrb	r1, [r3, #4]
 800a926:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a92a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a92e:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 800a930:	2300      	movs	r3, #0
 800a932:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800a936:	e088      	b.n	800aa4a <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 800a938:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a93c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a946:	4413      	add	r3, r2
 800a948:	3305      	adds	r3, #5
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	2bca      	cmp	r3, #202	@ 0xca
 800a94e:	d118      	bne.n	800a982 <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a950:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a954:	1c5a      	adds	r2, r3, #1
 800a956:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a95a:	461a      	mov	r2, r3
 800a95c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a960:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a964:	21bd      	movs	r1, #189	@ 0xbd
 800a966:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800a968:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a972:	461a      	mov	r2, r3
 800a974:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a978:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a97c:	21dc      	movs	r1, #220	@ 0xdc
 800a97e:	5499      	strb	r1, [r3, r2]
 800a980:	e05e      	b.n	800aa40 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 800a982:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a986:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a990:	4413      	add	r3, r2
 800a992:	3305      	adds	r3, #5
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2bef      	cmp	r3, #239	@ 0xef
 800a998:	d118      	bne.n	800a9cc <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a99a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a9aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a9ae:	21bd      	movs	r1, #189	@ 0xbd
 800a9b0:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800a9b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a9c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a9c6:	21de      	movs	r1, #222	@ 0xde
 800a9c8:	5499      	strb	r1, [r3, r2]
 800a9ca:	e039      	b.n	800aa40 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 800a9cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a9d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a9da:	4413      	add	r3, r2
 800a9dc:	3305      	adds	r3, #5
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2bbd      	cmp	r3, #189	@ 0xbd
 800a9e2:	d118      	bne.n	800aa16 <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a9e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a9f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a9f8:	21bd      	movs	r1, #189	@ 0xbd
 800a9fa:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800a9fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aa06:	461a      	mov	r2, r3
 800aa08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aa0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa10:	21db      	movs	r1, #219	@ 0xdb
 800aa12:	5499      	strb	r1, [r3, r2]
 800aa14:	e014      	b.n	800aa40 <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 800aa16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aa20:	4619      	mov	r1, r3
 800aa22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aa26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa30:	4413      	add	r3, r2
 800aa32:	3305      	adds	r3, #5
 800aa34:	781a      	ldrb	r2, [r3, #0]
 800aa36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aa3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa3e:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 800aa40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa44:	3301      	adds	r3, #1
 800aa46:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800aa4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aa4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	78db      	ldrb	r3, [r3, #3]
 800aa56:	461a      	mov	r2, r3
 800aa58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	f6ff af6b 	blt.w	800a938 <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 800aa62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aa66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800aa70:	0a1b      	lsrs	r3, r3, #8
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 800aa78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aa7c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800aa86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 800aa8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa8e:	2bca      	cmp	r3, #202	@ 0xca
 800aa90:	d118      	bne.n	800aac4 <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800aa92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa96:	1c5a      	adds	r2, r3, #1
 800aa98:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aaa2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aaa6:	21bd      	movs	r1, #189	@ 0xbd
 800aaa8:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800aaaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aab4:	461a      	mov	r2, r3
 800aab6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aaba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aabe:	21dc      	movs	r1, #220	@ 0xdc
 800aac0:	5499      	strb	r1, [r3, r2]
 800aac2:	e046      	b.n	800ab52 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 800aac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aac8:	2bef      	cmp	r3, #239	@ 0xef
 800aaca:	d118      	bne.n	800aafe <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800aacc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aad6:	461a      	mov	r2, r3
 800aad8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aadc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aae0:	21bd      	movs	r1, #189	@ 0xbd
 800aae2:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800aae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aaf4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aaf8:	21de      	movs	r1, #222	@ 0xde
 800aafa:	5499      	strb	r1, [r3, r2]
 800aafc:	e029      	b.n	800ab52 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 800aafe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab02:	2bbd      	cmp	r3, #189	@ 0xbd
 800ab04:	d118      	bne.n	800ab38 <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800ab06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ab10:	461a      	mov	r2, r3
 800ab12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ab16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab1a:	21bd      	movs	r1, #189	@ 0xbd
 800ab1c:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800ab1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ab2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab32:	21db      	movs	r1, #219	@ 0xdb
 800ab34:	5499      	strb	r1, [r3, r2]
 800ab36:	e00c      	b.n	800ab52 <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 800ab38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ab42:	4619      	mov	r1, r3
 800ab44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ab48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab4c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800ab50:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 800ab52:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ab56:	2bca      	cmp	r3, #202	@ 0xca
 800ab58:	d118      	bne.n	800ab8c <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800ab5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ab64:	461a      	mov	r2, r3
 800ab66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ab6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab6e:	21bd      	movs	r1, #189	@ 0xbd
 800ab70:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800ab72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab76:	1c5a      	adds	r2, r3, #1
 800ab78:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ab82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab86:	21dc      	movs	r1, #220	@ 0xdc
 800ab88:	5499      	strb	r1, [r3, r2]
 800ab8a:	e046      	b.n	800ac1a <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 800ab8c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ab90:	2bef      	cmp	r3, #239	@ 0xef
 800ab92:	d118      	bne.n	800abc6 <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800ab94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800aba4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aba8:	21bd      	movs	r1, #189	@ 0xbd
 800abaa:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800abac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800abb6:	461a      	mov	r2, r3
 800abb8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800abbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800abc0:	21de      	movs	r1, #222	@ 0xde
 800abc2:	5499      	strb	r1, [r3, r2]
 800abc4:	e029      	b.n	800ac1a <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 800abc6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800abca:	2bbd      	cmp	r3, #189	@ 0xbd
 800abcc:	d118      	bne.n	800ac00 <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800abce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800abd8:	461a      	mov	r2, r3
 800abda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800abde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800abe2:	21bd      	movs	r1, #189	@ 0xbd
 800abe4:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800abe6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800abf0:	461a      	mov	r2, r3
 800abf2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800abf6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800abfa:	21db      	movs	r1, #219	@ 0xdb
 800abfc:	5499      	strb	r1, [r3, r2]
 800abfe:	e00c      	b.n	800ac1a <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 800ac00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac04:	1c5a      	adds	r2, r3, #1
 800ac06:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ac10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac14:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800ac18:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 800ac1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ac24:	461a      	mov	r2, r3
 800ac26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ac2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac2e:	21ef      	movs	r1, #239	@ 0xef
 800ac30:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 800ac32:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800ac36:	f107 0114 	add.w	r1, r7, #20
 800ac3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ac3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800ac42:	6818      	ldr	r0, [r3, #0]
 800ac44:	f003 fbfd 	bl	800e442 <memcpy>
    *frame_len = encoded_length;
 800ac48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ac4c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800ac56:	701a      	strb	r2, [r3, #0]
}
 800ac58:	bf00      	nop
 800ac5a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
	...

0800ac64 <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800ac64:	b580      	push	{r7, lr}
 800ac66:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ac70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ac74:	6018      	str	r0, [r3, #0]
 800ac76:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ac7a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ac84:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800ac88:	460a      	mov	r2, r1
 800ac8a:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 800ac9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800aca2:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2b05      	cmp	r3, #5
 800acaa:	d862      	bhi.n	800ad72 <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 800acac:	2302      	movs	r3, #2
 800acae:	e133      	b.n	800af18 <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 800acb0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800acba:	461a      	mov	r2, r3
 800acbc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800acc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4413      	add	r3, r2
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 800acce:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d038      	beq.n	800ad48 <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 800acd6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800acda:	2bdc      	cmp	r3, #220	@ 0xdc
 800acdc:	d10c      	bne.n	800acf8 <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800acde:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800ace8:	461a      	mov	r2, r3
 800acea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800acee:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800acf2:	21ca      	movs	r1, #202	@ 0xca
 800acf4:	5499      	strb	r1, [r3, r2]
 800acf6:	e023      	b.n	800ad40 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 800acf8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800acfc:	2bde      	cmp	r3, #222	@ 0xde
 800acfe:	d10c      	bne.n	800ad1a <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800ad00:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ad10:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800ad14:	21ef      	movs	r1, #239	@ 0xef
 800ad16:	5499      	strb	r1, [r3, r2]
 800ad18:	e012      	b.n	800ad40 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 800ad1a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800ad1e:	2bdb      	cmp	r3, #219	@ 0xdb
 800ad20:	d10c      	bne.n	800ad3c <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800ad22:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ad32:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800ad36:	21bd      	movs	r1, #189	@ 0xbd
 800ad38:	5499      	strb	r1, [r3, r2]
 800ad3a:	e001      	b.n	800ad40 <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e0eb      	b.n	800af18 <frame_decode+0x2b4>
            }
            escape = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800ad46:	e014      	b.n	800ad72 <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 800ad48:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800ad4c:	2bbd      	cmp	r3, #189	@ 0xbd
 800ad4e:	d103      	bne.n	800ad58 <frame_decode+0xf4>
        	escape = 1;
 800ad50:	2301      	movs	r3, #1
 800ad52:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800ad56:	e00c      	b.n	800ad72 <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 800ad58:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800ad62:	4619      	mov	r1, r3
 800ad64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ad68:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800ad6c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800ad70:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800ad72:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ad76:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800ad7a:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d395      	bcc.n	800acb0 <frame_decode+0x4c>
        }
	}

    i = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800ad8a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800ad94:	461a      	mov	r2, r3
 800ad96:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ad9a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800ad9e:	5c9a      	ldrb	r2, [r3, r2]
 800ada0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ada4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ada8:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800adaa:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800adb4:	461a      	mov	r2, r3
 800adb6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800adba:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800adbe:	5c9a      	ldrb	r2, [r3, r2]
 800adc0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800adc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adc8:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800adca:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800add4:	461a      	mov	r2, r3
 800add6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800adda:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800adde:	5c9a      	ldrb	r2, [r3, r2]
 800ade0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ade4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ade8:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800adea:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800adf4:	461a      	mov	r2, r3
 800adf6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800adfa:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800adfe:	5c9a      	ldrb	r2, [r3, r2]
 800ae00:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ae04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae08:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 800ae0a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ae0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae12:	78db      	ldrb	r3, [r3, #3]
 800ae14:	2bf7      	cmp	r3, #247	@ 0xf7
 800ae16:	d80a      	bhi.n	800ae2e <frame_decode+0x1ca>
 800ae18:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ae1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae20:	78db      	ldrb	r3, [r3, #3]
 800ae22:	461a      	mov	r2, r3
 800ae24:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ae28:	3b06      	subs	r3, #6
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d001      	beq.n	800ae32 <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 800ae2e:	2306      	movs	r3, #6
 800ae30:	e072      	b.n	800af18 <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800ae32:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ae36:	f107 0210 	add.w	r2, r7, #16
 800ae3a:	18d1      	adds	r1, r2, r3
 800ae3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ae40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae44:	78db      	ldrb	r3, [r3, #3]
 800ae46:	461a      	mov	r2, r3
 800ae48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae4c:	3305      	adds	r3, #5
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f003 faf7 	bl	800e442 <memcpy>
    i += fsp_pkt.length;
 800ae54:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ae58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae5c:	78da      	ldrb	r2, [r3, #3]
 800ae5e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ae62:	4413      	add	r3, r2
 800ae64:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 800ae68:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ae6c:	1c5a      	adds	r2, r3, #1
 800ae6e:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800ae72:	461a      	mov	r2, r3
 800ae74:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ae78:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800ae7c:	5c9b      	ldrb	r3, [r3, r2]
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 800ae84:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800ae8e:	461a      	mov	r2, r3
 800ae90:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ae94:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800ae98:	5c9b      	ldrb	r3, [r3, r2]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800aea0:	4313      	orrs	r3, r2
 800aea2:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 800aea6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800aeaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeae:	78db      	ldrb	r3, [r3, #3]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb8:	3301      	adds	r3, #1
 800aeba:	4619      	mov	r1, r3
 800aebc:	2000      	movs	r0, #0
 800aebe:	f7ff fbcd 	bl	800a65c <crc16_CCITT>
 800aec2:	4603      	mov	r3, r0
 800aec4:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 800aec8:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 800aecc:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d001      	beq.n	800aed8 <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 800aed4:	2305      	movs	r3, #5
 800aed6:	e01f      	b.n	800af18 <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 800aed8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800aedc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aee0:	789a      	ldrb	r2, [r3, #2]
 800aee2:	4b10      	ldr	r3, [pc, #64]	@ (800af24 <frame_decode+0x2c0>)
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d001      	beq.n	800aeee <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e014      	b.n	800af18 <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 800aeee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800aef2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800aefc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af00:	4610      	mov	r0, r2
 800af02:	4619      	mov	r1, r3
 800af04:	23fe      	movs	r3, #254	@ 0xfe
 800af06:	461a      	mov	r2, r3
 800af08:	f003 fa9b 	bl	800e442 <memcpy>


    frame_processing(&fsp_pkt);
 800af0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af10:	4618      	mov	r0, r3
 800af12:	f000 f905 	bl	800b120 <frame_processing>


    return 0;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20004cc0 	.word	0x20004cc0

0800af28 <frame_decode_rs422>:



int frame_decode_rs422(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800af28:	b580      	push	{r7, lr}
 800af2a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800af2e:	af00      	add	r7, sp, #0
 800af30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800af34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800af38:	6018      	str	r0, [r3, #0]
 800af3a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800af3e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800af48:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800af4c:	460a      	mov	r2, r1
 800af4e:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
//	if (length < FSP_PKT_MIN_LENGTH - 2) {
//	        return FSP_PKT_INVALID;
//	}


	while (i < length){
 800af62:	e060      	b.n	800b026 <frame_decode_rs422+0xfe>
        uint8_t byte = buffer[i++];
 800af64:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800af6e:	461a      	mov	r2, r3
 800af70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800af74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4413      	add	r3, r2
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (escape) {
 800af82:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800af86:	2b00      	cmp	r3, #0
 800af88:	d038      	beq.n	800affc <frame_decode_rs422+0xd4>
            if (byte == FSP_PKT_TSOD) {
 800af8a:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800af8e:	2bdc      	cmp	r3, #220	@ 0xdc
 800af90:	d10c      	bne.n	800afac <frame_decode_rs422+0x84>
                decoded_payload[j++] = FSP_PKT_SOD;
 800af92:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800af9c:	461a      	mov	r2, r3
 800af9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800afa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800afa6:	21ca      	movs	r1, #202	@ 0xca
 800afa8:	5499      	strb	r1, [r3, r2]
 800afaa:	e023      	b.n	800aff4 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TEOF) {
 800afac:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800afb0:	2bde      	cmp	r3, #222	@ 0xde
 800afb2:	d10c      	bne.n	800afce <frame_decode_rs422+0xa6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800afb4:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800afbe:	461a      	mov	r2, r3
 800afc0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800afc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800afc8:	21ef      	movs	r1, #239	@ 0xef
 800afca:	5499      	strb	r1, [r3, r2]
 800afcc:	e012      	b.n	800aff4 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TESC) {
 800afce:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800afd2:	2bdb      	cmp	r3, #219	@ 0xdb
 800afd4:	d10c      	bne.n	800aff0 <frame_decode_rs422+0xc8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800afd6:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800afe0:	461a      	mov	r2, r3
 800afe2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800afe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800afea:	21bd      	movs	r1, #189	@ 0xbd
 800afec:	5499      	strb	r1, [r3, r2]
 800afee:	e001      	b.n	800aff4 <frame_decode_rs422+0xcc>
            } else {
            	return FSP_PKT_INVALID;
 800aff0:	2302      	movs	r3, #2
 800aff2:	e08f      	b.n	800b114 <frame_decode_rs422+0x1ec>
            }
            escape = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800affa:	e014      	b.n	800b026 <frame_decode_rs422+0xfe>
        } else if (byte == FSP_PKT_ESC) {
 800affc:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800b000:	2bbd      	cmp	r3, #189	@ 0xbd
 800b002:	d103      	bne.n	800b00c <frame_decode_rs422+0xe4>
        	escape = 1;
 800b004:	2301      	movs	r3, #1
 800b006:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800b00a:	e00c      	b.n	800b026 <frame_decode_rs422+0xfe>
        } else {
            decoded_payload[j++] = byte;
 800b00c:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800b016:	4619      	mov	r1, r3
 800b018:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b01c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b020:	f897 220c 	ldrb.w	r2, [r7, #524]	@ 0x20c
 800b024:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800b026:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b02a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800b02e:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	429a      	cmp	r2, r3
 800b036:	d395      	bcc.n	800af64 <frame_decode_rs422+0x3c>
        }
	}

    i = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800b03e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b048:	461a      	mov	r2, r3
 800b04a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b04e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b052:	5c9a      	ldrb	r2, [r3, r2]
 800b054:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b05c:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800b05e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b068:	461a      	mov	r2, r3
 800b06a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b06e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b072:	5c9a      	ldrb	r2, [r3, r2]
 800b074:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b078:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b07c:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800b07e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b088:	461a      	mov	r2, r3
 800b08a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b08e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b092:	5c9a      	ldrb	r2, [r3, r2]
 800b094:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b09c:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800b09e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b0ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800b0b2:	5c9a      	ldrb	r2, [r3, r2]
 800b0b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b0b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0bc:	711a      	strb	r2, [r3, #4]

//    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
//        return FSP_PKT_WRONG_LENGTH;
//    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800b0be:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b0c2:	f107 0214 	add.w	r2, r7, #20
 800b0c6:	18d1      	adds	r1, r2, r3
 800b0c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b0cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0d0:	78db      	ldrb	r3, [r3, #3]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800b0d8:	3305      	adds	r3, #5
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f003 f9b1 	bl	800e442 <memcpy>
    i += fsp_pkt.length;
 800b0e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b0e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0e8:	78da      	ldrb	r2, [r3, #3]
 800b0ea:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
//    // Address
//    if (fsp_pkt.dst_adr != fsp_my_adr) {
//        return FSP_PKT_WRONG_ADR;
//    }

    *pkt = fsp_pkt;
 800b0f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b0f8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800b102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b106:	4610      	mov	r0, r2
 800b108:	4619      	mov	r1, r3
 800b10a:	23fe      	movs	r3, #254	@ 0xfe
 800b10c:	461a      	mov	r2, r3
 800b10e:	f003 f998 	bl	800e442 <memcpy>


    return 0;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <frame_processing>:


char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 800b120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b124:	f5ad 6dc0 	sub.w	sp, sp, #1536	@ 0x600
 800b128:	af2c      	add	r7, sp, #176	@ 0xb0
 800b12a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b12e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b132:	6018      	str	r0, [r3, #0]


	switch (fsp_pkt->src_adr){
 800b134:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b138:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	785b      	ldrb	r3, [r3, #1]
 800b140:	3b02      	subs	r3, #2
 800b142:	2b03      	cmp	r3, #3
 800b144:	f202 80c7 	bhi.w	800d2d6 <frame_processing+0x21b6>
 800b148:	a201      	add	r2, pc, #4	@ (adr r2, 800b150 <frame_processing+0x30>)
 800b14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14e:	bf00      	nop
 800b150:	0800b161 	.word	0x0800b161
 800b154:	0800bd23 	.word	0x0800bd23
 800b158:	0800c59d 	.word	0x0800c59d
 800b15c:	0800c5a5 	.word	0x0800c5a5
		case FSP_ADR_PMU:
			switch (fsp_pkt->type)
 800b160:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b164:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	791b      	ldrb	r3, [r3, #4]
 800b16c:	2b05      	cmp	r3, #5
 800b16e:	d003      	beq.n	800b178 <frame_processing+0x58>
 800b170:	2b07      	cmp	r3, #7
 800b172:	d010      	beq.n	800b196 <frame_processing+0x76>
 800b174:	f000 bdcb 	b.w	800bd0e <frame_processing+0xbee>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800b178:	f7f6 ffca 	bl	8002110 <clear_send_flag>

                    if (uart_choose_uart5) {
 800b17c:	4b9d      	ldr	r3, [pc, #628]	@ (800b3f4 <frame_processing+0x2d4>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <frame_processing+0x6e>
                    	Uart_sendstring(UART5, "\nPMU_ACK\r\n> ");
 800b186:	499c      	ldr	r1, [pc, #624]	@ (800b3f8 <frame_processing+0x2d8>)
 800b188:	489c      	ldr	r0, [pc, #624]	@ (800b3fc <frame_processing+0x2dc>)
 800b18a:	f7f6 fe9f 	bl	8001ecc <Uart_sendstring>
                    }
					Uart_sendstring(USART6, "\nPMU_ACK\r\n> ");
 800b18e:	499a      	ldr	r1, [pc, #616]	@ (800b3f8 <frame_processing+0x2d8>)
 800b190:	489b      	ldr	r0, [pc, #620]	@ (800b400 <frame_processing+0x2e0>)
 800b192:	f7f6 fe9b 	bl	8001ecc <Uart_sendstring>

				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800b196:	f7f6 ffbb 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800b19a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b19e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	795b      	ldrb	r3, [r3, #5]
 800b1a6:	2b08      	cmp	r3, #8
 800b1a8:	dc1a      	bgt.n	800b1e0 <frame_processing+0xc0>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f2c0 85b4 	blt.w	800bd18 <frame_processing+0xbf8>
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	f200 85b1 	bhi.w	800bd18 <frame_processing+0xbf8>
 800b1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1bc <frame_processing+0x9c>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1e9 	.word	0x0800b1e9
 800b1c0:	0800b269 	.word	0x0800b269
 800b1c4:	0800b4bb 	.word	0x0800b4bb
 800b1c8:	0800b63b 	.word	0x0800b63b
 800b1cc:	0800b72d 	.word	0x0800b72d
 800b1d0:	0800bd19 	.word	0x0800bd19
 800b1d4:	0800bd19 	.word	0x0800bd19
 800b1d8:	0800bd19 	.word	0x0800bd19
 800b1dc:	0800b7fd 	.word	0x0800b7fd
 800b1e0:	2bff      	cmp	r3, #255	@ 0xff
 800b1e2:	d021      	beq.n	800b228 <frame_processing+0x108>

							    }
							    break;
					}

					break;
 800b1e4:	f000 bd98 	b.w	800bd18 <frame_processing+0xbf8>
							sprintf(buffer_0x00, "PMU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800b1e8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b1ec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	799b      	ldrb	r3, [r3, #6]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b1fa:	4982      	ldr	r1, [pc, #520]	@ (800b404 <frame_processing+0x2e4>)
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f003 f83d 	bl	800e27c <siprintf>
		                    if (uart_choose_uart5) {
 800b202:	4b7c      	ldr	r3, [pc, #496]	@ (800b3f4 <frame_processing+0x2d4>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d005      	beq.n	800b218 <frame_processing+0xf8>
								Uart_sendstring(UART5, buffer_0x00);
 800b20c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b210:	4619      	mov	r1, r3
 800b212:	487a      	ldr	r0, [pc, #488]	@ (800b3fc <frame_processing+0x2dc>)
 800b214:	f7f6 fe5a 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x00);
 800b218:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b21c:	4619      	mov	r1, r3
 800b21e:	4878      	ldr	r0, [pc, #480]	@ (800b400 <frame_processing+0x2e0>)
 800b220:	f7f6 fe54 	bl	8001ecc <Uart_sendstring>
							break;
 800b224:	f000 bd72 	b.w	800bd0c <frame_processing+0xbec>
							sprintf(buffer_0xFF, "PMU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800b228:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b22c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	799b      	ldrb	r3, [r3, #6]
 800b234:	461a      	mov	r2, r3
 800b236:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b23a:	4973      	ldr	r1, [pc, #460]	@ (800b408 <frame_processing+0x2e8>)
 800b23c:	4618      	mov	r0, r3
 800b23e:	f003 f81d 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800b242:	4b6c      	ldr	r3, [pc, #432]	@ (800b3f4 <frame_processing+0x2d4>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d005      	beq.n	800b258 <frame_processing+0x138>
								Uart_sendstring(UART5, buffer_0xFF);
 800b24c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b250:	4619      	mov	r1, r3
 800b252:	486a      	ldr	r0, [pc, #424]	@ (800b3fc <frame_processing+0x2dc>)
 800b254:	f7f6 fe3a 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0xFF);
 800b258:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b25c:	4619      	mov	r1, r3
 800b25e:	4868      	ldr	r0, [pc, #416]	@ (800b400 <frame_processing+0x2e0>)
 800b260:	f7f6 fe34 	bl	8001ecc <Uart_sendstring>
							break;
 800b264:	f000 bd52 	b.w	800bd0c <frame_processing+0xbec>
						    int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800b268:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b26c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	799b      	ldrb	r3, [r3, #6]
 800b274:	021b      	lsls	r3, r3, #8
 800b276:	b21a      	sxth	r2, r3
 800b278:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b27c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	79db      	ldrb	r3, [r3, #7]
 800b284:	b21b      	sxth	r3, r3
 800b286:	4313      	orrs	r3, r2
 800b288:	f8a7 3494 	strh.w	r3, [r7, #1172]	@ 0x494
						    int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800b28c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b290:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	7a1b      	ldrb	r3, [r3, #8]
 800b298:	021b      	lsls	r3, r3, #8
 800b29a:	b21a      	sxth	r2, r3
 800b29c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2a0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	7a5b      	ldrb	r3, [r3, #9]
 800b2a8:	b21b      	sxth	r3, r3
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	f8a7 3492 	strh.w	r3, [r7, #1170]	@ 0x492
						    int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800b2b0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2b4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	7a9b      	ldrb	r3, [r3, #10]
 800b2bc:	021b      	lsls	r3, r3, #8
 800b2be:	b21a      	sxth	r2, r3
 800b2c0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2c4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	7adb      	ldrb	r3, [r3, #11]
 800b2cc:	b21b      	sxth	r3, r3
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	f8a7 3490 	strh.w	r3, [r7, #1168]	@ 0x490
						    int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800b2d4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2d8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	7b1b      	ldrb	r3, [r3, #12]
 800b2e0:	021b      	lsls	r3, r3, #8
 800b2e2:	b21a      	sxth	r2, r3
 800b2e4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2e8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	7b5b      	ldrb	r3, [r3, #13]
 800b2f0:	b21b      	sxth	r3, r3
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	f8a7 348e 	strh.w	r3, [r7, #1166]	@ 0x48e
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b2f8:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	da03      	bge.n	800b308 <frame_processing+0x1e8>
 800b300:	4b42      	ldr	r3, [pc, #264]	@ (800b40c <frame_processing+0x2ec>)
 800b302:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b306:	e002      	b.n	800b30e <frame_processing+0x1ee>
 800b308:	4b41      	ldr	r3, [pc, #260]	@ (800b410 <frame_processing+0x2f0>)
 800b30a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800b30e:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800b312:	2b00      	cmp	r3, #0
 800b314:	bfb8      	it	lt
 800b316:	425b      	neglt	r3, r3
 800b318:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b31a:	4a3e      	ldr	r2, [pc, #248]	@ (800b414 <frame_processing+0x2f4>)
 800b31c:	fb82 1203 	smull	r1, r2, r2, r3
 800b320:	1152      	asrs	r2, r2, #5
 800b322:	17db      	asrs	r3, r3, #31
 800b324:	eba2 0c03 	sub.w	ip, r2, r3
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800b328:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	bfb8      	it	lt
 800b330:	425b      	neglt	r3, r3
 800b332:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b334:	4a37      	ldr	r2, [pc, #220]	@ (800b414 <frame_processing+0x2f4>)
 800b336:	fb82 1203 	smull	r1, r2, r2, r3
 800b33a:	1151      	asrs	r1, r2, #5
 800b33c:	17da      	asrs	r2, r3, #31
 800b33e:	1a8c      	subs	r4, r1, r2
 800b340:	2264      	movs	r2, #100	@ 0x64
 800b342:	fb04 f202 	mul.w	r2, r4, r2
 800b346:	1a9c      	subs	r4, r3, r2
 800b348:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da01      	bge.n	800b354 <frame_processing+0x234>
 800b350:	4e2e      	ldr	r6, [pc, #184]	@ (800b40c <frame_processing+0x2ec>)
 800b352:	e000      	b.n	800b356 <frame_processing+0x236>
 800b354:	4e2e      	ldr	r6, [pc, #184]	@ (800b410 <frame_processing+0x2f0>)
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800b356:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bfb8      	it	lt
 800b35e:	425b      	neglt	r3, r3
 800b360:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b362:	4a2c      	ldr	r2, [pc, #176]	@ (800b414 <frame_processing+0x2f4>)
 800b364:	fb82 1203 	smull	r1, r2, r2, r3
 800b368:	1152      	asrs	r2, r2, #5
 800b36a:	17db      	asrs	r3, r3, #31
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800b372:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800b376:	2b00      	cmp	r3, #0
 800b378:	bfb8      	it	lt
 800b37a:	425b      	neglt	r3, r3
 800b37c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b37e:	4a25      	ldr	r2, [pc, #148]	@ (800b414 <frame_processing+0x2f4>)
 800b380:	fb82 1203 	smull	r1, r2, r2, r3
 800b384:	1151      	asrs	r1, r2, #5
 800b386:	17da      	asrs	r2, r3, #31
 800b388:	1a8d      	subs	r5, r1, r2
 800b38a:	2264      	movs	r2, #100	@ 0x64
 800b38c:	fb05 f202 	mul.w	r2, r5, r2
 800b390:	1a9d      	subs	r5, r3, r2
 800b392:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800b396:	2b00      	cmp	r3, #0
 800b398:	da03      	bge.n	800b3a2 <frame_processing+0x282>
 800b39a:	4b1c      	ldr	r3, [pc, #112]	@ (800b40c <frame_processing+0x2ec>)
 800b39c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3a0:	e002      	b.n	800b3a8 <frame_processing+0x288>
 800b3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b410 <frame_processing+0x2f0>)
 800b3a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800b3a8:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	bfb8      	it	lt
 800b3b0:	425b      	neglt	r3, r3
 800b3b2:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b3b4:	4a17      	ldr	r2, [pc, #92]	@ (800b414 <frame_processing+0x2f4>)
 800b3b6:	fb82 1203 	smull	r1, r2, r2, r3
 800b3ba:	1152      	asrs	r2, r2, #5
 800b3bc:	17db      	asrs	r3, r3, #31
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800b3c4:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	bfb8      	it	lt
 800b3cc:	425b      	neglt	r3, r3
 800b3ce:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b3d0:	4a10      	ldr	r2, [pc, #64]	@ (800b414 <frame_processing+0x2f4>)
 800b3d2:	fb82 1203 	smull	r1, r2, r2, r3
 800b3d6:	1151      	asrs	r1, r2, #5
 800b3d8:	17da      	asrs	r2, r3, #31
 800b3da:	1a89      	subs	r1, r1, r2
 800b3dc:	2264      	movs	r2, #100	@ 0x64
 800b3de:	fb01 f202 	mul.w	r2, r1, r2
 800b3e2:	1a99      	subs	r1, r3, r2
 800b3e4:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	da15      	bge.n	800b418 <frame_processing+0x2f8>
 800b3ec:	4b07      	ldr	r3, [pc, #28]	@ (800b40c <frame_processing+0x2ec>)
 800b3ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3f2:	e014      	b.n	800b41e <frame_processing+0x2fe>
 800b3f4:	20004830 	.word	0x20004830
 800b3f8:	08013c30 	.word	0x08013c30
 800b3fc:	40005000 	.word	0x40005000
 800b400:	40011400 	.word	0x40011400
 800b404:	08013c40 	.word	0x08013c40
 800b408:	08013c5c 	.word	0x08013c5c
 800b40c:	08013c78 	.word	0x08013c78
 800b410:	08013c7c 	.word	0x08013c7c
 800b414:	51eb851f 	.word	0x51eb851f
 800b418:	4bbc      	ldr	r3, [pc, #752]	@ (800b70c <frame_processing+0x5ec>)
 800b41a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800b41e:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800b422:	2b00      	cmp	r3, #0
 800b424:	bfb8      	it	lt
 800b426:	425b      	neglt	r3, r3
 800b428:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b42a:	4ab9      	ldr	r2, [pc, #740]	@ (800b710 <frame_processing+0x5f0>)
 800b42c:	fb82 0203 	smull	r0, r2, r2, r3
 800b430:	1152      	asrs	r2, r2, #5
 800b432:	17db      	asrs	r3, r3, #31
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800b43a:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800b43e:	2b00      	cmp	r3, #0
 800b440:	bfb8      	it	lt
 800b442:	425b      	neglt	r3, r3
 800b444:	b29b      	uxth	r3, r3
 800b446:	4618      	mov	r0, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800b448:	4bb1      	ldr	r3, [pc, #708]	@ (800b710 <frame_processing+0x5f0>)
 800b44a:	fb83 2300 	smull	r2, r3, r3, r0
 800b44e:	115a      	asrs	r2, r3, #5
 800b450:	17c3      	asrs	r3, r0, #31
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	2264      	movs	r2, #100	@ 0x64
 800b456:	fb02 f303 	mul.w	r3, r2, r3
 800b45a:	1ac3      	subs	r3, r0, r3
 800b45c:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800b460:	9309      	str	r3, [sp, #36]	@ 0x24
 800b462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b466:	9308      	str	r3, [sp, #32]
 800b468:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b46c:	9307      	str	r3, [sp, #28]
 800b46e:	9106      	str	r1, [sp, #24]
 800b470:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b474:	9305      	str	r3, [sp, #20]
 800b476:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b47a:	9304      	str	r3, [sp, #16]
 800b47c:	9503      	str	r5, [sp, #12]
 800b47e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b482:	9302      	str	r3, [sp, #8]
 800b484:	9601      	str	r6, [sp, #4]
 800b486:	9400      	str	r4, [sp, #0]
 800b488:	4663      	mov	r3, ip
 800b48a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b48e:	49a1      	ldr	r1, [pc, #644]	@ (800b714 <frame_processing+0x5f4>)
 800b490:	f002 fef4 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800b494:	4ba0      	ldr	r3, [pc, #640]	@ (800b718 <frame_processing+0x5f8>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d005      	beq.n	800b4aa <frame_processing+0x38a>
								Uart_sendstring(UART5, buffer_0x01);
 800b49e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	489d      	ldr	r0, [pc, #628]	@ (800b71c <frame_processing+0x5fc>)
 800b4a6:	f7f6 fd11 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x01);
 800b4aa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	489b      	ldr	r0, [pc, #620]	@ (800b720 <frame_processing+0x600>)
 800b4b2:	f7f6 fd0b 	bl	8001ecc <Uart_sendstring>
						break;
 800b4b6:	f000 bc29 	b.w	800bd0c <frame_processing+0xbec>
					        uint16_t bat0 = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800b4ba:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4be:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	799b      	ldrb	r3, [r3, #6]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	b21a      	sxth	r2, r3
 800b4ca:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4ce:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	79db      	ldrb	r3, [r3, #7]
 800b4d6:	b21b      	sxth	r3, r3
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	b21b      	sxth	r3, r3
 800b4dc:	f8a7 349c 	strh.w	r3, [r7, #1180]	@ 0x49c
					        uint16_t bat1 = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800b4e0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4e4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	7a1b      	ldrb	r3, [r3, #8]
 800b4ec:	021b      	lsls	r3, r3, #8
 800b4ee:	b21a      	sxth	r2, r3
 800b4f0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4f4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	7a5b      	ldrb	r3, [r3, #9]
 800b4fc:	b21b      	sxth	r3, r3
 800b4fe:	4313      	orrs	r3, r2
 800b500:	b21b      	sxth	r3, r3
 800b502:	f8a7 349a 	strh.w	r3, [r7, #1178]	@ 0x49a
					        uint16_t bat2 = (uint16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800b506:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b50a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	7a9b      	ldrb	r3, [r3, #10]
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	b21a      	sxth	r2, r3
 800b516:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b51a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	7adb      	ldrb	r3, [r3, #11]
 800b522:	b21b      	sxth	r3, r3
 800b524:	4313      	orrs	r3, r2
 800b526:	b21b      	sxth	r3, r3
 800b528:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498
					        uint16_t bat3 = (uint16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800b52c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b530:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	7b1b      	ldrb	r3, [r3, #12]
 800b538:	021b      	lsls	r3, r3, #8
 800b53a:	b21a      	sxth	r2, r3
 800b53c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b540:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	7b5b      	ldrb	r3, [r3, #13]
 800b548:	b21b      	sxth	r3, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	b21b      	sxth	r3, r3
 800b54e:	f8a7 3496 	strh.w	r3, [r7, #1174]	@ 0x496
					        sprintf(buffer_0x02, "PMU_Res: CMDcode 0x02 [BAT0: %d.%02d V, BAT1: %d.%02d V, BAT2: %d.%02d V, BAT3: %d.%02d V]\n",
 800b552:	f8b7 349c 	ldrh.w	r3, [r7, #1180]	@ 0x49c
 800b556:	4a6e      	ldr	r2, [pc, #440]	@ (800b710 <frame_processing+0x5f0>)
 800b558:	fba2 2303 	umull	r2, r3, r2, r3
 800b55c:	095b      	lsrs	r3, r3, #5
 800b55e:	b29b      	uxth	r3, r3
 800b560:	469c      	mov	ip, r3
 800b562:	f8b7 349c 	ldrh.w	r3, [r7, #1180]	@ 0x49c
 800b566:	4a6a      	ldr	r2, [pc, #424]	@ (800b710 <frame_processing+0x5f0>)
 800b568:	fba2 1203 	umull	r1, r2, r2, r3
 800b56c:	0952      	lsrs	r2, r2, #5
 800b56e:	2164      	movs	r1, #100	@ 0x64
 800b570:	fb01 f202 	mul.w	r2, r1, r2
 800b574:	1a9b      	subs	r3, r3, r2
 800b576:	b29b      	uxth	r3, r3
 800b578:	469e      	mov	lr, r3
 800b57a:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 800b57e:	4a64      	ldr	r2, [pc, #400]	@ (800b710 <frame_processing+0x5f0>)
 800b580:	fba2 2303 	umull	r2, r3, r2, r3
 800b584:	095b      	lsrs	r3, r3, #5
 800b586:	b29b      	uxth	r3, r3
 800b588:	461c      	mov	r4, r3
 800b58a:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 800b58e:	4a60      	ldr	r2, [pc, #384]	@ (800b710 <frame_processing+0x5f0>)
 800b590:	fba2 1203 	umull	r1, r2, r2, r3
 800b594:	0952      	lsrs	r2, r2, #5
 800b596:	2164      	movs	r1, #100	@ 0x64
 800b598:	fb01 f202 	mul.w	r2, r1, r2
 800b59c:	1a9b      	subs	r3, r3, r2
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	461d      	mov	r5, r3
 800b5a2:	f8b7 3498 	ldrh.w	r3, [r7, #1176]	@ 0x498
 800b5a6:	4a5a      	ldr	r2, [pc, #360]	@ (800b710 <frame_processing+0x5f0>)
 800b5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ac:	095b      	lsrs	r3, r3, #5
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	461e      	mov	r6, r3
 800b5b2:	f8b7 3498 	ldrh.w	r3, [r7, #1176]	@ 0x498
 800b5b6:	4a56      	ldr	r2, [pc, #344]	@ (800b710 <frame_processing+0x5f0>)
 800b5b8:	fba2 1203 	umull	r1, r2, r2, r3
 800b5bc:	0952      	lsrs	r2, r2, #5
 800b5be:	2164      	movs	r1, #100	@ 0x64
 800b5c0:	fb01 f202 	mul.w	r2, r1, r2
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b5cc:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	@ 0x496
 800b5d0:	4a4f      	ldr	r2, [pc, #316]	@ (800b710 <frame_processing+0x5f0>)
 800b5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5d6:	095b      	lsrs	r3, r3, #5
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b5de:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	@ 0x496
 800b5e2:	4a4b      	ldr	r2, [pc, #300]	@ (800b710 <frame_processing+0x5f0>)
 800b5e4:	fba2 1203 	umull	r1, r2, r2, r3
 800b5e8:	0952      	lsrs	r2, r2, #5
 800b5ea:	2164      	movs	r1, #100	@ 0x64
 800b5ec:	fb01 f202 	mul.w	r2, r1, r2
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800b5f8:	9305      	str	r3, [sp, #20]
 800b5fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b5fe:	9204      	str	r2, [sp, #16]
 800b600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	9602      	str	r6, [sp, #8]
 800b608:	9501      	str	r5, [sp, #4]
 800b60a:	9400      	str	r4, [sp, #0]
 800b60c:	4673      	mov	r3, lr
 800b60e:	4662      	mov	r2, ip
 800b610:	4944      	ldr	r1, [pc, #272]	@ (800b724 <frame_processing+0x604>)
 800b612:	f002 fe33 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800b616:	4b40      	ldr	r3, [pc, #256]	@ (800b718 <frame_processing+0x5f8>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d005      	beq.n	800b62c <frame_processing+0x50c>
								Uart_sendstring(UART5, buffer_0x02);
 800b620:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b624:	4619      	mov	r1, r3
 800b626:	483d      	ldr	r0, [pc, #244]	@ (800b71c <frame_processing+0x5fc>)
 800b628:	f7f6 fc50 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x02);
 800b62c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b630:	4619      	mov	r1, r3
 800b632:	483b      	ldr	r0, [pc, #236]	@ (800b720 <frame_processing+0x600>)
 800b634:	f7f6 fc4a 	bl	8001ecc <Uart_sendstring>
							break;
 800b638:	e368      	b.n	800bd0c <frame_processing+0xbec>
						    uint16_t vin = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800b63a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b63e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	799b      	ldrb	r3, [r3, #6]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	b21a      	sxth	r2, r3
 800b64a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b64e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	79db      	ldrb	r3, [r3, #7]
 800b656:	b21b      	sxth	r3, r3
 800b658:	4313      	orrs	r3, r2
 800b65a:	b21b      	sxth	r3, r3
 800b65c:	f8a7 34a0 	strh.w	r3, [r7, #1184]	@ 0x4a0
						    uint16_t iin = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800b660:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b664:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	7a1b      	ldrb	r3, [r3, #8]
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	b21a      	sxth	r2, r3
 800b670:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b674:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	7a5b      	ldrb	r3, [r3, #9]
 800b67c:	b21b      	sxth	r3, r3
 800b67e:	4313      	orrs	r3, r2
 800b680:	b21b      	sxth	r3, r3
 800b682:	f8a7 349e 	strh.w	r3, [r7, #1182]	@ 0x49e
						    sprintf(buffer_0x03, "PMU_Res: CMDcode 0x03 [VIN: %d.%02d V, IIN: %d.%02d A]\n",
 800b686:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800b68a:	4a21      	ldr	r2, [pc, #132]	@ (800b710 <frame_processing+0x5f0>)
 800b68c:	fba2 2303 	umull	r2, r3, r2, r3
 800b690:	095b      	lsrs	r3, r3, #5
 800b692:	b29b      	uxth	r3, r3
 800b694:	461d      	mov	r5, r3
 800b696:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800b69a:	4a1d      	ldr	r2, [pc, #116]	@ (800b710 <frame_processing+0x5f0>)
 800b69c:	fba2 1203 	umull	r1, r2, r2, r3
 800b6a0:	0952      	lsrs	r2, r2, #5
 800b6a2:	2164      	movs	r1, #100	@ 0x64
 800b6a4:	fb01 f202 	mul.w	r2, r1, r2
 800b6a8:	1a9b      	subs	r3, r3, r2
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	461e      	mov	r6, r3
 800b6ae:	f8b7 349e 	ldrh.w	r3, [r7, #1182]	@ 0x49e
 800b6b2:	4a17      	ldr	r2, [pc, #92]	@ (800b710 <frame_processing+0x5f0>)
 800b6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b8:	095b      	lsrs	r3, r3, #5
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	461c      	mov	r4, r3
 800b6be:	f8b7 349e 	ldrh.w	r3, [r7, #1182]	@ 0x49e
 800b6c2:	4a13      	ldr	r2, [pc, #76]	@ (800b710 <frame_processing+0x5f0>)
 800b6c4:	fba2 1203 	umull	r1, r2, r2, r3
 800b6c8:	0952      	lsrs	r2, r2, #5
 800b6ca:	2164      	movs	r1, #100	@ 0x64
 800b6cc:	fb01 f202 	mul.w	r2, r1, r2
 800b6d0:	1a9b      	subs	r3, r3, r2
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	9400      	str	r4, [sp, #0]
 800b6dc:	4633      	mov	r3, r6
 800b6de:	462a      	mov	r2, r5
 800b6e0:	4911      	ldr	r1, [pc, #68]	@ (800b728 <frame_processing+0x608>)
 800b6e2:	f002 fdcb 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800b6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b718 <frame_processing+0x5f8>)
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d005      	beq.n	800b6fc <frame_processing+0x5dc>
								Uart_sendstring(UART5, buffer_0x03);
 800b6f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4809      	ldr	r0, [pc, #36]	@ (800b71c <frame_processing+0x5fc>)
 800b6f8:	f7f6 fbe8 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x03);
 800b6fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b700:	4619      	mov	r1, r3
 800b702:	4807      	ldr	r0, [pc, #28]	@ (800b720 <frame_processing+0x600>)
 800b704:	f7f6 fbe2 	bl	8001ecc <Uart_sendstring>
						    break;
 800b708:	e300      	b.n	800bd0c <frame_processing+0xbec>
 800b70a:	bf00      	nop
 800b70c:	08013c7c 	.word	0x08013c7c
 800b710:	51eb851f 	.word	0x51eb851f
 800b714:	08013c80 	.word	0x08013c80
 800b718:	20004830 	.word	0x20004830
 800b71c:	40005000 	.word	0x40005000
 800b720:	40011400 	.word	0x40011400
 800b724:	08013ce0 	.word	0x08013ce0
 800b728:	08013d3c 	.word	0x08013d3c
						    uint16_t vout = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800b72c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b730:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	799b      	ldrb	r3, [r3, #6]
 800b738:	021b      	lsls	r3, r3, #8
 800b73a:	b21a      	sxth	r2, r3
 800b73c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b740:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	79db      	ldrb	r3, [r3, #7]
 800b748:	b21b      	sxth	r3, r3
 800b74a:	4313      	orrs	r3, r2
 800b74c:	b21b      	sxth	r3, r3
 800b74e:	f8a7 34a4 	strh.w	r3, [r7, #1188]	@ 0x4a4
						    uint16_t iout = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800b752:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b756:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	7a1b      	ldrb	r3, [r3, #8]
 800b75e:	021b      	lsls	r3, r3, #8
 800b760:	b21a      	sxth	r2, r3
 800b762:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b766:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	7a5b      	ldrb	r3, [r3, #9]
 800b76e:	b21b      	sxth	r3, r3
 800b770:	4313      	orrs	r3, r2
 800b772:	b21b      	sxth	r3, r3
 800b774:	f8a7 34a2 	strh.w	r3, [r7, #1186]	@ 0x4a2
						    sprintf(buffer_0x04_pmu, "PMU_Res: CMDcode 0x04 [VOUT: %d.%02d V, IOUT: %d.%02d A]\n",
 800b778:	f8b7 34a4 	ldrh.w	r3, [r7, #1188]	@ 0x4a4
 800b77c:	4abf      	ldr	r2, [pc, #764]	@ (800ba7c <frame_processing+0x95c>)
 800b77e:	fba2 2303 	umull	r2, r3, r2, r3
 800b782:	095b      	lsrs	r3, r3, #5
 800b784:	b29b      	uxth	r3, r3
 800b786:	461d      	mov	r5, r3
 800b788:	f8b7 34a4 	ldrh.w	r3, [r7, #1188]	@ 0x4a4
 800b78c:	4abb      	ldr	r2, [pc, #748]	@ (800ba7c <frame_processing+0x95c>)
 800b78e:	fba2 1203 	umull	r1, r2, r2, r3
 800b792:	0952      	lsrs	r2, r2, #5
 800b794:	2164      	movs	r1, #100	@ 0x64
 800b796:	fb01 f202 	mul.w	r2, r1, r2
 800b79a:	1a9b      	subs	r3, r3, r2
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	461e      	mov	r6, r3
 800b7a0:	f8b7 34a2 	ldrh.w	r3, [r7, #1186]	@ 0x4a2
 800b7a4:	4ab5      	ldr	r2, [pc, #724]	@ (800ba7c <frame_processing+0x95c>)
 800b7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7aa:	095b      	lsrs	r3, r3, #5
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	461c      	mov	r4, r3
 800b7b0:	f8b7 34a2 	ldrh.w	r3, [r7, #1186]	@ 0x4a2
 800b7b4:	4ab1      	ldr	r2, [pc, #708]	@ (800ba7c <frame_processing+0x95c>)
 800b7b6:	fba2 1203 	umull	r1, r2, r2, r3
 800b7ba:	0952      	lsrs	r2, r2, #5
 800b7bc:	2164      	movs	r1, #100	@ 0x64
 800b7be:	fb01 f202 	mul.w	r2, r1, r2
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800b7ca:	9301      	str	r3, [sp, #4]
 800b7cc:	9400      	str	r4, [sp, #0]
 800b7ce:	4633      	mov	r3, r6
 800b7d0:	462a      	mov	r2, r5
 800b7d2:	49ab      	ldr	r1, [pc, #684]	@ (800ba80 <frame_processing+0x960>)
 800b7d4:	f002 fd52 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800b7d8:	4baa      	ldr	r3, [pc, #680]	@ (800ba84 <frame_processing+0x964>)
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d005      	beq.n	800b7ee <frame_processing+0x6ce>
							    Uart_sendstring(UART5, buffer_0x04_pmu);
 800b7e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	48a7      	ldr	r0, [pc, #668]	@ (800ba88 <frame_processing+0x968>)
 800b7ea:	f7f6 fb6f 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x04_pmu);
 800b7ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	48a5      	ldr	r0, [pc, #660]	@ (800ba8c <frame_processing+0x96c>)
 800b7f6:	f7f6 fb69 	bl	8001ecc <Uart_sendstring>
							break;
 800b7fa:	e287      	b.n	800bd0c <frame_processing+0xbec>
							    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800b7fc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b800:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	799b      	ldrb	r3, [r3, #6]
 800b808:	021b      	lsls	r3, r3, #8
 800b80a:	b21a      	sxth	r2, r3
 800b80c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b810:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	79db      	ldrb	r3, [r3, #7]
 800b818:	b21b      	sxth	r3, r3
 800b81a:	4313      	orrs	r3, r2
 800b81c:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc
							    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800b820:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b824:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	7a1b      	ldrb	r3, [r3, #8]
 800b82c:	021b      	lsls	r3, r3, #8
 800b82e:	b21a      	sxth	r2, r3
 800b830:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b834:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	7a5b      	ldrb	r3, [r3, #9]
 800b83c:	b21b      	sxth	r3, r3
 800b83e:	4313      	orrs	r3, r2
 800b840:	f8a7 34ba 	strh.w	r3, [r7, #1210]	@ 0x4ba
							    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800b844:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b848:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	7a9b      	ldrb	r3, [r3, #10]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	b21a      	sxth	r2, r3
 800b854:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b858:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	7adb      	ldrb	r3, [r3, #11]
 800b860:	b21b      	sxth	r3, r3
 800b862:	4313      	orrs	r3, r2
 800b864:	f8a7 34b8 	strh.w	r3, [r7, #1208]	@ 0x4b8
							    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800b868:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b86c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	7b1b      	ldrb	r3, [r3, #12]
 800b874:	021b      	lsls	r3, r3, #8
 800b876:	b21a      	sxth	r2, r3
 800b878:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b87c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	7b5b      	ldrb	r3, [r3, #13]
 800b884:	b21b      	sxth	r3, r3
 800b886:	4313      	orrs	r3, r2
 800b888:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
							    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800b88c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b890:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	7b9b      	ldrb	r3, [r3, #14]
 800b898:	021b      	lsls	r3, r3, #8
 800b89a:	b21a      	sxth	r2, r3
 800b89c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b8a0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	7bdb      	ldrb	r3, [r3, #15]
 800b8a8:	b21b      	sxth	r3, r3
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	b21b      	sxth	r3, r3
 800b8ae:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
							    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800b8b2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b8b6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	7c1b      	ldrb	r3, [r3, #16]
 800b8be:	021b      	lsls	r3, r3, #8
 800b8c0:	b21a      	sxth	r2, r3
 800b8c2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b8c6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	7c5b      	ldrb	r3, [r3, #17]
 800b8ce:	b21b      	sxth	r3, r3
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	b21b      	sxth	r3, r3
 800b8d4:	f8a7 34b2 	strh.w	r3, [r7, #1202]	@ 0x4b2
							    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800b8d8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b8dc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	7c9b      	ldrb	r3, [r3, #18]
 800b8e4:	021b      	lsls	r3, r3, #8
 800b8e6:	b21a      	sxth	r2, r3
 800b8e8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b8ec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	7cdb      	ldrb	r3, [r3, #19]
 800b8f4:	b21b      	sxth	r3, r3
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	b21b      	sxth	r3, r3
 800b8fa:	f8a7 34b0 	strh.w	r3, [r7, #1200]	@ 0x4b0
							    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800b8fe:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b902:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	7d1b      	ldrb	r3, [r3, #20]
 800b90a:	021b      	lsls	r3, r3, #8
 800b90c:	b21a      	sxth	r2, r3
 800b90e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b912:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	7d5b      	ldrb	r3, [r3, #21]
 800b91a:	b21b      	sxth	r3, r3
 800b91c:	4313      	orrs	r3, r2
 800b91e:	b21b      	sxth	r3, r3
 800b920:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
							    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800b924:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b928:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	7d9b      	ldrb	r3, [r3, #22]
 800b930:	021b      	lsls	r3, r3, #8
 800b932:	b21a      	sxth	r2, r3
 800b934:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b938:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	7ddb      	ldrb	r3, [r3, #23]
 800b940:	b21b      	sxth	r3, r3
 800b942:	4313      	orrs	r3, r2
 800b944:	b21b      	sxth	r3, r3
 800b946:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
							    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800b94a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b94e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	7e1b      	ldrb	r3, [r3, #24]
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	b21a      	sxth	r2, r3
 800b95a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b95e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	7e5b      	ldrb	r3, [r3, #25]
 800b966:	b21b      	sxth	r3, r3
 800b968:	4313      	orrs	r3, r2
 800b96a:	b21b      	sxth	r3, r3
 800b96c:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
							    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800b970:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b974:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	7e9b      	ldrb	r3, [r3, #26]
 800b97c:	021b      	lsls	r3, r3, #8
 800b97e:	b21a      	sxth	r2, r3
 800b980:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b984:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	7edb      	ldrb	r3, [r3, #27]
 800b98c:	b21b      	sxth	r3, r3
 800b98e:	4313      	orrs	r3, r2
 800b990:	b21b      	sxth	r3, r3
 800b992:	f8a7 34a8 	strh.w	r3, [r7, #1192]	@ 0x4a8
							    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800b996:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b99a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	7f1b      	ldrb	r3, [r3, #28]
 800b9a2:	021b      	lsls	r3, r3, #8
 800b9a4:	b21a      	sxth	r2, r3
 800b9a6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b9aa:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	7f5b      	ldrb	r3, [r3, #29]
 800b9b2:	b21b      	sxth	r3, r3
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	b21b      	sxth	r3, r3
 800b9b8:	f8a7 34a6 	strh.w	r3, [r7, #1190]	@ 0x4a6
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800b9bc:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	da03      	bge.n	800b9cc <frame_processing+0x8ac>
 800b9c4:	4b32      	ldr	r3, [pc, #200]	@ (800ba90 <frame_processing+0x970>)
 800b9c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b9ca:	e002      	b.n	800b9d2 <frame_processing+0x8b2>
 800b9cc:	4b31      	ldr	r3, [pc, #196]	@ (800ba94 <frame_processing+0x974>)
 800b9ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800b9d2:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bfb8      	it	lt
 800b9da:	425b      	neglt	r3, r3
 800b9dc:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800b9de:	4a27      	ldr	r2, [pc, #156]	@ (800ba7c <frame_processing+0x95c>)
 800b9e0:	fb82 1203 	smull	r1, r2, r2, r3
 800b9e4:	1152      	asrs	r2, r2, #5
 800b9e6:	17db      	asrs	r3, r3, #31
 800b9e8:	eba2 0c03 	sub.w	ip, r2, r3
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800b9ec:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bfb8      	it	lt
 800b9f4:	425b      	neglt	r3, r3
 800b9f6:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800b9f8:	4a20      	ldr	r2, [pc, #128]	@ (800ba7c <frame_processing+0x95c>)
 800b9fa:	fb82 1203 	smull	r1, r2, r2, r3
 800b9fe:	1151      	asrs	r1, r2, #5
 800ba00:	17da      	asrs	r2, r3, #31
 800ba02:	1a8a      	subs	r2, r1, r2
 800ba04:	4611      	mov	r1, r2
 800ba06:	2264      	movs	r2, #100	@ 0x64
 800ba08:	fb01 f202 	mul.w	r2, r1, r2
 800ba0c:	1a9b      	subs	r3, r3, r2
 800ba0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba12:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	da03      	bge.n	800ba22 <frame_processing+0x902>
 800ba1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ba90 <frame_processing+0x970>)
 800ba1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ba20:	e002      	b.n	800ba28 <frame_processing+0x908>
 800ba22:	4b1c      	ldr	r3, [pc, #112]	@ (800ba94 <frame_processing+0x974>)
 800ba24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800ba28:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	bfb8      	it	lt
 800ba30:	425b      	neglt	r3, r3
 800ba32:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800ba34:	4a11      	ldr	r2, [pc, #68]	@ (800ba7c <frame_processing+0x95c>)
 800ba36:	fb82 1203 	smull	r1, r2, r2, r3
 800ba3a:	1152      	asrs	r2, r2, #5
 800ba3c:	17db      	asrs	r3, r3, #31
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800ba44:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	bfb8      	it	lt
 800ba4c:	425b      	neglt	r3, r3
 800ba4e:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800ba50:	4a0a      	ldr	r2, [pc, #40]	@ (800ba7c <frame_processing+0x95c>)
 800ba52:	fb82 1203 	smull	r1, r2, r2, r3
 800ba56:	1151      	asrs	r1, r2, #5
 800ba58:	17da      	asrs	r2, r3, #31
 800ba5a:	1a8a      	subs	r2, r1, r2
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	2264      	movs	r2, #100	@ 0x64
 800ba60:	fb01 f202 	mul.w	r2, r1, r2
 800ba64:	1a9b      	subs	r3, r3, r2
 800ba66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba6a:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	da12      	bge.n	800ba98 <frame_processing+0x978>
 800ba72:	4b07      	ldr	r3, [pc, #28]	@ (800ba90 <frame_processing+0x970>)
 800ba74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba78:	e011      	b.n	800ba9e <frame_processing+0x97e>
 800ba7a:	bf00      	nop
 800ba7c:	51eb851f 	.word	0x51eb851f
 800ba80:	08013d74 	.word	0x08013d74
 800ba84:	20004830 	.word	0x20004830
 800ba88:	40005000 	.word	0x40005000
 800ba8c:	40011400 	.word	0x40011400
 800ba90:	08013c78 	.word	0x08013c78
 800ba94:	08013c7c 	.word	0x08013c7c
 800ba98:	4bb0      	ldr	r3, [pc, #704]	@ (800bd5c <frame_processing+0xc3c>)
 800ba9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800ba9e:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	bfb8      	it	lt
 800baa6:	425b      	neglt	r3, r3
 800baa8:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800baaa:	4aad      	ldr	r2, [pc, #692]	@ (800bd60 <frame_processing+0xc40>)
 800baac:	fb82 1203 	smull	r1, r2, r2, r3
 800bab0:	1152      	asrs	r2, r2, #5
 800bab2:	17db      	asrs	r3, r3, #31
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800bab8:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800babc:	2b00      	cmp	r3, #0
 800babe:	bfb8      	it	lt
 800bac0:	425b      	neglt	r3, r3
 800bac2:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bac4:	4aa6      	ldr	r2, [pc, #664]	@ (800bd60 <frame_processing+0xc40>)
 800bac6:	fb82 1203 	smull	r1, r2, r2, r3
 800baca:	1151      	asrs	r1, r2, #5
 800bacc:	17da      	asrs	r2, r3, #31
 800bace:	1a8a      	subs	r2, r1, r2
 800bad0:	4611      	mov	r1, r2
 800bad2:	2264      	movs	r2, #100	@ 0x64
 800bad4:	fb01 f202 	mul.w	r2, r1, r2
 800bad8:	1a9b      	subs	r3, r3, r2
 800bada:	67bb      	str	r3, [r7, #120]	@ 0x78
 800badc:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da03      	bge.n	800baec <frame_processing+0x9cc>
 800bae4:	4b9f      	ldr	r3, [pc, #636]	@ (800bd64 <frame_processing+0xc44>)
 800bae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800baea:	e002      	b.n	800baf2 <frame_processing+0x9d2>
 800baec:	4b9b      	ldr	r3, [pc, #620]	@ (800bd5c <frame_processing+0xc3c>)
 800baee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800baf2:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	bfb8      	it	lt
 800bafa:	425b      	neglt	r3, r3
 800bafc:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bafe:	4a98      	ldr	r2, [pc, #608]	@ (800bd60 <frame_processing+0xc40>)
 800bb00:	fb82 1203 	smull	r1, r2, r2, r3
 800bb04:	1152      	asrs	r2, r2, #5
 800bb06:	17db      	asrs	r3, r3, #31
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	677b      	str	r3, [r7, #116]	@ 0x74
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800bb0c:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	bfb8      	it	lt
 800bb14:	425b      	neglt	r3, r3
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	4619      	mov	r1, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800bb1a:	4b91      	ldr	r3, [pc, #580]	@ (800bd60 <frame_processing+0xc40>)
 800bb1c:	fb83 2301 	smull	r2, r3, r3, r1
 800bb20:	115a      	asrs	r2, r3, #5
 800bb22:	17cb      	asrs	r3, r1, #31
 800bb24:	1ad6      	subs	r6, r2, r3
 800bb26:	2364      	movs	r3, #100	@ 0x64
 800bb28:	fb06 f303 	mul.w	r3, r6, r3
 800bb2c:	1ace      	subs	r6, r1, r3
 800bb2e:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800bb32:	4a8b      	ldr	r2, [pc, #556]	@ (800bd60 <frame_processing+0xc40>)
 800bb34:	fba2 2303 	umull	r2, r3, r2, r3
 800bb38:	095b      	lsrs	r3, r3, #5
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb3e:	f8b7 14b4 	ldrh.w	r1, [r7, #1204]	@ 0x4b4
 800bb42:	4b87      	ldr	r3, [pc, #540]	@ (800bd60 <frame_processing+0xc40>)
 800bb44:	fba3 2301 	umull	r2, r3, r3, r1
 800bb48:	095a      	lsrs	r2, r3, #5
 800bb4a:	2364      	movs	r3, #100	@ 0x64
 800bb4c:	fb02 f303 	mul.w	r3, r2, r3
 800bb50:	1acb      	subs	r3, r1, r3
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb56:	f8b7 24b2 	ldrh.w	r2, [r7, #1202]	@ 0x4b2
 800bb5a:	4b81      	ldr	r3, [pc, #516]	@ (800bd60 <frame_processing+0xc40>)
 800bb5c:	fba3 2302 	umull	r2, r3, r3, r2
 800bb60:	095b      	lsrs	r3, r3, #5
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb66:	f8b7 14b2 	ldrh.w	r1, [r7, #1202]	@ 0x4b2
 800bb6a:	4b7d      	ldr	r3, [pc, #500]	@ (800bd60 <frame_processing+0xc40>)
 800bb6c:	fba3 2301 	umull	r2, r3, r3, r1
 800bb70:	095a      	lsrs	r2, r3, #5
 800bb72:	2364      	movs	r3, #100	@ 0x64
 800bb74:	fb02 f303 	mul.w	r3, r2, r3
 800bb78:	1acb      	subs	r3, r1, r3
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb7e:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	@ 0x4b0
 800bb82:	4b77      	ldr	r3, [pc, #476]	@ (800bd60 <frame_processing+0xc40>)
 800bb84:	fba3 2302 	umull	r2, r3, r3, r2
 800bb88:	095b      	lsrs	r3, r3, #5
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb8e:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	@ 0x4b0
 800bb92:	4b73      	ldr	r3, [pc, #460]	@ (800bd60 <frame_processing+0xc40>)
 800bb94:	fba3 2301 	umull	r2, r3, r3, r1
 800bb98:	095a      	lsrs	r2, r3, #5
 800bb9a:	2364      	movs	r3, #100	@ 0x64
 800bb9c:	fb02 f303 	mul.w	r3, r2, r3
 800bba0:	1acb      	subs	r3, r1, r3
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bba6:	f8b7 24ae 	ldrh.w	r2, [r7, #1198]	@ 0x4ae
 800bbaa:	4b6d      	ldr	r3, [pc, #436]	@ (800bd60 <frame_processing+0xc40>)
 800bbac:	fba3 2302 	umull	r2, r3, r3, r2
 800bbb0:	095b      	lsrs	r3, r3, #5
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbb6:	f8b7 14ae 	ldrh.w	r1, [r7, #1198]	@ 0x4ae
 800bbba:	4b69      	ldr	r3, [pc, #420]	@ (800bd60 <frame_processing+0xc40>)
 800bbbc:	fba3 2301 	umull	r2, r3, r3, r1
 800bbc0:	095a      	lsrs	r2, r3, #5
 800bbc2:	2364      	movs	r3, #100	@ 0x64
 800bbc4:	fb02 f303 	mul.w	r3, r2, r3
 800bbc8:	1acb      	subs	r3, r1, r3
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbce:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 800bbd2:	4b63      	ldr	r3, [pc, #396]	@ (800bd60 <frame_processing+0xc40>)
 800bbd4:	fba3 2302 	umull	r2, r3, r3, r2
 800bbd8:	095b      	lsrs	r3, r3, #5
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbde:	f8b7 14ac 	ldrh.w	r1, [r7, #1196]	@ 0x4ac
 800bbe2:	4b5f      	ldr	r3, [pc, #380]	@ (800bd60 <frame_processing+0xc40>)
 800bbe4:	fba3 2301 	umull	r2, r3, r3, r1
 800bbe8:	095a      	lsrs	r2, r3, #5
 800bbea:	2364      	movs	r3, #100	@ 0x64
 800bbec:	fb02 f303 	mul.w	r3, r2, r3
 800bbf0:	1acb      	subs	r3, r1, r3
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbf6:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 800bbfa:	4b59      	ldr	r3, [pc, #356]	@ (800bd60 <frame_processing+0xc40>)
 800bbfc:	fba3 2302 	umull	r2, r3, r3, r2
 800bc00:	095b      	lsrs	r3, r3, #5
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc06:	f8b7 14aa 	ldrh.w	r1, [r7, #1194]	@ 0x4aa
 800bc0a:	4b55      	ldr	r3, [pc, #340]	@ (800bd60 <frame_processing+0xc40>)
 800bc0c:	fba3 2301 	umull	r2, r3, r3, r1
 800bc10:	095a      	lsrs	r2, r3, #5
 800bc12:	2364      	movs	r3, #100	@ 0x64
 800bc14:	fb02 f303 	mul.w	r3, r2, r3
 800bc18:	1acb      	subs	r3, r1, r3
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc1e:	f8b7 24a8 	ldrh.w	r2, [r7, #1192]	@ 0x4a8
 800bc22:	4b4f      	ldr	r3, [pc, #316]	@ (800bd60 <frame_processing+0xc40>)
 800bc24:	fba3 2302 	umull	r2, r3, r3, r2
 800bc28:	095b      	lsrs	r3, r3, #5
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc2e:	f8b7 14a8 	ldrh.w	r1, [r7, #1192]	@ 0x4a8
 800bc32:	4b4b      	ldr	r3, [pc, #300]	@ (800bd60 <frame_processing+0xc40>)
 800bc34:	fba3 2301 	umull	r2, r3, r3, r1
 800bc38:	095a      	lsrs	r2, r3, #5
 800bc3a:	2364      	movs	r3, #100	@ 0x64
 800bc3c:	fb02 f303 	mul.w	r3, r2, r3
 800bc40:	1acb      	subs	r3, r1, r3
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	461d      	mov	r5, r3
 800bc46:	f8b7 24a6 	ldrh.w	r2, [r7, #1190]	@ 0x4a6
 800bc4a:	4b45      	ldr	r3, [pc, #276]	@ (800bd60 <frame_processing+0xc40>)
 800bc4c:	fba3 2302 	umull	r2, r3, r3, r2
 800bc50:	095b      	lsrs	r3, r3, #5
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	461c      	mov	r4, r3
 800bc56:	f8b7 14a6 	ldrh.w	r1, [r7, #1190]	@ 0x4a6
 800bc5a:	4b41      	ldr	r3, [pc, #260]	@ (800bd60 <frame_processing+0xc40>)
 800bc5c:	fba3 2301 	umull	r2, r3, r3, r1
 800bc60:	095a      	lsrs	r2, r3, #5
 800bc62:	2364      	movs	r3, #100	@ 0x64
 800bc64:	fb02 f303 	mul.w	r3, r2, r3
 800bc68:	1acb      	subs	r3, r1, r3
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bc70:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc72:	9418      	str	r4, [sp, #96]	@ 0x60
 800bc74:	9517      	str	r5, [sp, #92]	@ 0x5c
 800bc76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc78:	9216      	str	r2, [sp, #88]	@ 0x58
 800bc7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc7c:	9215      	str	r2, [sp, #84]	@ 0x54
 800bc7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc80:	9214      	str	r2, [sp, #80]	@ 0x50
 800bc82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc84:	9213      	str	r2, [sp, #76]	@ 0x4c
 800bc86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc88:	9212      	str	r2, [sp, #72]	@ 0x48
 800bc8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc8c:	9211      	str	r2, [sp, #68]	@ 0x44
 800bc8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc90:	9210      	str	r2, [sp, #64]	@ 0x40
 800bc92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bc94:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bc96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bc98:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bc9c:	920d      	str	r2, [sp, #52]	@ 0x34
 800bc9e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bca0:	920c      	str	r2, [sp, #48]	@ 0x30
 800bca2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bca4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bca6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bca8:	920a      	str	r2, [sp, #40]	@ 0x28
 800bcaa:	9609      	str	r6, [sp, #36]	@ 0x24
 800bcac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcae:	9308      	str	r3, [sp, #32]
 800bcb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcb4:	9307      	str	r3, [sp, #28]
 800bcb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcb8:	9306      	str	r3, [sp, #24]
 800bcba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bcbc:	9305      	str	r3, [sp, #20]
 800bcbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bcc8:	9303      	str	r3, [sp, #12]
 800bcca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bcce:	9302      	str	r3, [sp, #8]
 800bcd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bcd4:	9301      	str	r3, [sp, #4]
 800bcd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	4663      	mov	r3, ip
 800bcde:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bce2:	4921      	ldr	r1, [pc, #132]	@ (800bd68 <frame_processing+0xc48>)
 800bce4:	f002 faca 	bl	800e27c <siprintf>
									if (uart_choose_uart5) {
 800bce8:	4b20      	ldr	r3, [pc, #128]	@ (800bd6c <frame_processing+0xc4c>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d005      	beq.n	800bcfe <frame_processing+0xbde>
								    	Uart_sendstring(UART5, buffer_0x08);
 800bcf2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	481d      	ldr	r0, [pc, #116]	@ (800bd70 <frame_processing+0xc50>)
 800bcfa:	f7f6 f8e7 	bl	8001ecc <Uart_sendstring>
									Uart_sendstring(USART6, buffer_0x08);
 800bcfe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bd02:	4619      	mov	r1, r3
 800bd04:	481b      	ldr	r0, [pc, #108]	@ (800bd74 <frame_processing+0xc54>)
 800bd06:	f7f6 f8e1 	bl	8001ecc <Uart_sendstring>
							    break;
 800bd0a:	bf00      	nop
					break;
 800bd0c:	e004      	b.n	800bd18 <frame_processing+0xbf8>
				default:
					clear_send_flag();
 800bd0e:	f7f6 f9ff 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800bd12:	2302      	movs	r3, #2
 800bd14:	f001 bae4 	b.w	800d2e0 <frame_processing+0x21c0>
					break;
 800bd18:	bf00      	nop
					break;
			}
			clear_send_flag();
 800bd1a:	f7f6 f9f9 	bl	8002110 <clear_send_flag>
			break;
 800bd1e:	f001 bade 	b.w	800d2de <frame_processing+0x21be>
		case FSP_ADR_PDU:
			switch (fsp_pkt->type)
 800bd22:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd26:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	791b      	ldrb	r3, [r3, #4]
 800bd2e:	2b05      	cmp	r3, #5
 800bd30:	d003      	beq.n	800bd3a <frame_processing+0xc1a>
 800bd32:	2b07      	cmp	r3, #7
 800bd34:	d022      	beq.n	800bd7c <frame_processing+0xc5c>
 800bd36:	f000 bc2a 	b.w	800c58e <frame_processing+0x146e>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800bd3a:	f7f6 f9e9 	bl	8002110 <clear_send_flag>
					if (uart_choose_uart5) {
 800bd3e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd6c <frame_processing+0xc4c>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <frame_processing+0xc30>
						Uart_sendstring(UART5, "\n> PDU_ACK\r\n> ");
 800bd48:	490b      	ldr	r1, [pc, #44]	@ (800bd78 <frame_processing+0xc58>)
 800bd4a:	4809      	ldr	r0, [pc, #36]	@ (800bd70 <frame_processing+0xc50>)
 800bd4c:	f7f6 f8be 	bl	8001ecc <Uart_sendstring>
					}
					Uart_sendstring(USART6, "\n> PDU_ACK\r\n> ");
 800bd50:	4909      	ldr	r1, [pc, #36]	@ (800bd78 <frame_processing+0xc58>)
 800bd52:	4808      	ldr	r0, [pc, #32]	@ (800bd74 <frame_processing+0xc54>)
 800bd54:	f7f6 f8ba 	bl	8001ecc <Uart_sendstring>

					break;
 800bd58:	f000 bc1e 	b.w	800c598 <frame_processing+0x1478>
 800bd5c:	08013c7c 	.word	0x08013c7c
 800bd60:	51eb851f 	.word	0x51eb851f
 800bd64:	08013c78 	.word	0x08013c78
 800bd68:	08013db0 	.word	0x08013db0
 800bd6c:	20004830 	.word	0x20004830
 800bd70:	40005000 	.word	0x40005000
 800bd74:	40011400 	.word	0x40011400
 800bd78:	08013ea0 	.word	0x08013ea0
				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800bd7c:	f7f6 f9c8 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800bd80:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd84:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	795b      	ldrb	r3, [r3, #5]
 800bd8c:	2b06      	cmp	r3, #6
 800bd8e:	dc17      	bgt.n	800bdc0 <frame_processing+0xca0>
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f2c0 83f4 	blt.w	800c57e <frame_processing+0x145e>
 800bd96:	2b06      	cmp	r3, #6
 800bd98:	f200 83f1 	bhi.w	800c57e <frame_processing+0x145e>
 800bd9c:	a201      	add	r2, pc, #4	@ (adr r2, 800bda4 <frame_processing+0xc84>)
 800bd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda2:	bf00      	nop
 800bda4:	0800bdc7 	.word	0x0800bdc7
 800bda8:	0800c57f 	.word	0x0800c57f
 800bdac:	0800c57f 	.word	0x0800c57f
 800bdb0:	0800c57f 	.word	0x0800c57f
 800bdb4:	0800be43 	.word	0x0800be43
 800bdb8:	0800bef5 	.word	0x0800bef5
 800bdbc:	0800bfc5 	.word	0x0800bfc5
 800bdc0:	2bff      	cmp	r3, #255	@ 0xff
 800bdc2:	d01f      	beq.n	800be04 <frame_processing+0xce4>
 800bdc4:	e3db      	b.n	800c57e <frame_processing+0x145e>
					{
						case 0x00:
						{
							char buffer_0x00[50];
							sprintf(buffer_0x00, "PDU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800bdc6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bdca:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	799b      	ldrb	r3, [r3, #6]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bdd8:	4973      	ldr	r1, [pc, #460]	@ (800bfa8 <frame_processing+0xe88>)
 800bdda:	4618      	mov	r0, r3
 800bddc:	f002 fa4e 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800bde0:	4b72      	ldr	r3, [pc, #456]	@ (800bfac <frame_processing+0xe8c>)
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d005      	beq.n	800bdf6 <frame_processing+0xcd6>
								Uart_sendstring(UART5, buffer_0x00);
 800bdea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bdee:	4619      	mov	r1, r3
 800bdf0:	486f      	ldr	r0, [pc, #444]	@ (800bfb0 <frame_processing+0xe90>)
 800bdf2:	f7f6 f86b 	bl	8001ecc <Uart_sendstring>
							}
							Uart_sendstring(USART6, buffer_0x00);
 800bdf6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	486d      	ldr	r0, [pc, #436]	@ (800bfb4 <frame_processing+0xe94>)
 800bdfe:	f7f6 f865 	bl	8001ecc <Uart_sendstring>

						}
							break;
 800be02:	e3c1      	b.n	800c588 <frame_processing+0x1468>
						case 0xFF:
						{
							char buffer_0xFF[50];
							sprintf(buffer_0xFF, "PDU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800be04:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be08:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	799b      	ldrb	r3, [r3, #6]
 800be10:	461a      	mov	r2, r3
 800be12:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800be16:	4968      	ldr	r1, [pc, #416]	@ (800bfb8 <frame_processing+0xe98>)
 800be18:	4618      	mov	r0, r3
 800be1a:	f002 fa2f 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800be1e:	4b63      	ldr	r3, [pc, #396]	@ (800bfac <frame_processing+0xe8c>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b00      	cmp	r3, #0
 800be26:	d005      	beq.n	800be34 <frame_processing+0xd14>
								Uart_sendstring(UART5, buffer_0xFF);
 800be28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800be2c:	4619      	mov	r1, r3
 800be2e:	4860      	ldr	r0, [pc, #384]	@ (800bfb0 <frame_processing+0xe90>)
 800be30:	f7f6 f84c 	bl	8001ecc <Uart_sendstring>
							}
							Uart_sendstring(USART6, buffer_0xFF);
 800be34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800be38:	4619      	mov	r1, r3
 800be3a:	485e      	ldr	r0, [pc, #376]	@ (800bfb4 <frame_processing+0xe94>)
 800be3c:	f7f6 f846 	bl	8001ecc <Uart_sendstring>

						}
							break;
 800be40:	e3a2      	b.n	800c588 <frame_processing+0x1468>

						case 0x04:
						{
							        uint8_t channel = fsp_pkt->payload[1];
 800be42:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be46:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	799b      	ldrb	r3, [r3, #6]
 800be4e:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3
							        uint8_t status_0x04 = fsp_pkt->payload[2];
 800be52:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be56:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	79db      	ldrb	r3, [r3, #7]
 800be5e:	f887 34c2 	strb.w	r3, [r7, #1218]	@ 0x4c2
							        uint16_t voltage_0x04 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800be62:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be66:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	7a1b      	ldrb	r3, [r3, #8]
 800be6e:	021b      	lsls	r3, r3, #8
 800be70:	b21a      	sxth	r2, r3
 800be72:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be76:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	7a5b      	ldrb	r3, [r3, #9]
 800be7e:	b21b      	sxth	r3, r3
 800be80:	4313      	orrs	r3, r2
 800be82:	b21b      	sxth	r3, r3
 800be84:	f8a7 34c0 	strh.w	r3, [r7, #1216]	@ 0x4c0
							        uint16_t current_0x04 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800be88:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be8c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	7a9b      	ldrb	r3, [r3, #10]
 800be94:	021b      	lsls	r3, r3, #8
 800be96:	b21a      	sxth	r2, r3
 800be98:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be9c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	7adb      	ldrb	r3, [r3, #11]
 800bea4:	b21b      	sxth	r3, r3
 800bea6:	4313      	orrs	r3, r2
 800bea8:	b21b      	sxth	r3, r3
 800beaa:	f8a7 34be 	strh.w	r3, [r7, #1214]	@ 0x4be

							        char buffer_0x07[100];
							        sprintf(buffer_0x07, "PDU_Res: CMDcode 0x04 [{Channel %u} Status %u, Voltage: %u, Current: %u]\n", channel, status_0x04, voltage_0x04, current_0x04);
 800beae:	f897 14c3 	ldrb.w	r1, [r7, #1219]	@ 0x4c3
 800beb2:	f897 44c2 	ldrb.w	r4, [r7, #1218]	@ 0x4c2
 800beb6:	f8b7 34c0 	ldrh.w	r3, [r7, #1216]	@ 0x4c0
 800beba:	f8b7 24be 	ldrh.w	r2, [r7, #1214]	@ 0x4be
 800bebe:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bec2:	9201      	str	r2, [sp, #4]
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	4623      	mov	r3, r4
 800bec8:	460a      	mov	r2, r1
 800beca:	493c      	ldr	r1, [pc, #240]	@ (800bfbc <frame_processing+0xe9c>)
 800becc:	f002 f9d6 	bl	800e27c <siprintf>
									if (uart_choose_uart5) {
 800bed0:	4b36      	ldr	r3, [pc, #216]	@ (800bfac <frame_processing+0xe8c>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d005      	beq.n	800bee6 <frame_processing+0xdc6>
										Uart_sendstring(UART5, buffer_0x07);
 800beda:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bede:	4619      	mov	r1, r3
 800bee0:	4833      	ldr	r0, [pc, #204]	@ (800bfb0 <frame_processing+0xe90>)
 800bee2:	f7f5 fff3 	bl	8001ecc <Uart_sendstring>
									}
									Uart_sendstring(USART6, buffer_0x07);
 800bee6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800beea:	4619      	mov	r1, r3
 800beec:	4831      	ldr	r0, [pc, #196]	@ (800bfb4 <frame_processing+0xe94>)
 800beee:	f7f5 ffed 	bl	8001ecc <Uart_sendstring>

						}
									break;
 800bef2:	e349      	b.n	800c588 <frame_processing+0x1468>
						case 0x05:
						{
						            uint8_t buck = fsp_pkt->payload[1];
 800bef4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bef8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	799b      	ldrb	r3, [r3, #6]
 800bf00:	f887 34c9 	strb.w	r3, [r7, #1225]	@ 0x4c9
						            uint8_t status_0x05 = fsp_pkt->payload[2];
 800bf04:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf08:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	79db      	ldrb	r3, [r3, #7]
 800bf10:	f887 34c8 	strb.w	r3, [r7, #1224]	@ 0x4c8
						            uint16_t voltage_0x05 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800bf14:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf18:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	7a1b      	ldrb	r3, [r3, #8]
 800bf20:	021b      	lsls	r3, r3, #8
 800bf22:	b21a      	sxth	r2, r3
 800bf24:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf28:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	7a5b      	ldrb	r3, [r3, #9]
 800bf30:	b21b      	sxth	r3, r3
 800bf32:	4313      	orrs	r3, r2
 800bf34:	b21b      	sxth	r3, r3
 800bf36:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
						            uint16_t current_0x05 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800bf3a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf3e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	7a9b      	ldrb	r3, [r3, #10]
 800bf46:	021b      	lsls	r3, r3, #8
 800bf48:	b21a      	sxth	r2, r3
 800bf4a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf4e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	7adb      	ldrb	r3, [r3, #11]
 800bf56:	b21b      	sxth	r3, r3
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	b21b      	sxth	r3, r3
 800bf5c:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4

						            char buffer_0x05[100];
						            sprintf(buffer_0x05, "PDU_Res: CMDcode 0x05 [{Buck %u} Status %u, Voltage: %u, Current: %u]\n", buck, status_0x05, voltage_0x05, current_0x05);
 800bf60:	f897 14c9 	ldrb.w	r1, [r7, #1225]	@ 0x4c9
 800bf64:	f897 44c8 	ldrb.w	r4, [r7, #1224]	@ 0x4c8
 800bf68:	f8b7 34c6 	ldrh.w	r3, [r7, #1222]	@ 0x4c6
 800bf6c:	f8b7 24c4 	ldrh.w	r2, [r7, #1220]	@ 0x4c4
 800bf70:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bf74:	9201      	str	r2, [sp, #4]
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	4623      	mov	r3, r4
 800bf7a:	460a      	mov	r2, r1
 800bf7c:	4910      	ldr	r1, [pc, #64]	@ (800bfc0 <frame_processing+0xea0>)
 800bf7e:	f002 f97d 	bl	800e27c <siprintf>
									if (uart_choose_uart5) {
 800bf82:	4b0a      	ldr	r3, [pc, #40]	@ (800bfac <frame_processing+0xe8c>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d005      	beq.n	800bf98 <frame_processing+0xe78>
										Uart_sendstring(UART5, buffer_0x05);
 800bf8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bf90:	4619      	mov	r1, r3
 800bf92:	4807      	ldr	r0, [pc, #28]	@ (800bfb0 <frame_processing+0xe90>)
 800bf94:	f7f5 ff9a 	bl	8001ecc <Uart_sendstring>
									}
									Uart_sendstring(USART6, buffer_0x05);
 800bf98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4805      	ldr	r0, [pc, #20]	@ (800bfb4 <frame_processing+0xe94>)
 800bfa0:	f7f5 ff94 	bl	8001ecc <Uart_sendstring>

						}
									break;
 800bfa4:	e2f0      	b.n	800c588 <frame_processing+0x1468>
 800bfa6:	bf00      	nop
 800bfa8:	08013eb0 	.word	0x08013eb0
 800bfac:	20004830 	.word	0x20004830
 800bfb0:	40005000 	.word	0x40005000
 800bfb4:	40011400 	.word	0x40011400
 800bfb8:	08013ecc 	.word	0x08013ecc
 800bfbc:	08013ee8 	.word	0x08013ee8
 800bfc0:	08013f34 	.word	0x08013f34
						case 0x06:
						{
							uint8_t tec1buck_status = fsp_pkt->payload[1];
 800bfc4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bfc8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	799b      	ldrb	r3, [r3, #6]
 800bfd0:	f887 3511 	strb.w	r3, [r7, #1297]	@ 0x511
							uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 800bfd4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bfd8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	79db      	ldrb	r3, [r3, #7]
 800bfe0:	021b      	lsls	r3, r3, #8
 800bfe2:	b21a      	sxth	r2, r3
 800bfe4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bfe8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	7a1b      	ldrb	r3, [r3, #8]
 800bff0:	b21b      	sxth	r3, r3
 800bff2:	4313      	orrs	r3, r2
 800bff4:	b21b      	sxth	r3, r3
 800bff6:	f8a7 350e 	strh.w	r3, [r7, #1294]	@ 0x50e

							uint8_t tec2buck_status = fsp_pkt->payload[4];
 800bffa:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bffe:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	7a5b      	ldrb	r3, [r3, #9]
 800c006:	f887 350d 	strb.w	r3, [r7, #1293]	@ 0x50d
							uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800c00a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c00e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	7a9b      	ldrb	r3, [r3, #10]
 800c016:	021b      	lsls	r3, r3, #8
 800c018:	b21a      	sxth	r2, r3
 800c01a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c01e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	7adb      	ldrb	r3, [r3, #11]
 800c026:	b21b      	sxth	r3, r3
 800c028:	4313      	orrs	r3, r2
 800c02a:	b21b      	sxth	r3, r3
 800c02c:	f8a7 350a 	strh.w	r3, [r7, #1290]	@ 0x50a

							uint8_t tec3buck_status = fsp_pkt->payload[7];
 800c030:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c034:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	7b1b      	ldrb	r3, [r3, #12]
 800c03c:	f887 3509 	strb.w	r3, [r7, #1289]	@ 0x509
							uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800c040:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c044:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	7b5b      	ldrb	r3, [r3, #13]
 800c04c:	021b      	lsls	r3, r3, #8
 800c04e:	b21a      	sxth	r2, r3
 800c050:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c054:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	7b9b      	ldrb	r3, [r3, #14]
 800c05c:	b21b      	sxth	r3, r3
 800c05e:	4313      	orrs	r3, r2
 800c060:	b21b      	sxth	r3, r3
 800c062:	f8a7 3506 	strh.w	r3, [r7, #1286]	@ 0x506

							uint8_t tec4buck_status = fsp_pkt->payload[10];
 800c066:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c06a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	7bdb      	ldrb	r3, [r3, #15]
 800c072:	f887 3505 	strb.w	r3, [r7, #1285]	@ 0x505
							uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800c076:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c07a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	7c1b      	ldrb	r3, [r3, #16]
 800c082:	021b      	lsls	r3, r3, #8
 800c084:	b21a      	sxth	r2, r3
 800c086:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c08a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	7c5b      	ldrb	r3, [r3, #17]
 800c092:	b21b      	sxth	r3, r3
 800c094:	4313      	orrs	r3, r2
 800c096:	b21b      	sxth	r3, r3
 800c098:	f8a7 3502 	strh.w	r3, [r7, #1282]	@ 0x502

							uint8_t mcubuck_status = fsp_pkt->payload[13];
 800c09c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c0a0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	7c9b      	ldrb	r3, [r3, #18]
 800c0a8:	f887 3501 	strb.w	r3, [r7, #1281]	@ 0x501
							uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 800c0ac:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c0b0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	7cdb      	ldrb	r3, [r3, #19]
 800c0b8:	021b      	lsls	r3, r3, #8
 800c0ba:	b21a      	sxth	r2, r3
 800c0bc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c0c0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	7d1b      	ldrb	r3, [r3, #20]
 800c0c8:	b21b      	sxth	r3, r3
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	b21b      	sxth	r3, r3
 800c0ce:	f8a7 34fe 	strh.w	r3, [r7, #1278]	@ 0x4fe

							uint8_t ledbuck_status = fsp_pkt->payload[16];
 800c0d2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c0d6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	7d5b      	ldrb	r3, [r3, #21]
 800c0de:	f887 34fd 	strb.w	r3, [r7, #1277]	@ 0x4fd
							uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 800c0e2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c0e6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	7d9b      	ldrb	r3, [r3, #22]
 800c0ee:	021b      	lsls	r3, r3, #8
 800c0f0:	b21a      	sxth	r2, r3
 800c0f2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c0f6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	7ddb      	ldrb	r3, [r3, #23]
 800c0fe:	b21b      	sxth	r3, r3
 800c100:	4313      	orrs	r3, r2
 800c102:	b21b      	sxth	r3, r3
 800c104:	f8a7 34fa 	strh.w	r3, [r7, #1274]	@ 0x4fa

							uint8_t cm4buck_status = fsp_pkt->payload[19];
 800c108:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c10c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	7e1b      	ldrb	r3, [r3, #24]
 800c114:	f887 34f9 	strb.w	r3, [r7, #1273]	@ 0x4f9
							uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 800c118:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c11c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	7e5b      	ldrb	r3, [r3, #25]
 800c124:	021b      	lsls	r3, r3, #8
 800c126:	b21a      	sxth	r2, r3
 800c128:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c12c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	7e9b      	ldrb	r3, [r3, #26]
 800c134:	b21b      	sxth	r3, r3
 800c136:	4313      	orrs	r3, r2
 800c138:	b21b      	sxth	r3, r3
 800c13a:	f8a7 34f6 	strh.w	r3, [r7, #1270]	@ 0x4f6

							uint8_t tec1_status = fsp_pkt->payload[22];
 800c13e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c142:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	7edb      	ldrb	r3, [r3, #27]
 800c14a:	f887 34f5 	strb.w	r3, [r7, #1269]	@ 0x4f5
							uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800c14e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c152:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	7f1b      	ldrb	r3, [r3, #28]
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	b21a      	sxth	r2, r3
 800c15e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c162:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	7f5b      	ldrb	r3, [r3, #29]
 800c16a:	b21b      	sxth	r3, r3
 800c16c:	4313      	orrs	r3, r2
 800c16e:	b21b      	sxth	r3, r3
 800c170:	f8a7 34f2 	strh.w	r3, [r7, #1266]	@ 0x4f2

							uint8_t tec2_status = fsp_pkt->payload[25];
 800c174:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c178:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	7f9b      	ldrb	r3, [r3, #30]
 800c180:	f887 34f1 	strb.w	r3, [r7, #1265]	@ 0x4f1
							uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800c184:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c188:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	7fdb      	ldrb	r3, [r3, #31]
 800c190:	021b      	lsls	r3, r3, #8
 800c192:	b21a      	sxth	r2, r3
 800c194:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c198:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1a2:	b21b      	sxth	r3, r3
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	b21b      	sxth	r3, r3
 800c1a8:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

							uint8_t tec3_status = fsp_pkt->payload[28];
 800c1ac:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c1b0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c1ba:	f887 34ed 	strb.w	r3, [r7, #1261]	@ 0x4ed
							uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800c1be:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c1c2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c1cc:	021b      	lsls	r3, r3, #8
 800c1ce:	b21a      	sxth	r2, r3
 800c1d0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c1d4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c1de:	b21b      	sxth	r3, r3
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	b21b      	sxth	r3, r3
 800c1e4:	f8a7 34ea 	strh.w	r3, [r7, #1258]	@ 0x4ea

							uint8_t tec4_status = fsp_pkt->payload[31];
 800c1e8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c1ec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c1f6:	f887 34e9 	strb.w	r3, [r7, #1257]	@ 0x4e9
							uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 800c1fa:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c1fe:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c208:	021b      	lsls	r3, r3, #8
 800c20a:	b21a      	sxth	r2, r3
 800c20c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c210:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800c21a:	b21b      	sxth	r3, r3
 800c21c:	4313      	orrs	r3, r2
 800c21e:	b21b      	sxth	r3, r3
 800c220:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6

							uint8_t copc_status = fsp_pkt->payload[34];
 800c224:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c228:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800c232:	f887 34e5 	strb.w	r3, [r7, #1253]	@ 0x4e5
							uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800c236:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c23a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c244:	021b      	lsls	r3, r3, #8
 800c246:	b21a      	sxth	r2, r3
 800c248:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c24c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c256:	b21b      	sxth	r3, r3
 800c258:	4313      	orrs	r3, r2
 800c25a:	b21b      	sxth	r3, r3
 800c25c:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2

							uint8_t iou_status = fsp_pkt->payload[37];
 800c260:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c264:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c26e:	f887 34e1 	strb.w	r3, [r7, #1249]	@ 0x4e1
							uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800c272:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c276:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800c280:	021b      	lsls	r3, r3, #8
 800c282:	b21a      	sxth	r2, r3
 800c284:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c288:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c292:	b21b      	sxth	r3, r3
 800c294:	4313      	orrs	r3, r2
 800c296:	b21b      	sxth	r3, r3
 800c298:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de

							uint8_t rgb_status = fsp_pkt->payload[40];
 800c29c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c2a0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2aa:	f887 34dd 	strb.w	r3, [r7, #1245]	@ 0x4dd
							uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800c2ae:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c2b2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c2bc:	021b      	lsls	r3, r3, #8
 800c2be:	b21a      	sxth	r2, r3
 800c2c0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c2c4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c2ce:	b21b      	sxth	r3, r3
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	b21b      	sxth	r3, r3
 800c2d4:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da

							uint8_t ir_status = fsp_pkt->payload[43];
 800c2d8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c2dc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2e6:	f887 34d9 	strb.w	r3, [r7, #1241]	@ 0x4d9
							uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 800c2ea:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c2ee:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c2f8:	021b      	lsls	r3, r3, #8
 800c2fa:	b21a      	sxth	r2, r3
 800c2fc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c300:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c30a:	b21b      	sxth	r3, r3
 800c30c:	4313      	orrs	r3, r2
 800c30e:	b21b      	sxth	r3, r3
 800c310:	f8a7 34d6 	strh.w	r3, [r7, #1238]	@ 0x4d6

							uint8_t cm4_status = fsp_pkt->payload[46];
 800c314:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c318:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800c322:	f887 34d5 	strb.w	r3, [r7, #1237]	@ 0x4d5
							uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 800c326:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c32a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c334:	021b      	lsls	r3, r3, #8
 800c336:	b21a      	sxth	r2, r3
 800c338:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c33c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c346:	b21b      	sxth	r3, r3
 800c348:	4313      	orrs	r3, r2
 800c34a:	b21b      	sxth	r3, r3
 800c34c:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2

							uint8_t vin_status = fsp_pkt->payload[49];
 800c350:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c354:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c35e:	f887 34d1 	strb.w	r3, [r7, #1233]	@ 0x4d1
							uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 800c362:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c366:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800c370:	021b      	lsls	r3, r3, #8
 800c372:	b21a      	sxth	r2, r3
 800c374:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c378:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c382:	b21b      	sxth	r3, r3
 800c384:	4313      	orrs	r3, r2
 800c386:	b21b      	sxth	r3, r3
 800c388:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce

							uint8_t vbus_status = fsp_pkt->payload[52];
 800c38c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c390:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c39a:	f887 34cd 	strb.w	r3, [r7, #1229]	@ 0x4cd
							uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 800c39e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c3a2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800c3ac:	021b      	lsls	r3, r3, #8
 800c3ae:	b21a      	sxth	r2, r3
 800c3b0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c3b4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c3be:	b21b      	sxth	r3, r3
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	b21b      	sxth	r3, r3
 800c3c4:	f8a7 34ca 	strh.w	r3, [r7, #1226]	@ 0x4ca


						            char buffer_0x06[1000];
						            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 800c3c8:	f897 e511 	ldrb.w	lr, [r7, #1297]	@ 0x511
 800c3cc:	f8b7 850e 	ldrh.w	r8, [r7, #1294]	@ 0x50e
 800c3d0:	f897 350d 	ldrb.w	r3, [r7, #1293]	@ 0x50d
 800c3d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c3d8:	f8b7 250a 	ldrh.w	r2, [r7, #1290]	@ 0x50a
 800c3dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c3e0:	f897 1509 	ldrb.w	r1, [r7, #1289]	@ 0x509
 800c3e4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800c3e8:	f8b7 0506 	ldrh.w	r0, [r7, #1286]	@ 0x506
 800c3ec:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800c3f0:	f897 4505 	ldrb.w	r4, [r7, #1285]	@ 0x505
 800c3f4:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800c3f8:	f8b7 5502 	ldrh.w	r5, [r7, #1282]	@ 0x502
 800c3fc:	f8c7 5084 	str.w	r5, [r7, #132]	@ 0x84
 800c400:	f897 6501 	ldrb.w	r6, [r7, #1281]	@ 0x501
 800c404:	f8c7 6080 	str.w	r6, [r7, #128]	@ 0x80
 800c408:	f8b7 c4fe 	ldrh.w	ip, [r7, #1278]	@ 0x4fe
 800c40c:	4663      	mov	r3, ip
 800c40e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c410:	f897 c4fd 	ldrb.w	ip, [r7, #1277]	@ 0x4fd
 800c414:	4662      	mov	r2, ip
 800c416:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c418:	f8b7 c4fa 	ldrh.w	ip, [r7, #1274]	@ 0x4fa
 800c41c:	4661      	mov	r1, ip
 800c41e:	6779      	str	r1, [r7, #116]	@ 0x74
 800c420:	f897 c4f9 	ldrb.w	ip, [r7, #1273]	@ 0x4f9
 800c424:	4660      	mov	r0, ip
 800c426:	6738      	str	r0, [r7, #112]	@ 0x70
 800c428:	f8b7 c4f6 	ldrh.w	ip, [r7, #1270]	@ 0x4f6
 800c42c:	4664      	mov	r4, ip
 800c42e:	66fc      	str	r4, [r7, #108]	@ 0x6c
 800c430:	f897 c4f5 	ldrb.w	ip, [r7, #1269]	@ 0x4f5
 800c434:	4665      	mov	r5, ip
 800c436:	66bd      	str	r5, [r7, #104]	@ 0x68
 800c438:	f8b7 c4f2 	ldrh.w	ip, [r7, #1266]	@ 0x4f2
 800c43c:	4666      	mov	r6, ip
 800c43e:	667e      	str	r6, [r7, #100]	@ 0x64
 800c440:	f897 c4f1 	ldrb.w	ip, [r7, #1265]	@ 0x4f1
 800c444:	4663      	mov	r3, ip
 800c446:	663b      	str	r3, [r7, #96]	@ 0x60
 800c448:	f8b7 c4ee 	ldrh.w	ip, [r7, #1262]	@ 0x4ee
 800c44c:	4662      	mov	r2, ip
 800c44e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800c450:	f897 c4ed 	ldrb.w	ip, [r7, #1261]	@ 0x4ed
 800c454:	4661      	mov	r1, ip
 800c456:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c458:	f8b7 c4ea 	ldrh.w	ip, [r7, #1258]	@ 0x4ea
 800c45c:	4660      	mov	r0, ip
 800c45e:	6578      	str	r0, [r7, #84]	@ 0x54
 800c460:	f897 c4e9 	ldrb.w	ip, [r7, #1257]	@ 0x4e9
 800c464:	4664      	mov	r4, ip
 800c466:	653c      	str	r4, [r7, #80]	@ 0x50
 800c468:	f8b7 c4e6 	ldrh.w	ip, [r7, #1254]	@ 0x4e6
 800c46c:	4665      	mov	r5, ip
 800c46e:	64fd      	str	r5, [r7, #76]	@ 0x4c
 800c470:	f897 c4e5 	ldrb.w	ip, [r7, #1253]	@ 0x4e5
 800c474:	4666      	mov	r6, ip
 800c476:	64be      	str	r6, [r7, #72]	@ 0x48
 800c478:	f8b7 c4e2 	ldrh.w	ip, [r7, #1250]	@ 0x4e2
 800c47c:	4663      	mov	r3, ip
 800c47e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c480:	f897 c4e1 	ldrb.w	ip, [r7, #1249]	@ 0x4e1
 800c484:	4662      	mov	r2, ip
 800c486:	643a      	str	r2, [r7, #64]	@ 0x40
 800c488:	f8b7 c4de 	ldrh.w	ip, [r7, #1246]	@ 0x4de
 800c48c:	4661      	mov	r1, ip
 800c48e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c490:	f897 c4dd 	ldrb.w	ip, [r7, #1245]	@ 0x4dd
 800c494:	4660      	mov	r0, ip
 800c496:	63b8      	str	r0, [r7, #56]	@ 0x38
 800c498:	f8b7 c4da 	ldrh.w	ip, [r7, #1242]	@ 0x4da
 800c49c:	4664      	mov	r4, ip
 800c49e:	637c      	str	r4, [r7, #52]	@ 0x34
 800c4a0:	f897 c4d9 	ldrb.w	ip, [r7, #1241]	@ 0x4d9
 800c4a4:	4665      	mov	r5, ip
 800c4a6:	633d      	str	r5, [r7, #48]	@ 0x30
 800c4a8:	f8b7 64d6 	ldrh.w	r6, [r7, #1238]	@ 0x4d6
 800c4ac:	f897 54d5 	ldrb.w	r5, [r7, #1237]	@ 0x4d5
 800c4b0:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 800c4b4:	f897 04d1 	ldrb.w	r0, [r7, #1233]	@ 0x4d1
 800c4b8:	f8b7 14ce 	ldrh.w	r1, [r7, #1230]	@ 0x4ce
 800c4bc:	f897 24cd 	ldrb.w	r2, [r7, #1229]	@ 0x4cd
 800c4c0:	f8b7 34ca 	ldrh.w	r3, [r7, #1226]	@ 0x4ca
 800c4c4:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 800c4c8:	9321      	str	r3, [sp, #132]	@ 0x84
 800c4ca:	9220      	str	r2, [sp, #128]	@ 0x80
 800c4cc:	911f      	str	r1, [sp, #124]	@ 0x7c
 800c4ce:	901e      	str	r0, [sp, #120]	@ 0x78
 800c4d0:	941d      	str	r4, [sp, #116]	@ 0x74
 800c4d2:	951c      	str	r5, [sp, #112]	@ 0x70
 800c4d4:	961b      	str	r6, [sp, #108]	@ 0x6c
 800c4d6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 800c4d8:	951a      	str	r5, [sp, #104]	@ 0x68
 800c4da:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800c4dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800c4de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4e0:	9018      	str	r0, [sp, #96]	@ 0x60
 800c4e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4e4:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c4e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4e8:	9216      	str	r2, [sp, #88]	@ 0x58
 800c4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800c4ee:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 800c4f0:	9614      	str	r6, [sp, #80]	@ 0x50
 800c4f2:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 800c4f4:	9513      	str	r5, [sp, #76]	@ 0x4c
 800c4f6:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800c4f8:	9412      	str	r4, [sp, #72]	@ 0x48
 800c4fa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c4fc:	9011      	str	r0, [sp, #68]	@ 0x44
 800c4fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c500:	9110      	str	r1, [sp, #64]	@ 0x40
 800c502:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c504:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c508:	930e      	str	r3, [sp, #56]	@ 0x38
 800c50a:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 800c50c:	960d      	str	r6, [sp, #52]	@ 0x34
 800c50e:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 800c510:	950c      	str	r5, [sp, #48]	@ 0x30
 800c512:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 800c514:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c516:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800c518:	900a      	str	r0, [sp, #40]	@ 0x28
 800c51a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c51c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c51e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c520:	9208      	str	r2, [sp, #32]
 800c522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c524:	9307      	str	r3, [sp, #28]
 800c526:	f8d7 6080 	ldr.w	r6, [r7, #128]	@ 0x80
 800c52a:	9606      	str	r6, [sp, #24]
 800c52c:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 800c530:	9505      	str	r5, [sp, #20]
 800c532:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800c536:	9404      	str	r4, [sp, #16]
 800c538:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c53c:	9003      	str	r0, [sp, #12]
 800c53e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c542:	9102      	str	r1, [sp, #8]
 800c544:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c548:	9201      	str	r2, [sp, #4]
 800c54a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	4643      	mov	r3, r8
 800c552:	4672      	mov	r2, lr
 800c554:	49ba      	ldr	r1, [pc, #744]	@ (800c840 <frame_processing+0x1720>)
 800c556:	4660      	mov	r0, ip
 800c558:	f001 fe90 	bl	800e27c <siprintf>
						                rgb_status, rgb_current,
						                ir_status, ir_current,
						                cm4_status, cm4_current,
						                vin_status, vin_voltage,
						                vbus_status, vbus_voltage);
									if (uart_choose_uart5) {
 800c55c:	4bb9      	ldr	r3, [pc, #740]	@ (800c844 <frame_processing+0x1724>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <frame_processing+0x1452>
										Uart_sendstring(UART5, buffer_0x06);
 800c566:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c56a:	4619      	mov	r1, r3
 800c56c:	48b6      	ldr	r0, [pc, #728]	@ (800c848 <frame_processing+0x1728>)
 800c56e:	f7f5 fcad 	bl	8001ecc <Uart_sendstring>
									}
									Uart_sendstring(USART6, buffer_0x06);
 800c572:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c576:	4619      	mov	r1, r3
 800c578:	48b4      	ldr	r0, [pc, #720]	@ (800c84c <frame_processing+0x172c>)
 800c57a:	f7f5 fca7 	bl	8001ecc <Uart_sendstring>

						}

						default:
							clear_send_flag();
 800c57e:	f7f5 fdc7 	bl	8002110 <clear_send_flag>
							return FSP_PKT_INVALID;
 800c582:	2302      	movs	r3, #2
 800c584:	f000 beac 	b.w	800d2e0 <frame_processing+0x21c0>
//													for (int i = 0; i < fsp_pkt->length; i++) {
//													      sprintf(buffer, "\n{%d}", fsp_pkt->payload[i]);
//													      Uart_sendstring(UART5, buffer);
//													}

					clear_send_flag();
 800c588:	f7f5 fdc2 	bl	8002110 <clear_send_flag>
					break;
 800c58c:	e004      	b.n	800c598 <frame_processing+0x1478>
				default:
					clear_send_flag();
 800c58e:	f7f5 fdbf 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800c592:	2302      	movs	r3, #2
 800c594:	f000 bea4 	b.w	800d2e0 <frame_processing+0x21c0>
					break;
			}

			break;
 800c598:	f000 bea1 	b.w	800d2de <frame_processing+0x21be>
		case FSP_ADR_CAM:
			clear_send_flag();
 800c59c:	f7f5 fdb8 	bl	8002110 <clear_send_flag>

			break;
 800c5a0:	f000 be9d 	b.w	800d2de <frame_processing+0x21be>

		case FSP_ADR_IOU:
			switch (fsp_pkt->type)
 800c5a4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c5a8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	791b      	ldrb	r3, [r3, #4]
 800c5b0:	2b05      	cmp	r3, #5
 800c5b2:	d003      	beq.n	800c5bc <frame_processing+0x149c>
 800c5b4:	2b07      	cmp	r3, #7
 800c5b6:	d015      	beq.n	800c5e4 <frame_processing+0x14c4>
 800c5b8:	f000 be89 	b.w	800d2ce <frame_processing+0x21ae>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800c5bc:	f7f5 fda8 	bl	8002110 <clear_send_flag>
					if (uart_choose_uart5) {
 800c5c0:	4ba0      	ldr	r3, [pc, #640]	@ (800c844 <frame_processing+0x1724>)
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <frame_processing+0x14b2>
						Uart_sendstring(UART5, "\nIOU_ACK\r\n> ");
 800c5ca:	49a1      	ldr	r1, [pc, #644]	@ (800c850 <frame_processing+0x1730>)
 800c5cc:	489e      	ldr	r0, [pc, #632]	@ (800c848 <frame_processing+0x1728>)
 800c5ce:	f7f5 fc7d 	bl	8001ecc <Uart_sendstring>
					}
					Uart_sendstring(USART6, "\nIOU_ACK\r\n> ");
 800c5d2:	499f      	ldr	r1, [pc, #636]	@ (800c850 <frame_processing+0x1730>)
 800c5d4:	489d      	ldr	r0, [pc, #628]	@ (800c84c <frame_processing+0x172c>)
 800c5d6:	f7f5 fc79 	bl	8001ecc <Uart_sendstring>

					break;
 800c5da:	bf00      	nop
				default:
					clear_send_flag();
					return FSP_PKT_INVALID;
					break;
			}
			clear_send_flag();
 800c5dc:	f7f5 fd98 	bl	8002110 <clear_send_flag>
			break;
 800c5e0:	f000 be7d 	b.w	800d2de <frame_processing+0x21be>
					clear_send_flag();
 800c5e4:	f7f5 fd94 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800c5e8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c5ec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	795b      	ldrb	r3, [r3, #5]
 800c5f4:	2b13      	cmp	r3, #19
 800c5f6:	dc31      	bgt.n	800c65c <frame_processing+0x153c>
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f2c0 8665 	blt.w	800d2c8 <frame_processing+0x21a8>
 800c5fe:	2b13      	cmp	r3, #19
 800c600:	f200 8662 	bhi.w	800d2c8 <frame_processing+0x21a8>
 800c604:	a201      	add	r2, pc, #4	@ (adr r2, 800c60c <frame_processing+0x14ec>)
 800c606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60a:	bf00      	nop
 800c60c:	0800c665 	.word	0x0800c665
 800c610:	0800d2c9 	.word	0x0800d2c9
 800c614:	0800c6e5 	.word	0x0800c6e5
 800c618:	0800c7a1 	.word	0x0800c7a1
 800c61c:	0800d2c9 	.word	0x0800d2c9
 800c620:	0800d2c9 	.word	0x0800d2c9
 800c624:	0800d2c9 	.word	0x0800d2c9
 800c628:	0800d2c9 	.word	0x0800d2c9
 800c62c:	0800d2c9 	.word	0x0800d2c9
 800c630:	0800d2c9 	.word	0x0800d2c9
 800c634:	0800d2c9 	.word	0x0800d2c9
 800c638:	0800d2c9 	.word	0x0800d2c9
 800c63c:	0800d2c9 	.word	0x0800d2c9
 800c640:	0800d2c9 	.word	0x0800d2c9
 800c644:	0800c869 	.word	0x0800c869
 800c648:	0800d2c9 	.word	0x0800d2c9
 800c64c:	0800c8f1 	.word	0x0800c8f1
 800c650:	0800c937 	.word	0x0800c937
 800c654:	0800ca65 	.word	0x0800ca65
 800c658:	0800cadd 	.word	0x0800cadd
 800c65c:	2bff      	cmp	r3, #255	@ 0xff
 800c65e:	d021      	beq.n	800c6a4 <frame_processing+0x1584>
 800c660:	f000 be32 	b.w	800d2c8 <frame_processing+0x21a8>
							sprintf(buffer_0x00, "IOU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800c664:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c668:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	799b      	ldrb	r3, [r3, #6]
 800c670:	461a      	mov	r2, r3
 800c672:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c676:	4977      	ldr	r1, [pc, #476]	@ (800c854 <frame_processing+0x1734>)
 800c678:	4618      	mov	r0, r3
 800c67a:	f001 fdff 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800c67e:	4b71      	ldr	r3, [pc, #452]	@ (800c844 <frame_processing+0x1724>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	b2db      	uxtb	r3, r3
 800c684:	2b00      	cmp	r3, #0
 800c686:	d005      	beq.n	800c694 <frame_processing+0x1574>
								Uart_sendstring(UART5, buffer_0x00);
 800c688:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c68c:	4619      	mov	r1, r3
 800c68e:	486e      	ldr	r0, [pc, #440]	@ (800c848 <frame_processing+0x1728>)
 800c690:	f7f5 fc1c 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x00);
 800c694:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c698:	4619      	mov	r1, r3
 800c69a:	486c      	ldr	r0, [pc, #432]	@ (800c84c <frame_processing+0x172c>)
 800c69c:	f7f5 fc16 	bl	8001ecc <Uart_sendstring>
							break;
 800c6a0:	f000 be15 	b.w	800d2ce <frame_processing+0x21ae>
							sprintf(buffer_0xFF, "IOU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800c6a4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c6a8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	799b      	ldrb	r3, [r3, #6]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c6b6:	4968      	ldr	r1, [pc, #416]	@ (800c858 <frame_processing+0x1738>)
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f001 fddf 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800c6be:	4b61      	ldr	r3, [pc, #388]	@ (800c844 <frame_processing+0x1724>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d005      	beq.n	800c6d4 <frame_processing+0x15b4>
								Uart_sendstring(UART5, buffer_0xFF);
 800c6c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	485e      	ldr	r0, [pc, #376]	@ (800c848 <frame_processing+0x1728>)
 800c6d0:	f7f5 fbfc 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0xFF);
 800c6d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c6d8:	4619      	mov	r1, r3
 800c6da:	485c      	ldr	r0, [pc, #368]	@ (800c84c <frame_processing+0x172c>)
 800c6dc:	f7f5 fbf6 	bl	8001ecc <Uart_sendstring>
							break;
 800c6e0:	f000 bdf5 	b.w	800d2ce <frame_processing+0x21ae>
						    uint8_t device = fsp_pkt->payload[1];
 800c6e4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c6e8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	799b      	ldrb	r3, [r3, #6]
 800c6f0:	f887 3515 	strb.w	r3, [r7, #1301]	@ 0x515
						    uint8_t channel = fsp_pkt->payload[2];
 800c6f4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c6f8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	79db      	ldrb	r3, [r3, #7]
 800c700:	f887 3514 	strb.w	r3, [r7, #1300]	@ 0x514
						    int16_t temp = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800c704:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c708:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	7a1b      	ldrb	r3, [r3, #8]
 800c710:	021b      	lsls	r3, r3, #8
 800c712:	b21a      	sxth	r2, r3
 800c714:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c718:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	7a5b      	ldrb	r3, [r3, #9]
 800c720:	b21b      	sxth	r3, r3
 800c722:	4313      	orrs	r3, r2
 800c724:	f8a7 3512 	strh.w	r3, [r7, #1298]	@ 0x512
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800c728:	f897 4515 	ldrb.w	r4, [r7, #1301]	@ 0x515
 800c72c:	f897 5514 	ldrb.w	r5, [r7, #1300]	@ 0x514
 800c730:	f9b7 3512 	ldrsh.w	r3, [r7, #1298]	@ 0x512
 800c734:	4a49      	ldr	r2, [pc, #292]	@ (800c85c <frame_processing+0x173c>)
 800c736:	fb82 1203 	smull	r1, r2, r2, r3
 800c73a:	1092      	asrs	r2, r2, #2
 800c73c:	17db      	asrs	r3, r3, #31
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	b21b      	sxth	r3, r3
 800c742:	461e      	mov	r6, r3
						            device, channel, temp / 10, abs(temp % 10));
 800c744:	f9b7 2512 	ldrsh.w	r2, [r7, #1298]	@ 0x512
 800c748:	4b44      	ldr	r3, [pc, #272]	@ (800c85c <frame_processing+0x173c>)
 800c74a:	fb83 1302 	smull	r1, r3, r3, r2
 800c74e:	1099      	asrs	r1, r3, #2
 800c750:	17d3      	asrs	r3, r2, #31
 800c752:	1ac9      	subs	r1, r1, r3
 800c754:	460b      	mov	r3, r1
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	440b      	add	r3, r1
 800c75a:	005b      	lsls	r3, r3, #1
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	b21b      	sxth	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfb8      	it	lt
 800c764:	425b      	neglt	r3, r3
 800c766:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800c768:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	9600      	str	r6, [sp, #0]
 800c770:	462b      	mov	r3, r5
 800c772:	4622      	mov	r2, r4
 800c774:	493a      	ldr	r1, [pc, #232]	@ (800c860 <frame_processing+0x1740>)
 800c776:	f001 fd81 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800c77a:	4b32      	ldr	r3, [pc, #200]	@ (800c844 <frame_processing+0x1724>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b00      	cmp	r3, #0
 800c782:	d005      	beq.n	800c790 <frame_processing+0x1670>
								Uart_sendstring(UART5, buffer_0x02);
 800c784:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c788:	4619      	mov	r1, r3
 800c78a:	482f      	ldr	r0, [pc, #188]	@ (800c848 <frame_processing+0x1728>)
 800c78c:	f7f5 fb9e 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x02);
 800c790:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c794:	4619      	mov	r1, r3
 800c796:	482d      	ldr	r0, [pc, #180]	@ (800c84c <frame_processing+0x172c>)
 800c798:	f7f5 fb98 	bl	8001ecc <Uart_sendstring>
						break;
 800c79c:	f000 bd97 	b.w	800d2ce <frame_processing+0x21ae>
						    uint8_t channel = fsp_pkt->payload[1];
 800c7a0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c7a4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	799b      	ldrb	r3, [r3, #6]
 800c7ac:	f887 3518 	strb.w	r3, [r7, #1304]	@ 0x518
						    int16_t temp = (int16_t)((fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3]);
 800c7b0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c7b4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	79db      	ldrb	r3, [r3, #7]
 800c7bc:	021b      	lsls	r3, r3, #8
 800c7be:	b21a      	sxth	r2, r3
 800c7c0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c7c4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	7a1b      	ldrb	r3, [r3, #8]
 800c7cc:	b21b      	sxth	r3, r3
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	f8a7 3516 	strh.w	r3, [r7, #1302]	@ 0x516
						    sprintf(buffer_0x03, "IOU_Res: CMDcode 0x03 [{Channel: %u} Temp: %d.%d]\n",
 800c7d4:	f897 4518 	ldrb.w	r4, [r7, #1304]	@ 0x518
 800c7d8:	f9b7 3516 	ldrsh.w	r3, [r7, #1302]	@ 0x516
 800c7dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c85c <frame_processing+0x173c>)
 800c7de:	fb82 1203 	smull	r1, r2, r2, r3
 800c7e2:	1092      	asrs	r2, r2, #2
 800c7e4:	17db      	asrs	r3, r3, #31
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	b21b      	sxth	r3, r3
 800c7ea:	461d      	mov	r5, r3
 800c7ec:	f9b7 2516 	ldrsh.w	r2, [r7, #1302]	@ 0x516
 800c7f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c85c <frame_processing+0x173c>)
 800c7f2:	fb83 1302 	smull	r1, r3, r3, r2
 800c7f6:	1099      	asrs	r1, r3, #2
 800c7f8:	17d3      	asrs	r3, r2, #31
 800c7fa:	1ac9      	subs	r1, r1, r3
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	440b      	add	r3, r1
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	b21b      	sxth	r3, r3
 800c808:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	462b      	mov	r3, r5
 800c810:	4622      	mov	r2, r4
 800c812:	4914      	ldr	r1, [pc, #80]	@ (800c864 <frame_processing+0x1744>)
 800c814:	f001 fd32 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800c818:	4b0a      	ldr	r3, [pc, #40]	@ (800c844 <frame_processing+0x1724>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d005      	beq.n	800c82e <frame_processing+0x170e>
								Uart_sendstring(UART5, buffer_0x03);
 800c822:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c826:	4619      	mov	r1, r3
 800c828:	4807      	ldr	r0, [pc, #28]	@ (800c848 <frame_processing+0x1728>)
 800c82a:	f7f5 fb4f 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x03);
 800c82e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c832:	4619      	mov	r1, r3
 800c834:	4805      	ldr	r0, [pc, #20]	@ (800c84c <frame_processing+0x172c>)
 800c836:	f7f5 fb49 	bl	8001ecc <Uart_sendstring>
						break;
 800c83a:	f000 bd48 	b.w	800d2ce <frame_processing+0x21ae>
 800c83e:	bf00      	nop
 800c840:	08013f7c 	.word	0x08013f7c
 800c844:	20004830 	.word	0x20004830
 800c848:	40005000 	.word	0x40005000
 800c84c:	40011400 	.word	0x40011400
 800c850:	080141c4 	.word	0x080141c4
 800c854:	080141d4 	.word	0x080141d4
 800c858:	080141f0 	.word	0x080141f0
 800c85c:	66666667 	.word	0x66666667
 800c860:	0801420c 	.word	0x0801420c
 800c864:	0801424c 	.word	0x0801424c
						    uint8_t red = fsp_pkt->payload[1];
 800c868:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c86c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	799b      	ldrb	r3, [r3, #6]
 800c874:	f887 351c 	strb.w	r3, [r7, #1308]	@ 0x51c
						    uint8_t blue = fsp_pkt->payload[2];
 800c878:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c87c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	79db      	ldrb	r3, [r3, #7]
 800c884:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
						    uint8_t green = fsp_pkt->payload[3];
 800c888:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c88c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	7a1b      	ldrb	r3, [r3, #8]
 800c894:	f887 351a 	strb.w	r3, [r7, #1306]	@ 0x51a
						    uint8_t white = fsp_pkt->payload[4];
 800c898:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c89c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	7a5b      	ldrb	r3, [r3, #9]
 800c8a4:	f887 3519 	strb.w	r3, [r7, #1305]	@ 0x519
						    sprintf(buffer_0x0E, "IOU_Res: CMDcode 0x0E [Red: %u, Blue: %u, Green: %u, White: %u]\n",
 800c8a8:	f897 151c 	ldrb.w	r1, [r7, #1308]	@ 0x51c
 800c8ac:	f897 451b 	ldrb.w	r4, [r7, #1307]	@ 0x51b
 800c8b0:	f897 351a 	ldrb.w	r3, [r7, #1306]	@ 0x51a
 800c8b4:	f897 2519 	ldrb.w	r2, [r7, #1305]	@ 0x519
 800c8b8:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800c8bc:	9201      	str	r2, [sp, #4]
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	460a      	mov	r2, r1
 800c8c4:	497e      	ldr	r1, [pc, #504]	@ (800cac0 <frame_processing+0x19a0>)
 800c8c6:	f001 fcd9 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800c8ca:	4b7e      	ldr	r3, [pc, #504]	@ (800cac4 <frame_processing+0x19a4>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d005      	beq.n	800c8e0 <frame_processing+0x17c0>
								Uart_sendstring(UART5, buffer_0x0E);
 800c8d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c8d8:	4619      	mov	r1, r3
 800c8da:	487b      	ldr	r0, [pc, #492]	@ (800cac8 <frame_processing+0x19a8>)
 800c8dc:	f7f5 faf6 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x0E);
 800c8e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4879      	ldr	r0, [pc, #484]	@ (800cacc <frame_processing+0x19ac>)
 800c8e8:	f7f5 faf0 	bl	8001ecc <Uart_sendstring>
						break;
 800c8ec:	f000 bcef 	b.w	800d2ce <frame_processing+0x21ae>
						    uint8_t duty = fsp_pkt->payload[1];
 800c8f0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c8f4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	799b      	ldrb	r3, [r3, #6]
 800c8fc:	f887 351d 	strb.w	r3, [r7, #1309]	@ 0x51d
						    sprintf(buffer_0x10, "IOU_Res: CMDcode 0x10 [Duty: %u%%]\n", duty);
 800c900:	f897 251d 	ldrb.w	r2, [r7, #1309]	@ 0x51d
 800c904:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c908:	4971      	ldr	r1, [pc, #452]	@ (800cad0 <frame_processing+0x19b0>)
 800c90a:	4618      	mov	r0, r3
 800c90c:	f001 fcb6 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800c910:	4b6c      	ldr	r3, [pc, #432]	@ (800cac4 <frame_processing+0x19a4>)
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	d005      	beq.n	800c926 <frame_processing+0x1806>
								Uart_sendstring(UART5, buffer_0x10);
 800c91a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c91e:	4619      	mov	r1, r3
 800c920:	4869      	ldr	r0, [pc, #420]	@ (800cac8 <frame_processing+0x19a8>)
 800c922:	f7f5 fad3 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x10);
 800c926:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c92a:	4619      	mov	r1, r3
 800c92c:	4867      	ldr	r0, [pc, #412]	@ (800cacc <frame_processing+0x19ac>)
 800c92e:	f7f5 facd 	bl	8001ecc <Uart_sendstring>
						break;
 800c932:	f000 bccc 	b.w	800d2ce <frame_processing+0x21ae>
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800c936:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c93a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	799b      	ldrb	r3, [r3, #6]
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	b21a      	sxth	r2, r3
 800c946:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c94a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	79db      	ldrb	r3, [r3, #7]
 800c952:	b21b      	sxth	r3, r3
 800c954:	4313      	orrs	r3, r2
 800c956:	f8a7 3528 	strh.w	r3, [r7, #1320]	@ 0x528
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800c95a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c95e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	7a1b      	ldrb	r3, [r3, #8]
 800c966:	021b      	lsls	r3, r3, #8
 800c968:	b21a      	sxth	r2, r3
 800c96a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c96e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	7a5b      	ldrb	r3, [r3, #9]
 800c976:	b21b      	sxth	r3, r3
 800c978:	4313      	orrs	r3, r2
 800c97a:	f8a7 3526 	strh.w	r3, [r7, #1318]	@ 0x526
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800c97e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c982:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	7a9b      	ldrb	r3, [r3, #10]
 800c98a:	021b      	lsls	r3, r3, #8
 800c98c:	b21a      	sxth	r2, r3
 800c98e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c992:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	7adb      	ldrb	r3, [r3, #11]
 800c99a:	b21b      	sxth	r3, r3
 800c99c:	4313      	orrs	r3, r2
 800c99e:	f8a7 3524 	strh.w	r3, [r7, #1316]	@ 0x524
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800c9a2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c9a6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	7b1b      	ldrb	r3, [r3, #12]
 800c9ae:	021b      	lsls	r3, r3, #8
 800c9b0:	b21a      	sxth	r2, r3
 800c9b2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c9b6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	7b5b      	ldrb	r3, [r3, #13]
 800c9be:	b21b      	sxth	r3, r3
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	f8a7 3522 	strh.w	r3, [r7, #1314]	@ 0x522
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800c9c6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c9ca:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	7b9b      	ldrb	r3, [r3, #14]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	b21a      	sxth	r2, r3
 800c9d6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c9da:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	7bdb      	ldrb	r3, [r3, #15]
 800c9e2:	b21b      	sxth	r3, r3
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	f8a7 3520 	strh.w	r3, [r7, #1312]	@ 0x520
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800c9ea:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c9ee:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	7c1b      	ldrb	r3, [r3, #16]
 800c9f6:	021b      	lsls	r3, r3, #8
 800c9f8:	b21a      	sxth	r2, r3
 800c9fa:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c9fe:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	7c5b      	ldrb	r3, [r3, #17]
 800ca06:	b21b      	sxth	r3, r3
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	f8a7 351e 	strh.w	r3, [r7, #1310]	@ 0x51e
						    sprintf(buffer_0x11, "IOU_Res: CMDcode 0x11 [Accel: X=%d, Y=%d, Z=%d\nGyro: X=%d, Y=%d, Z=%d]\n",
 800ca0e:	f9b7 5528 	ldrsh.w	r5, [r7, #1320]	@ 0x528
 800ca12:	f9b7 6526 	ldrsh.w	r6, [r7, #1318]	@ 0x526
 800ca16:	f9b7 3524 	ldrsh.w	r3, [r7, #1316]	@ 0x524
 800ca1a:	f9b7 2522 	ldrsh.w	r2, [r7, #1314]	@ 0x522
 800ca1e:	f9b7 1520 	ldrsh.w	r1, [r7, #1312]	@ 0x520
 800ca22:	f9b7 051e 	ldrsh.w	r0, [r7, #1310]	@ 0x51e
 800ca26:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800ca2a:	9003      	str	r0, [sp, #12]
 800ca2c:	9102      	str	r1, [sp, #8]
 800ca2e:	9201      	str	r2, [sp, #4]
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	4633      	mov	r3, r6
 800ca34:	462a      	mov	r2, r5
 800ca36:	4927      	ldr	r1, [pc, #156]	@ (800cad4 <frame_processing+0x19b4>)
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f001 fc1f 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800ca3e:	4b21      	ldr	r3, [pc, #132]	@ (800cac4 <frame_processing+0x19a4>)
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d005      	beq.n	800ca54 <frame_processing+0x1934>
								Uart_sendstring(UART5, buffer_0x11);
 800ca48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	481e      	ldr	r0, [pc, #120]	@ (800cac8 <frame_processing+0x19a8>)
 800ca50:	f7f5 fa3c 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x11);
 800ca54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ca58:	4619      	mov	r1, r3
 800ca5a:	481c      	ldr	r0, [pc, #112]	@ (800cacc <frame_processing+0x19ac>)
 800ca5c:	f7f5 fa36 	bl	8001ecc <Uart_sendstring>
						break;
 800ca60:	f000 bc35 	b.w	800d2ce <frame_processing+0x21ae>
						    uint16_t pressure = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ca64:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ca68:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	799b      	ldrb	r3, [r3, #6]
 800ca70:	021b      	lsls	r3, r3, #8
 800ca72:	b21a      	sxth	r2, r3
 800ca74:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ca78:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	79db      	ldrb	r3, [r3, #7]
 800ca80:	b21b      	sxth	r3, r3
 800ca82:	4313      	orrs	r3, r2
 800ca84:	b21b      	sxth	r3, r3
 800ca86:	f8a7 352a 	strh.w	r3, [r7, #1322]	@ 0x52a
						    sprintf(buffer_0x12, "IOU_Res: CMDcode 0x12 [Press: %u]\n", pressure);
 800ca8a:	f8b7 252a 	ldrh.w	r2, [r7, #1322]	@ 0x52a
 800ca8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ca92:	4911      	ldr	r1, [pc, #68]	@ (800cad8 <frame_processing+0x19b8>)
 800ca94:	4618      	mov	r0, r3
 800ca96:	f001 fbf1 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800ca9a:	4b0a      	ldr	r3, [pc, #40]	@ (800cac4 <frame_processing+0x19a4>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d005      	beq.n	800cab0 <frame_processing+0x1990>
								Uart_sendstring(UART5, buffer_0x12);
 800caa4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800caa8:	4619      	mov	r1, r3
 800caaa:	4807      	ldr	r0, [pc, #28]	@ (800cac8 <frame_processing+0x19a8>)
 800caac:	f7f5 fa0e 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x12);
 800cab0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cab4:	4619      	mov	r1, r3
 800cab6:	4805      	ldr	r0, [pc, #20]	@ (800cacc <frame_processing+0x19ac>)
 800cab8:	f7f5 fa08 	bl	8001ecc <Uart_sendstring>
						break;
 800cabc:	f000 bc07 	b.w	800d2ce <frame_processing+0x21ae>
 800cac0:	08014280 	.word	0x08014280
 800cac4:	20004830 	.word	0x20004830
 800cac8:	40005000 	.word	0x40005000
 800cacc:	40011400 	.word	0x40011400
 800cad0:	080142c4 	.word	0x080142c4
 800cad4:	080142e8 	.word	0x080142e8
 800cad8:	08014330 	.word	0x08014330
							int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800cadc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cae0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	799b      	ldrb	r3, [r3, #6]
 800cae8:	021b      	lsls	r3, r3, #8
 800caea:	b21a      	sxth	r2, r3
 800caec:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800caf0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	79db      	ldrb	r3, [r3, #7]
 800caf8:	b21b      	sxth	r3, r3
 800cafa:	4313      	orrs	r3, r2
 800cafc:	f8a7 354e 	strh.w	r3, [r7, #1358]	@ 0x54e
							int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800cb00:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb04:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	7a1b      	ldrb	r3, [r3, #8]
 800cb0c:	021b      	lsls	r3, r3, #8
 800cb0e:	b21a      	sxth	r2, r3
 800cb10:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb14:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	7a5b      	ldrb	r3, [r3, #9]
 800cb1c:	b21b      	sxth	r3, r3
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	f8a7 354c 	strh.w	r3, [r7, #1356]	@ 0x54c
							int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800cb24:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb28:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	7a9b      	ldrb	r3, [r3, #10]
 800cb30:	021b      	lsls	r3, r3, #8
 800cb32:	b21a      	sxth	r2, r3
 800cb34:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb38:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	7adb      	ldrb	r3, [r3, #11]
 800cb40:	b21b      	sxth	r3, r3
 800cb42:	4313      	orrs	r3, r2
 800cb44:	f8a7 354a 	strh.w	r3, [r7, #1354]	@ 0x54a
							int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800cb48:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb4c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	7b1b      	ldrb	r3, [r3, #12]
 800cb54:	021b      	lsls	r3, r3, #8
 800cb56:	b21a      	sxth	r2, r3
 800cb58:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb5c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	7b5b      	ldrb	r3, [r3, #13]
 800cb64:	b21b      	sxth	r3, r3
 800cb66:	4313      	orrs	r3, r2
 800cb68:	f8a7 3548 	strh.w	r3, [r7, #1352]	@ 0x548
							int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800cb6c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb70:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	7b9b      	ldrb	r3, [r3, #14]
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	b21a      	sxth	r2, r3
 800cb7c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb80:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	7bdb      	ldrb	r3, [r3, #15]
 800cb88:	b21b      	sxth	r3, r3
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	f8a7 3546 	strh.w	r3, [r7, #1350]	@ 0x546
							int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800cb90:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cb94:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	7c1b      	ldrb	r3, [r3, #16]
 800cb9c:	021b      	lsls	r3, r3, #8
 800cb9e:	b21a      	sxth	r2, r3
 800cba0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cba4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	7c5b      	ldrb	r3, [r3, #17]
 800cbac:	b21b      	sxth	r3, r3
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	f8a7 3544 	strh.w	r3, [r7, #1348]	@ 0x544
							int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800cbb4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cbb8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	7c9b      	ldrb	r3, [r3, #18]
 800cbc0:	021b      	lsls	r3, r3, #8
 800cbc2:	b21a      	sxth	r2, r3
 800cbc4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cbc8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	7cdb      	ldrb	r3, [r3, #19]
 800cbd0:	b21b      	sxth	r3, r3
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	f8a7 3542 	strh.w	r3, [r7, #1346]	@ 0x542
							int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800cbd8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cbdc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	7d1b      	ldrb	r3, [r3, #20]
 800cbe4:	021b      	lsls	r3, r3, #8
 800cbe6:	b21a      	sxth	r2, r3
 800cbe8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cbec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	7d5b      	ldrb	r3, [r3, #21]
 800cbf4:	b21b      	sxth	r3, r3
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	f8a7 3540 	strh.w	r3, [r7, #1344]	@ 0x540
							int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800cbfc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc00:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	7d9b      	ldrb	r3, [r3, #22]
 800cc08:	021b      	lsls	r3, r3, #8
 800cc0a:	b21a      	sxth	r2, r3
 800cc0c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc10:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	7ddb      	ldrb	r3, [r3, #23]
 800cc18:	b21b      	sxth	r3, r3
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	f8a7 353e 	strh.w	r3, [r7, #1342]	@ 0x53e
							int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800cc20:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc24:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	7e1b      	ldrb	r3, [r3, #24]
 800cc2c:	021b      	lsls	r3, r3, #8
 800cc2e:	b21a      	sxth	r2, r3
 800cc30:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc34:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	7e5b      	ldrb	r3, [r3, #25]
 800cc3c:	b21b      	sxth	r3, r3
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	f8a7 353c 	strh.w	r3, [r7, #1340]	@ 0x53c
							int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800cc44:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc48:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	7e9b      	ldrb	r3, [r3, #26]
 800cc50:	021b      	lsls	r3, r3, #8
 800cc52:	b21a      	sxth	r2, r3
 800cc54:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc58:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	7edb      	ldrb	r3, [r3, #27]
 800cc60:	b21b      	sxth	r3, r3
 800cc62:	4313      	orrs	r3, r2
 800cc64:	f8a7 353a 	strh.w	r3, [r7, #1338]	@ 0x53a
							uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800cc68:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc6c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	7f1b      	ldrb	r3, [r3, #28]
 800cc74:	021b      	lsls	r3, r3, #8
 800cc76:	b21a      	sxth	r2, r3
 800cc78:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc7c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	7f5b      	ldrb	r3, [r3, #29]
 800cc84:	b21b      	sxth	r3, r3
 800cc86:	4313      	orrs	r3, r2
 800cc88:	b21b      	sxth	r3, r3
 800cc8a:	f8a7 3538 	strh.w	r3, [r7, #1336]	@ 0x538
							uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 800cc8e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cc92:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	7f9b      	ldrb	r3, [r3, #30]
 800cc9a:	021b      	lsls	r3, r3, #8
 800cc9c:	b21a      	sxth	r2, r3
 800cc9e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cca2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	7fdb      	ldrb	r3, [r3, #31]
 800ccaa:	b21b      	sxth	r3, r3
 800ccac:	4313      	orrs	r3, r2
 800ccae:	b21b      	sxth	r3, r3
 800ccb0:	f8a7 3536 	strh.w	r3, [r7, #1334]	@ 0x536
							uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 800ccb4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ccb8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ccc2:	021b      	lsls	r3, r3, #8
 800ccc4:	b21a      	sxth	r2, r3
 800ccc6:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ccca:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ccd4:	b21b      	sxth	r3, r3
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	b21b      	sxth	r3, r3
 800ccda:	f8a7 3534 	strh.w	r3, [r7, #1332]	@ 0x534
							uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 800ccde:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cce2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ccec:	021b      	lsls	r3, r3, #8
 800ccee:	b21a      	sxth	r2, r3
 800ccf0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ccf4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ccfe:	b21b      	sxth	r3, r3
 800cd00:	4313      	orrs	r3, r2
 800cd02:	b21b      	sxth	r3, r3
 800cd04:	f8a7 3532 	strh.w	r3, [r7, #1330]	@ 0x532
							uint8_t neo_led_r = fsp_pkt->payload[31];
 800cd08:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd0c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cd16:	f887 3531 	strb.w	r3, [r7, #1329]	@ 0x531
							uint8_t neo_led_g = fsp_pkt->payload[32];
 800cd1a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd1e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cd28:	f887 3530 	strb.w	r3, [r7, #1328]	@ 0x530
							uint8_t neo_led_b = fsp_pkt->payload[33];
 800cd2c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd30:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800cd3a:	f887 352f 	strb.w	r3, [r7, #1327]	@ 0x52f
							uint8_t neo_led_w = fsp_pkt->payload[34];
 800cd3e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd42:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800cd4c:	f887 352e 	strb.w	r3, [r7, #1326]	@ 0x52e
							uint8_t ir_led_duty = fsp_pkt->payload[35];
 800cd50:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800cd54:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd5e:	f887 352d 	strb.w	r3, [r7, #1325]	@ 0x52d
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cd62:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da03      	bge.n	800cd72 <frame_processing+0x1c52>
 800cd6a:	4bb2      	ldr	r3, [pc, #712]	@ (800d034 <frame_processing+0x1f14>)
 800cd6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd70:	e002      	b.n	800cd78 <frame_processing+0x1c58>
 800cd72:	4bb1      	ldr	r3, [pc, #708]	@ (800d038 <frame_processing+0x1f18>)
 800cd74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800cd78:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	bfb8      	it	lt
 800cd80:	425b      	neglt	r3, r3
 800cd82:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cd84:	4aad      	ldr	r2, [pc, #692]	@ (800d03c <frame_processing+0x1f1c>)
 800cd86:	fb82 1203 	smull	r1, r2, r2, r3
 800cd8a:	1092      	asrs	r2, r2, #2
 800cd8c:	17db      	asrs	r3, r3, #31
 800cd8e:	eba2 0e03 	sub.w	lr, r2, r3
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800cd92:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	bfb8      	it	lt
 800cd9a:	425b      	neglt	r3, r3
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cda0:	4ba6      	ldr	r3, [pc, #664]	@ (800d03c <frame_processing+0x1f1c>)
 800cda2:	fb83 1302 	smull	r1, r3, r3, r2
 800cda6:	1099      	asrs	r1, r3, #2
 800cda8:	17d3      	asrs	r3, r2, #31
 800cdaa:	1acb      	subs	r3, r1, r3
 800cdac:	4619      	mov	r1, r3
 800cdae:	460b      	mov	r3, r1
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	440b      	add	r3, r1
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cdba:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	da03      	bge.n	800cdca <frame_processing+0x1caa>
 800cdc2:	4b9c      	ldr	r3, [pc, #624]	@ (800d034 <frame_processing+0x1f14>)
 800cdc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cdc8:	e002      	b.n	800cdd0 <frame_processing+0x1cb0>
 800cdca:	4b9b      	ldr	r3, [pc, #620]	@ (800d038 <frame_processing+0x1f18>)
 800cdcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800cdd0:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	bfb8      	it	lt
 800cdd8:	425b      	neglt	r3, r3
 800cdda:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cddc:	4a97      	ldr	r2, [pc, #604]	@ (800d03c <frame_processing+0x1f1c>)
 800cdde:	fb82 1203 	smull	r1, r2, r2, r3
 800cde2:	1092      	asrs	r2, r2, #2
 800cde4:	17db      	asrs	r3, r3, #31
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	66bb      	str	r3, [r7, #104]	@ 0x68
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800cdea:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bfb8      	it	lt
 800cdf2:	425b      	neglt	r3, r3
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cdf8:	4b90      	ldr	r3, [pc, #576]	@ (800d03c <frame_processing+0x1f1c>)
 800cdfa:	fb83 1302 	smull	r1, r3, r3, r2
 800cdfe:	1099      	asrs	r1, r3, #2
 800ce00:	17d3      	asrs	r3, r2, #31
 800ce02:	1acb      	subs	r3, r1, r3
 800ce04:	4619      	mov	r1, r3
 800ce06:	460b      	mov	r3, r1
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	440b      	add	r3, r1
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce12:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	da03      	bge.n	800ce22 <frame_processing+0x1d02>
 800ce1a:	4b86      	ldr	r3, [pc, #536]	@ (800d034 <frame_processing+0x1f14>)
 800ce1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce20:	e002      	b.n	800ce28 <frame_processing+0x1d08>
 800ce22:	4b85      	ldr	r3, [pc, #532]	@ (800d038 <frame_processing+0x1f18>)
 800ce24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800ce28:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	bfb8      	it	lt
 800ce30:	425b      	neglt	r3, r3
 800ce32:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ce34:	4a81      	ldr	r2, [pc, #516]	@ (800d03c <frame_processing+0x1f1c>)
 800ce36:	fb82 1203 	smull	r1, r2, r2, r3
 800ce3a:	1092      	asrs	r2, r2, #2
 800ce3c:	17db      	asrs	r3, r3, #31
 800ce3e:	1ad3      	subs	r3, r2, r3
 800ce40:	663b      	str	r3, [r7, #96]	@ 0x60
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800ce42:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bfb8      	it	lt
 800ce4a:	425b      	neglt	r3, r3
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ce50:	4b7a      	ldr	r3, [pc, #488]	@ (800d03c <frame_processing+0x1f1c>)
 800ce52:	fb83 1302 	smull	r1, r3, r3, r2
 800ce56:	1099      	asrs	r1, r3, #2
 800ce58:	17d3      	asrs	r3, r2, #31
 800ce5a:	1acb      	subs	r3, r1, r3
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	460b      	mov	r3, r1
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	440b      	add	r3, r1
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce6a:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	da03      	bge.n	800ce7a <frame_processing+0x1d5a>
 800ce72:	4b70      	ldr	r3, [pc, #448]	@ (800d034 <frame_processing+0x1f14>)
 800ce74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ce78:	e002      	b.n	800ce80 <frame_processing+0x1d60>
 800ce7a:	4b6f      	ldr	r3, [pc, #444]	@ (800d038 <frame_processing+0x1f18>)
 800ce7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800ce80:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	bfb8      	it	lt
 800ce88:	425b      	neglt	r3, r3
 800ce8a:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ce8c:	4a6b      	ldr	r2, [pc, #428]	@ (800d03c <frame_processing+0x1f1c>)
 800ce8e:	fb82 1203 	smull	r1, r2, r2, r3
 800ce92:	1092      	asrs	r2, r2, #2
 800ce94:	17db      	asrs	r3, r3, #31
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	65bb      	str	r3, [r7, #88]	@ 0x58
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800ce9a:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	bfb8      	it	lt
 800cea2:	425b      	neglt	r3, r3
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cea8:	4b64      	ldr	r3, [pc, #400]	@ (800d03c <frame_processing+0x1f1c>)
 800ceaa:	fb83 2301 	smull	r2, r3, r3, r1
 800ceae:	109a      	asrs	r2, r3, #2
 800ceb0:	17cb      	asrs	r3, r1, #31
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	1acb      	subs	r3, r1, r3
 800cec0:	657b      	str	r3, [r7, #84]	@ 0x54
 800cec2:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	da03      	bge.n	800ced2 <frame_processing+0x1db2>
 800ceca:	4b5a      	ldr	r3, [pc, #360]	@ (800d034 <frame_processing+0x1f14>)
 800cecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ced0:	e002      	b.n	800ced8 <frame_processing+0x1db8>
 800ced2:	4b59      	ldr	r3, [pc, #356]	@ (800d038 <frame_processing+0x1f18>)
 800ced4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800ced8:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800cedc:	2b00      	cmp	r3, #0
 800cede:	bfb8      	it	lt
 800cee0:	425b      	neglt	r3, r3
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cee6:	4b55      	ldr	r3, [pc, #340]	@ (800d03c <frame_processing+0x1f1c>)
 800cee8:	fb83 2301 	smull	r2, r3, r3, r1
 800ceec:	109a      	asrs	r2, r3, #2
 800ceee:	17cb      	asrs	r3, r1, #31
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	653b      	str	r3, [r7, #80]	@ 0x50
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800cef4:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	bfb8      	it	lt
 800cefc:	425b      	neglt	r3, r3
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cf02:	4b4e      	ldr	r3, [pc, #312]	@ (800d03c <frame_processing+0x1f1c>)
 800cf04:	fb83 2301 	smull	r2, r3, r3, r1
 800cf08:	109a      	asrs	r2, r3, #2
 800cf0a:	17cb      	asrs	r3, r1, #31
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	461a      	mov	r2, r3
 800cf10:	4613      	mov	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4413      	add	r3, r2
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	1acb      	subs	r3, r1, r3
 800cf1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf1c:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	da03      	bge.n	800cf2c <frame_processing+0x1e0c>
 800cf24:	4b43      	ldr	r3, [pc, #268]	@ (800d034 <frame_processing+0x1f14>)
 800cf26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf2a:	e002      	b.n	800cf32 <frame_processing+0x1e12>
 800cf2c:	4b42      	ldr	r3, [pc, #264]	@ (800d038 <frame_processing+0x1f18>)
 800cf2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800cf32:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	bfb8      	it	lt
 800cf3a:	425b      	neglt	r3, r3
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cf40:	4b3e      	ldr	r3, [pc, #248]	@ (800d03c <frame_processing+0x1f1c>)
 800cf42:	fb83 2301 	smull	r2, r3, r3, r1
 800cf46:	109a      	asrs	r2, r3, #2
 800cf48:	17cb      	asrs	r3, r1, #31
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	64bb      	str	r3, [r7, #72]	@ 0x48
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800cf4e:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	bfb8      	it	lt
 800cf56:	425b      	neglt	r3, r3
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cf5c:	4b37      	ldr	r3, [pc, #220]	@ (800d03c <frame_processing+0x1f1c>)
 800cf5e:	fb83 2301 	smull	r2, r3, r3, r1
 800cf62:	109a      	asrs	r2, r3, #2
 800cf64:	17cb      	asrs	r3, r1, #31
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	461a      	mov	r2, r3
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	1acb      	subs	r3, r1, r3
 800cf74:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf76:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	da03      	bge.n	800cf86 <frame_processing+0x1e66>
 800cf7e:	4b2d      	ldr	r3, [pc, #180]	@ (800d034 <frame_processing+0x1f14>)
 800cf80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf84:	e002      	b.n	800cf8c <frame_processing+0x1e6c>
 800cf86:	4b2c      	ldr	r3, [pc, #176]	@ (800d038 <frame_processing+0x1f18>)
 800cf88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800cf8c:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	bfb8      	it	lt
 800cf94:	425b      	neglt	r3, r3
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cf9a:	4b28      	ldr	r3, [pc, #160]	@ (800d03c <frame_processing+0x1f1c>)
 800cf9c:	fb83 2301 	smull	r2, r3, r3, r1
 800cfa0:	109a      	asrs	r2, r3, #2
 800cfa2:	17cb      	asrs	r3, r1, #31
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	643b      	str	r3, [r7, #64]	@ 0x40
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800cfa8:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	bfb8      	it	lt
 800cfb0:	425b      	neglt	r3, r3
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cfb6:	4b21      	ldr	r3, [pc, #132]	@ (800d03c <frame_processing+0x1f1c>)
 800cfb8:	fb83 2301 	smull	r2, r3, r3, r1
 800cfbc:	109a      	asrs	r2, r3, #2
 800cfbe:	17cb      	asrs	r3, r1, #31
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	005b      	lsls	r3, r3, #1
 800cfcc:	1acb      	subs	r3, r1, r3
 800cfce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfd0:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	da02      	bge.n	800cfde <frame_processing+0x1ebe>
 800cfd8:	4b16      	ldr	r3, [pc, #88]	@ (800d034 <frame_processing+0x1f14>)
 800cfda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cfdc:	e001      	b.n	800cfe2 <frame_processing+0x1ec2>
 800cfde:	4b16      	ldr	r3, [pc, #88]	@ (800d038 <frame_processing+0x1f18>)
 800cfe0:	67fb      	str	r3, [r7, #124]	@ 0x7c
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800cfe2:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	bfb8      	it	lt
 800cfea:	425b      	neglt	r3, r3
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800cff0:	4b12      	ldr	r3, [pc, #72]	@ (800d03c <frame_processing+0x1f1c>)
 800cff2:	fb83 2301 	smull	r2, r3, r3, r1
 800cff6:	109a      	asrs	r2, r3, #2
 800cff8:	17cb      	asrs	r3, r1, #31
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	63bb      	str	r3, [r7, #56]	@ 0x38
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800cffe:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800d002:	2b00      	cmp	r3, #0
 800d004:	bfb8      	it	lt
 800d006:	425b      	neglt	r3, r3
 800d008:	b29b      	uxth	r3, r3
 800d00a:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d00c:	4b0b      	ldr	r3, [pc, #44]	@ (800d03c <frame_processing+0x1f1c>)
 800d00e:	fb83 2301 	smull	r2, r3, r3, r1
 800d012:	109a      	asrs	r2, r3, #2
 800d014:	17cb      	asrs	r3, r1, #31
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	461a      	mov	r2, r3
 800d01a:	4613      	mov	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4413      	add	r3, r2
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	1acb      	subs	r3, r1, r3
 800d024:	637b      	str	r3, [r7, #52]	@ 0x34
 800d026:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	da08      	bge.n	800d040 <frame_processing+0x1f20>
 800d02e:	4b01      	ldr	r3, [pc, #4]	@ (800d034 <frame_processing+0x1f14>)
 800d030:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d032:	e007      	b.n	800d044 <frame_processing+0x1f24>
 800d034:	08013c78 	.word	0x08013c78
 800d038:	08013c7c 	.word	0x08013c7c
 800d03c:	66666667 	.word	0x66666667
 800d040:	4baa      	ldr	r3, [pc, #680]	@ (800d2ec <frame_processing+0x21cc>)
 800d042:	67bb      	str	r3, [r7, #120]	@ 0x78
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800d044:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800d048:	2b00      	cmp	r3, #0
 800d04a:	bfb8      	it	lt
 800d04c:	425b      	neglt	r3, r3
 800d04e:	b29b      	uxth	r3, r3
 800d050:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d052:	4ba7      	ldr	r3, [pc, #668]	@ (800d2f0 <frame_processing+0x21d0>)
 800d054:	fb83 2301 	smull	r2, r3, r3, r1
 800d058:	109a      	asrs	r2, r3, #2
 800d05a:	17cb      	asrs	r3, r1, #31
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	633b      	str	r3, [r7, #48]	@ 0x30
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800d060:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800d064:	2b00      	cmp	r3, #0
 800d066:	bfb8      	it	lt
 800d068:	425b      	neglt	r3, r3
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d06e:	4ba0      	ldr	r3, [pc, #640]	@ (800d2f0 <frame_processing+0x21d0>)
 800d070:	fb83 2301 	smull	r2, r3, r3, r1
 800d074:	109a      	asrs	r2, r3, #2
 800d076:	17cb      	asrs	r3, r1, #31
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	461a      	mov	r2, r3
 800d07c:	4613      	mov	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	005b      	lsls	r3, r3, #1
 800d084:	1acb      	subs	r3, r1, r3
 800d086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d088:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	da02      	bge.n	800d096 <frame_processing+0x1f76>
 800d090:	4b98      	ldr	r3, [pc, #608]	@ (800d2f4 <frame_processing+0x21d4>)
 800d092:	677b      	str	r3, [r7, #116]	@ 0x74
 800d094:	e001      	b.n	800d09a <frame_processing+0x1f7a>
 800d096:	4b95      	ldr	r3, [pc, #596]	@ (800d2ec <frame_processing+0x21cc>)
 800d098:	677b      	str	r3, [r7, #116]	@ 0x74
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800d09a:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfb8      	it	lt
 800d0a2:	425b      	neglt	r3, r3
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d0a8:	4b91      	ldr	r3, [pc, #580]	@ (800d2f0 <frame_processing+0x21d0>)
 800d0aa:	fb83 2301 	smull	r2, r3, r3, r1
 800d0ae:	109a      	asrs	r2, r3, #2
 800d0b0:	17cb      	asrs	r3, r1, #31
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800d0b6:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	bfb8      	it	lt
 800d0be:	425b      	neglt	r3, r3
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d0c4:	4b8a      	ldr	r3, [pc, #552]	@ (800d2f0 <frame_processing+0x21d0>)
 800d0c6:	fb83 2301 	smull	r2, r3, r3, r1
 800d0ca:	109a      	asrs	r2, r3, #2
 800d0cc:	17cb      	asrs	r3, r1, #31
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	005b      	lsls	r3, r3, #1
 800d0da:	1acb      	subs	r3, r1, r3
 800d0dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0de:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	da02      	bge.n	800d0ec <frame_processing+0x1fcc>
 800d0e6:	4b83      	ldr	r3, [pc, #524]	@ (800d2f4 <frame_processing+0x21d4>)
 800d0e8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d0ea:	e001      	b.n	800d0f0 <frame_processing+0x1fd0>
 800d0ec:	4b7f      	ldr	r3, [pc, #508]	@ (800d2ec <frame_processing+0x21cc>)
 800d0ee:	673b      	str	r3, [r7, #112]	@ 0x70
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800d0f0:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	bfb8      	it	lt
 800d0f8:	425b      	neglt	r3, r3
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d0fe:	4b7c      	ldr	r3, [pc, #496]	@ (800d2f0 <frame_processing+0x21d0>)
 800d100:	fb83 2301 	smull	r2, r3, r3, r1
 800d104:	109a      	asrs	r2, r3, #2
 800d106:	17cb      	asrs	r3, r1, #31
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	623b      	str	r3, [r7, #32]
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800d10c:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800d110:	2b00      	cmp	r3, #0
 800d112:	bfb8      	it	lt
 800d114:	425b      	neglt	r3, r3
 800d116:	b29b      	uxth	r3, r3
 800d118:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800d11a:	4b75      	ldr	r3, [pc, #468]	@ (800d2f0 <frame_processing+0x21d0>)
 800d11c:	fb83 2301 	smull	r2, r3, r3, r1
 800d120:	109a      	asrs	r2, r3, #2
 800d122:	17cb      	asrs	r3, r1, #31
 800d124:	1ad6      	subs	r6, r2, r3
 800d126:	4633      	mov	r3, r6
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4433      	add	r3, r6
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	1ace      	subs	r6, r1, r3
 800d130:	f8b7 2538 	ldrh.w	r2, [r7, #1336]	@ 0x538
 800d134:	4b70      	ldr	r3, [pc, #448]	@ (800d2f8 <frame_processing+0x21d8>)
 800d136:	fba3 2302 	umull	r2, r3, r3, r2
 800d13a:	095b      	lsrs	r3, r3, #5
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	61fb      	str	r3, [r7, #28]
 800d140:	f8b7 1538 	ldrh.w	r1, [r7, #1336]	@ 0x538
 800d144:	4b6c      	ldr	r3, [pc, #432]	@ (800d2f8 <frame_processing+0x21d8>)
 800d146:	fba3 2301 	umull	r2, r3, r3, r1
 800d14a:	095a      	lsrs	r2, r3, #5
 800d14c:	2364      	movs	r3, #100	@ 0x64
 800d14e:	fb02 f303 	mul.w	r3, r2, r3
 800d152:	1acb      	subs	r3, r1, r3
 800d154:	b29b      	uxth	r3, r3
 800d156:	61bb      	str	r3, [r7, #24]
 800d158:	f8b7 2536 	ldrh.w	r2, [r7, #1334]	@ 0x536
 800d15c:	4b66      	ldr	r3, [pc, #408]	@ (800d2f8 <frame_processing+0x21d8>)
 800d15e:	fba3 2302 	umull	r2, r3, r3, r2
 800d162:	095b      	lsrs	r3, r3, #5
 800d164:	b29b      	uxth	r3, r3
 800d166:	617b      	str	r3, [r7, #20]
 800d168:	f8b7 1536 	ldrh.w	r1, [r7, #1334]	@ 0x536
 800d16c:	4b62      	ldr	r3, [pc, #392]	@ (800d2f8 <frame_processing+0x21d8>)
 800d16e:	fba3 2301 	umull	r2, r3, r3, r1
 800d172:	095a      	lsrs	r2, r3, #5
 800d174:	2364      	movs	r3, #100	@ 0x64
 800d176:	fb02 f303 	mul.w	r3, r2, r3
 800d17a:	1acb      	subs	r3, r1, r3
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	613b      	str	r3, [r7, #16]
 800d180:	f8b7 2534 	ldrh.w	r2, [r7, #1332]	@ 0x534
 800d184:	4b5c      	ldr	r3, [pc, #368]	@ (800d2f8 <frame_processing+0x21d8>)
 800d186:	fba3 2302 	umull	r2, r3, r3, r2
 800d18a:	095b      	lsrs	r3, r3, #5
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	60fb      	str	r3, [r7, #12]
 800d190:	f8b7 1534 	ldrh.w	r1, [r7, #1332]	@ 0x534
 800d194:	4b58      	ldr	r3, [pc, #352]	@ (800d2f8 <frame_processing+0x21d8>)
 800d196:	fba3 2301 	umull	r2, r3, r3, r1
 800d19a:	095a      	lsrs	r2, r3, #5
 800d19c:	2364      	movs	r3, #100	@ 0x64
 800d19e:	fb02 f303 	mul.w	r3, r2, r3
 800d1a2:	1acb      	subs	r3, r1, r3
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	60bb      	str	r3, [r7, #8]
 800d1a8:	f8b7 2532 	ldrh.w	r2, [r7, #1330]	@ 0x532
 800d1ac:	4b52      	ldr	r3, [pc, #328]	@ (800d2f8 <frame_processing+0x21d8>)
 800d1ae:	fba3 2302 	umull	r2, r3, r3, r2
 800d1b2:	095b      	lsrs	r3, r3, #5
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	607b      	str	r3, [r7, #4]
 800d1b8:	f8b7 1532 	ldrh.w	r1, [r7, #1330]	@ 0x532
 800d1bc:	4b4e      	ldr	r3, [pc, #312]	@ (800d2f8 <frame_processing+0x21d8>)
 800d1be:	fba3 2301 	umull	r2, r3, r3, r1
 800d1c2:	095a      	lsrs	r2, r3, #5
 800d1c4:	2364      	movs	r3, #100	@ 0x64
 800d1c6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ca:	1acb      	subs	r3, r1, r3
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	461d      	mov	r5, r3
 800d1d0:	f897 4531 	ldrb.w	r4, [r7, #1329]	@ 0x531
 800d1d4:	f897 0530 	ldrb.w	r0, [r7, #1328]	@ 0x530
 800d1d8:	f897 152f 	ldrb.w	r1, [r7, #1327]	@ 0x52f
 800d1dc:	f897 252e 	ldrb.w	r2, [r7, #1326]	@ 0x52e
 800d1e0:	f897 352d 	ldrb.w	r3, [r7, #1325]	@ 0x52d
 800d1e4:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 800d1e8:	932b      	str	r3, [sp, #172]	@ 0xac
 800d1ea:	922a      	str	r2, [sp, #168]	@ 0xa8
 800d1ec:	9129      	str	r1, [sp, #164]	@ 0xa4
 800d1ee:	9028      	str	r0, [sp, #160]	@ 0xa0
 800d1f0:	9427      	str	r4, [sp, #156]	@ 0x9c
 800d1f2:	9526      	str	r5, [sp, #152]	@ 0x98
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	9225      	str	r2, [sp, #148]	@ 0x94
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	9224      	str	r2, [sp, #144]	@ 0x90
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	9223      	str	r2, [sp, #140]	@ 0x8c
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	9222      	str	r2, [sp, #136]	@ 0x88
 800d204:	697a      	ldr	r2, [r7, #20]
 800d206:	9221      	str	r2, [sp, #132]	@ 0x84
 800d208:	69ba      	ldr	r2, [r7, #24]
 800d20a:	9220      	str	r2, [sp, #128]	@ 0x80
 800d20c:	69fa      	ldr	r2, [r7, #28]
 800d20e:	921f      	str	r2, [sp, #124]	@ 0x7c
 800d210:	961e      	str	r6, [sp, #120]	@ 0x78
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	931d      	str	r3, [sp, #116]	@ 0x74
 800d216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d218:	931c      	str	r3, [sp, #112]	@ 0x70
 800d21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d220:	931a      	str	r3, [sp, #104]	@ 0x68
 800d222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d224:	9319      	str	r3, [sp, #100]	@ 0x64
 800d226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d228:	9318      	str	r3, [sp, #96]	@ 0x60
 800d22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d22c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d22e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d230:	9316      	str	r3, [sp, #88]	@ 0x58
 800d232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d234:	9315      	str	r3, [sp, #84]	@ 0x54
 800d236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d238:	9314      	str	r3, [sp, #80]	@ 0x50
 800d23a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d23c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d23e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d240:	9312      	str	r3, [sp, #72]	@ 0x48
 800d242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d244:	9311      	str	r3, [sp, #68]	@ 0x44
 800d246:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d24a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d24c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d24e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d252:	930e      	str	r3, [sp, #56]	@ 0x38
 800d254:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d258:	930d      	str	r3, [sp, #52]	@ 0x34
 800d25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d25c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d25e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d262:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d266:	930a      	str	r3, [sp, #40]	@ 0x28
 800d268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d26a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d26c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d26e:	9308      	str	r3, [sp, #32]
 800d270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d274:	9307      	str	r3, [sp, #28]
 800d276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d278:	9306      	str	r3, [sp, #24]
 800d27a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d27c:	9305      	str	r3, [sp, #20]
 800d27e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d282:	9304      	str	r3, [sp, #16]
 800d284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d286:	9303      	str	r3, [sp, #12]
 800d288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d28a:	9302      	str	r3, [sp, #8]
 800d28c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	4673      	mov	r3, lr
 800d298:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d29c:	4917      	ldr	r1, [pc, #92]	@ (800d2fc <frame_processing+0x21dc>)
 800d29e:	4660      	mov	r0, ip
 800d2a0:	f000 ffec 	bl	800e27c <siprintf>
							if (uart_choose_uart5) {
 800d2a4:	4b16      	ldr	r3, [pc, #88]	@ (800d300 <frame_processing+0x21e0>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d005      	beq.n	800d2ba <frame_processing+0x219a>
								Uart_sendstring(UART5, buffer_0x13);
 800d2ae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	4813      	ldr	r0, [pc, #76]	@ (800d304 <frame_processing+0x21e4>)
 800d2b6:	f7f4 fe09 	bl	8001ecc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x13);
 800d2ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4811      	ldr	r0, [pc, #68]	@ (800d308 <frame_processing+0x21e8>)
 800d2c2:	f7f4 fe03 	bl	8001ecc <Uart_sendstring>
						break;
 800d2c6:	e002      	b.n	800d2ce <frame_processing+0x21ae>
							clear_send_flag();
 800d2c8:	f7f4 ff22 	bl	8002110 <clear_send_flag>
							break;
 800d2cc:	bf00      	nop
					clear_send_flag();
 800d2ce:	f7f4 ff1f 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	e004      	b.n	800d2e0 <frame_processing+0x21c0>
		default:
			clear_send_flag();
 800d2d6:	f7f4 ff1b 	bl	8002110 <clear_send_flag>
			return FSP_PKT_WRONG_ADR;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	e000      	b.n	800d2e0 <frame_processing+0x21c0>
			break;

	}
	return 0;
 800d2de:	2300      	movs	r3, #0

}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f507 67aa 	add.w	r7, r7, #1360	@ 0x550
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ec:	08013c7c 	.word	0x08013c7c
 800d2f0:	66666667 	.word	0x66666667
 800d2f4:	08013c78 	.word	0x08013c78
 800d2f8:	51eb851f 	.word	0x51eb851f
 800d2fc:	08014354 	.word	0x08014354
 800d300:	20004830 	.word	0x20004830
 800d304:	40005000 	.word	0x40005000
 800d308:	40011400 	.word	0x40011400

0800d30c <atoi>:
 800d30c:	220a      	movs	r2, #10
 800d30e:	2100      	movs	r1, #0
 800d310:	f000 b87c 	b.w	800d40c <strtol>

0800d314 <_strtol_l.constprop.0>:
 800d314:	2b24      	cmp	r3, #36	@ 0x24
 800d316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d31a:	4686      	mov	lr, r0
 800d31c:	4690      	mov	r8, r2
 800d31e:	d801      	bhi.n	800d324 <_strtol_l.constprop.0+0x10>
 800d320:	2b01      	cmp	r3, #1
 800d322:	d106      	bne.n	800d332 <_strtol_l.constprop.0+0x1e>
 800d324:	f001 f860 	bl	800e3e8 <__errno>
 800d328:	2316      	movs	r3, #22
 800d32a:	6003      	str	r3, [r0, #0]
 800d32c:	2000      	movs	r0, #0
 800d32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d332:	4834      	ldr	r0, [pc, #208]	@ (800d404 <_strtol_l.constprop.0+0xf0>)
 800d334:	460d      	mov	r5, r1
 800d336:	462a      	mov	r2, r5
 800d338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d33c:	5d06      	ldrb	r6, [r0, r4]
 800d33e:	f016 0608 	ands.w	r6, r6, #8
 800d342:	d1f8      	bne.n	800d336 <_strtol_l.constprop.0+0x22>
 800d344:	2c2d      	cmp	r4, #45	@ 0x2d
 800d346:	d12d      	bne.n	800d3a4 <_strtol_l.constprop.0+0x90>
 800d348:	782c      	ldrb	r4, [r5, #0]
 800d34a:	2601      	movs	r6, #1
 800d34c:	1c95      	adds	r5, r2, #2
 800d34e:	f033 0210 	bics.w	r2, r3, #16
 800d352:	d109      	bne.n	800d368 <_strtol_l.constprop.0+0x54>
 800d354:	2c30      	cmp	r4, #48	@ 0x30
 800d356:	d12a      	bne.n	800d3ae <_strtol_l.constprop.0+0x9a>
 800d358:	782a      	ldrb	r2, [r5, #0]
 800d35a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d35e:	2a58      	cmp	r2, #88	@ 0x58
 800d360:	d125      	bne.n	800d3ae <_strtol_l.constprop.0+0x9a>
 800d362:	786c      	ldrb	r4, [r5, #1]
 800d364:	2310      	movs	r3, #16
 800d366:	3502      	adds	r5, #2
 800d368:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d36c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d370:	2200      	movs	r2, #0
 800d372:	fbbc f9f3 	udiv	r9, ip, r3
 800d376:	4610      	mov	r0, r2
 800d378:	fb03 ca19 	mls	sl, r3, r9, ip
 800d37c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d380:	2f09      	cmp	r7, #9
 800d382:	d81b      	bhi.n	800d3bc <_strtol_l.constprop.0+0xa8>
 800d384:	463c      	mov	r4, r7
 800d386:	42a3      	cmp	r3, r4
 800d388:	dd27      	ble.n	800d3da <_strtol_l.constprop.0+0xc6>
 800d38a:	1c57      	adds	r7, r2, #1
 800d38c:	d007      	beq.n	800d39e <_strtol_l.constprop.0+0x8a>
 800d38e:	4581      	cmp	r9, r0
 800d390:	d320      	bcc.n	800d3d4 <_strtol_l.constprop.0+0xc0>
 800d392:	d101      	bne.n	800d398 <_strtol_l.constprop.0+0x84>
 800d394:	45a2      	cmp	sl, r4
 800d396:	db1d      	blt.n	800d3d4 <_strtol_l.constprop.0+0xc0>
 800d398:	fb00 4003 	mla	r0, r0, r3, r4
 800d39c:	2201      	movs	r2, #1
 800d39e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3a2:	e7eb      	b.n	800d37c <_strtol_l.constprop.0+0x68>
 800d3a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d3a6:	bf04      	itt	eq
 800d3a8:	782c      	ldrbeq	r4, [r5, #0]
 800d3aa:	1c95      	addeq	r5, r2, #2
 800d3ac:	e7cf      	b.n	800d34e <_strtol_l.constprop.0+0x3a>
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1da      	bne.n	800d368 <_strtol_l.constprop.0+0x54>
 800d3b2:	2c30      	cmp	r4, #48	@ 0x30
 800d3b4:	bf0c      	ite	eq
 800d3b6:	2308      	moveq	r3, #8
 800d3b8:	230a      	movne	r3, #10
 800d3ba:	e7d5      	b.n	800d368 <_strtol_l.constprop.0+0x54>
 800d3bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d3c0:	2f19      	cmp	r7, #25
 800d3c2:	d801      	bhi.n	800d3c8 <_strtol_l.constprop.0+0xb4>
 800d3c4:	3c37      	subs	r4, #55	@ 0x37
 800d3c6:	e7de      	b.n	800d386 <_strtol_l.constprop.0+0x72>
 800d3c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d3cc:	2f19      	cmp	r7, #25
 800d3ce:	d804      	bhi.n	800d3da <_strtol_l.constprop.0+0xc6>
 800d3d0:	3c57      	subs	r4, #87	@ 0x57
 800d3d2:	e7d8      	b.n	800d386 <_strtol_l.constprop.0+0x72>
 800d3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d8:	e7e1      	b.n	800d39e <_strtol_l.constprop.0+0x8a>
 800d3da:	1c53      	adds	r3, r2, #1
 800d3dc:	d108      	bne.n	800d3f0 <_strtol_l.constprop.0+0xdc>
 800d3de:	2322      	movs	r3, #34	@ 0x22
 800d3e0:	f8ce 3000 	str.w	r3, [lr]
 800d3e4:	4660      	mov	r0, ip
 800d3e6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ea:	d0a0      	beq.n	800d32e <_strtol_l.constprop.0+0x1a>
 800d3ec:	1e69      	subs	r1, r5, #1
 800d3ee:	e006      	b.n	800d3fe <_strtol_l.constprop.0+0xea>
 800d3f0:	b106      	cbz	r6, 800d3f4 <_strtol_l.constprop.0+0xe0>
 800d3f2:	4240      	negs	r0, r0
 800d3f4:	f1b8 0f00 	cmp.w	r8, #0
 800d3f8:	d099      	beq.n	800d32e <_strtol_l.constprop.0+0x1a>
 800d3fa:	2a00      	cmp	r2, #0
 800d3fc:	d1f6      	bne.n	800d3ec <_strtol_l.constprop.0+0xd8>
 800d3fe:	f8c8 1000 	str.w	r1, [r8]
 800d402:	e794      	b.n	800d32e <_strtol_l.constprop.0+0x1a>
 800d404:	080144b5 	.word	0x080144b5

0800d408 <_strtol_r>:
 800d408:	f7ff bf84 	b.w	800d314 <_strtol_l.constprop.0>

0800d40c <strtol>:
 800d40c:	4613      	mov	r3, r2
 800d40e:	460a      	mov	r2, r1
 800d410:	4601      	mov	r1, r0
 800d412:	4802      	ldr	r0, [pc, #8]	@ (800d41c <strtol+0x10>)
 800d414:	6800      	ldr	r0, [r0, #0]
 800d416:	f7ff bf7d 	b.w	800d314 <_strtol_l.constprop.0>
 800d41a:	bf00      	nop
 800d41c:	200003f4 	.word	0x200003f4

0800d420 <__cvt>:
 800d420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d424:	ec57 6b10 	vmov	r6, r7, d0
 800d428:	2f00      	cmp	r7, #0
 800d42a:	460c      	mov	r4, r1
 800d42c:	4619      	mov	r1, r3
 800d42e:	463b      	mov	r3, r7
 800d430:	bfbb      	ittet	lt
 800d432:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d436:	461f      	movlt	r7, r3
 800d438:	2300      	movge	r3, #0
 800d43a:	232d      	movlt	r3, #45	@ 0x2d
 800d43c:	700b      	strb	r3, [r1, #0]
 800d43e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d440:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d444:	4691      	mov	r9, r2
 800d446:	f023 0820 	bic.w	r8, r3, #32
 800d44a:	bfbc      	itt	lt
 800d44c:	4632      	movlt	r2, r6
 800d44e:	4616      	movlt	r6, r2
 800d450:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d454:	d005      	beq.n	800d462 <__cvt+0x42>
 800d456:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d45a:	d100      	bne.n	800d45e <__cvt+0x3e>
 800d45c:	3401      	adds	r4, #1
 800d45e:	2102      	movs	r1, #2
 800d460:	e000      	b.n	800d464 <__cvt+0x44>
 800d462:	2103      	movs	r1, #3
 800d464:	ab03      	add	r3, sp, #12
 800d466:	9301      	str	r3, [sp, #4]
 800d468:	ab02      	add	r3, sp, #8
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	ec47 6b10 	vmov	d0, r6, r7
 800d470:	4653      	mov	r3, sl
 800d472:	4622      	mov	r2, r4
 800d474:	f001 f884 	bl	800e580 <_dtoa_r>
 800d478:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d47c:	4605      	mov	r5, r0
 800d47e:	d119      	bne.n	800d4b4 <__cvt+0x94>
 800d480:	f019 0f01 	tst.w	r9, #1
 800d484:	d00e      	beq.n	800d4a4 <__cvt+0x84>
 800d486:	eb00 0904 	add.w	r9, r0, r4
 800d48a:	2200      	movs	r2, #0
 800d48c:	2300      	movs	r3, #0
 800d48e:	4630      	mov	r0, r6
 800d490:	4639      	mov	r1, r7
 800d492:	f7f3 fb29 	bl	8000ae8 <__aeabi_dcmpeq>
 800d496:	b108      	cbz	r0, 800d49c <__cvt+0x7c>
 800d498:	f8cd 900c 	str.w	r9, [sp, #12]
 800d49c:	2230      	movs	r2, #48	@ 0x30
 800d49e:	9b03      	ldr	r3, [sp, #12]
 800d4a0:	454b      	cmp	r3, r9
 800d4a2:	d31e      	bcc.n	800d4e2 <__cvt+0xc2>
 800d4a4:	9b03      	ldr	r3, [sp, #12]
 800d4a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4a8:	1b5b      	subs	r3, r3, r5
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	6013      	str	r3, [r2, #0]
 800d4ae:	b004      	add	sp, #16
 800d4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4b8:	eb00 0904 	add.w	r9, r0, r4
 800d4bc:	d1e5      	bne.n	800d48a <__cvt+0x6a>
 800d4be:	7803      	ldrb	r3, [r0, #0]
 800d4c0:	2b30      	cmp	r3, #48	@ 0x30
 800d4c2:	d10a      	bne.n	800d4da <__cvt+0xba>
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	f7f3 fb0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4d0:	b918      	cbnz	r0, 800d4da <__cvt+0xba>
 800d4d2:	f1c4 0401 	rsb	r4, r4, #1
 800d4d6:	f8ca 4000 	str.w	r4, [sl]
 800d4da:	f8da 3000 	ldr.w	r3, [sl]
 800d4de:	4499      	add	r9, r3
 800d4e0:	e7d3      	b.n	800d48a <__cvt+0x6a>
 800d4e2:	1c59      	adds	r1, r3, #1
 800d4e4:	9103      	str	r1, [sp, #12]
 800d4e6:	701a      	strb	r2, [r3, #0]
 800d4e8:	e7d9      	b.n	800d49e <__cvt+0x7e>

0800d4ea <__exponent>:
 800d4ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4ec:	2900      	cmp	r1, #0
 800d4ee:	bfba      	itte	lt
 800d4f0:	4249      	neglt	r1, r1
 800d4f2:	232d      	movlt	r3, #45	@ 0x2d
 800d4f4:	232b      	movge	r3, #43	@ 0x2b
 800d4f6:	2909      	cmp	r1, #9
 800d4f8:	7002      	strb	r2, [r0, #0]
 800d4fa:	7043      	strb	r3, [r0, #1]
 800d4fc:	dd29      	ble.n	800d552 <__exponent+0x68>
 800d4fe:	f10d 0307 	add.w	r3, sp, #7
 800d502:	461d      	mov	r5, r3
 800d504:	270a      	movs	r7, #10
 800d506:	461a      	mov	r2, r3
 800d508:	fbb1 f6f7 	udiv	r6, r1, r7
 800d50c:	fb07 1416 	mls	r4, r7, r6, r1
 800d510:	3430      	adds	r4, #48	@ 0x30
 800d512:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d516:	460c      	mov	r4, r1
 800d518:	2c63      	cmp	r4, #99	@ 0x63
 800d51a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d51e:	4631      	mov	r1, r6
 800d520:	dcf1      	bgt.n	800d506 <__exponent+0x1c>
 800d522:	3130      	adds	r1, #48	@ 0x30
 800d524:	1e94      	subs	r4, r2, #2
 800d526:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d52a:	1c41      	adds	r1, r0, #1
 800d52c:	4623      	mov	r3, r4
 800d52e:	42ab      	cmp	r3, r5
 800d530:	d30a      	bcc.n	800d548 <__exponent+0x5e>
 800d532:	f10d 0309 	add.w	r3, sp, #9
 800d536:	1a9b      	subs	r3, r3, r2
 800d538:	42ac      	cmp	r4, r5
 800d53a:	bf88      	it	hi
 800d53c:	2300      	movhi	r3, #0
 800d53e:	3302      	adds	r3, #2
 800d540:	4403      	add	r3, r0
 800d542:	1a18      	subs	r0, r3, r0
 800d544:	b003      	add	sp, #12
 800d546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d548:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d54c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d550:	e7ed      	b.n	800d52e <__exponent+0x44>
 800d552:	2330      	movs	r3, #48	@ 0x30
 800d554:	3130      	adds	r1, #48	@ 0x30
 800d556:	7083      	strb	r3, [r0, #2]
 800d558:	70c1      	strb	r1, [r0, #3]
 800d55a:	1d03      	adds	r3, r0, #4
 800d55c:	e7f1      	b.n	800d542 <__exponent+0x58>
	...

0800d560 <_printf_float>:
 800d560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d564:	b08d      	sub	sp, #52	@ 0x34
 800d566:	460c      	mov	r4, r1
 800d568:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d56c:	4616      	mov	r6, r2
 800d56e:	461f      	mov	r7, r3
 800d570:	4605      	mov	r5, r0
 800d572:	f000 feef 	bl	800e354 <_localeconv_r>
 800d576:	6803      	ldr	r3, [r0, #0]
 800d578:	9304      	str	r3, [sp, #16]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7f2 fe88 	bl	8000290 <strlen>
 800d580:	2300      	movs	r3, #0
 800d582:	930a      	str	r3, [sp, #40]	@ 0x28
 800d584:	f8d8 3000 	ldr.w	r3, [r8]
 800d588:	9005      	str	r0, [sp, #20]
 800d58a:	3307      	adds	r3, #7
 800d58c:	f023 0307 	bic.w	r3, r3, #7
 800d590:	f103 0208 	add.w	r2, r3, #8
 800d594:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d598:	f8d4 b000 	ldr.w	fp, [r4]
 800d59c:	f8c8 2000 	str.w	r2, [r8]
 800d5a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d5a8:	9307      	str	r3, [sp, #28]
 800d5aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800d5ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d5b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5b6:	4b9c      	ldr	r3, [pc, #624]	@ (800d828 <_printf_float+0x2c8>)
 800d5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5bc:	f7f3 fac6 	bl	8000b4c <__aeabi_dcmpun>
 800d5c0:	bb70      	cbnz	r0, 800d620 <_printf_float+0xc0>
 800d5c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5c6:	4b98      	ldr	r3, [pc, #608]	@ (800d828 <_printf_float+0x2c8>)
 800d5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5cc:	f7f3 faa0 	bl	8000b10 <__aeabi_dcmple>
 800d5d0:	bb30      	cbnz	r0, 800d620 <_printf_float+0xc0>
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	4649      	mov	r1, r9
 800d5da:	f7f3 fa8f 	bl	8000afc <__aeabi_dcmplt>
 800d5de:	b110      	cbz	r0, 800d5e6 <_printf_float+0x86>
 800d5e0:	232d      	movs	r3, #45	@ 0x2d
 800d5e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5e6:	4a91      	ldr	r2, [pc, #580]	@ (800d82c <_printf_float+0x2cc>)
 800d5e8:	4b91      	ldr	r3, [pc, #580]	@ (800d830 <_printf_float+0x2d0>)
 800d5ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5ee:	bf94      	ite	ls
 800d5f0:	4690      	movls	r8, r2
 800d5f2:	4698      	movhi	r8, r3
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	6123      	str	r3, [r4, #16]
 800d5f8:	f02b 0304 	bic.w	r3, fp, #4
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	f04f 0900 	mov.w	r9, #0
 800d602:	9700      	str	r7, [sp, #0]
 800d604:	4633      	mov	r3, r6
 800d606:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d608:	4621      	mov	r1, r4
 800d60a:	4628      	mov	r0, r5
 800d60c:	f000 f9d2 	bl	800d9b4 <_printf_common>
 800d610:	3001      	adds	r0, #1
 800d612:	f040 808d 	bne.w	800d730 <_printf_float+0x1d0>
 800d616:	f04f 30ff 	mov.w	r0, #4294967295
 800d61a:	b00d      	add	sp, #52	@ 0x34
 800d61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d620:	4642      	mov	r2, r8
 800d622:	464b      	mov	r3, r9
 800d624:	4640      	mov	r0, r8
 800d626:	4649      	mov	r1, r9
 800d628:	f7f3 fa90 	bl	8000b4c <__aeabi_dcmpun>
 800d62c:	b140      	cbz	r0, 800d640 <_printf_float+0xe0>
 800d62e:	464b      	mov	r3, r9
 800d630:	2b00      	cmp	r3, #0
 800d632:	bfbc      	itt	lt
 800d634:	232d      	movlt	r3, #45	@ 0x2d
 800d636:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d63a:	4a7e      	ldr	r2, [pc, #504]	@ (800d834 <_printf_float+0x2d4>)
 800d63c:	4b7e      	ldr	r3, [pc, #504]	@ (800d838 <_printf_float+0x2d8>)
 800d63e:	e7d4      	b.n	800d5ea <_printf_float+0x8a>
 800d640:	6863      	ldr	r3, [r4, #4]
 800d642:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d646:	9206      	str	r2, [sp, #24]
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	d13b      	bne.n	800d6c4 <_printf_float+0x164>
 800d64c:	2306      	movs	r3, #6
 800d64e:	6063      	str	r3, [r4, #4]
 800d650:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d654:	2300      	movs	r3, #0
 800d656:	6022      	str	r2, [r4, #0]
 800d658:	9303      	str	r3, [sp, #12]
 800d65a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d65c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d660:	ab09      	add	r3, sp, #36	@ 0x24
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	6861      	ldr	r1, [r4, #4]
 800d666:	ec49 8b10 	vmov	d0, r8, r9
 800d66a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d66e:	4628      	mov	r0, r5
 800d670:	f7ff fed6 	bl	800d420 <__cvt>
 800d674:	9b06      	ldr	r3, [sp, #24]
 800d676:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d678:	2b47      	cmp	r3, #71	@ 0x47
 800d67a:	4680      	mov	r8, r0
 800d67c:	d129      	bne.n	800d6d2 <_printf_float+0x172>
 800d67e:	1cc8      	adds	r0, r1, #3
 800d680:	db02      	blt.n	800d688 <_printf_float+0x128>
 800d682:	6863      	ldr	r3, [r4, #4]
 800d684:	4299      	cmp	r1, r3
 800d686:	dd41      	ble.n	800d70c <_printf_float+0x1ac>
 800d688:	f1aa 0a02 	sub.w	sl, sl, #2
 800d68c:	fa5f fa8a 	uxtb.w	sl, sl
 800d690:	3901      	subs	r1, #1
 800d692:	4652      	mov	r2, sl
 800d694:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d698:	9109      	str	r1, [sp, #36]	@ 0x24
 800d69a:	f7ff ff26 	bl	800d4ea <__exponent>
 800d69e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6a0:	1813      	adds	r3, r2, r0
 800d6a2:	2a01      	cmp	r2, #1
 800d6a4:	4681      	mov	r9, r0
 800d6a6:	6123      	str	r3, [r4, #16]
 800d6a8:	dc02      	bgt.n	800d6b0 <_printf_float+0x150>
 800d6aa:	6822      	ldr	r2, [r4, #0]
 800d6ac:	07d2      	lsls	r2, r2, #31
 800d6ae:	d501      	bpl.n	800d6b4 <_printf_float+0x154>
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	6123      	str	r3, [r4, #16]
 800d6b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d0a2      	beq.n	800d602 <_printf_float+0xa2>
 800d6bc:	232d      	movs	r3, #45	@ 0x2d
 800d6be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6c2:	e79e      	b.n	800d602 <_printf_float+0xa2>
 800d6c4:	9a06      	ldr	r2, [sp, #24]
 800d6c6:	2a47      	cmp	r2, #71	@ 0x47
 800d6c8:	d1c2      	bne.n	800d650 <_printf_float+0xf0>
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1c0      	bne.n	800d650 <_printf_float+0xf0>
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e7bd      	b.n	800d64e <_printf_float+0xee>
 800d6d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6d6:	d9db      	bls.n	800d690 <_printf_float+0x130>
 800d6d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6dc:	d118      	bne.n	800d710 <_printf_float+0x1b0>
 800d6de:	2900      	cmp	r1, #0
 800d6e0:	6863      	ldr	r3, [r4, #4]
 800d6e2:	dd0b      	ble.n	800d6fc <_printf_float+0x19c>
 800d6e4:	6121      	str	r1, [r4, #16]
 800d6e6:	b913      	cbnz	r3, 800d6ee <_printf_float+0x18e>
 800d6e8:	6822      	ldr	r2, [r4, #0]
 800d6ea:	07d0      	lsls	r0, r2, #31
 800d6ec:	d502      	bpl.n	800d6f4 <_printf_float+0x194>
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	440b      	add	r3, r1
 800d6f2:	6123      	str	r3, [r4, #16]
 800d6f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6f6:	f04f 0900 	mov.w	r9, #0
 800d6fa:	e7db      	b.n	800d6b4 <_printf_float+0x154>
 800d6fc:	b913      	cbnz	r3, 800d704 <_printf_float+0x1a4>
 800d6fe:	6822      	ldr	r2, [r4, #0]
 800d700:	07d2      	lsls	r2, r2, #31
 800d702:	d501      	bpl.n	800d708 <_printf_float+0x1a8>
 800d704:	3302      	adds	r3, #2
 800d706:	e7f4      	b.n	800d6f2 <_printf_float+0x192>
 800d708:	2301      	movs	r3, #1
 800d70a:	e7f2      	b.n	800d6f2 <_printf_float+0x192>
 800d70c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d712:	4299      	cmp	r1, r3
 800d714:	db05      	blt.n	800d722 <_printf_float+0x1c2>
 800d716:	6823      	ldr	r3, [r4, #0]
 800d718:	6121      	str	r1, [r4, #16]
 800d71a:	07d8      	lsls	r0, r3, #31
 800d71c:	d5ea      	bpl.n	800d6f4 <_printf_float+0x194>
 800d71e:	1c4b      	adds	r3, r1, #1
 800d720:	e7e7      	b.n	800d6f2 <_printf_float+0x192>
 800d722:	2900      	cmp	r1, #0
 800d724:	bfd4      	ite	le
 800d726:	f1c1 0202 	rsble	r2, r1, #2
 800d72a:	2201      	movgt	r2, #1
 800d72c:	4413      	add	r3, r2
 800d72e:	e7e0      	b.n	800d6f2 <_printf_float+0x192>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	055a      	lsls	r2, r3, #21
 800d734:	d407      	bmi.n	800d746 <_printf_float+0x1e6>
 800d736:	6923      	ldr	r3, [r4, #16]
 800d738:	4642      	mov	r2, r8
 800d73a:	4631      	mov	r1, r6
 800d73c:	4628      	mov	r0, r5
 800d73e:	47b8      	blx	r7
 800d740:	3001      	adds	r0, #1
 800d742:	d12b      	bne.n	800d79c <_printf_float+0x23c>
 800d744:	e767      	b.n	800d616 <_printf_float+0xb6>
 800d746:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d74a:	f240 80dd 	bls.w	800d908 <_printf_float+0x3a8>
 800d74e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d752:	2200      	movs	r2, #0
 800d754:	2300      	movs	r3, #0
 800d756:	f7f3 f9c7 	bl	8000ae8 <__aeabi_dcmpeq>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d033      	beq.n	800d7c6 <_printf_float+0x266>
 800d75e:	4a37      	ldr	r2, [pc, #220]	@ (800d83c <_printf_float+0x2dc>)
 800d760:	2301      	movs	r3, #1
 800d762:	4631      	mov	r1, r6
 800d764:	4628      	mov	r0, r5
 800d766:	47b8      	blx	r7
 800d768:	3001      	adds	r0, #1
 800d76a:	f43f af54 	beq.w	800d616 <_printf_float+0xb6>
 800d76e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d772:	4543      	cmp	r3, r8
 800d774:	db02      	blt.n	800d77c <_printf_float+0x21c>
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	07d8      	lsls	r0, r3, #31
 800d77a:	d50f      	bpl.n	800d79c <_printf_float+0x23c>
 800d77c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d780:	4631      	mov	r1, r6
 800d782:	4628      	mov	r0, r5
 800d784:	47b8      	blx	r7
 800d786:	3001      	adds	r0, #1
 800d788:	f43f af45 	beq.w	800d616 <_printf_float+0xb6>
 800d78c:	f04f 0900 	mov.w	r9, #0
 800d790:	f108 38ff 	add.w	r8, r8, #4294967295
 800d794:	f104 0a1a 	add.w	sl, r4, #26
 800d798:	45c8      	cmp	r8, r9
 800d79a:	dc09      	bgt.n	800d7b0 <_printf_float+0x250>
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	079b      	lsls	r3, r3, #30
 800d7a0:	f100 8103 	bmi.w	800d9aa <_printf_float+0x44a>
 800d7a4:	68e0      	ldr	r0, [r4, #12]
 800d7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7a8:	4298      	cmp	r0, r3
 800d7aa:	bfb8      	it	lt
 800d7ac:	4618      	movlt	r0, r3
 800d7ae:	e734      	b.n	800d61a <_printf_float+0xba>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	4652      	mov	r2, sl
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	47b8      	blx	r7
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	f43f af2b 	beq.w	800d616 <_printf_float+0xb6>
 800d7c0:	f109 0901 	add.w	r9, r9, #1
 800d7c4:	e7e8      	b.n	800d798 <_printf_float+0x238>
 800d7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	dc39      	bgt.n	800d840 <_printf_float+0x2e0>
 800d7cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d83c <_printf_float+0x2dc>)
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	47b8      	blx	r7
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	f43f af1d 	beq.w	800d616 <_printf_float+0xb6>
 800d7dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7e0:	ea59 0303 	orrs.w	r3, r9, r3
 800d7e4:	d102      	bne.n	800d7ec <_printf_float+0x28c>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	07d9      	lsls	r1, r3, #31
 800d7ea:	d5d7      	bpl.n	800d79c <_printf_float+0x23c>
 800d7ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b8      	blx	r7
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f43f af0d 	beq.w	800d616 <_printf_float+0xb6>
 800d7fc:	f04f 0a00 	mov.w	sl, #0
 800d800:	f104 0b1a 	add.w	fp, r4, #26
 800d804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d806:	425b      	negs	r3, r3
 800d808:	4553      	cmp	r3, sl
 800d80a:	dc01      	bgt.n	800d810 <_printf_float+0x2b0>
 800d80c:	464b      	mov	r3, r9
 800d80e:	e793      	b.n	800d738 <_printf_float+0x1d8>
 800d810:	2301      	movs	r3, #1
 800d812:	465a      	mov	r2, fp
 800d814:	4631      	mov	r1, r6
 800d816:	4628      	mov	r0, r5
 800d818:	47b8      	blx	r7
 800d81a:	3001      	adds	r0, #1
 800d81c:	f43f aefb 	beq.w	800d616 <_printf_float+0xb6>
 800d820:	f10a 0a01 	add.w	sl, sl, #1
 800d824:	e7ee      	b.n	800d804 <_printf_float+0x2a4>
 800d826:	bf00      	nop
 800d828:	7fefffff 	.word	0x7fefffff
 800d82c:	080145b5 	.word	0x080145b5
 800d830:	080145b9 	.word	0x080145b9
 800d834:	080145bd 	.word	0x080145bd
 800d838:	080145c1 	.word	0x080145c1
 800d83c:	080145c5 	.word	0x080145c5
 800d840:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d842:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d846:	4553      	cmp	r3, sl
 800d848:	bfa8      	it	ge
 800d84a:	4653      	movge	r3, sl
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	4699      	mov	r9, r3
 800d850:	dc36      	bgt.n	800d8c0 <_printf_float+0x360>
 800d852:	f04f 0b00 	mov.w	fp, #0
 800d856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d85a:	f104 021a 	add.w	r2, r4, #26
 800d85e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d860:	9306      	str	r3, [sp, #24]
 800d862:	eba3 0309 	sub.w	r3, r3, r9
 800d866:	455b      	cmp	r3, fp
 800d868:	dc31      	bgt.n	800d8ce <_printf_float+0x36e>
 800d86a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d86c:	459a      	cmp	sl, r3
 800d86e:	dc3a      	bgt.n	800d8e6 <_printf_float+0x386>
 800d870:	6823      	ldr	r3, [r4, #0]
 800d872:	07da      	lsls	r2, r3, #31
 800d874:	d437      	bmi.n	800d8e6 <_printf_float+0x386>
 800d876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d878:	ebaa 0903 	sub.w	r9, sl, r3
 800d87c:	9b06      	ldr	r3, [sp, #24]
 800d87e:	ebaa 0303 	sub.w	r3, sl, r3
 800d882:	4599      	cmp	r9, r3
 800d884:	bfa8      	it	ge
 800d886:	4699      	movge	r9, r3
 800d888:	f1b9 0f00 	cmp.w	r9, #0
 800d88c:	dc33      	bgt.n	800d8f6 <_printf_float+0x396>
 800d88e:	f04f 0800 	mov.w	r8, #0
 800d892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d896:	f104 0b1a 	add.w	fp, r4, #26
 800d89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d89c:	ebaa 0303 	sub.w	r3, sl, r3
 800d8a0:	eba3 0309 	sub.w	r3, r3, r9
 800d8a4:	4543      	cmp	r3, r8
 800d8a6:	f77f af79 	ble.w	800d79c <_printf_float+0x23c>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	465a      	mov	r2, fp
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	47b8      	blx	r7
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	f43f aeae 	beq.w	800d616 <_printf_float+0xb6>
 800d8ba:	f108 0801 	add.w	r8, r8, #1
 800d8be:	e7ec      	b.n	800d89a <_printf_float+0x33a>
 800d8c0:	4642      	mov	r2, r8
 800d8c2:	4631      	mov	r1, r6
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	47b8      	blx	r7
 800d8c8:	3001      	adds	r0, #1
 800d8ca:	d1c2      	bne.n	800d852 <_printf_float+0x2f2>
 800d8cc:	e6a3      	b.n	800d616 <_printf_float+0xb6>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	4631      	mov	r1, r6
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	9206      	str	r2, [sp, #24]
 800d8d6:	47b8      	blx	r7
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f43f ae9c 	beq.w	800d616 <_printf_float+0xb6>
 800d8de:	9a06      	ldr	r2, [sp, #24]
 800d8e0:	f10b 0b01 	add.w	fp, fp, #1
 800d8e4:	e7bb      	b.n	800d85e <_printf_float+0x2fe>
 800d8e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	47b8      	blx	r7
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	d1c0      	bne.n	800d876 <_printf_float+0x316>
 800d8f4:	e68f      	b.n	800d616 <_printf_float+0xb6>
 800d8f6:	9a06      	ldr	r2, [sp, #24]
 800d8f8:	464b      	mov	r3, r9
 800d8fa:	4442      	add	r2, r8
 800d8fc:	4631      	mov	r1, r6
 800d8fe:	4628      	mov	r0, r5
 800d900:	47b8      	blx	r7
 800d902:	3001      	adds	r0, #1
 800d904:	d1c3      	bne.n	800d88e <_printf_float+0x32e>
 800d906:	e686      	b.n	800d616 <_printf_float+0xb6>
 800d908:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d90c:	f1ba 0f01 	cmp.w	sl, #1
 800d910:	dc01      	bgt.n	800d916 <_printf_float+0x3b6>
 800d912:	07db      	lsls	r3, r3, #31
 800d914:	d536      	bpl.n	800d984 <_printf_float+0x424>
 800d916:	2301      	movs	r3, #1
 800d918:	4642      	mov	r2, r8
 800d91a:	4631      	mov	r1, r6
 800d91c:	4628      	mov	r0, r5
 800d91e:	47b8      	blx	r7
 800d920:	3001      	adds	r0, #1
 800d922:	f43f ae78 	beq.w	800d616 <_printf_float+0xb6>
 800d926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d92a:	4631      	mov	r1, r6
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b8      	blx	r7
 800d930:	3001      	adds	r0, #1
 800d932:	f43f ae70 	beq.w	800d616 <_printf_float+0xb6>
 800d936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d93a:	2200      	movs	r2, #0
 800d93c:	2300      	movs	r3, #0
 800d93e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d942:	f7f3 f8d1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d946:	b9c0      	cbnz	r0, 800d97a <_printf_float+0x41a>
 800d948:	4653      	mov	r3, sl
 800d94a:	f108 0201 	add.w	r2, r8, #1
 800d94e:	4631      	mov	r1, r6
 800d950:	4628      	mov	r0, r5
 800d952:	47b8      	blx	r7
 800d954:	3001      	adds	r0, #1
 800d956:	d10c      	bne.n	800d972 <_printf_float+0x412>
 800d958:	e65d      	b.n	800d616 <_printf_float+0xb6>
 800d95a:	2301      	movs	r3, #1
 800d95c:	465a      	mov	r2, fp
 800d95e:	4631      	mov	r1, r6
 800d960:	4628      	mov	r0, r5
 800d962:	47b8      	blx	r7
 800d964:	3001      	adds	r0, #1
 800d966:	f43f ae56 	beq.w	800d616 <_printf_float+0xb6>
 800d96a:	f108 0801 	add.w	r8, r8, #1
 800d96e:	45d0      	cmp	r8, sl
 800d970:	dbf3      	blt.n	800d95a <_printf_float+0x3fa>
 800d972:	464b      	mov	r3, r9
 800d974:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d978:	e6df      	b.n	800d73a <_printf_float+0x1da>
 800d97a:	f04f 0800 	mov.w	r8, #0
 800d97e:	f104 0b1a 	add.w	fp, r4, #26
 800d982:	e7f4      	b.n	800d96e <_printf_float+0x40e>
 800d984:	2301      	movs	r3, #1
 800d986:	4642      	mov	r2, r8
 800d988:	e7e1      	b.n	800d94e <_printf_float+0x3ee>
 800d98a:	2301      	movs	r3, #1
 800d98c:	464a      	mov	r2, r9
 800d98e:	4631      	mov	r1, r6
 800d990:	4628      	mov	r0, r5
 800d992:	47b8      	blx	r7
 800d994:	3001      	adds	r0, #1
 800d996:	f43f ae3e 	beq.w	800d616 <_printf_float+0xb6>
 800d99a:	f108 0801 	add.w	r8, r8, #1
 800d99e:	68e3      	ldr	r3, [r4, #12]
 800d9a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9a2:	1a5b      	subs	r3, r3, r1
 800d9a4:	4543      	cmp	r3, r8
 800d9a6:	dcf0      	bgt.n	800d98a <_printf_float+0x42a>
 800d9a8:	e6fc      	b.n	800d7a4 <_printf_float+0x244>
 800d9aa:	f04f 0800 	mov.w	r8, #0
 800d9ae:	f104 0919 	add.w	r9, r4, #25
 800d9b2:	e7f4      	b.n	800d99e <_printf_float+0x43e>

0800d9b4 <_printf_common>:
 800d9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b8:	4616      	mov	r6, r2
 800d9ba:	4698      	mov	r8, r3
 800d9bc:	688a      	ldr	r2, [r1, #8]
 800d9be:	690b      	ldr	r3, [r1, #16]
 800d9c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	bfb8      	it	lt
 800d9c8:	4613      	movlt	r3, r2
 800d9ca:	6033      	str	r3, [r6, #0]
 800d9cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9d0:	4607      	mov	r7, r0
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	b10a      	cbz	r2, 800d9da <_printf_common+0x26>
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	6033      	str	r3, [r6, #0]
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	0699      	lsls	r1, r3, #26
 800d9de:	bf42      	ittt	mi
 800d9e0:	6833      	ldrmi	r3, [r6, #0]
 800d9e2:	3302      	addmi	r3, #2
 800d9e4:	6033      	strmi	r3, [r6, #0]
 800d9e6:	6825      	ldr	r5, [r4, #0]
 800d9e8:	f015 0506 	ands.w	r5, r5, #6
 800d9ec:	d106      	bne.n	800d9fc <_printf_common+0x48>
 800d9ee:	f104 0a19 	add.w	sl, r4, #25
 800d9f2:	68e3      	ldr	r3, [r4, #12]
 800d9f4:	6832      	ldr	r2, [r6, #0]
 800d9f6:	1a9b      	subs	r3, r3, r2
 800d9f8:	42ab      	cmp	r3, r5
 800d9fa:	dc26      	bgt.n	800da4a <_printf_common+0x96>
 800d9fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da00:	6822      	ldr	r2, [r4, #0]
 800da02:	3b00      	subs	r3, #0
 800da04:	bf18      	it	ne
 800da06:	2301      	movne	r3, #1
 800da08:	0692      	lsls	r2, r2, #26
 800da0a:	d42b      	bmi.n	800da64 <_printf_common+0xb0>
 800da0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da10:	4641      	mov	r1, r8
 800da12:	4638      	mov	r0, r7
 800da14:	47c8      	blx	r9
 800da16:	3001      	adds	r0, #1
 800da18:	d01e      	beq.n	800da58 <_printf_common+0xa4>
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	6922      	ldr	r2, [r4, #16]
 800da1e:	f003 0306 	and.w	r3, r3, #6
 800da22:	2b04      	cmp	r3, #4
 800da24:	bf02      	ittt	eq
 800da26:	68e5      	ldreq	r5, [r4, #12]
 800da28:	6833      	ldreq	r3, [r6, #0]
 800da2a:	1aed      	subeq	r5, r5, r3
 800da2c:	68a3      	ldr	r3, [r4, #8]
 800da2e:	bf0c      	ite	eq
 800da30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da34:	2500      	movne	r5, #0
 800da36:	4293      	cmp	r3, r2
 800da38:	bfc4      	itt	gt
 800da3a:	1a9b      	subgt	r3, r3, r2
 800da3c:	18ed      	addgt	r5, r5, r3
 800da3e:	2600      	movs	r6, #0
 800da40:	341a      	adds	r4, #26
 800da42:	42b5      	cmp	r5, r6
 800da44:	d11a      	bne.n	800da7c <_printf_common+0xc8>
 800da46:	2000      	movs	r0, #0
 800da48:	e008      	b.n	800da5c <_printf_common+0xa8>
 800da4a:	2301      	movs	r3, #1
 800da4c:	4652      	mov	r2, sl
 800da4e:	4641      	mov	r1, r8
 800da50:	4638      	mov	r0, r7
 800da52:	47c8      	blx	r9
 800da54:	3001      	adds	r0, #1
 800da56:	d103      	bne.n	800da60 <_printf_common+0xac>
 800da58:	f04f 30ff 	mov.w	r0, #4294967295
 800da5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da60:	3501      	adds	r5, #1
 800da62:	e7c6      	b.n	800d9f2 <_printf_common+0x3e>
 800da64:	18e1      	adds	r1, r4, r3
 800da66:	1c5a      	adds	r2, r3, #1
 800da68:	2030      	movs	r0, #48	@ 0x30
 800da6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da6e:	4422      	add	r2, r4
 800da70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da78:	3302      	adds	r3, #2
 800da7a:	e7c7      	b.n	800da0c <_printf_common+0x58>
 800da7c:	2301      	movs	r3, #1
 800da7e:	4622      	mov	r2, r4
 800da80:	4641      	mov	r1, r8
 800da82:	4638      	mov	r0, r7
 800da84:	47c8      	blx	r9
 800da86:	3001      	adds	r0, #1
 800da88:	d0e6      	beq.n	800da58 <_printf_common+0xa4>
 800da8a:	3601      	adds	r6, #1
 800da8c:	e7d9      	b.n	800da42 <_printf_common+0x8e>
	...

0800da90 <_printf_i>:
 800da90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da94:	7e0f      	ldrb	r7, [r1, #24]
 800da96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da98:	2f78      	cmp	r7, #120	@ 0x78
 800da9a:	4691      	mov	r9, r2
 800da9c:	4680      	mov	r8, r0
 800da9e:	460c      	mov	r4, r1
 800daa0:	469a      	mov	sl, r3
 800daa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800daa6:	d807      	bhi.n	800dab8 <_printf_i+0x28>
 800daa8:	2f62      	cmp	r7, #98	@ 0x62
 800daaa:	d80a      	bhi.n	800dac2 <_printf_i+0x32>
 800daac:	2f00      	cmp	r7, #0
 800daae:	f000 80d2 	beq.w	800dc56 <_printf_i+0x1c6>
 800dab2:	2f58      	cmp	r7, #88	@ 0x58
 800dab4:	f000 80b9 	beq.w	800dc2a <_printf_i+0x19a>
 800dab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dabc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dac0:	e03a      	b.n	800db38 <_printf_i+0xa8>
 800dac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dac6:	2b15      	cmp	r3, #21
 800dac8:	d8f6      	bhi.n	800dab8 <_printf_i+0x28>
 800daca:	a101      	add	r1, pc, #4	@ (adr r1, 800dad0 <_printf_i+0x40>)
 800dacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dad0:	0800db29 	.word	0x0800db29
 800dad4:	0800db3d 	.word	0x0800db3d
 800dad8:	0800dab9 	.word	0x0800dab9
 800dadc:	0800dab9 	.word	0x0800dab9
 800dae0:	0800dab9 	.word	0x0800dab9
 800dae4:	0800dab9 	.word	0x0800dab9
 800dae8:	0800db3d 	.word	0x0800db3d
 800daec:	0800dab9 	.word	0x0800dab9
 800daf0:	0800dab9 	.word	0x0800dab9
 800daf4:	0800dab9 	.word	0x0800dab9
 800daf8:	0800dab9 	.word	0x0800dab9
 800dafc:	0800dc3d 	.word	0x0800dc3d
 800db00:	0800db67 	.word	0x0800db67
 800db04:	0800dbf7 	.word	0x0800dbf7
 800db08:	0800dab9 	.word	0x0800dab9
 800db0c:	0800dab9 	.word	0x0800dab9
 800db10:	0800dc5f 	.word	0x0800dc5f
 800db14:	0800dab9 	.word	0x0800dab9
 800db18:	0800db67 	.word	0x0800db67
 800db1c:	0800dab9 	.word	0x0800dab9
 800db20:	0800dab9 	.word	0x0800dab9
 800db24:	0800dbff 	.word	0x0800dbff
 800db28:	6833      	ldr	r3, [r6, #0]
 800db2a:	1d1a      	adds	r2, r3, #4
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	6032      	str	r2, [r6, #0]
 800db30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db38:	2301      	movs	r3, #1
 800db3a:	e09d      	b.n	800dc78 <_printf_i+0x1e8>
 800db3c:	6833      	ldr	r3, [r6, #0]
 800db3e:	6820      	ldr	r0, [r4, #0]
 800db40:	1d19      	adds	r1, r3, #4
 800db42:	6031      	str	r1, [r6, #0]
 800db44:	0606      	lsls	r6, r0, #24
 800db46:	d501      	bpl.n	800db4c <_printf_i+0xbc>
 800db48:	681d      	ldr	r5, [r3, #0]
 800db4a:	e003      	b.n	800db54 <_printf_i+0xc4>
 800db4c:	0645      	lsls	r5, r0, #25
 800db4e:	d5fb      	bpl.n	800db48 <_printf_i+0xb8>
 800db50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db54:	2d00      	cmp	r5, #0
 800db56:	da03      	bge.n	800db60 <_printf_i+0xd0>
 800db58:	232d      	movs	r3, #45	@ 0x2d
 800db5a:	426d      	negs	r5, r5
 800db5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db60:	4859      	ldr	r0, [pc, #356]	@ (800dcc8 <_printf_i+0x238>)
 800db62:	230a      	movs	r3, #10
 800db64:	e011      	b.n	800db8a <_printf_i+0xfa>
 800db66:	6821      	ldr	r1, [r4, #0]
 800db68:	6833      	ldr	r3, [r6, #0]
 800db6a:	0608      	lsls	r0, r1, #24
 800db6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800db70:	d402      	bmi.n	800db78 <_printf_i+0xe8>
 800db72:	0649      	lsls	r1, r1, #25
 800db74:	bf48      	it	mi
 800db76:	b2ad      	uxthmi	r5, r5
 800db78:	2f6f      	cmp	r7, #111	@ 0x6f
 800db7a:	4853      	ldr	r0, [pc, #332]	@ (800dcc8 <_printf_i+0x238>)
 800db7c:	6033      	str	r3, [r6, #0]
 800db7e:	bf14      	ite	ne
 800db80:	230a      	movne	r3, #10
 800db82:	2308      	moveq	r3, #8
 800db84:	2100      	movs	r1, #0
 800db86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db8a:	6866      	ldr	r6, [r4, #4]
 800db8c:	60a6      	str	r6, [r4, #8]
 800db8e:	2e00      	cmp	r6, #0
 800db90:	bfa2      	ittt	ge
 800db92:	6821      	ldrge	r1, [r4, #0]
 800db94:	f021 0104 	bicge.w	r1, r1, #4
 800db98:	6021      	strge	r1, [r4, #0]
 800db9a:	b90d      	cbnz	r5, 800dba0 <_printf_i+0x110>
 800db9c:	2e00      	cmp	r6, #0
 800db9e:	d04b      	beq.n	800dc38 <_printf_i+0x1a8>
 800dba0:	4616      	mov	r6, r2
 800dba2:	fbb5 f1f3 	udiv	r1, r5, r3
 800dba6:	fb03 5711 	mls	r7, r3, r1, r5
 800dbaa:	5dc7      	ldrb	r7, [r0, r7]
 800dbac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbb0:	462f      	mov	r7, r5
 800dbb2:	42bb      	cmp	r3, r7
 800dbb4:	460d      	mov	r5, r1
 800dbb6:	d9f4      	bls.n	800dba2 <_printf_i+0x112>
 800dbb8:	2b08      	cmp	r3, #8
 800dbba:	d10b      	bne.n	800dbd4 <_printf_i+0x144>
 800dbbc:	6823      	ldr	r3, [r4, #0]
 800dbbe:	07df      	lsls	r7, r3, #31
 800dbc0:	d508      	bpl.n	800dbd4 <_printf_i+0x144>
 800dbc2:	6923      	ldr	r3, [r4, #16]
 800dbc4:	6861      	ldr	r1, [r4, #4]
 800dbc6:	4299      	cmp	r1, r3
 800dbc8:	bfde      	ittt	le
 800dbca:	2330      	movle	r3, #48	@ 0x30
 800dbcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbd4:	1b92      	subs	r2, r2, r6
 800dbd6:	6122      	str	r2, [r4, #16]
 800dbd8:	f8cd a000 	str.w	sl, [sp]
 800dbdc:	464b      	mov	r3, r9
 800dbde:	aa03      	add	r2, sp, #12
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	f7ff fee6 	bl	800d9b4 <_printf_common>
 800dbe8:	3001      	adds	r0, #1
 800dbea:	d14a      	bne.n	800dc82 <_printf_i+0x1f2>
 800dbec:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf0:	b004      	add	sp, #16
 800dbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	f043 0320 	orr.w	r3, r3, #32
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	4833      	ldr	r0, [pc, #204]	@ (800dccc <_printf_i+0x23c>)
 800dc00:	2778      	movs	r7, #120	@ 0x78
 800dc02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	6831      	ldr	r1, [r6, #0]
 800dc0a:	061f      	lsls	r7, r3, #24
 800dc0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc10:	d402      	bmi.n	800dc18 <_printf_i+0x188>
 800dc12:	065f      	lsls	r7, r3, #25
 800dc14:	bf48      	it	mi
 800dc16:	b2ad      	uxthmi	r5, r5
 800dc18:	6031      	str	r1, [r6, #0]
 800dc1a:	07d9      	lsls	r1, r3, #31
 800dc1c:	bf44      	itt	mi
 800dc1e:	f043 0320 	orrmi.w	r3, r3, #32
 800dc22:	6023      	strmi	r3, [r4, #0]
 800dc24:	b11d      	cbz	r5, 800dc2e <_printf_i+0x19e>
 800dc26:	2310      	movs	r3, #16
 800dc28:	e7ac      	b.n	800db84 <_printf_i+0xf4>
 800dc2a:	4827      	ldr	r0, [pc, #156]	@ (800dcc8 <_printf_i+0x238>)
 800dc2c:	e7e9      	b.n	800dc02 <_printf_i+0x172>
 800dc2e:	6823      	ldr	r3, [r4, #0]
 800dc30:	f023 0320 	bic.w	r3, r3, #32
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	e7f6      	b.n	800dc26 <_printf_i+0x196>
 800dc38:	4616      	mov	r6, r2
 800dc3a:	e7bd      	b.n	800dbb8 <_printf_i+0x128>
 800dc3c:	6833      	ldr	r3, [r6, #0]
 800dc3e:	6825      	ldr	r5, [r4, #0]
 800dc40:	6961      	ldr	r1, [r4, #20]
 800dc42:	1d18      	adds	r0, r3, #4
 800dc44:	6030      	str	r0, [r6, #0]
 800dc46:	062e      	lsls	r6, r5, #24
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	d501      	bpl.n	800dc50 <_printf_i+0x1c0>
 800dc4c:	6019      	str	r1, [r3, #0]
 800dc4e:	e002      	b.n	800dc56 <_printf_i+0x1c6>
 800dc50:	0668      	lsls	r0, r5, #25
 800dc52:	d5fb      	bpl.n	800dc4c <_printf_i+0x1bc>
 800dc54:	8019      	strh	r1, [r3, #0]
 800dc56:	2300      	movs	r3, #0
 800dc58:	6123      	str	r3, [r4, #16]
 800dc5a:	4616      	mov	r6, r2
 800dc5c:	e7bc      	b.n	800dbd8 <_printf_i+0x148>
 800dc5e:	6833      	ldr	r3, [r6, #0]
 800dc60:	1d1a      	adds	r2, r3, #4
 800dc62:	6032      	str	r2, [r6, #0]
 800dc64:	681e      	ldr	r6, [r3, #0]
 800dc66:	6862      	ldr	r2, [r4, #4]
 800dc68:	2100      	movs	r1, #0
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f7f2 fac0 	bl	80001f0 <memchr>
 800dc70:	b108      	cbz	r0, 800dc76 <_printf_i+0x1e6>
 800dc72:	1b80      	subs	r0, r0, r6
 800dc74:	6060      	str	r0, [r4, #4]
 800dc76:	6863      	ldr	r3, [r4, #4]
 800dc78:	6123      	str	r3, [r4, #16]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc80:	e7aa      	b.n	800dbd8 <_printf_i+0x148>
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	4632      	mov	r2, r6
 800dc86:	4649      	mov	r1, r9
 800dc88:	4640      	mov	r0, r8
 800dc8a:	47d0      	blx	sl
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	d0ad      	beq.n	800dbec <_printf_i+0x15c>
 800dc90:	6823      	ldr	r3, [r4, #0]
 800dc92:	079b      	lsls	r3, r3, #30
 800dc94:	d413      	bmi.n	800dcbe <_printf_i+0x22e>
 800dc96:	68e0      	ldr	r0, [r4, #12]
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	4298      	cmp	r0, r3
 800dc9c:	bfb8      	it	lt
 800dc9e:	4618      	movlt	r0, r3
 800dca0:	e7a6      	b.n	800dbf0 <_printf_i+0x160>
 800dca2:	2301      	movs	r3, #1
 800dca4:	4632      	mov	r2, r6
 800dca6:	4649      	mov	r1, r9
 800dca8:	4640      	mov	r0, r8
 800dcaa:	47d0      	blx	sl
 800dcac:	3001      	adds	r0, #1
 800dcae:	d09d      	beq.n	800dbec <_printf_i+0x15c>
 800dcb0:	3501      	adds	r5, #1
 800dcb2:	68e3      	ldr	r3, [r4, #12]
 800dcb4:	9903      	ldr	r1, [sp, #12]
 800dcb6:	1a5b      	subs	r3, r3, r1
 800dcb8:	42ab      	cmp	r3, r5
 800dcba:	dcf2      	bgt.n	800dca2 <_printf_i+0x212>
 800dcbc:	e7eb      	b.n	800dc96 <_printf_i+0x206>
 800dcbe:	2500      	movs	r5, #0
 800dcc0:	f104 0619 	add.w	r6, r4, #25
 800dcc4:	e7f5      	b.n	800dcb2 <_printf_i+0x222>
 800dcc6:	bf00      	nop
 800dcc8:	080145c7 	.word	0x080145c7
 800dccc:	080145d8 	.word	0x080145d8

0800dcd0 <_scanf_float>:
 800dcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd4:	b087      	sub	sp, #28
 800dcd6:	4617      	mov	r7, r2
 800dcd8:	9303      	str	r3, [sp, #12]
 800dcda:	688b      	ldr	r3, [r1, #8]
 800dcdc:	1e5a      	subs	r2, r3, #1
 800dcde:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dce2:	bf81      	itttt	hi
 800dce4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dce8:	eb03 0b05 	addhi.w	fp, r3, r5
 800dcec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dcf0:	608b      	strhi	r3, [r1, #8]
 800dcf2:	680b      	ldr	r3, [r1, #0]
 800dcf4:	460a      	mov	r2, r1
 800dcf6:	f04f 0500 	mov.w	r5, #0
 800dcfa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dcfe:	f842 3b1c 	str.w	r3, [r2], #28
 800dd02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dd06:	4680      	mov	r8, r0
 800dd08:	460c      	mov	r4, r1
 800dd0a:	bf98      	it	ls
 800dd0c:	f04f 0b00 	movls.w	fp, #0
 800dd10:	9201      	str	r2, [sp, #4]
 800dd12:	4616      	mov	r6, r2
 800dd14:	46aa      	mov	sl, r5
 800dd16:	46a9      	mov	r9, r5
 800dd18:	9502      	str	r5, [sp, #8]
 800dd1a:	68a2      	ldr	r2, [r4, #8]
 800dd1c:	b152      	cbz	r2, 800dd34 <_scanf_float+0x64>
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	2b4e      	cmp	r3, #78	@ 0x4e
 800dd24:	d864      	bhi.n	800ddf0 <_scanf_float+0x120>
 800dd26:	2b40      	cmp	r3, #64	@ 0x40
 800dd28:	d83c      	bhi.n	800dda4 <_scanf_float+0xd4>
 800dd2a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dd2e:	b2c8      	uxtb	r0, r1
 800dd30:	280e      	cmp	r0, #14
 800dd32:	d93a      	bls.n	800ddaa <_scanf_float+0xda>
 800dd34:	f1b9 0f00 	cmp.w	r9, #0
 800dd38:	d003      	beq.n	800dd42 <_scanf_float+0x72>
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd46:	f1ba 0f01 	cmp.w	sl, #1
 800dd4a:	f200 8117 	bhi.w	800df7c <_scanf_float+0x2ac>
 800dd4e:	9b01      	ldr	r3, [sp, #4]
 800dd50:	429e      	cmp	r6, r3
 800dd52:	f200 8108 	bhi.w	800df66 <_scanf_float+0x296>
 800dd56:	2001      	movs	r0, #1
 800dd58:	b007      	add	sp, #28
 800dd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dd62:	2a0d      	cmp	r2, #13
 800dd64:	d8e6      	bhi.n	800dd34 <_scanf_float+0x64>
 800dd66:	a101      	add	r1, pc, #4	@ (adr r1, 800dd6c <_scanf_float+0x9c>)
 800dd68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd6c:	0800deb3 	.word	0x0800deb3
 800dd70:	0800dd35 	.word	0x0800dd35
 800dd74:	0800dd35 	.word	0x0800dd35
 800dd78:	0800dd35 	.word	0x0800dd35
 800dd7c:	0800df13 	.word	0x0800df13
 800dd80:	0800deeb 	.word	0x0800deeb
 800dd84:	0800dd35 	.word	0x0800dd35
 800dd88:	0800dd35 	.word	0x0800dd35
 800dd8c:	0800dec1 	.word	0x0800dec1
 800dd90:	0800dd35 	.word	0x0800dd35
 800dd94:	0800dd35 	.word	0x0800dd35
 800dd98:	0800dd35 	.word	0x0800dd35
 800dd9c:	0800dd35 	.word	0x0800dd35
 800dda0:	0800de79 	.word	0x0800de79
 800dda4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dda8:	e7db      	b.n	800dd62 <_scanf_float+0x92>
 800ddaa:	290e      	cmp	r1, #14
 800ddac:	d8c2      	bhi.n	800dd34 <_scanf_float+0x64>
 800ddae:	a001      	add	r0, pc, #4	@ (adr r0, 800ddb4 <_scanf_float+0xe4>)
 800ddb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ddb4:	0800de69 	.word	0x0800de69
 800ddb8:	0800dd35 	.word	0x0800dd35
 800ddbc:	0800de69 	.word	0x0800de69
 800ddc0:	0800deff 	.word	0x0800deff
 800ddc4:	0800dd35 	.word	0x0800dd35
 800ddc8:	0800de11 	.word	0x0800de11
 800ddcc:	0800de4f 	.word	0x0800de4f
 800ddd0:	0800de4f 	.word	0x0800de4f
 800ddd4:	0800de4f 	.word	0x0800de4f
 800ddd8:	0800de4f 	.word	0x0800de4f
 800dddc:	0800de4f 	.word	0x0800de4f
 800dde0:	0800de4f 	.word	0x0800de4f
 800dde4:	0800de4f 	.word	0x0800de4f
 800dde8:	0800de4f 	.word	0x0800de4f
 800ddec:	0800de4f 	.word	0x0800de4f
 800ddf0:	2b6e      	cmp	r3, #110	@ 0x6e
 800ddf2:	d809      	bhi.n	800de08 <_scanf_float+0x138>
 800ddf4:	2b60      	cmp	r3, #96	@ 0x60
 800ddf6:	d8b2      	bhi.n	800dd5e <_scanf_float+0x8e>
 800ddf8:	2b54      	cmp	r3, #84	@ 0x54
 800ddfa:	d07b      	beq.n	800def4 <_scanf_float+0x224>
 800ddfc:	2b59      	cmp	r3, #89	@ 0x59
 800ddfe:	d199      	bne.n	800dd34 <_scanf_float+0x64>
 800de00:	2d07      	cmp	r5, #7
 800de02:	d197      	bne.n	800dd34 <_scanf_float+0x64>
 800de04:	2508      	movs	r5, #8
 800de06:	e02c      	b.n	800de62 <_scanf_float+0x192>
 800de08:	2b74      	cmp	r3, #116	@ 0x74
 800de0a:	d073      	beq.n	800def4 <_scanf_float+0x224>
 800de0c:	2b79      	cmp	r3, #121	@ 0x79
 800de0e:	e7f6      	b.n	800ddfe <_scanf_float+0x12e>
 800de10:	6821      	ldr	r1, [r4, #0]
 800de12:	05c8      	lsls	r0, r1, #23
 800de14:	d51b      	bpl.n	800de4e <_scanf_float+0x17e>
 800de16:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800de1a:	6021      	str	r1, [r4, #0]
 800de1c:	f109 0901 	add.w	r9, r9, #1
 800de20:	f1bb 0f00 	cmp.w	fp, #0
 800de24:	d003      	beq.n	800de2e <_scanf_float+0x15e>
 800de26:	3201      	adds	r2, #1
 800de28:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de2c:	60a2      	str	r2, [r4, #8]
 800de2e:	68a3      	ldr	r3, [r4, #8]
 800de30:	3b01      	subs	r3, #1
 800de32:	60a3      	str	r3, [r4, #8]
 800de34:	6923      	ldr	r3, [r4, #16]
 800de36:	3301      	adds	r3, #1
 800de38:	6123      	str	r3, [r4, #16]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	2b00      	cmp	r3, #0
 800de40:	607b      	str	r3, [r7, #4]
 800de42:	f340 8087 	ble.w	800df54 <_scanf_float+0x284>
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	3301      	adds	r3, #1
 800de4a:	603b      	str	r3, [r7, #0]
 800de4c:	e765      	b.n	800dd1a <_scanf_float+0x4a>
 800de4e:	eb1a 0105 	adds.w	r1, sl, r5
 800de52:	f47f af6f 	bne.w	800dd34 <_scanf_float+0x64>
 800de56:	6822      	ldr	r2, [r4, #0]
 800de58:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800de5c:	6022      	str	r2, [r4, #0]
 800de5e:	460d      	mov	r5, r1
 800de60:	468a      	mov	sl, r1
 800de62:	f806 3b01 	strb.w	r3, [r6], #1
 800de66:	e7e2      	b.n	800de2e <_scanf_float+0x15e>
 800de68:	6822      	ldr	r2, [r4, #0]
 800de6a:	0610      	lsls	r0, r2, #24
 800de6c:	f57f af62 	bpl.w	800dd34 <_scanf_float+0x64>
 800de70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800de74:	6022      	str	r2, [r4, #0]
 800de76:	e7f4      	b.n	800de62 <_scanf_float+0x192>
 800de78:	f1ba 0f00 	cmp.w	sl, #0
 800de7c:	d10e      	bne.n	800de9c <_scanf_float+0x1cc>
 800de7e:	f1b9 0f00 	cmp.w	r9, #0
 800de82:	d10e      	bne.n	800dea2 <_scanf_float+0x1d2>
 800de84:	6822      	ldr	r2, [r4, #0]
 800de86:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800de8a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800de8e:	d108      	bne.n	800dea2 <_scanf_float+0x1d2>
 800de90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de94:	6022      	str	r2, [r4, #0]
 800de96:	f04f 0a01 	mov.w	sl, #1
 800de9a:	e7e2      	b.n	800de62 <_scanf_float+0x192>
 800de9c:	f1ba 0f02 	cmp.w	sl, #2
 800dea0:	d055      	beq.n	800df4e <_scanf_float+0x27e>
 800dea2:	2d01      	cmp	r5, #1
 800dea4:	d002      	beq.n	800deac <_scanf_float+0x1dc>
 800dea6:	2d04      	cmp	r5, #4
 800dea8:	f47f af44 	bne.w	800dd34 <_scanf_float+0x64>
 800deac:	3501      	adds	r5, #1
 800deae:	b2ed      	uxtb	r5, r5
 800deb0:	e7d7      	b.n	800de62 <_scanf_float+0x192>
 800deb2:	f1ba 0f01 	cmp.w	sl, #1
 800deb6:	f47f af3d 	bne.w	800dd34 <_scanf_float+0x64>
 800deba:	f04f 0a02 	mov.w	sl, #2
 800debe:	e7d0      	b.n	800de62 <_scanf_float+0x192>
 800dec0:	b97d      	cbnz	r5, 800dee2 <_scanf_float+0x212>
 800dec2:	f1b9 0f00 	cmp.w	r9, #0
 800dec6:	f47f af38 	bne.w	800dd3a <_scanf_float+0x6a>
 800deca:	6822      	ldr	r2, [r4, #0]
 800decc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ded0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ded4:	f040 8108 	bne.w	800e0e8 <_scanf_float+0x418>
 800ded8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dedc:	6022      	str	r2, [r4, #0]
 800dede:	2501      	movs	r5, #1
 800dee0:	e7bf      	b.n	800de62 <_scanf_float+0x192>
 800dee2:	2d03      	cmp	r5, #3
 800dee4:	d0e2      	beq.n	800deac <_scanf_float+0x1dc>
 800dee6:	2d05      	cmp	r5, #5
 800dee8:	e7de      	b.n	800dea8 <_scanf_float+0x1d8>
 800deea:	2d02      	cmp	r5, #2
 800deec:	f47f af22 	bne.w	800dd34 <_scanf_float+0x64>
 800def0:	2503      	movs	r5, #3
 800def2:	e7b6      	b.n	800de62 <_scanf_float+0x192>
 800def4:	2d06      	cmp	r5, #6
 800def6:	f47f af1d 	bne.w	800dd34 <_scanf_float+0x64>
 800defa:	2507      	movs	r5, #7
 800defc:	e7b1      	b.n	800de62 <_scanf_float+0x192>
 800defe:	6822      	ldr	r2, [r4, #0]
 800df00:	0591      	lsls	r1, r2, #22
 800df02:	f57f af17 	bpl.w	800dd34 <_scanf_float+0x64>
 800df06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800df0a:	6022      	str	r2, [r4, #0]
 800df0c:	f8cd 9008 	str.w	r9, [sp, #8]
 800df10:	e7a7      	b.n	800de62 <_scanf_float+0x192>
 800df12:	6822      	ldr	r2, [r4, #0]
 800df14:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800df18:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800df1c:	d006      	beq.n	800df2c <_scanf_float+0x25c>
 800df1e:	0550      	lsls	r0, r2, #21
 800df20:	f57f af08 	bpl.w	800dd34 <_scanf_float+0x64>
 800df24:	f1b9 0f00 	cmp.w	r9, #0
 800df28:	f000 80de 	beq.w	800e0e8 <_scanf_float+0x418>
 800df2c:	0591      	lsls	r1, r2, #22
 800df2e:	bf58      	it	pl
 800df30:	9902      	ldrpl	r1, [sp, #8]
 800df32:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df36:	bf58      	it	pl
 800df38:	eba9 0101 	subpl.w	r1, r9, r1
 800df3c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800df40:	bf58      	it	pl
 800df42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df46:	6022      	str	r2, [r4, #0]
 800df48:	f04f 0900 	mov.w	r9, #0
 800df4c:	e789      	b.n	800de62 <_scanf_float+0x192>
 800df4e:	f04f 0a03 	mov.w	sl, #3
 800df52:	e786      	b.n	800de62 <_scanf_float+0x192>
 800df54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800df58:	4639      	mov	r1, r7
 800df5a:	4640      	mov	r0, r8
 800df5c:	4798      	blx	r3
 800df5e:	2800      	cmp	r0, #0
 800df60:	f43f aedb 	beq.w	800dd1a <_scanf_float+0x4a>
 800df64:	e6e6      	b.n	800dd34 <_scanf_float+0x64>
 800df66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df6e:	463a      	mov	r2, r7
 800df70:	4640      	mov	r0, r8
 800df72:	4798      	blx	r3
 800df74:	6923      	ldr	r3, [r4, #16]
 800df76:	3b01      	subs	r3, #1
 800df78:	6123      	str	r3, [r4, #16]
 800df7a:	e6e8      	b.n	800dd4e <_scanf_float+0x7e>
 800df7c:	1e6b      	subs	r3, r5, #1
 800df7e:	2b06      	cmp	r3, #6
 800df80:	d824      	bhi.n	800dfcc <_scanf_float+0x2fc>
 800df82:	2d02      	cmp	r5, #2
 800df84:	d836      	bhi.n	800dff4 <_scanf_float+0x324>
 800df86:	9b01      	ldr	r3, [sp, #4]
 800df88:	429e      	cmp	r6, r3
 800df8a:	f67f aee4 	bls.w	800dd56 <_scanf_float+0x86>
 800df8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df96:	463a      	mov	r2, r7
 800df98:	4640      	mov	r0, r8
 800df9a:	4798      	blx	r3
 800df9c:	6923      	ldr	r3, [r4, #16]
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	6123      	str	r3, [r4, #16]
 800dfa2:	e7f0      	b.n	800df86 <_scanf_float+0x2b6>
 800dfa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfa8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dfac:	463a      	mov	r2, r7
 800dfae:	4640      	mov	r0, r8
 800dfb0:	4798      	blx	r3
 800dfb2:	6923      	ldr	r3, [r4, #16]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	6123      	str	r3, [r4, #16]
 800dfb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dfbc:	fa5f fa8a 	uxtb.w	sl, sl
 800dfc0:	f1ba 0f02 	cmp.w	sl, #2
 800dfc4:	d1ee      	bne.n	800dfa4 <_scanf_float+0x2d4>
 800dfc6:	3d03      	subs	r5, #3
 800dfc8:	b2ed      	uxtb	r5, r5
 800dfca:	1b76      	subs	r6, r6, r5
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	05da      	lsls	r2, r3, #23
 800dfd0:	d530      	bpl.n	800e034 <_scanf_float+0x364>
 800dfd2:	055b      	lsls	r3, r3, #21
 800dfd4:	d511      	bpl.n	800dffa <_scanf_float+0x32a>
 800dfd6:	9b01      	ldr	r3, [sp, #4]
 800dfd8:	429e      	cmp	r6, r3
 800dfda:	f67f aebc 	bls.w	800dd56 <_scanf_float+0x86>
 800dfde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfe6:	463a      	mov	r2, r7
 800dfe8:	4640      	mov	r0, r8
 800dfea:	4798      	blx	r3
 800dfec:	6923      	ldr	r3, [r4, #16]
 800dfee:	3b01      	subs	r3, #1
 800dff0:	6123      	str	r3, [r4, #16]
 800dff2:	e7f0      	b.n	800dfd6 <_scanf_float+0x306>
 800dff4:	46aa      	mov	sl, r5
 800dff6:	46b3      	mov	fp, r6
 800dff8:	e7de      	b.n	800dfb8 <_scanf_float+0x2e8>
 800dffa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dffe:	6923      	ldr	r3, [r4, #16]
 800e000:	2965      	cmp	r1, #101	@ 0x65
 800e002:	f103 33ff 	add.w	r3, r3, #4294967295
 800e006:	f106 35ff 	add.w	r5, r6, #4294967295
 800e00a:	6123      	str	r3, [r4, #16]
 800e00c:	d00c      	beq.n	800e028 <_scanf_float+0x358>
 800e00e:	2945      	cmp	r1, #69	@ 0x45
 800e010:	d00a      	beq.n	800e028 <_scanf_float+0x358>
 800e012:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e016:	463a      	mov	r2, r7
 800e018:	4640      	mov	r0, r8
 800e01a:	4798      	blx	r3
 800e01c:	6923      	ldr	r3, [r4, #16]
 800e01e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e022:	3b01      	subs	r3, #1
 800e024:	1eb5      	subs	r5, r6, #2
 800e026:	6123      	str	r3, [r4, #16]
 800e028:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e02c:	463a      	mov	r2, r7
 800e02e:	4640      	mov	r0, r8
 800e030:	4798      	blx	r3
 800e032:	462e      	mov	r6, r5
 800e034:	6822      	ldr	r2, [r4, #0]
 800e036:	f012 0210 	ands.w	r2, r2, #16
 800e03a:	d001      	beq.n	800e040 <_scanf_float+0x370>
 800e03c:	2000      	movs	r0, #0
 800e03e:	e68b      	b.n	800dd58 <_scanf_float+0x88>
 800e040:	7032      	strb	r2, [r6, #0]
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e04c:	d11c      	bne.n	800e088 <_scanf_float+0x3b8>
 800e04e:	9b02      	ldr	r3, [sp, #8]
 800e050:	454b      	cmp	r3, r9
 800e052:	eba3 0209 	sub.w	r2, r3, r9
 800e056:	d123      	bne.n	800e0a0 <_scanf_float+0x3d0>
 800e058:	9901      	ldr	r1, [sp, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	4640      	mov	r0, r8
 800e05e:	f002 fc07 	bl	8010870 <_strtod_r>
 800e062:	9b03      	ldr	r3, [sp, #12]
 800e064:	6821      	ldr	r1, [r4, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f011 0f02 	tst.w	r1, #2
 800e06c:	ec57 6b10 	vmov	r6, r7, d0
 800e070:	f103 0204 	add.w	r2, r3, #4
 800e074:	d01f      	beq.n	800e0b6 <_scanf_float+0x3e6>
 800e076:	9903      	ldr	r1, [sp, #12]
 800e078:	600a      	str	r2, [r1, #0]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	e9c3 6700 	strd	r6, r7, [r3]
 800e080:	68e3      	ldr	r3, [r4, #12]
 800e082:	3301      	adds	r3, #1
 800e084:	60e3      	str	r3, [r4, #12]
 800e086:	e7d9      	b.n	800e03c <_scanf_float+0x36c>
 800e088:	9b04      	ldr	r3, [sp, #16]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d0e4      	beq.n	800e058 <_scanf_float+0x388>
 800e08e:	9905      	ldr	r1, [sp, #20]
 800e090:	230a      	movs	r3, #10
 800e092:	3101      	adds	r1, #1
 800e094:	4640      	mov	r0, r8
 800e096:	f7ff f9b7 	bl	800d408 <_strtol_r>
 800e09a:	9b04      	ldr	r3, [sp, #16]
 800e09c:	9e05      	ldr	r6, [sp, #20]
 800e09e:	1ac2      	subs	r2, r0, r3
 800e0a0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e0a4:	429e      	cmp	r6, r3
 800e0a6:	bf28      	it	cs
 800e0a8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e0ac:	4910      	ldr	r1, [pc, #64]	@ (800e0f0 <_scanf_float+0x420>)
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f000 f8e4 	bl	800e27c <siprintf>
 800e0b4:	e7d0      	b.n	800e058 <_scanf_float+0x388>
 800e0b6:	f011 0f04 	tst.w	r1, #4
 800e0ba:	9903      	ldr	r1, [sp, #12]
 800e0bc:	600a      	str	r2, [r1, #0]
 800e0be:	d1dc      	bne.n	800e07a <_scanf_float+0x3aa>
 800e0c0:	681d      	ldr	r5, [r3, #0]
 800e0c2:	4632      	mov	r2, r6
 800e0c4:	463b      	mov	r3, r7
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	4639      	mov	r1, r7
 800e0ca:	f7f2 fd3f 	bl	8000b4c <__aeabi_dcmpun>
 800e0ce:	b128      	cbz	r0, 800e0dc <_scanf_float+0x40c>
 800e0d0:	4808      	ldr	r0, [pc, #32]	@ (800e0f4 <_scanf_float+0x424>)
 800e0d2:	f000 f9c5 	bl	800e460 <nanf>
 800e0d6:	ed85 0a00 	vstr	s0, [r5]
 800e0da:	e7d1      	b.n	800e080 <_scanf_float+0x3b0>
 800e0dc:	4630      	mov	r0, r6
 800e0de:	4639      	mov	r1, r7
 800e0e0:	f7f2 fd92 	bl	8000c08 <__aeabi_d2f>
 800e0e4:	6028      	str	r0, [r5, #0]
 800e0e6:	e7cb      	b.n	800e080 <_scanf_float+0x3b0>
 800e0e8:	f04f 0900 	mov.w	r9, #0
 800e0ec:	e629      	b.n	800dd42 <_scanf_float+0x72>
 800e0ee:	bf00      	nop
 800e0f0:	080145e9 	.word	0x080145e9
 800e0f4:	0801487c 	.word	0x0801487c

0800e0f8 <std>:
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	b510      	push	{r4, lr}
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	e9c0 3300 	strd	r3, r3, [r0]
 800e102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e106:	6083      	str	r3, [r0, #8]
 800e108:	8181      	strh	r1, [r0, #12]
 800e10a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e10c:	81c2      	strh	r2, [r0, #14]
 800e10e:	6183      	str	r3, [r0, #24]
 800e110:	4619      	mov	r1, r3
 800e112:	2208      	movs	r2, #8
 800e114:	305c      	adds	r0, #92	@ 0x5c
 800e116:	f000 f914 	bl	800e342 <memset>
 800e11a:	4b0d      	ldr	r3, [pc, #52]	@ (800e150 <std+0x58>)
 800e11c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e11e:	4b0d      	ldr	r3, [pc, #52]	@ (800e154 <std+0x5c>)
 800e120:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e122:	4b0d      	ldr	r3, [pc, #52]	@ (800e158 <std+0x60>)
 800e124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e126:	4b0d      	ldr	r3, [pc, #52]	@ (800e15c <std+0x64>)
 800e128:	6323      	str	r3, [r4, #48]	@ 0x30
 800e12a:	4b0d      	ldr	r3, [pc, #52]	@ (800e160 <std+0x68>)
 800e12c:	6224      	str	r4, [r4, #32]
 800e12e:	429c      	cmp	r4, r3
 800e130:	d006      	beq.n	800e140 <std+0x48>
 800e132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e136:	4294      	cmp	r4, r2
 800e138:	d002      	beq.n	800e140 <std+0x48>
 800e13a:	33d0      	adds	r3, #208	@ 0xd0
 800e13c:	429c      	cmp	r4, r3
 800e13e:	d105      	bne.n	800e14c <std+0x54>
 800e140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e148:	f000 b978 	b.w	800e43c <__retarget_lock_init_recursive>
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	bf00      	nop
 800e150:	0800e2bd 	.word	0x0800e2bd
 800e154:	0800e2df 	.word	0x0800e2df
 800e158:	0800e317 	.word	0x0800e317
 800e15c:	0800e33b 	.word	0x0800e33b
 800e160:	20004cc4 	.word	0x20004cc4

0800e164 <stdio_exit_handler>:
 800e164:	4a02      	ldr	r2, [pc, #8]	@ (800e170 <stdio_exit_handler+0xc>)
 800e166:	4903      	ldr	r1, [pc, #12]	@ (800e174 <stdio_exit_handler+0x10>)
 800e168:	4803      	ldr	r0, [pc, #12]	@ (800e178 <stdio_exit_handler+0x14>)
 800e16a:	f000 b869 	b.w	800e240 <_fwalk_sglue>
 800e16e:	bf00      	nop
 800e170:	200003e8 	.word	0x200003e8
 800e174:	08010c35 	.word	0x08010c35
 800e178:	200003f8 	.word	0x200003f8

0800e17c <cleanup_stdio>:
 800e17c:	6841      	ldr	r1, [r0, #4]
 800e17e:	4b0c      	ldr	r3, [pc, #48]	@ (800e1b0 <cleanup_stdio+0x34>)
 800e180:	4299      	cmp	r1, r3
 800e182:	b510      	push	{r4, lr}
 800e184:	4604      	mov	r4, r0
 800e186:	d001      	beq.n	800e18c <cleanup_stdio+0x10>
 800e188:	f002 fd54 	bl	8010c34 <_fflush_r>
 800e18c:	68a1      	ldr	r1, [r4, #8]
 800e18e:	4b09      	ldr	r3, [pc, #36]	@ (800e1b4 <cleanup_stdio+0x38>)
 800e190:	4299      	cmp	r1, r3
 800e192:	d002      	beq.n	800e19a <cleanup_stdio+0x1e>
 800e194:	4620      	mov	r0, r4
 800e196:	f002 fd4d 	bl	8010c34 <_fflush_r>
 800e19a:	68e1      	ldr	r1, [r4, #12]
 800e19c:	4b06      	ldr	r3, [pc, #24]	@ (800e1b8 <cleanup_stdio+0x3c>)
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	d004      	beq.n	800e1ac <cleanup_stdio+0x30>
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1a8:	f002 bd44 	b.w	8010c34 <_fflush_r>
 800e1ac:	bd10      	pop	{r4, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20004cc4 	.word	0x20004cc4
 800e1b4:	20004d2c 	.word	0x20004d2c
 800e1b8:	20004d94 	.word	0x20004d94

0800e1bc <global_stdio_init.part.0>:
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	4b0b      	ldr	r3, [pc, #44]	@ (800e1ec <global_stdio_init.part.0+0x30>)
 800e1c0:	4c0b      	ldr	r4, [pc, #44]	@ (800e1f0 <global_stdio_init.part.0+0x34>)
 800e1c2:	4a0c      	ldr	r2, [pc, #48]	@ (800e1f4 <global_stdio_init.part.0+0x38>)
 800e1c4:	601a      	str	r2, [r3, #0]
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2104      	movs	r1, #4
 800e1cc:	f7ff ff94 	bl	800e0f8 <std>
 800e1d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	2109      	movs	r1, #9
 800e1d8:	f7ff ff8e 	bl	800e0f8 <std>
 800e1dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e6:	2112      	movs	r1, #18
 800e1e8:	f7ff bf86 	b.w	800e0f8 <std>
 800e1ec:	20004dfc 	.word	0x20004dfc
 800e1f0:	20004cc4 	.word	0x20004cc4
 800e1f4:	0800e165 	.word	0x0800e165

0800e1f8 <__sfp_lock_acquire>:
 800e1f8:	4801      	ldr	r0, [pc, #4]	@ (800e200 <__sfp_lock_acquire+0x8>)
 800e1fa:	f000 b920 	b.w	800e43e <__retarget_lock_acquire_recursive>
 800e1fe:	bf00      	nop
 800e200:	20004e05 	.word	0x20004e05

0800e204 <__sfp_lock_release>:
 800e204:	4801      	ldr	r0, [pc, #4]	@ (800e20c <__sfp_lock_release+0x8>)
 800e206:	f000 b91b 	b.w	800e440 <__retarget_lock_release_recursive>
 800e20a:	bf00      	nop
 800e20c:	20004e05 	.word	0x20004e05

0800e210 <__sinit>:
 800e210:	b510      	push	{r4, lr}
 800e212:	4604      	mov	r4, r0
 800e214:	f7ff fff0 	bl	800e1f8 <__sfp_lock_acquire>
 800e218:	6a23      	ldr	r3, [r4, #32]
 800e21a:	b11b      	cbz	r3, 800e224 <__sinit+0x14>
 800e21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e220:	f7ff bff0 	b.w	800e204 <__sfp_lock_release>
 800e224:	4b04      	ldr	r3, [pc, #16]	@ (800e238 <__sinit+0x28>)
 800e226:	6223      	str	r3, [r4, #32]
 800e228:	4b04      	ldr	r3, [pc, #16]	@ (800e23c <__sinit+0x2c>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1f5      	bne.n	800e21c <__sinit+0xc>
 800e230:	f7ff ffc4 	bl	800e1bc <global_stdio_init.part.0>
 800e234:	e7f2      	b.n	800e21c <__sinit+0xc>
 800e236:	bf00      	nop
 800e238:	0800e17d 	.word	0x0800e17d
 800e23c:	20004dfc 	.word	0x20004dfc

0800e240 <_fwalk_sglue>:
 800e240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e244:	4607      	mov	r7, r0
 800e246:	4688      	mov	r8, r1
 800e248:	4614      	mov	r4, r2
 800e24a:	2600      	movs	r6, #0
 800e24c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e250:	f1b9 0901 	subs.w	r9, r9, #1
 800e254:	d505      	bpl.n	800e262 <_fwalk_sglue+0x22>
 800e256:	6824      	ldr	r4, [r4, #0]
 800e258:	2c00      	cmp	r4, #0
 800e25a:	d1f7      	bne.n	800e24c <_fwalk_sglue+0xc>
 800e25c:	4630      	mov	r0, r6
 800e25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e262:	89ab      	ldrh	r3, [r5, #12]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d907      	bls.n	800e278 <_fwalk_sglue+0x38>
 800e268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e26c:	3301      	adds	r3, #1
 800e26e:	d003      	beq.n	800e278 <_fwalk_sglue+0x38>
 800e270:	4629      	mov	r1, r5
 800e272:	4638      	mov	r0, r7
 800e274:	47c0      	blx	r8
 800e276:	4306      	orrs	r6, r0
 800e278:	3568      	adds	r5, #104	@ 0x68
 800e27a:	e7e9      	b.n	800e250 <_fwalk_sglue+0x10>

0800e27c <siprintf>:
 800e27c:	b40e      	push	{r1, r2, r3}
 800e27e:	b500      	push	{lr}
 800e280:	b09c      	sub	sp, #112	@ 0x70
 800e282:	ab1d      	add	r3, sp, #116	@ 0x74
 800e284:	9002      	str	r0, [sp, #8]
 800e286:	9006      	str	r0, [sp, #24]
 800e288:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e28c:	4809      	ldr	r0, [pc, #36]	@ (800e2b4 <siprintf+0x38>)
 800e28e:	9107      	str	r1, [sp, #28]
 800e290:	9104      	str	r1, [sp, #16]
 800e292:	4909      	ldr	r1, [pc, #36]	@ (800e2b8 <siprintf+0x3c>)
 800e294:	f853 2b04 	ldr.w	r2, [r3], #4
 800e298:	9105      	str	r1, [sp, #20]
 800e29a:	6800      	ldr	r0, [r0, #0]
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	a902      	add	r1, sp, #8
 800e2a0:	f002 fb48 	bl	8010934 <_svfiprintf_r>
 800e2a4:	9b02      	ldr	r3, [sp, #8]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	701a      	strb	r2, [r3, #0]
 800e2aa:	b01c      	add	sp, #112	@ 0x70
 800e2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2b0:	b003      	add	sp, #12
 800e2b2:	4770      	bx	lr
 800e2b4:	200003f4 	.word	0x200003f4
 800e2b8:	ffff0208 	.word	0xffff0208

0800e2bc <__sread>:
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	460c      	mov	r4, r1
 800e2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2c4:	f000 f86c 	bl	800e3a0 <_read_r>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	bfab      	itete	ge
 800e2cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e2ce:	89a3      	ldrhlt	r3, [r4, #12]
 800e2d0:	181b      	addge	r3, r3, r0
 800e2d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e2d6:	bfac      	ite	ge
 800e2d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e2da:	81a3      	strhlt	r3, [r4, #12]
 800e2dc:	bd10      	pop	{r4, pc}

0800e2de <__swrite>:
 800e2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e2:	461f      	mov	r7, r3
 800e2e4:	898b      	ldrh	r3, [r1, #12]
 800e2e6:	05db      	lsls	r3, r3, #23
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	4616      	mov	r6, r2
 800e2ee:	d505      	bpl.n	800e2fc <__swrite+0x1e>
 800e2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f000 f840 	bl	800e37c <_lseek_r>
 800e2fc:	89a3      	ldrh	r3, [r4, #12]
 800e2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e302:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e306:	81a3      	strh	r3, [r4, #12]
 800e308:	4632      	mov	r2, r6
 800e30a:	463b      	mov	r3, r7
 800e30c:	4628      	mov	r0, r5
 800e30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e312:	f000 b857 	b.w	800e3c4 <_write_r>

0800e316 <__sseek>:
 800e316:	b510      	push	{r4, lr}
 800e318:	460c      	mov	r4, r1
 800e31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e31e:	f000 f82d 	bl	800e37c <_lseek_r>
 800e322:	1c43      	adds	r3, r0, #1
 800e324:	89a3      	ldrh	r3, [r4, #12]
 800e326:	bf15      	itete	ne
 800e328:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e32a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e32e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e332:	81a3      	strheq	r3, [r4, #12]
 800e334:	bf18      	it	ne
 800e336:	81a3      	strhne	r3, [r4, #12]
 800e338:	bd10      	pop	{r4, pc}

0800e33a <__sclose>:
 800e33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e33e:	f000 b80d 	b.w	800e35c <_close_r>

0800e342 <memset>:
 800e342:	4402      	add	r2, r0
 800e344:	4603      	mov	r3, r0
 800e346:	4293      	cmp	r3, r2
 800e348:	d100      	bne.n	800e34c <memset+0xa>
 800e34a:	4770      	bx	lr
 800e34c:	f803 1b01 	strb.w	r1, [r3], #1
 800e350:	e7f9      	b.n	800e346 <memset+0x4>
	...

0800e354 <_localeconv_r>:
 800e354:	4800      	ldr	r0, [pc, #0]	@ (800e358 <_localeconv_r+0x4>)
 800e356:	4770      	bx	lr
 800e358:	20000534 	.word	0x20000534

0800e35c <_close_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d06      	ldr	r5, [pc, #24]	@ (800e378 <_close_r+0x1c>)
 800e360:	2300      	movs	r3, #0
 800e362:	4604      	mov	r4, r0
 800e364:	4608      	mov	r0, r1
 800e366:	602b      	str	r3, [r5, #0]
 800e368:	f7fa ff98 	bl	800929c <_close>
 800e36c:	1c43      	adds	r3, r0, #1
 800e36e:	d102      	bne.n	800e376 <_close_r+0x1a>
 800e370:	682b      	ldr	r3, [r5, #0]
 800e372:	b103      	cbz	r3, 800e376 <_close_r+0x1a>
 800e374:	6023      	str	r3, [r4, #0]
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	20004e00 	.word	0x20004e00

0800e37c <_lseek_r>:
 800e37c:	b538      	push	{r3, r4, r5, lr}
 800e37e:	4d07      	ldr	r5, [pc, #28]	@ (800e39c <_lseek_r+0x20>)
 800e380:	4604      	mov	r4, r0
 800e382:	4608      	mov	r0, r1
 800e384:	4611      	mov	r1, r2
 800e386:	2200      	movs	r2, #0
 800e388:	602a      	str	r2, [r5, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f7fa ffad 	bl	80092ea <_lseek>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_lseek_r+0x1e>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_lseek_r+0x1e>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	20004e00 	.word	0x20004e00

0800e3a0 <_read_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d07      	ldr	r5, [pc, #28]	@ (800e3c0 <_read_r+0x20>)
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	602a      	str	r2, [r5, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f7fa ff3b 	bl	800922a <_read>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d102      	bne.n	800e3be <_read_r+0x1e>
 800e3b8:	682b      	ldr	r3, [r5, #0]
 800e3ba:	b103      	cbz	r3, 800e3be <_read_r+0x1e>
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	20004e00 	.word	0x20004e00

0800e3c4 <_write_r>:
 800e3c4:	b538      	push	{r3, r4, r5, lr}
 800e3c6:	4d07      	ldr	r5, [pc, #28]	@ (800e3e4 <_write_r+0x20>)
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	4608      	mov	r0, r1
 800e3cc:	4611      	mov	r1, r2
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	602a      	str	r2, [r5, #0]
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	f7fa ff46 	bl	8009264 <_write>
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	d102      	bne.n	800e3e2 <_write_r+0x1e>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	b103      	cbz	r3, 800e3e2 <_write_r+0x1e>
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	20004e00 	.word	0x20004e00

0800e3e8 <__errno>:
 800e3e8:	4b01      	ldr	r3, [pc, #4]	@ (800e3f0 <__errno+0x8>)
 800e3ea:	6818      	ldr	r0, [r3, #0]
 800e3ec:	4770      	bx	lr
 800e3ee:	bf00      	nop
 800e3f0:	200003f4 	.word	0x200003f4

0800e3f4 <__libc_init_array>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	4d0d      	ldr	r5, [pc, #52]	@ (800e42c <__libc_init_array+0x38>)
 800e3f8:	4c0d      	ldr	r4, [pc, #52]	@ (800e430 <__libc_init_array+0x3c>)
 800e3fa:	1b64      	subs	r4, r4, r5
 800e3fc:	10a4      	asrs	r4, r4, #2
 800e3fe:	2600      	movs	r6, #0
 800e400:	42a6      	cmp	r6, r4
 800e402:	d109      	bne.n	800e418 <__libc_init_array+0x24>
 800e404:	4d0b      	ldr	r5, [pc, #44]	@ (800e434 <__libc_init_array+0x40>)
 800e406:	4c0c      	ldr	r4, [pc, #48]	@ (800e438 <__libc_init_array+0x44>)
 800e408:	f003 faf8 	bl	80119fc <_init>
 800e40c:	1b64      	subs	r4, r4, r5
 800e40e:	10a4      	asrs	r4, r4, #2
 800e410:	2600      	movs	r6, #0
 800e412:	42a6      	cmp	r6, r4
 800e414:	d105      	bne.n	800e422 <__libc_init_array+0x2e>
 800e416:	bd70      	pop	{r4, r5, r6, pc}
 800e418:	f855 3b04 	ldr.w	r3, [r5], #4
 800e41c:	4798      	blx	r3
 800e41e:	3601      	adds	r6, #1
 800e420:	e7ee      	b.n	800e400 <__libc_init_array+0xc>
 800e422:	f855 3b04 	ldr.w	r3, [r5], #4
 800e426:	4798      	blx	r3
 800e428:	3601      	adds	r6, #1
 800e42a:	e7f2      	b.n	800e412 <__libc_init_array+0x1e>
 800e42c:	080148e8 	.word	0x080148e8
 800e430:	080148e8 	.word	0x080148e8
 800e434:	080148e8 	.word	0x080148e8
 800e438:	080148ec 	.word	0x080148ec

0800e43c <__retarget_lock_init_recursive>:
 800e43c:	4770      	bx	lr

0800e43e <__retarget_lock_acquire_recursive>:
 800e43e:	4770      	bx	lr

0800e440 <__retarget_lock_release_recursive>:
 800e440:	4770      	bx	lr

0800e442 <memcpy>:
 800e442:	440a      	add	r2, r1
 800e444:	4291      	cmp	r1, r2
 800e446:	f100 33ff 	add.w	r3, r0, #4294967295
 800e44a:	d100      	bne.n	800e44e <memcpy+0xc>
 800e44c:	4770      	bx	lr
 800e44e:	b510      	push	{r4, lr}
 800e450:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e454:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e458:	4291      	cmp	r1, r2
 800e45a:	d1f9      	bne.n	800e450 <memcpy+0xe>
 800e45c:	bd10      	pop	{r4, pc}
	...

0800e460 <nanf>:
 800e460:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e468 <nanf+0x8>
 800e464:	4770      	bx	lr
 800e466:	bf00      	nop
 800e468:	7fc00000 	.word	0x7fc00000

0800e46c <quorem>:
 800e46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e470:	6903      	ldr	r3, [r0, #16]
 800e472:	690c      	ldr	r4, [r1, #16]
 800e474:	42a3      	cmp	r3, r4
 800e476:	4607      	mov	r7, r0
 800e478:	db7e      	blt.n	800e578 <quorem+0x10c>
 800e47a:	3c01      	subs	r4, #1
 800e47c:	f101 0814 	add.w	r8, r1, #20
 800e480:	00a3      	lsls	r3, r4, #2
 800e482:	f100 0514 	add.w	r5, r0, #20
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e48c:	9301      	str	r3, [sp, #4]
 800e48e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e496:	3301      	adds	r3, #1
 800e498:	429a      	cmp	r2, r3
 800e49a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e49e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4a2:	d32e      	bcc.n	800e502 <quorem+0x96>
 800e4a4:	f04f 0a00 	mov.w	sl, #0
 800e4a8:	46c4      	mov	ip, r8
 800e4aa:	46ae      	mov	lr, r5
 800e4ac:	46d3      	mov	fp, sl
 800e4ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4b2:	b298      	uxth	r0, r3
 800e4b4:	fb06 a000 	mla	r0, r6, r0, sl
 800e4b8:	0c02      	lsrs	r2, r0, #16
 800e4ba:	0c1b      	lsrs	r3, r3, #16
 800e4bc:	fb06 2303 	mla	r3, r6, r3, r2
 800e4c0:	f8de 2000 	ldr.w	r2, [lr]
 800e4c4:	b280      	uxth	r0, r0
 800e4c6:	b292      	uxth	r2, r2
 800e4c8:	1a12      	subs	r2, r2, r0
 800e4ca:	445a      	add	r2, fp
 800e4cc:	f8de 0000 	ldr.w	r0, [lr]
 800e4d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e4da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e4de:	b292      	uxth	r2, r2
 800e4e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4e4:	45e1      	cmp	r9, ip
 800e4e6:	f84e 2b04 	str.w	r2, [lr], #4
 800e4ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4ee:	d2de      	bcs.n	800e4ae <quorem+0x42>
 800e4f0:	9b00      	ldr	r3, [sp, #0]
 800e4f2:	58eb      	ldr	r3, [r5, r3]
 800e4f4:	b92b      	cbnz	r3, 800e502 <quorem+0x96>
 800e4f6:	9b01      	ldr	r3, [sp, #4]
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	429d      	cmp	r5, r3
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	d32f      	bcc.n	800e560 <quorem+0xf4>
 800e500:	613c      	str	r4, [r7, #16]
 800e502:	4638      	mov	r0, r7
 800e504:	f001 f9c4 	bl	800f890 <__mcmp>
 800e508:	2800      	cmp	r0, #0
 800e50a:	db25      	blt.n	800e558 <quorem+0xec>
 800e50c:	4629      	mov	r1, r5
 800e50e:	2000      	movs	r0, #0
 800e510:	f858 2b04 	ldr.w	r2, [r8], #4
 800e514:	f8d1 c000 	ldr.w	ip, [r1]
 800e518:	fa1f fe82 	uxth.w	lr, r2
 800e51c:	fa1f f38c 	uxth.w	r3, ip
 800e520:	eba3 030e 	sub.w	r3, r3, lr
 800e524:	4403      	add	r3, r0
 800e526:	0c12      	lsrs	r2, r2, #16
 800e528:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e52c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e530:	b29b      	uxth	r3, r3
 800e532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e536:	45c1      	cmp	r9, r8
 800e538:	f841 3b04 	str.w	r3, [r1], #4
 800e53c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e540:	d2e6      	bcs.n	800e510 <quorem+0xa4>
 800e542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e54a:	b922      	cbnz	r2, 800e556 <quorem+0xea>
 800e54c:	3b04      	subs	r3, #4
 800e54e:	429d      	cmp	r5, r3
 800e550:	461a      	mov	r2, r3
 800e552:	d30b      	bcc.n	800e56c <quorem+0x100>
 800e554:	613c      	str	r4, [r7, #16]
 800e556:	3601      	adds	r6, #1
 800e558:	4630      	mov	r0, r6
 800e55a:	b003      	add	sp, #12
 800e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e560:	6812      	ldr	r2, [r2, #0]
 800e562:	3b04      	subs	r3, #4
 800e564:	2a00      	cmp	r2, #0
 800e566:	d1cb      	bne.n	800e500 <quorem+0x94>
 800e568:	3c01      	subs	r4, #1
 800e56a:	e7c6      	b.n	800e4fa <quorem+0x8e>
 800e56c:	6812      	ldr	r2, [r2, #0]
 800e56e:	3b04      	subs	r3, #4
 800e570:	2a00      	cmp	r2, #0
 800e572:	d1ef      	bne.n	800e554 <quorem+0xe8>
 800e574:	3c01      	subs	r4, #1
 800e576:	e7ea      	b.n	800e54e <quorem+0xe2>
 800e578:	2000      	movs	r0, #0
 800e57a:	e7ee      	b.n	800e55a <quorem+0xee>
 800e57c:	0000      	movs	r0, r0
	...

0800e580 <_dtoa_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	69c7      	ldr	r7, [r0, #28]
 800e586:	b099      	sub	sp, #100	@ 0x64
 800e588:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e58c:	ec55 4b10 	vmov	r4, r5, d0
 800e590:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e592:	9109      	str	r1, [sp, #36]	@ 0x24
 800e594:	4683      	mov	fp, r0
 800e596:	920e      	str	r2, [sp, #56]	@ 0x38
 800e598:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e59a:	b97f      	cbnz	r7, 800e5bc <_dtoa_r+0x3c>
 800e59c:	2010      	movs	r0, #16
 800e59e:	f000 fdfd 	bl	800f19c <malloc>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e5a8:	b920      	cbnz	r0, 800e5b4 <_dtoa_r+0x34>
 800e5aa:	4ba7      	ldr	r3, [pc, #668]	@ (800e848 <_dtoa_r+0x2c8>)
 800e5ac:	21ef      	movs	r1, #239	@ 0xef
 800e5ae:	48a7      	ldr	r0, [pc, #668]	@ (800e84c <_dtoa_r+0x2cc>)
 800e5b0:	f002 fbae 	bl	8010d10 <__assert_func>
 800e5b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5b8:	6007      	str	r7, [r0, #0]
 800e5ba:	60c7      	str	r7, [r0, #12]
 800e5bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5c0:	6819      	ldr	r1, [r3, #0]
 800e5c2:	b159      	cbz	r1, 800e5dc <_dtoa_r+0x5c>
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	604a      	str	r2, [r1, #4]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	4093      	lsls	r3, r2
 800e5cc:	608b      	str	r3, [r1, #8]
 800e5ce:	4658      	mov	r0, fp
 800e5d0:	f000 feda 	bl	800f388 <_Bfree>
 800e5d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	1e2b      	subs	r3, r5, #0
 800e5de:	bfb9      	ittee	lt
 800e5e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5e4:	9303      	strlt	r3, [sp, #12]
 800e5e6:	2300      	movge	r3, #0
 800e5e8:	6033      	strge	r3, [r6, #0]
 800e5ea:	9f03      	ldr	r7, [sp, #12]
 800e5ec:	4b98      	ldr	r3, [pc, #608]	@ (800e850 <_dtoa_r+0x2d0>)
 800e5ee:	bfbc      	itt	lt
 800e5f0:	2201      	movlt	r2, #1
 800e5f2:	6032      	strlt	r2, [r6, #0]
 800e5f4:	43bb      	bics	r3, r7
 800e5f6:	d112      	bne.n	800e61e <_dtoa_r+0x9e>
 800e5f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e5fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e604:	4323      	orrs	r3, r4
 800e606:	f000 854d 	beq.w	800f0a4 <_dtoa_r+0xb24>
 800e60a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e60c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e864 <_dtoa_r+0x2e4>
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 854f 	beq.w	800f0b4 <_dtoa_r+0xb34>
 800e616:	f10a 0303 	add.w	r3, sl, #3
 800e61a:	f000 bd49 	b.w	800f0b0 <_dtoa_r+0xb30>
 800e61e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e622:	2200      	movs	r2, #0
 800e624:	ec51 0b17 	vmov	r0, r1, d7
 800e628:	2300      	movs	r3, #0
 800e62a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e62e:	f7f2 fa5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e632:	4680      	mov	r8, r0
 800e634:	b158      	cbz	r0, 800e64e <_dtoa_r+0xce>
 800e636:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e638:	2301      	movs	r3, #1
 800e63a:	6013      	str	r3, [r2, #0]
 800e63c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e63e:	b113      	cbz	r3, 800e646 <_dtoa_r+0xc6>
 800e640:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e642:	4b84      	ldr	r3, [pc, #528]	@ (800e854 <_dtoa_r+0x2d4>)
 800e644:	6013      	str	r3, [r2, #0]
 800e646:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e868 <_dtoa_r+0x2e8>
 800e64a:	f000 bd33 	b.w	800f0b4 <_dtoa_r+0xb34>
 800e64e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e652:	aa16      	add	r2, sp, #88	@ 0x58
 800e654:	a917      	add	r1, sp, #92	@ 0x5c
 800e656:	4658      	mov	r0, fp
 800e658:	f001 fa3a 	bl	800fad0 <__d2b>
 800e65c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e660:	4681      	mov	r9, r0
 800e662:	2e00      	cmp	r6, #0
 800e664:	d077      	beq.n	800e756 <_dtoa_r+0x1d6>
 800e666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e668:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e66c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e674:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e678:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e67c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e680:	4619      	mov	r1, r3
 800e682:	2200      	movs	r2, #0
 800e684:	4b74      	ldr	r3, [pc, #464]	@ (800e858 <_dtoa_r+0x2d8>)
 800e686:	f7f1 fe0f 	bl	80002a8 <__aeabi_dsub>
 800e68a:	a369      	add	r3, pc, #420	@ (adr r3, 800e830 <_dtoa_r+0x2b0>)
 800e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e690:	f7f1 ffc2 	bl	8000618 <__aeabi_dmul>
 800e694:	a368      	add	r3, pc, #416	@ (adr r3, 800e838 <_dtoa_r+0x2b8>)
 800e696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69a:	f7f1 fe07 	bl	80002ac <__adddf3>
 800e69e:	4604      	mov	r4, r0
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	f7f1 ff4e 	bl	8000544 <__aeabi_i2d>
 800e6a8:	a365      	add	r3, pc, #404	@ (adr r3, 800e840 <_dtoa_r+0x2c0>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	f7f1 ffb3 	bl	8000618 <__aeabi_dmul>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f7f1 fdf7 	bl	80002ac <__adddf3>
 800e6be:	4604      	mov	r4, r0
 800e6c0:	460d      	mov	r5, r1
 800e6c2:	f7f2 fa59 	bl	8000b78 <__aeabi_d2iz>
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	4607      	mov	r7, r0
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	f7f2 fa14 	bl	8000afc <__aeabi_dcmplt>
 800e6d4:	b140      	cbz	r0, 800e6e8 <_dtoa_r+0x168>
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	f7f1 ff34 	bl	8000544 <__aeabi_i2d>
 800e6dc:	4622      	mov	r2, r4
 800e6de:	462b      	mov	r3, r5
 800e6e0:	f7f2 fa02 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6e4:	b900      	cbnz	r0, 800e6e8 <_dtoa_r+0x168>
 800e6e6:	3f01      	subs	r7, #1
 800e6e8:	2f16      	cmp	r7, #22
 800e6ea:	d851      	bhi.n	800e790 <_dtoa_r+0x210>
 800e6ec:	4b5b      	ldr	r3, [pc, #364]	@ (800e85c <_dtoa_r+0x2dc>)
 800e6ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6fa:	f7f2 f9ff 	bl	8000afc <__aeabi_dcmplt>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d048      	beq.n	800e794 <_dtoa_r+0x214>
 800e702:	3f01      	subs	r7, #1
 800e704:	2300      	movs	r3, #0
 800e706:	9312      	str	r3, [sp, #72]	@ 0x48
 800e708:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e70a:	1b9b      	subs	r3, r3, r6
 800e70c:	1e5a      	subs	r2, r3, #1
 800e70e:	bf44      	itt	mi
 800e710:	f1c3 0801 	rsbmi	r8, r3, #1
 800e714:	2300      	movmi	r3, #0
 800e716:	9208      	str	r2, [sp, #32]
 800e718:	bf54      	ite	pl
 800e71a:	f04f 0800 	movpl.w	r8, #0
 800e71e:	9308      	strmi	r3, [sp, #32]
 800e720:	2f00      	cmp	r7, #0
 800e722:	db39      	blt.n	800e798 <_dtoa_r+0x218>
 800e724:	9b08      	ldr	r3, [sp, #32]
 800e726:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e728:	443b      	add	r3, r7
 800e72a:	9308      	str	r3, [sp, #32]
 800e72c:	2300      	movs	r3, #0
 800e72e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e732:	2b09      	cmp	r3, #9
 800e734:	d864      	bhi.n	800e800 <_dtoa_r+0x280>
 800e736:	2b05      	cmp	r3, #5
 800e738:	bfc4      	itt	gt
 800e73a:	3b04      	subgt	r3, #4
 800e73c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e740:	f1a3 0302 	sub.w	r3, r3, #2
 800e744:	bfcc      	ite	gt
 800e746:	2400      	movgt	r4, #0
 800e748:	2401      	movle	r4, #1
 800e74a:	2b03      	cmp	r3, #3
 800e74c:	d863      	bhi.n	800e816 <_dtoa_r+0x296>
 800e74e:	e8df f003 	tbb	[pc, r3]
 800e752:	372a      	.short	0x372a
 800e754:	5535      	.short	0x5535
 800e756:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e75a:	441e      	add	r6, r3
 800e75c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e760:	2b20      	cmp	r3, #32
 800e762:	bfc1      	itttt	gt
 800e764:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e768:	409f      	lslgt	r7, r3
 800e76a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e76e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e772:	bfd6      	itet	le
 800e774:	f1c3 0320 	rsble	r3, r3, #32
 800e778:	ea47 0003 	orrgt.w	r0, r7, r3
 800e77c:	fa04 f003 	lslle.w	r0, r4, r3
 800e780:	f7f1 fed0 	bl	8000524 <__aeabi_ui2d>
 800e784:	2201      	movs	r2, #1
 800e786:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e78a:	3e01      	subs	r6, #1
 800e78c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e78e:	e777      	b.n	800e680 <_dtoa_r+0x100>
 800e790:	2301      	movs	r3, #1
 800e792:	e7b8      	b.n	800e706 <_dtoa_r+0x186>
 800e794:	9012      	str	r0, [sp, #72]	@ 0x48
 800e796:	e7b7      	b.n	800e708 <_dtoa_r+0x188>
 800e798:	427b      	negs	r3, r7
 800e79a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e79c:	2300      	movs	r3, #0
 800e79e:	eba8 0807 	sub.w	r8, r8, r7
 800e7a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7a4:	e7c4      	b.n	800e730 <_dtoa_r+0x1b0>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	dc35      	bgt.n	800e81c <_dtoa_r+0x29c>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	9307      	str	r3, [sp, #28]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7ba:	e00b      	b.n	800e7d4 <_dtoa_r+0x254>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e7f3      	b.n	800e7a8 <_dtoa_r+0x228>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7c6:	18fb      	adds	r3, r7, r3
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	9307      	str	r3, [sp, #28]
 800e7d0:	bfb8      	it	lt
 800e7d2:	2301      	movlt	r3, #1
 800e7d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e7d8:	2100      	movs	r1, #0
 800e7da:	2204      	movs	r2, #4
 800e7dc:	f102 0514 	add.w	r5, r2, #20
 800e7e0:	429d      	cmp	r5, r3
 800e7e2:	d91f      	bls.n	800e824 <_dtoa_r+0x2a4>
 800e7e4:	6041      	str	r1, [r0, #4]
 800e7e6:	4658      	mov	r0, fp
 800e7e8:	f000 fd8e 	bl	800f308 <_Balloc>
 800e7ec:	4682      	mov	sl, r0
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d13c      	bne.n	800e86c <_dtoa_r+0x2ec>
 800e7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800e860 <_dtoa_r+0x2e0>)
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e7fa:	e6d8      	b.n	800e5ae <_dtoa_r+0x2e>
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e7e0      	b.n	800e7c2 <_dtoa_r+0x242>
 800e800:	2401      	movs	r4, #1
 800e802:	2300      	movs	r3, #0
 800e804:	9309      	str	r3, [sp, #36]	@ 0x24
 800e806:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e808:	f04f 33ff 	mov.w	r3, #4294967295
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	9307      	str	r3, [sp, #28]
 800e810:	2200      	movs	r2, #0
 800e812:	2312      	movs	r3, #18
 800e814:	e7d0      	b.n	800e7b8 <_dtoa_r+0x238>
 800e816:	2301      	movs	r3, #1
 800e818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e81a:	e7f5      	b.n	800e808 <_dtoa_r+0x288>
 800e81c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	9307      	str	r3, [sp, #28]
 800e822:	e7d7      	b.n	800e7d4 <_dtoa_r+0x254>
 800e824:	3101      	adds	r1, #1
 800e826:	0052      	lsls	r2, r2, #1
 800e828:	e7d8      	b.n	800e7dc <_dtoa_r+0x25c>
 800e82a:	bf00      	nop
 800e82c:	f3af 8000 	nop.w
 800e830:	636f4361 	.word	0x636f4361
 800e834:	3fd287a7 	.word	0x3fd287a7
 800e838:	8b60c8b3 	.word	0x8b60c8b3
 800e83c:	3fc68a28 	.word	0x3fc68a28
 800e840:	509f79fb 	.word	0x509f79fb
 800e844:	3fd34413 	.word	0x3fd34413
 800e848:	080145fb 	.word	0x080145fb
 800e84c:	08014612 	.word	0x08014612
 800e850:	7ff00000 	.word	0x7ff00000
 800e854:	080145c6 	.word	0x080145c6
 800e858:	3ff80000 	.word	0x3ff80000
 800e85c:	08014708 	.word	0x08014708
 800e860:	0801466a 	.word	0x0801466a
 800e864:	080145f7 	.word	0x080145f7
 800e868:	080145c5 	.word	0x080145c5
 800e86c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e870:	6018      	str	r0, [r3, #0]
 800e872:	9b07      	ldr	r3, [sp, #28]
 800e874:	2b0e      	cmp	r3, #14
 800e876:	f200 80a4 	bhi.w	800e9c2 <_dtoa_r+0x442>
 800e87a:	2c00      	cmp	r4, #0
 800e87c:	f000 80a1 	beq.w	800e9c2 <_dtoa_r+0x442>
 800e880:	2f00      	cmp	r7, #0
 800e882:	dd33      	ble.n	800e8ec <_dtoa_r+0x36c>
 800e884:	4bad      	ldr	r3, [pc, #692]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e886:	f007 020f 	and.w	r2, r7, #15
 800e88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e88e:	ed93 7b00 	vldr	d7, [r3]
 800e892:	05f8      	lsls	r0, r7, #23
 800e894:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e898:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e89c:	d516      	bpl.n	800e8cc <_dtoa_r+0x34c>
 800e89e:	4ba8      	ldr	r3, [pc, #672]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8a8:	f7f1 ffe0 	bl	800086c <__aeabi_ddiv>
 800e8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8b0:	f004 040f 	and.w	r4, r4, #15
 800e8b4:	2603      	movs	r6, #3
 800e8b6:	4da2      	ldr	r5, [pc, #648]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8b8:	b954      	cbnz	r4, 800e8d0 <_dtoa_r+0x350>
 800e8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8c2:	f7f1 ffd3 	bl	800086c <__aeabi_ddiv>
 800e8c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ca:	e028      	b.n	800e91e <_dtoa_r+0x39e>
 800e8cc:	2602      	movs	r6, #2
 800e8ce:	e7f2      	b.n	800e8b6 <_dtoa_r+0x336>
 800e8d0:	07e1      	lsls	r1, r4, #31
 800e8d2:	d508      	bpl.n	800e8e6 <_dtoa_r+0x366>
 800e8d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8dc:	f7f1 fe9c 	bl	8000618 <__aeabi_dmul>
 800e8e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8e4:	3601      	adds	r6, #1
 800e8e6:	1064      	asrs	r4, r4, #1
 800e8e8:	3508      	adds	r5, #8
 800e8ea:	e7e5      	b.n	800e8b8 <_dtoa_r+0x338>
 800e8ec:	f000 80d2 	beq.w	800ea94 <_dtoa_r+0x514>
 800e8f0:	427c      	negs	r4, r7
 800e8f2:	4b92      	ldr	r3, [pc, #584]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e8f4:	4d92      	ldr	r5, [pc, #584]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8f6:	f004 020f 	and.w	r2, r4, #15
 800e8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e906:	f7f1 fe87 	bl	8000618 <__aeabi_dmul>
 800e90a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e90e:	1124      	asrs	r4, r4, #4
 800e910:	2300      	movs	r3, #0
 800e912:	2602      	movs	r6, #2
 800e914:	2c00      	cmp	r4, #0
 800e916:	f040 80b2 	bne.w	800ea7e <_dtoa_r+0x4fe>
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1d3      	bne.n	800e8c6 <_dtoa_r+0x346>
 800e91e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e920:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	f000 80b7 	beq.w	800ea98 <_dtoa_r+0x518>
 800e92a:	4b86      	ldr	r3, [pc, #536]	@ (800eb44 <_dtoa_r+0x5c4>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	4620      	mov	r0, r4
 800e930:	4629      	mov	r1, r5
 800e932:	f7f2 f8e3 	bl	8000afc <__aeabi_dcmplt>
 800e936:	2800      	cmp	r0, #0
 800e938:	f000 80ae 	beq.w	800ea98 <_dtoa_r+0x518>
 800e93c:	9b07      	ldr	r3, [sp, #28]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f000 80aa 	beq.w	800ea98 <_dtoa_r+0x518>
 800e944:	9b00      	ldr	r3, [sp, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	dd37      	ble.n	800e9ba <_dtoa_r+0x43a>
 800e94a:	1e7b      	subs	r3, r7, #1
 800e94c:	9304      	str	r3, [sp, #16]
 800e94e:	4620      	mov	r0, r4
 800e950:	4b7d      	ldr	r3, [pc, #500]	@ (800eb48 <_dtoa_r+0x5c8>)
 800e952:	2200      	movs	r2, #0
 800e954:	4629      	mov	r1, r5
 800e956:	f7f1 fe5f 	bl	8000618 <__aeabi_dmul>
 800e95a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e95e:	9c00      	ldr	r4, [sp, #0]
 800e960:	3601      	adds	r6, #1
 800e962:	4630      	mov	r0, r6
 800e964:	f7f1 fdee 	bl	8000544 <__aeabi_i2d>
 800e968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e96c:	f7f1 fe54 	bl	8000618 <__aeabi_dmul>
 800e970:	4b76      	ldr	r3, [pc, #472]	@ (800eb4c <_dtoa_r+0x5cc>)
 800e972:	2200      	movs	r2, #0
 800e974:	f7f1 fc9a 	bl	80002ac <__adddf3>
 800e978:	4605      	mov	r5, r0
 800e97a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e97e:	2c00      	cmp	r4, #0
 800e980:	f040 808d 	bne.w	800ea9e <_dtoa_r+0x51e>
 800e984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e988:	4b71      	ldr	r3, [pc, #452]	@ (800eb50 <_dtoa_r+0x5d0>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	f7f1 fc8c 	bl	80002a8 <__aeabi_dsub>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e998:	462a      	mov	r2, r5
 800e99a:	4633      	mov	r3, r6
 800e99c:	f7f2 f8cc 	bl	8000b38 <__aeabi_dcmpgt>
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	f040 828b 	bne.w	800eebc <_dtoa_r+0x93c>
 800e9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9aa:	462a      	mov	r2, r5
 800e9ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9b0:	f7f2 f8a4 	bl	8000afc <__aeabi_dcmplt>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	f040 8128 	bne.w	800ec0a <_dtoa_r+0x68a>
 800e9ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e9be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e9c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f2c0 815a 	blt.w	800ec7e <_dtoa_r+0x6fe>
 800e9ca:	2f0e      	cmp	r7, #14
 800e9cc:	f300 8157 	bgt.w	800ec7e <_dtoa_r+0x6fe>
 800e9d0:	4b5a      	ldr	r3, [pc, #360]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e9d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9d6:	ed93 7b00 	vldr	d7, [r3]
 800e9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	ed8d 7b00 	vstr	d7, [sp]
 800e9e2:	da03      	bge.n	800e9ec <_dtoa_r+0x46c>
 800e9e4:	9b07      	ldr	r3, [sp, #28]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f340 8101 	ble.w	800ebee <_dtoa_r+0x66e>
 800e9ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e9f0:	4656      	mov	r6, sl
 800e9f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	f7f1 ff37 	bl	800086c <__aeabi_ddiv>
 800e9fe:	f7f2 f8bb 	bl	8000b78 <__aeabi_d2iz>
 800ea02:	4680      	mov	r8, r0
 800ea04:	f7f1 fd9e 	bl	8000544 <__aeabi_i2d>
 800ea08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea0c:	f7f1 fe04 	bl	8000618 <__aeabi_dmul>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	4620      	mov	r0, r4
 800ea16:	4629      	mov	r1, r5
 800ea18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea1c:	f7f1 fc44 	bl	80002a8 <__aeabi_dsub>
 800ea20:	f806 4b01 	strb.w	r4, [r6], #1
 800ea24:	9d07      	ldr	r5, [sp, #28]
 800ea26:	eba6 040a 	sub.w	r4, r6, sl
 800ea2a:	42a5      	cmp	r5, r4
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	f040 8117 	bne.w	800ec62 <_dtoa_r+0x6e2>
 800ea34:	f7f1 fc3a 	bl	80002ac <__adddf3>
 800ea38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	460d      	mov	r5, r1
 800ea40:	f7f2 f87a 	bl	8000b38 <__aeabi_dcmpgt>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f040 80f9 	bne.w	800ec3c <_dtoa_r+0x6bc>
 800ea4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7f2 f849 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea56:	b118      	cbz	r0, 800ea60 <_dtoa_r+0x4e0>
 800ea58:	f018 0f01 	tst.w	r8, #1
 800ea5c:	f040 80ee 	bne.w	800ec3c <_dtoa_r+0x6bc>
 800ea60:	4649      	mov	r1, r9
 800ea62:	4658      	mov	r0, fp
 800ea64:	f000 fc90 	bl	800f388 <_Bfree>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	7033      	strb	r3, [r6, #0]
 800ea6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea6e:	3701      	adds	r7, #1
 800ea70:	601f      	str	r7, [r3, #0]
 800ea72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 831d 	beq.w	800f0b4 <_dtoa_r+0xb34>
 800ea7a:	601e      	str	r6, [r3, #0]
 800ea7c:	e31a      	b.n	800f0b4 <_dtoa_r+0xb34>
 800ea7e:	07e2      	lsls	r2, r4, #31
 800ea80:	d505      	bpl.n	800ea8e <_dtoa_r+0x50e>
 800ea82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea86:	f7f1 fdc7 	bl	8000618 <__aeabi_dmul>
 800ea8a:	3601      	adds	r6, #1
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	1064      	asrs	r4, r4, #1
 800ea90:	3508      	adds	r5, #8
 800ea92:	e73f      	b.n	800e914 <_dtoa_r+0x394>
 800ea94:	2602      	movs	r6, #2
 800ea96:	e742      	b.n	800e91e <_dtoa_r+0x39e>
 800ea98:	9c07      	ldr	r4, [sp, #28]
 800ea9a:	9704      	str	r7, [sp, #16]
 800ea9c:	e761      	b.n	800e962 <_dtoa_r+0x3e2>
 800ea9e:	4b27      	ldr	r3, [pc, #156]	@ (800eb3c <_dtoa_r+0x5bc>)
 800eaa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eaa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eaa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eaaa:	4454      	add	r4, sl
 800eaac:	2900      	cmp	r1, #0
 800eaae:	d053      	beq.n	800eb58 <_dtoa_r+0x5d8>
 800eab0:	4928      	ldr	r1, [pc, #160]	@ (800eb54 <_dtoa_r+0x5d4>)
 800eab2:	2000      	movs	r0, #0
 800eab4:	f7f1 feda 	bl	800086c <__aeabi_ddiv>
 800eab8:	4633      	mov	r3, r6
 800eaba:	462a      	mov	r2, r5
 800eabc:	f7f1 fbf4 	bl	80002a8 <__aeabi_dsub>
 800eac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eac4:	4656      	mov	r6, sl
 800eac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaca:	f7f2 f855 	bl	8000b78 <__aeabi_d2iz>
 800eace:	4605      	mov	r5, r0
 800ead0:	f7f1 fd38 	bl	8000544 <__aeabi_i2d>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eadc:	f7f1 fbe4 	bl	80002a8 <__aeabi_dsub>
 800eae0:	3530      	adds	r5, #48	@ 0x30
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eaea:	f806 5b01 	strb.w	r5, [r6], #1
 800eaee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eaf2:	f7f2 f803 	bl	8000afc <__aeabi_dcmplt>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d171      	bne.n	800ebde <_dtoa_r+0x65e>
 800eafa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eafe:	4911      	ldr	r1, [pc, #68]	@ (800eb44 <_dtoa_r+0x5c4>)
 800eb00:	2000      	movs	r0, #0
 800eb02:	f7f1 fbd1 	bl	80002a8 <__aeabi_dsub>
 800eb06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb0a:	f7f1 fff7 	bl	8000afc <__aeabi_dcmplt>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f040 8095 	bne.w	800ec3e <_dtoa_r+0x6be>
 800eb14:	42a6      	cmp	r6, r4
 800eb16:	f43f af50 	beq.w	800e9ba <_dtoa_r+0x43a>
 800eb1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb1e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb48 <_dtoa_r+0x5c8>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	f7f1 fd79 	bl	8000618 <__aeabi_dmul>
 800eb26:	4b08      	ldr	r3, [pc, #32]	@ (800eb48 <_dtoa_r+0x5c8>)
 800eb28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb32:	f7f1 fd71 	bl	8000618 <__aeabi_dmul>
 800eb36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb3a:	e7c4      	b.n	800eac6 <_dtoa_r+0x546>
 800eb3c:	08014708 	.word	0x08014708
 800eb40:	080146e0 	.word	0x080146e0
 800eb44:	3ff00000 	.word	0x3ff00000
 800eb48:	40240000 	.word	0x40240000
 800eb4c:	401c0000 	.word	0x401c0000
 800eb50:	40140000 	.word	0x40140000
 800eb54:	3fe00000 	.word	0x3fe00000
 800eb58:	4631      	mov	r1, r6
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f7f1 fd5c 	bl	8000618 <__aeabi_dmul>
 800eb60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb64:	9415      	str	r4, [sp, #84]	@ 0x54
 800eb66:	4656      	mov	r6, sl
 800eb68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb6c:	f7f2 f804 	bl	8000b78 <__aeabi_d2iz>
 800eb70:	4605      	mov	r5, r0
 800eb72:	f7f1 fce7 	bl	8000544 <__aeabi_i2d>
 800eb76:	4602      	mov	r2, r0
 800eb78:	460b      	mov	r3, r1
 800eb7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb7e:	f7f1 fb93 	bl	80002a8 <__aeabi_dsub>
 800eb82:	3530      	adds	r5, #48	@ 0x30
 800eb84:	f806 5b01 	strb.w	r5, [r6], #1
 800eb88:	4602      	mov	r2, r0
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	42a6      	cmp	r6, r4
 800eb8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb92:	f04f 0200 	mov.w	r2, #0
 800eb96:	d124      	bne.n	800ebe2 <_dtoa_r+0x662>
 800eb98:	4bac      	ldr	r3, [pc, #688]	@ (800ee4c <_dtoa_r+0x8cc>)
 800eb9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb9e:	f7f1 fb85 	bl	80002ac <__adddf3>
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebaa:	f7f1 ffc5 	bl	8000b38 <__aeabi_dcmpgt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d145      	bne.n	800ec3e <_dtoa_r+0x6be>
 800ebb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebb6:	49a5      	ldr	r1, [pc, #660]	@ (800ee4c <_dtoa_r+0x8cc>)
 800ebb8:	2000      	movs	r0, #0
 800ebba:	f7f1 fb75 	bl	80002a8 <__aeabi_dsub>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebc6:	f7f1 ff99 	bl	8000afc <__aeabi_dcmplt>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	f43f aef5 	beq.w	800e9ba <_dtoa_r+0x43a>
 800ebd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ebd2:	1e73      	subs	r3, r6, #1
 800ebd4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ebd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebda:	2b30      	cmp	r3, #48	@ 0x30
 800ebdc:	d0f8      	beq.n	800ebd0 <_dtoa_r+0x650>
 800ebde:	9f04      	ldr	r7, [sp, #16]
 800ebe0:	e73e      	b.n	800ea60 <_dtoa_r+0x4e0>
 800ebe2:	4b9b      	ldr	r3, [pc, #620]	@ (800ee50 <_dtoa_r+0x8d0>)
 800ebe4:	f7f1 fd18 	bl	8000618 <__aeabi_dmul>
 800ebe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebec:	e7bc      	b.n	800eb68 <_dtoa_r+0x5e8>
 800ebee:	d10c      	bne.n	800ec0a <_dtoa_r+0x68a>
 800ebf0:	4b98      	ldr	r3, [pc, #608]	@ (800ee54 <_dtoa_r+0x8d4>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebf8:	f7f1 fd0e 	bl	8000618 <__aeabi_dmul>
 800ebfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec00:	f7f1 ff90 	bl	8000b24 <__aeabi_dcmpge>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	f000 8157 	beq.w	800eeb8 <_dtoa_r+0x938>
 800ec0a:	2400      	movs	r4, #0
 800ec0c:	4625      	mov	r5, r4
 800ec0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec10:	43db      	mvns	r3, r3
 800ec12:	9304      	str	r3, [sp, #16]
 800ec14:	4656      	mov	r6, sl
 800ec16:	2700      	movs	r7, #0
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4658      	mov	r0, fp
 800ec1c:	f000 fbb4 	bl	800f388 <_Bfree>
 800ec20:	2d00      	cmp	r5, #0
 800ec22:	d0dc      	beq.n	800ebde <_dtoa_r+0x65e>
 800ec24:	b12f      	cbz	r7, 800ec32 <_dtoa_r+0x6b2>
 800ec26:	42af      	cmp	r7, r5
 800ec28:	d003      	beq.n	800ec32 <_dtoa_r+0x6b2>
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	4658      	mov	r0, fp
 800ec2e:	f000 fbab 	bl	800f388 <_Bfree>
 800ec32:	4629      	mov	r1, r5
 800ec34:	4658      	mov	r0, fp
 800ec36:	f000 fba7 	bl	800f388 <_Bfree>
 800ec3a:	e7d0      	b.n	800ebde <_dtoa_r+0x65e>
 800ec3c:	9704      	str	r7, [sp, #16]
 800ec3e:	4633      	mov	r3, r6
 800ec40:	461e      	mov	r6, r3
 800ec42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec46:	2a39      	cmp	r2, #57	@ 0x39
 800ec48:	d107      	bne.n	800ec5a <_dtoa_r+0x6da>
 800ec4a:	459a      	cmp	sl, r3
 800ec4c:	d1f8      	bne.n	800ec40 <_dtoa_r+0x6c0>
 800ec4e:	9a04      	ldr	r2, [sp, #16]
 800ec50:	3201      	adds	r2, #1
 800ec52:	9204      	str	r2, [sp, #16]
 800ec54:	2230      	movs	r2, #48	@ 0x30
 800ec56:	f88a 2000 	strb.w	r2, [sl]
 800ec5a:	781a      	ldrb	r2, [r3, #0]
 800ec5c:	3201      	adds	r2, #1
 800ec5e:	701a      	strb	r2, [r3, #0]
 800ec60:	e7bd      	b.n	800ebde <_dtoa_r+0x65e>
 800ec62:	4b7b      	ldr	r3, [pc, #492]	@ (800ee50 <_dtoa_r+0x8d0>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	f7f1 fcd7 	bl	8000618 <__aeabi_dmul>
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4604      	mov	r4, r0
 800ec70:	460d      	mov	r5, r1
 800ec72:	f7f1 ff39 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f43f aebb 	beq.w	800e9f2 <_dtoa_r+0x472>
 800ec7c:	e6f0      	b.n	800ea60 <_dtoa_r+0x4e0>
 800ec7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	f000 80db 	beq.w	800ee3c <_dtoa_r+0x8bc>
 800ec86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec88:	2a01      	cmp	r2, #1
 800ec8a:	f300 80bf 	bgt.w	800ee0c <_dtoa_r+0x88c>
 800ec8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec90:	2a00      	cmp	r2, #0
 800ec92:	f000 80b7 	beq.w	800ee04 <_dtoa_r+0x884>
 800ec96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec9c:	4646      	mov	r6, r8
 800ec9e:	9a08      	ldr	r2, [sp, #32]
 800eca0:	2101      	movs	r1, #1
 800eca2:	441a      	add	r2, r3
 800eca4:	4658      	mov	r0, fp
 800eca6:	4498      	add	r8, r3
 800eca8:	9208      	str	r2, [sp, #32]
 800ecaa:	f000 fc6b 	bl	800f584 <__i2b>
 800ecae:	4605      	mov	r5, r0
 800ecb0:	b15e      	cbz	r6, 800ecca <_dtoa_r+0x74a>
 800ecb2:	9b08      	ldr	r3, [sp, #32]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	dd08      	ble.n	800ecca <_dtoa_r+0x74a>
 800ecb8:	42b3      	cmp	r3, r6
 800ecba:	9a08      	ldr	r2, [sp, #32]
 800ecbc:	bfa8      	it	ge
 800ecbe:	4633      	movge	r3, r6
 800ecc0:	eba8 0803 	sub.w	r8, r8, r3
 800ecc4:	1af6      	subs	r6, r6, r3
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	9308      	str	r3, [sp, #32]
 800ecca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eccc:	b1f3      	cbz	r3, 800ed0c <_dtoa_r+0x78c>
 800ecce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f000 80b7 	beq.w	800ee44 <_dtoa_r+0x8c4>
 800ecd6:	b18c      	cbz	r4, 800ecfc <_dtoa_r+0x77c>
 800ecd8:	4629      	mov	r1, r5
 800ecda:	4622      	mov	r2, r4
 800ecdc:	4658      	mov	r0, fp
 800ecde:	f000 fd11 	bl	800f704 <__pow5mult>
 800ece2:	464a      	mov	r2, r9
 800ece4:	4601      	mov	r1, r0
 800ece6:	4605      	mov	r5, r0
 800ece8:	4658      	mov	r0, fp
 800ecea:	f000 fc61 	bl	800f5b0 <__multiply>
 800ecee:	4649      	mov	r1, r9
 800ecf0:	9004      	str	r0, [sp, #16]
 800ecf2:	4658      	mov	r0, fp
 800ecf4:	f000 fb48 	bl	800f388 <_Bfree>
 800ecf8:	9b04      	ldr	r3, [sp, #16]
 800ecfa:	4699      	mov	r9, r3
 800ecfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecfe:	1b1a      	subs	r2, r3, r4
 800ed00:	d004      	beq.n	800ed0c <_dtoa_r+0x78c>
 800ed02:	4649      	mov	r1, r9
 800ed04:	4658      	mov	r0, fp
 800ed06:	f000 fcfd 	bl	800f704 <__pow5mult>
 800ed0a:	4681      	mov	r9, r0
 800ed0c:	2101      	movs	r1, #1
 800ed0e:	4658      	mov	r0, fp
 800ed10:	f000 fc38 	bl	800f584 <__i2b>
 800ed14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed16:	4604      	mov	r4, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f000 81cf 	beq.w	800f0bc <_dtoa_r+0xb3c>
 800ed1e:	461a      	mov	r2, r3
 800ed20:	4601      	mov	r1, r0
 800ed22:	4658      	mov	r0, fp
 800ed24:	f000 fcee 	bl	800f704 <__pow5mult>
 800ed28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	f300 8095 	bgt.w	800ee5c <_dtoa_r+0x8dc>
 800ed32:	9b02      	ldr	r3, [sp, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f040 8087 	bne.w	800ee48 <_dtoa_r+0x8c8>
 800ed3a:	9b03      	ldr	r3, [sp, #12]
 800ed3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f040 8089 	bne.w	800ee58 <_dtoa_r+0x8d8>
 800ed46:	9b03      	ldr	r3, [sp, #12]
 800ed48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed4c:	0d1b      	lsrs	r3, r3, #20
 800ed4e:	051b      	lsls	r3, r3, #20
 800ed50:	b12b      	cbz	r3, 800ed5e <_dtoa_r+0x7de>
 800ed52:	9b08      	ldr	r3, [sp, #32]
 800ed54:	3301      	adds	r3, #1
 800ed56:	9308      	str	r3, [sp, #32]
 800ed58:	f108 0801 	add.w	r8, r8, #1
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 81b0 	beq.w	800f0c8 <_dtoa_r+0xb48>
 800ed68:	6923      	ldr	r3, [r4, #16]
 800ed6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed6e:	6918      	ldr	r0, [r3, #16]
 800ed70:	f000 fbbc 	bl	800f4ec <__hi0bits>
 800ed74:	f1c0 0020 	rsb	r0, r0, #32
 800ed78:	9b08      	ldr	r3, [sp, #32]
 800ed7a:	4418      	add	r0, r3
 800ed7c:	f010 001f 	ands.w	r0, r0, #31
 800ed80:	d077      	beq.n	800ee72 <_dtoa_r+0x8f2>
 800ed82:	f1c0 0320 	rsb	r3, r0, #32
 800ed86:	2b04      	cmp	r3, #4
 800ed88:	dd6b      	ble.n	800ee62 <_dtoa_r+0x8e2>
 800ed8a:	9b08      	ldr	r3, [sp, #32]
 800ed8c:	f1c0 001c 	rsb	r0, r0, #28
 800ed90:	4403      	add	r3, r0
 800ed92:	4480      	add	r8, r0
 800ed94:	4406      	add	r6, r0
 800ed96:	9308      	str	r3, [sp, #32]
 800ed98:	f1b8 0f00 	cmp.w	r8, #0
 800ed9c:	dd05      	ble.n	800edaa <_dtoa_r+0x82a>
 800ed9e:	4649      	mov	r1, r9
 800eda0:	4642      	mov	r2, r8
 800eda2:	4658      	mov	r0, fp
 800eda4:	f000 fd08 	bl	800f7b8 <__lshift>
 800eda8:	4681      	mov	r9, r0
 800edaa:	9b08      	ldr	r3, [sp, #32]
 800edac:	2b00      	cmp	r3, #0
 800edae:	dd05      	ble.n	800edbc <_dtoa_r+0x83c>
 800edb0:	4621      	mov	r1, r4
 800edb2:	461a      	mov	r2, r3
 800edb4:	4658      	mov	r0, fp
 800edb6:	f000 fcff 	bl	800f7b8 <__lshift>
 800edba:	4604      	mov	r4, r0
 800edbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d059      	beq.n	800ee76 <_dtoa_r+0x8f6>
 800edc2:	4621      	mov	r1, r4
 800edc4:	4648      	mov	r0, r9
 800edc6:	f000 fd63 	bl	800f890 <__mcmp>
 800edca:	2800      	cmp	r0, #0
 800edcc:	da53      	bge.n	800ee76 <_dtoa_r+0x8f6>
 800edce:	1e7b      	subs	r3, r7, #1
 800edd0:	9304      	str	r3, [sp, #16]
 800edd2:	4649      	mov	r1, r9
 800edd4:	2300      	movs	r3, #0
 800edd6:	220a      	movs	r2, #10
 800edd8:	4658      	mov	r0, fp
 800edda:	f000 faf7 	bl	800f3cc <__multadd>
 800edde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ede0:	4681      	mov	r9, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f000 8172 	beq.w	800f0cc <_dtoa_r+0xb4c>
 800ede8:	2300      	movs	r3, #0
 800edea:	4629      	mov	r1, r5
 800edec:	220a      	movs	r2, #10
 800edee:	4658      	mov	r0, fp
 800edf0:	f000 faec 	bl	800f3cc <__multadd>
 800edf4:	9b00      	ldr	r3, [sp, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	4605      	mov	r5, r0
 800edfa:	dc67      	bgt.n	800eecc <_dtoa_r+0x94c>
 800edfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	dc41      	bgt.n	800ee86 <_dtoa_r+0x906>
 800ee02:	e063      	b.n	800eecc <_dtoa_r+0x94c>
 800ee04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee0a:	e746      	b.n	800ec9a <_dtoa_r+0x71a>
 800ee0c:	9b07      	ldr	r3, [sp, #28]
 800ee0e:	1e5c      	subs	r4, r3, #1
 800ee10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee12:	42a3      	cmp	r3, r4
 800ee14:	bfbf      	itttt	lt
 800ee16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ee18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ee1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ee1c:	1ae3      	sublt	r3, r4, r3
 800ee1e:	bfb4      	ite	lt
 800ee20:	18d2      	addlt	r2, r2, r3
 800ee22:	1b1c      	subge	r4, r3, r4
 800ee24:	9b07      	ldr	r3, [sp, #28]
 800ee26:	bfbc      	itt	lt
 800ee28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ee2a:	2400      	movlt	r4, #0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	bfb5      	itete	lt
 800ee30:	eba8 0603 	sublt.w	r6, r8, r3
 800ee34:	9b07      	ldrge	r3, [sp, #28]
 800ee36:	2300      	movlt	r3, #0
 800ee38:	4646      	movge	r6, r8
 800ee3a:	e730      	b.n	800ec9e <_dtoa_r+0x71e>
 800ee3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee40:	4646      	mov	r6, r8
 800ee42:	e735      	b.n	800ecb0 <_dtoa_r+0x730>
 800ee44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee46:	e75c      	b.n	800ed02 <_dtoa_r+0x782>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e788      	b.n	800ed5e <_dtoa_r+0x7de>
 800ee4c:	3fe00000 	.word	0x3fe00000
 800ee50:	40240000 	.word	0x40240000
 800ee54:	40140000 	.word	0x40140000
 800ee58:	9b02      	ldr	r3, [sp, #8]
 800ee5a:	e780      	b.n	800ed5e <_dtoa_r+0x7de>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee60:	e782      	b.n	800ed68 <_dtoa_r+0x7e8>
 800ee62:	d099      	beq.n	800ed98 <_dtoa_r+0x818>
 800ee64:	9a08      	ldr	r2, [sp, #32]
 800ee66:	331c      	adds	r3, #28
 800ee68:	441a      	add	r2, r3
 800ee6a:	4498      	add	r8, r3
 800ee6c:	441e      	add	r6, r3
 800ee6e:	9208      	str	r2, [sp, #32]
 800ee70:	e792      	b.n	800ed98 <_dtoa_r+0x818>
 800ee72:	4603      	mov	r3, r0
 800ee74:	e7f6      	b.n	800ee64 <_dtoa_r+0x8e4>
 800ee76:	9b07      	ldr	r3, [sp, #28]
 800ee78:	9704      	str	r7, [sp, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	dc20      	bgt.n	800eec0 <_dtoa_r+0x940>
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	dd1e      	ble.n	800eec4 <_dtoa_r+0x944>
 800ee86:	9b00      	ldr	r3, [sp, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f47f aec0 	bne.w	800ec0e <_dtoa_r+0x68e>
 800ee8e:	4621      	mov	r1, r4
 800ee90:	2205      	movs	r2, #5
 800ee92:	4658      	mov	r0, fp
 800ee94:	f000 fa9a 	bl	800f3cc <__multadd>
 800ee98:	4601      	mov	r1, r0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	4648      	mov	r0, r9
 800ee9e:	f000 fcf7 	bl	800f890 <__mcmp>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	f77f aeb3 	ble.w	800ec0e <_dtoa_r+0x68e>
 800eea8:	4656      	mov	r6, sl
 800eeaa:	2331      	movs	r3, #49	@ 0x31
 800eeac:	f806 3b01 	strb.w	r3, [r6], #1
 800eeb0:	9b04      	ldr	r3, [sp, #16]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	9304      	str	r3, [sp, #16]
 800eeb6:	e6ae      	b.n	800ec16 <_dtoa_r+0x696>
 800eeb8:	9c07      	ldr	r4, [sp, #28]
 800eeba:	9704      	str	r7, [sp, #16]
 800eebc:	4625      	mov	r5, r4
 800eebe:	e7f3      	b.n	800eea8 <_dtoa_r+0x928>
 800eec0:	9b07      	ldr	r3, [sp, #28]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f000 8104 	beq.w	800f0d4 <_dtoa_r+0xb54>
 800eecc:	2e00      	cmp	r6, #0
 800eece:	dd05      	ble.n	800eedc <_dtoa_r+0x95c>
 800eed0:	4629      	mov	r1, r5
 800eed2:	4632      	mov	r2, r6
 800eed4:	4658      	mov	r0, fp
 800eed6:	f000 fc6f 	bl	800f7b8 <__lshift>
 800eeda:	4605      	mov	r5, r0
 800eedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d05a      	beq.n	800ef98 <_dtoa_r+0xa18>
 800eee2:	6869      	ldr	r1, [r5, #4]
 800eee4:	4658      	mov	r0, fp
 800eee6:	f000 fa0f 	bl	800f308 <_Balloc>
 800eeea:	4606      	mov	r6, r0
 800eeec:	b928      	cbnz	r0, 800eefa <_dtoa_r+0x97a>
 800eeee:	4b84      	ldr	r3, [pc, #528]	@ (800f100 <_dtoa_r+0xb80>)
 800eef0:	4602      	mov	r2, r0
 800eef2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eef6:	f7ff bb5a 	b.w	800e5ae <_dtoa_r+0x2e>
 800eefa:	692a      	ldr	r2, [r5, #16]
 800eefc:	3202      	adds	r2, #2
 800eefe:	0092      	lsls	r2, r2, #2
 800ef00:	f105 010c 	add.w	r1, r5, #12
 800ef04:	300c      	adds	r0, #12
 800ef06:	f7ff fa9c 	bl	800e442 <memcpy>
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4658      	mov	r0, fp
 800ef10:	f000 fc52 	bl	800f7b8 <__lshift>
 800ef14:	f10a 0301 	add.w	r3, sl, #1
 800ef18:	9307      	str	r3, [sp, #28]
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	4453      	add	r3, sl
 800ef1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef20:	9b02      	ldr	r3, [sp, #8]
 800ef22:	f003 0301 	and.w	r3, r3, #1
 800ef26:	462f      	mov	r7, r5
 800ef28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	9b07      	ldr	r3, [sp, #28]
 800ef2e:	4621      	mov	r1, r4
 800ef30:	3b01      	subs	r3, #1
 800ef32:	4648      	mov	r0, r9
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	f7ff fa99 	bl	800e46c <quorem>
 800ef3a:	4639      	mov	r1, r7
 800ef3c:	9002      	str	r0, [sp, #8]
 800ef3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef42:	4648      	mov	r0, r9
 800ef44:	f000 fca4 	bl	800f890 <__mcmp>
 800ef48:	462a      	mov	r2, r5
 800ef4a:	9008      	str	r0, [sp, #32]
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	4658      	mov	r0, fp
 800ef50:	f000 fcba 	bl	800f8c8 <__mdiff>
 800ef54:	68c2      	ldr	r2, [r0, #12]
 800ef56:	4606      	mov	r6, r0
 800ef58:	bb02      	cbnz	r2, 800ef9c <_dtoa_r+0xa1c>
 800ef5a:	4601      	mov	r1, r0
 800ef5c:	4648      	mov	r0, r9
 800ef5e:	f000 fc97 	bl	800f890 <__mcmp>
 800ef62:	4602      	mov	r2, r0
 800ef64:	4631      	mov	r1, r6
 800ef66:	4658      	mov	r0, fp
 800ef68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef6a:	f000 fa0d 	bl	800f388 <_Bfree>
 800ef6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef72:	9e07      	ldr	r6, [sp, #28]
 800ef74:	ea43 0102 	orr.w	r1, r3, r2
 800ef78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef7a:	4319      	orrs	r1, r3
 800ef7c:	d110      	bne.n	800efa0 <_dtoa_r+0xa20>
 800ef7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef82:	d029      	beq.n	800efd8 <_dtoa_r+0xa58>
 800ef84:	9b08      	ldr	r3, [sp, #32]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	dd02      	ble.n	800ef90 <_dtoa_r+0xa10>
 800ef8a:	9b02      	ldr	r3, [sp, #8]
 800ef8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ef90:	9b00      	ldr	r3, [sp, #0]
 800ef92:	f883 8000 	strb.w	r8, [r3]
 800ef96:	e63f      	b.n	800ec18 <_dtoa_r+0x698>
 800ef98:	4628      	mov	r0, r5
 800ef9a:	e7bb      	b.n	800ef14 <_dtoa_r+0x994>
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	e7e1      	b.n	800ef64 <_dtoa_r+0x9e4>
 800efa0:	9b08      	ldr	r3, [sp, #32]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	db04      	blt.n	800efb0 <_dtoa_r+0xa30>
 800efa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efa8:	430b      	orrs	r3, r1
 800efaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800efac:	430b      	orrs	r3, r1
 800efae:	d120      	bne.n	800eff2 <_dtoa_r+0xa72>
 800efb0:	2a00      	cmp	r2, #0
 800efb2:	dded      	ble.n	800ef90 <_dtoa_r+0xa10>
 800efb4:	4649      	mov	r1, r9
 800efb6:	2201      	movs	r2, #1
 800efb8:	4658      	mov	r0, fp
 800efba:	f000 fbfd 	bl	800f7b8 <__lshift>
 800efbe:	4621      	mov	r1, r4
 800efc0:	4681      	mov	r9, r0
 800efc2:	f000 fc65 	bl	800f890 <__mcmp>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	dc03      	bgt.n	800efd2 <_dtoa_r+0xa52>
 800efca:	d1e1      	bne.n	800ef90 <_dtoa_r+0xa10>
 800efcc:	f018 0f01 	tst.w	r8, #1
 800efd0:	d0de      	beq.n	800ef90 <_dtoa_r+0xa10>
 800efd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efd6:	d1d8      	bne.n	800ef8a <_dtoa_r+0xa0a>
 800efd8:	9a00      	ldr	r2, [sp, #0]
 800efda:	2339      	movs	r3, #57	@ 0x39
 800efdc:	7013      	strb	r3, [r2, #0]
 800efde:	4633      	mov	r3, r6
 800efe0:	461e      	mov	r6, r3
 800efe2:	3b01      	subs	r3, #1
 800efe4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800efe8:	2a39      	cmp	r2, #57	@ 0x39
 800efea:	d052      	beq.n	800f092 <_dtoa_r+0xb12>
 800efec:	3201      	adds	r2, #1
 800efee:	701a      	strb	r2, [r3, #0]
 800eff0:	e612      	b.n	800ec18 <_dtoa_r+0x698>
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	dd07      	ble.n	800f006 <_dtoa_r+0xa86>
 800eff6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800effa:	d0ed      	beq.n	800efd8 <_dtoa_r+0xa58>
 800effc:	9a00      	ldr	r2, [sp, #0]
 800effe:	f108 0301 	add.w	r3, r8, #1
 800f002:	7013      	strb	r3, [r2, #0]
 800f004:	e608      	b.n	800ec18 <_dtoa_r+0x698>
 800f006:	9b07      	ldr	r3, [sp, #28]
 800f008:	9a07      	ldr	r2, [sp, #28]
 800f00a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f010:	4293      	cmp	r3, r2
 800f012:	d028      	beq.n	800f066 <_dtoa_r+0xae6>
 800f014:	4649      	mov	r1, r9
 800f016:	2300      	movs	r3, #0
 800f018:	220a      	movs	r2, #10
 800f01a:	4658      	mov	r0, fp
 800f01c:	f000 f9d6 	bl	800f3cc <__multadd>
 800f020:	42af      	cmp	r7, r5
 800f022:	4681      	mov	r9, r0
 800f024:	f04f 0300 	mov.w	r3, #0
 800f028:	f04f 020a 	mov.w	r2, #10
 800f02c:	4639      	mov	r1, r7
 800f02e:	4658      	mov	r0, fp
 800f030:	d107      	bne.n	800f042 <_dtoa_r+0xac2>
 800f032:	f000 f9cb 	bl	800f3cc <__multadd>
 800f036:	4607      	mov	r7, r0
 800f038:	4605      	mov	r5, r0
 800f03a:	9b07      	ldr	r3, [sp, #28]
 800f03c:	3301      	adds	r3, #1
 800f03e:	9307      	str	r3, [sp, #28]
 800f040:	e774      	b.n	800ef2c <_dtoa_r+0x9ac>
 800f042:	f000 f9c3 	bl	800f3cc <__multadd>
 800f046:	4629      	mov	r1, r5
 800f048:	4607      	mov	r7, r0
 800f04a:	2300      	movs	r3, #0
 800f04c:	220a      	movs	r2, #10
 800f04e:	4658      	mov	r0, fp
 800f050:	f000 f9bc 	bl	800f3cc <__multadd>
 800f054:	4605      	mov	r5, r0
 800f056:	e7f0      	b.n	800f03a <_dtoa_r+0xaba>
 800f058:	9b00      	ldr	r3, [sp, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	bfcc      	ite	gt
 800f05e:	461e      	movgt	r6, r3
 800f060:	2601      	movle	r6, #1
 800f062:	4456      	add	r6, sl
 800f064:	2700      	movs	r7, #0
 800f066:	4649      	mov	r1, r9
 800f068:	2201      	movs	r2, #1
 800f06a:	4658      	mov	r0, fp
 800f06c:	f000 fba4 	bl	800f7b8 <__lshift>
 800f070:	4621      	mov	r1, r4
 800f072:	4681      	mov	r9, r0
 800f074:	f000 fc0c 	bl	800f890 <__mcmp>
 800f078:	2800      	cmp	r0, #0
 800f07a:	dcb0      	bgt.n	800efde <_dtoa_r+0xa5e>
 800f07c:	d102      	bne.n	800f084 <_dtoa_r+0xb04>
 800f07e:	f018 0f01 	tst.w	r8, #1
 800f082:	d1ac      	bne.n	800efde <_dtoa_r+0xa5e>
 800f084:	4633      	mov	r3, r6
 800f086:	461e      	mov	r6, r3
 800f088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f08c:	2a30      	cmp	r2, #48	@ 0x30
 800f08e:	d0fa      	beq.n	800f086 <_dtoa_r+0xb06>
 800f090:	e5c2      	b.n	800ec18 <_dtoa_r+0x698>
 800f092:	459a      	cmp	sl, r3
 800f094:	d1a4      	bne.n	800efe0 <_dtoa_r+0xa60>
 800f096:	9b04      	ldr	r3, [sp, #16]
 800f098:	3301      	adds	r3, #1
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	2331      	movs	r3, #49	@ 0x31
 800f09e:	f88a 3000 	strb.w	r3, [sl]
 800f0a2:	e5b9      	b.n	800ec18 <_dtoa_r+0x698>
 800f0a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f104 <_dtoa_r+0xb84>
 800f0aa:	b11b      	cbz	r3, 800f0b4 <_dtoa_r+0xb34>
 800f0ac:	f10a 0308 	add.w	r3, sl, #8
 800f0b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0b2:	6013      	str	r3, [r2, #0]
 800f0b4:	4650      	mov	r0, sl
 800f0b6:	b019      	add	sp, #100	@ 0x64
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	f77f ae37 	ble.w	800ed32 <_dtoa_r+0x7b2>
 800f0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	e655      	b.n	800ed78 <_dtoa_r+0x7f8>
 800f0cc:	9b00      	ldr	r3, [sp, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f77f aed6 	ble.w	800ee80 <_dtoa_r+0x900>
 800f0d4:	4656      	mov	r6, sl
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4648      	mov	r0, r9
 800f0da:	f7ff f9c7 	bl	800e46c <quorem>
 800f0de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f0e2:	f806 8b01 	strb.w	r8, [r6], #1
 800f0e6:	9b00      	ldr	r3, [sp, #0]
 800f0e8:	eba6 020a 	sub.w	r2, r6, sl
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	ddb3      	ble.n	800f058 <_dtoa_r+0xad8>
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	220a      	movs	r2, #10
 800f0f6:	4658      	mov	r0, fp
 800f0f8:	f000 f968 	bl	800f3cc <__multadd>
 800f0fc:	4681      	mov	r9, r0
 800f0fe:	e7ea      	b.n	800f0d6 <_dtoa_r+0xb56>
 800f100:	0801466a 	.word	0x0801466a
 800f104:	080145ee 	.word	0x080145ee

0800f108 <_free_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4605      	mov	r5, r0
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d041      	beq.n	800f194 <_free_r+0x8c>
 800f110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f114:	1f0c      	subs	r4, r1, #4
 800f116:	2b00      	cmp	r3, #0
 800f118:	bfb8      	it	lt
 800f11a:	18e4      	addlt	r4, r4, r3
 800f11c:	f000 f8e8 	bl	800f2f0 <__malloc_lock>
 800f120:	4a1d      	ldr	r2, [pc, #116]	@ (800f198 <_free_r+0x90>)
 800f122:	6813      	ldr	r3, [r2, #0]
 800f124:	b933      	cbnz	r3, 800f134 <_free_r+0x2c>
 800f126:	6063      	str	r3, [r4, #4]
 800f128:	6014      	str	r4, [r2, #0]
 800f12a:	4628      	mov	r0, r5
 800f12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f130:	f000 b8e4 	b.w	800f2fc <__malloc_unlock>
 800f134:	42a3      	cmp	r3, r4
 800f136:	d908      	bls.n	800f14a <_free_r+0x42>
 800f138:	6820      	ldr	r0, [r4, #0]
 800f13a:	1821      	adds	r1, r4, r0
 800f13c:	428b      	cmp	r3, r1
 800f13e:	bf01      	itttt	eq
 800f140:	6819      	ldreq	r1, [r3, #0]
 800f142:	685b      	ldreq	r3, [r3, #4]
 800f144:	1809      	addeq	r1, r1, r0
 800f146:	6021      	streq	r1, [r4, #0]
 800f148:	e7ed      	b.n	800f126 <_free_r+0x1e>
 800f14a:	461a      	mov	r2, r3
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	b10b      	cbz	r3, 800f154 <_free_r+0x4c>
 800f150:	42a3      	cmp	r3, r4
 800f152:	d9fa      	bls.n	800f14a <_free_r+0x42>
 800f154:	6811      	ldr	r1, [r2, #0]
 800f156:	1850      	adds	r0, r2, r1
 800f158:	42a0      	cmp	r0, r4
 800f15a:	d10b      	bne.n	800f174 <_free_r+0x6c>
 800f15c:	6820      	ldr	r0, [r4, #0]
 800f15e:	4401      	add	r1, r0
 800f160:	1850      	adds	r0, r2, r1
 800f162:	4283      	cmp	r3, r0
 800f164:	6011      	str	r1, [r2, #0]
 800f166:	d1e0      	bne.n	800f12a <_free_r+0x22>
 800f168:	6818      	ldr	r0, [r3, #0]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	6053      	str	r3, [r2, #4]
 800f16e:	4408      	add	r0, r1
 800f170:	6010      	str	r0, [r2, #0]
 800f172:	e7da      	b.n	800f12a <_free_r+0x22>
 800f174:	d902      	bls.n	800f17c <_free_r+0x74>
 800f176:	230c      	movs	r3, #12
 800f178:	602b      	str	r3, [r5, #0]
 800f17a:	e7d6      	b.n	800f12a <_free_r+0x22>
 800f17c:	6820      	ldr	r0, [r4, #0]
 800f17e:	1821      	adds	r1, r4, r0
 800f180:	428b      	cmp	r3, r1
 800f182:	bf04      	itt	eq
 800f184:	6819      	ldreq	r1, [r3, #0]
 800f186:	685b      	ldreq	r3, [r3, #4]
 800f188:	6063      	str	r3, [r4, #4]
 800f18a:	bf04      	itt	eq
 800f18c:	1809      	addeq	r1, r1, r0
 800f18e:	6021      	streq	r1, [r4, #0]
 800f190:	6054      	str	r4, [r2, #4]
 800f192:	e7ca      	b.n	800f12a <_free_r+0x22>
 800f194:	bd38      	pop	{r3, r4, r5, pc}
 800f196:	bf00      	nop
 800f198:	20004e0c 	.word	0x20004e0c

0800f19c <malloc>:
 800f19c:	4b02      	ldr	r3, [pc, #8]	@ (800f1a8 <malloc+0xc>)
 800f19e:	4601      	mov	r1, r0
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	f000 b825 	b.w	800f1f0 <_malloc_r>
 800f1a6:	bf00      	nop
 800f1a8:	200003f4 	.word	0x200003f4

0800f1ac <sbrk_aligned>:
 800f1ac:	b570      	push	{r4, r5, r6, lr}
 800f1ae:	4e0f      	ldr	r6, [pc, #60]	@ (800f1ec <sbrk_aligned+0x40>)
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	6831      	ldr	r1, [r6, #0]
 800f1b4:	4605      	mov	r5, r0
 800f1b6:	b911      	cbnz	r1, 800f1be <sbrk_aligned+0x12>
 800f1b8:	f001 fd90 	bl	8010cdc <_sbrk_r>
 800f1bc:	6030      	str	r0, [r6, #0]
 800f1be:	4621      	mov	r1, r4
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	f001 fd8b 	bl	8010cdc <_sbrk_r>
 800f1c6:	1c43      	adds	r3, r0, #1
 800f1c8:	d103      	bne.n	800f1d2 <sbrk_aligned+0x26>
 800f1ca:	f04f 34ff 	mov.w	r4, #4294967295
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	bd70      	pop	{r4, r5, r6, pc}
 800f1d2:	1cc4      	adds	r4, r0, #3
 800f1d4:	f024 0403 	bic.w	r4, r4, #3
 800f1d8:	42a0      	cmp	r0, r4
 800f1da:	d0f8      	beq.n	800f1ce <sbrk_aligned+0x22>
 800f1dc:	1a21      	subs	r1, r4, r0
 800f1de:	4628      	mov	r0, r5
 800f1e0:	f001 fd7c 	bl	8010cdc <_sbrk_r>
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d1f2      	bne.n	800f1ce <sbrk_aligned+0x22>
 800f1e8:	e7ef      	b.n	800f1ca <sbrk_aligned+0x1e>
 800f1ea:	bf00      	nop
 800f1ec:	20004e08 	.word	0x20004e08

0800f1f0 <_malloc_r>:
 800f1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	1ccd      	adds	r5, r1, #3
 800f1f6:	f025 0503 	bic.w	r5, r5, #3
 800f1fa:	3508      	adds	r5, #8
 800f1fc:	2d0c      	cmp	r5, #12
 800f1fe:	bf38      	it	cc
 800f200:	250c      	movcc	r5, #12
 800f202:	2d00      	cmp	r5, #0
 800f204:	4606      	mov	r6, r0
 800f206:	db01      	blt.n	800f20c <_malloc_r+0x1c>
 800f208:	42a9      	cmp	r1, r5
 800f20a:	d904      	bls.n	800f216 <_malloc_r+0x26>
 800f20c:	230c      	movs	r3, #12
 800f20e:	6033      	str	r3, [r6, #0]
 800f210:	2000      	movs	r0, #0
 800f212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f2ec <_malloc_r+0xfc>
 800f21a:	f000 f869 	bl	800f2f0 <__malloc_lock>
 800f21e:	f8d8 3000 	ldr.w	r3, [r8]
 800f222:	461c      	mov	r4, r3
 800f224:	bb44      	cbnz	r4, 800f278 <_malloc_r+0x88>
 800f226:	4629      	mov	r1, r5
 800f228:	4630      	mov	r0, r6
 800f22a:	f7ff ffbf 	bl	800f1ac <sbrk_aligned>
 800f22e:	1c43      	adds	r3, r0, #1
 800f230:	4604      	mov	r4, r0
 800f232:	d158      	bne.n	800f2e6 <_malloc_r+0xf6>
 800f234:	f8d8 4000 	ldr.w	r4, [r8]
 800f238:	4627      	mov	r7, r4
 800f23a:	2f00      	cmp	r7, #0
 800f23c:	d143      	bne.n	800f2c6 <_malloc_r+0xd6>
 800f23e:	2c00      	cmp	r4, #0
 800f240:	d04b      	beq.n	800f2da <_malloc_r+0xea>
 800f242:	6823      	ldr	r3, [r4, #0]
 800f244:	4639      	mov	r1, r7
 800f246:	4630      	mov	r0, r6
 800f248:	eb04 0903 	add.w	r9, r4, r3
 800f24c:	f001 fd46 	bl	8010cdc <_sbrk_r>
 800f250:	4581      	cmp	r9, r0
 800f252:	d142      	bne.n	800f2da <_malloc_r+0xea>
 800f254:	6821      	ldr	r1, [r4, #0]
 800f256:	1a6d      	subs	r5, r5, r1
 800f258:	4629      	mov	r1, r5
 800f25a:	4630      	mov	r0, r6
 800f25c:	f7ff ffa6 	bl	800f1ac <sbrk_aligned>
 800f260:	3001      	adds	r0, #1
 800f262:	d03a      	beq.n	800f2da <_malloc_r+0xea>
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	442b      	add	r3, r5
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	f8d8 3000 	ldr.w	r3, [r8]
 800f26e:	685a      	ldr	r2, [r3, #4]
 800f270:	bb62      	cbnz	r2, 800f2cc <_malloc_r+0xdc>
 800f272:	f8c8 7000 	str.w	r7, [r8]
 800f276:	e00f      	b.n	800f298 <_malloc_r+0xa8>
 800f278:	6822      	ldr	r2, [r4, #0]
 800f27a:	1b52      	subs	r2, r2, r5
 800f27c:	d420      	bmi.n	800f2c0 <_malloc_r+0xd0>
 800f27e:	2a0b      	cmp	r2, #11
 800f280:	d917      	bls.n	800f2b2 <_malloc_r+0xc2>
 800f282:	1961      	adds	r1, r4, r5
 800f284:	42a3      	cmp	r3, r4
 800f286:	6025      	str	r5, [r4, #0]
 800f288:	bf18      	it	ne
 800f28a:	6059      	strne	r1, [r3, #4]
 800f28c:	6863      	ldr	r3, [r4, #4]
 800f28e:	bf08      	it	eq
 800f290:	f8c8 1000 	streq.w	r1, [r8]
 800f294:	5162      	str	r2, [r4, r5]
 800f296:	604b      	str	r3, [r1, #4]
 800f298:	4630      	mov	r0, r6
 800f29a:	f000 f82f 	bl	800f2fc <__malloc_unlock>
 800f29e:	f104 000b 	add.w	r0, r4, #11
 800f2a2:	1d23      	adds	r3, r4, #4
 800f2a4:	f020 0007 	bic.w	r0, r0, #7
 800f2a8:	1ac2      	subs	r2, r0, r3
 800f2aa:	bf1c      	itt	ne
 800f2ac:	1a1b      	subne	r3, r3, r0
 800f2ae:	50a3      	strne	r3, [r4, r2]
 800f2b0:	e7af      	b.n	800f212 <_malloc_r+0x22>
 800f2b2:	6862      	ldr	r2, [r4, #4]
 800f2b4:	42a3      	cmp	r3, r4
 800f2b6:	bf0c      	ite	eq
 800f2b8:	f8c8 2000 	streq.w	r2, [r8]
 800f2bc:	605a      	strne	r2, [r3, #4]
 800f2be:	e7eb      	b.n	800f298 <_malloc_r+0xa8>
 800f2c0:	4623      	mov	r3, r4
 800f2c2:	6864      	ldr	r4, [r4, #4]
 800f2c4:	e7ae      	b.n	800f224 <_malloc_r+0x34>
 800f2c6:	463c      	mov	r4, r7
 800f2c8:	687f      	ldr	r7, [r7, #4]
 800f2ca:	e7b6      	b.n	800f23a <_malloc_r+0x4a>
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	42a3      	cmp	r3, r4
 800f2d2:	d1fb      	bne.n	800f2cc <_malloc_r+0xdc>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	6053      	str	r3, [r2, #4]
 800f2d8:	e7de      	b.n	800f298 <_malloc_r+0xa8>
 800f2da:	230c      	movs	r3, #12
 800f2dc:	6033      	str	r3, [r6, #0]
 800f2de:	4630      	mov	r0, r6
 800f2e0:	f000 f80c 	bl	800f2fc <__malloc_unlock>
 800f2e4:	e794      	b.n	800f210 <_malloc_r+0x20>
 800f2e6:	6005      	str	r5, [r0, #0]
 800f2e8:	e7d6      	b.n	800f298 <_malloc_r+0xa8>
 800f2ea:	bf00      	nop
 800f2ec:	20004e0c 	.word	0x20004e0c

0800f2f0 <__malloc_lock>:
 800f2f0:	4801      	ldr	r0, [pc, #4]	@ (800f2f8 <__malloc_lock+0x8>)
 800f2f2:	f7ff b8a4 	b.w	800e43e <__retarget_lock_acquire_recursive>
 800f2f6:	bf00      	nop
 800f2f8:	20004e04 	.word	0x20004e04

0800f2fc <__malloc_unlock>:
 800f2fc:	4801      	ldr	r0, [pc, #4]	@ (800f304 <__malloc_unlock+0x8>)
 800f2fe:	f7ff b89f 	b.w	800e440 <__retarget_lock_release_recursive>
 800f302:	bf00      	nop
 800f304:	20004e04 	.word	0x20004e04

0800f308 <_Balloc>:
 800f308:	b570      	push	{r4, r5, r6, lr}
 800f30a:	69c6      	ldr	r6, [r0, #28]
 800f30c:	4604      	mov	r4, r0
 800f30e:	460d      	mov	r5, r1
 800f310:	b976      	cbnz	r6, 800f330 <_Balloc+0x28>
 800f312:	2010      	movs	r0, #16
 800f314:	f7ff ff42 	bl	800f19c <malloc>
 800f318:	4602      	mov	r2, r0
 800f31a:	61e0      	str	r0, [r4, #28]
 800f31c:	b920      	cbnz	r0, 800f328 <_Balloc+0x20>
 800f31e:	4b18      	ldr	r3, [pc, #96]	@ (800f380 <_Balloc+0x78>)
 800f320:	4818      	ldr	r0, [pc, #96]	@ (800f384 <_Balloc+0x7c>)
 800f322:	216b      	movs	r1, #107	@ 0x6b
 800f324:	f001 fcf4 	bl	8010d10 <__assert_func>
 800f328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f32c:	6006      	str	r6, [r0, #0]
 800f32e:	60c6      	str	r6, [r0, #12]
 800f330:	69e6      	ldr	r6, [r4, #28]
 800f332:	68f3      	ldr	r3, [r6, #12]
 800f334:	b183      	cbz	r3, 800f358 <_Balloc+0x50>
 800f336:	69e3      	ldr	r3, [r4, #28]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f33e:	b9b8      	cbnz	r0, 800f370 <_Balloc+0x68>
 800f340:	2101      	movs	r1, #1
 800f342:	fa01 f605 	lsl.w	r6, r1, r5
 800f346:	1d72      	adds	r2, r6, #5
 800f348:	0092      	lsls	r2, r2, #2
 800f34a:	4620      	mov	r0, r4
 800f34c:	f001 fcfe 	bl	8010d4c <_calloc_r>
 800f350:	b160      	cbz	r0, 800f36c <_Balloc+0x64>
 800f352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f356:	e00e      	b.n	800f376 <_Balloc+0x6e>
 800f358:	2221      	movs	r2, #33	@ 0x21
 800f35a:	2104      	movs	r1, #4
 800f35c:	4620      	mov	r0, r4
 800f35e:	f001 fcf5 	bl	8010d4c <_calloc_r>
 800f362:	69e3      	ldr	r3, [r4, #28]
 800f364:	60f0      	str	r0, [r6, #12]
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1e4      	bne.n	800f336 <_Balloc+0x2e>
 800f36c:	2000      	movs	r0, #0
 800f36e:	bd70      	pop	{r4, r5, r6, pc}
 800f370:	6802      	ldr	r2, [r0, #0]
 800f372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f376:	2300      	movs	r3, #0
 800f378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f37c:	e7f7      	b.n	800f36e <_Balloc+0x66>
 800f37e:	bf00      	nop
 800f380:	080145fb 	.word	0x080145fb
 800f384:	0801467b 	.word	0x0801467b

0800f388 <_Bfree>:
 800f388:	b570      	push	{r4, r5, r6, lr}
 800f38a:	69c6      	ldr	r6, [r0, #28]
 800f38c:	4605      	mov	r5, r0
 800f38e:	460c      	mov	r4, r1
 800f390:	b976      	cbnz	r6, 800f3b0 <_Bfree+0x28>
 800f392:	2010      	movs	r0, #16
 800f394:	f7ff ff02 	bl	800f19c <malloc>
 800f398:	4602      	mov	r2, r0
 800f39a:	61e8      	str	r0, [r5, #28]
 800f39c:	b920      	cbnz	r0, 800f3a8 <_Bfree+0x20>
 800f39e:	4b09      	ldr	r3, [pc, #36]	@ (800f3c4 <_Bfree+0x3c>)
 800f3a0:	4809      	ldr	r0, [pc, #36]	@ (800f3c8 <_Bfree+0x40>)
 800f3a2:	218f      	movs	r1, #143	@ 0x8f
 800f3a4:	f001 fcb4 	bl	8010d10 <__assert_func>
 800f3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3ac:	6006      	str	r6, [r0, #0]
 800f3ae:	60c6      	str	r6, [r0, #12]
 800f3b0:	b13c      	cbz	r4, 800f3c2 <_Bfree+0x3a>
 800f3b2:	69eb      	ldr	r3, [r5, #28]
 800f3b4:	6862      	ldr	r2, [r4, #4]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3bc:	6021      	str	r1, [r4, #0]
 800f3be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3c2:	bd70      	pop	{r4, r5, r6, pc}
 800f3c4:	080145fb 	.word	0x080145fb
 800f3c8:	0801467b 	.word	0x0801467b

0800f3cc <__multadd>:
 800f3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d0:	690d      	ldr	r5, [r1, #16]
 800f3d2:	4607      	mov	r7, r0
 800f3d4:	460c      	mov	r4, r1
 800f3d6:	461e      	mov	r6, r3
 800f3d8:	f101 0c14 	add.w	ip, r1, #20
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f8dc 3000 	ldr.w	r3, [ip]
 800f3e2:	b299      	uxth	r1, r3
 800f3e4:	fb02 6101 	mla	r1, r2, r1, r6
 800f3e8:	0c1e      	lsrs	r6, r3, #16
 800f3ea:	0c0b      	lsrs	r3, r1, #16
 800f3ec:	fb02 3306 	mla	r3, r2, r6, r3
 800f3f0:	b289      	uxth	r1, r1
 800f3f2:	3001      	adds	r0, #1
 800f3f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3f8:	4285      	cmp	r5, r0
 800f3fa:	f84c 1b04 	str.w	r1, [ip], #4
 800f3fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f402:	dcec      	bgt.n	800f3de <__multadd+0x12>
 800f404:	b30e      	cbz	r6, 800f44a <__multadd+0x7e>
 800f406:	68a3      	ldr	r3, [r4, #8]
 800f408:	42ab      	cmp	r3, r5
 800f40a:	dc19      	bgt.n	800f440 <__multadd+0x74>
 800f40c:	6861      	ldr	r1, [r4, #4]
 800f40e:	4638      	mov	r0, r7
 800f410:	3101      	adds	r1, #1
 800f412:	f7ff ff79 	bl	800f308 <_Balloc>
 800f416:	4680      	mov	r8, r0
 800f418:	b928      	cbnz	r0, 800f426 <__multadd+0x5a>
 800f41a:	4602      	mov	r2, r0
 800f41c:	4b0c      	ldr	r3, [pc, #48]	@ (800f450 <__multadd+0x84>)
 800f41e:	480d      	ldr	r0, [pc, #52]	@ (800f454 <__multadd+0x88>)
 800f420:	21ba      	movs	r1, #186	@ 0xba
 800f422:	f001 fc75 	bl	8010d10 <__assert_func>
 800f426:	6922      	ldr	r2, [r4, #16]
 800f428:	3202      	adds	r2, #2
 800f42a:	f104 010c 	add.w	r1, r4, #12
 800f42e:	0092      	lsls	r2, r2, #2
 800f430:	300c      	adds	r0, #12
 800f432:	f7ff f806 	bl	800e442 <memcpy>
 800f436:	4621      	mov	r1, r4
 800f438:	4638      	mov	r0, r7
 800f43a:	f7ff ffa5 	bl	800f388 <_Bfree>
 800f43e:	4644      	mov	r4, r8
 800f440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f444:	3501      	adds	r5, #1
 800f446:	615e      	str	r6, [r3, #20]
 800f448:	6125      	str	r5, [r4, #16]
 800f44a:	4620      	mov	r0, r4
 800f44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f450:	0801466a 	.word	0x0801466a
 800f454:	0801467b 	.word	0x0801467b

0800f458 <__s2b>:
 800f458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f45c:	460c      	mov	r4, r1
 800f45e:	4615      	mov	r5, r2
 800f460:	461f      	mov	r7, r3
 800f462:	2209      	movs	r2, #9
 800f464:	3308      	adds	r3, #8
 800f466:	4606      	mov	r6, r0
 800f468:	fb93 f3f2 	sdiv	r3, r3, r2
 800f46c:	2100      	movs	r1, #0
 800f46e:	2201      	movs	r2, #1
 800f470:	429a      	cmp	r2, r3
 800f472:	db09      	blt.n	800f488 <__s2b+0x30>
 800f474:	4630      	mov	r0, r6
 800f476:	f7ff ff47 	bl	800f308 <_Balloc>
 800f47a:	b940      	cbnz	r0, 800f48e <__s2b+0x36>
 800f47c:	4602      	mov	r2, r0
 800f47e:	4b19      	ldr	r3, [pc, #100]	@ (800f4e4 <__s2b+0x8c>)
 800f480:	4819      	ldr	r0, [pc, #100]	@ (800f4e8 <__s2b+0x90>)
 800f482:	21d3      	movs	r1, #211	@ 0xd3
 800f484:	f001 fc44 	bl	8010d10 <__assert_func>
 800f488:	0052      	lsls	r2, r2, #1
 800f48a:	3101      	adds	r1, #1
 800f48c:	e7f0      	b.n	800f470 <__s2b+0x18>
 800f48e:	9b08      	ldr	r3, [sp, #32]
 800f490:	6143      	str	r3, [r0, #20]
 800f492:	2d09      	cmp	r5, #9
 800f494:	f04f 0301 	mov.w	r3, #1
 800f498:	6103      	str	r3, [r0, #16]
 800f49a:	dd16      	ble.n	800f4ca <__s2b+0x72>
 800f49c:	f104 0909 	add.w	r9, r4, #9
 800f4a0:	46c8      	mov	r8, r9
 800f4a2:	442c      	add	r4, r5
 800f4a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4a8:	4601      	mov	r1, r0
 800f4aa:	3b30      	subs	r3, #48	@ 0x30
 800f4ac:	220a      	movs	r2, #10
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f7ff ff8c 	bl	800f3cc <__multadd>
 800f4b4:	45a0      	cmp	r8, r4
 800f4b6:	d1f5      	bne.n	800f4a4 <__s2b+0x4c>
 800f4b8:	f1a5 0408 	sub.w	r4, r5, #8
 800f4bc:	444c      	add	r4, r9
 800f4be:	1b2d      	subs	r5, r5, r4
 800f4c0:	1963      	adds	r3, r4, r5
 800f4c2:	42bb      	cmp	r3, r7
 800f4c4:	db04      	blt.n	800f4d0 <__s2b+0x78>
 800f4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ca:	340a      	adds	r4, #10
 800f4cc:	2509      	movs	r5, #9
 800f4ce:	e7f6      	b.n	800f4be <__s2b+0x66>
 800f4d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4d4:	4601      	mov	r1, r0
 800f4d6:	3b30      	subs	r3, #48	@ 0x30
 800f4d8:	220a      	movs	r2, #10
 800f4da:	4630      	mov	r0, r6
 800f4dc:	f7ff ff76 	bl	800f3cc <__multadd>
 800f4e0:	e7ee      	b.n	800f4c0 <__s2b+0x68>
 800f4e2:	bf00      	nop
 800f4e4:	0801466a 	.word	0x0801466a
 800f4e8:	0801467b 	.word	0x0801467b

0800f4ec <__hi0bits>:
 800f4ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	bf36      	itet	cc
 800f4f4:	0403      	lslcc	r3, r0, #16
 800f4f6:	2000      	movcs	r0, #0
 800f4f8:	2010      	movcc	r0, #16
 800f4fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4fe:	bf3c      	itt	cc
 800f500:	021b      	lslcc	r3, r3, #8
 800f502:	3008      	addcc	r0, #8
 800f504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f508:	bf3c      	itt	cc
 800f50a:	011b      	lslcc	r3, r3, #4
 800f50c:	3004      	addcc	r0, #4
 800f50e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f512:	bf3c      	itt	cc
 800f514:	009b      	lslcc	r3, r3, #2
 800f516:	3002      	addcc	r0, #2
 800f518:	2b00      	cmp	r3, #0
 800f51a:	db05      	blt.n	800f528 <__hi0bits+0x3c>
 800f51c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f520:	f100 0001 	add.w	r0, r0, #1
 800f524:	bf08      	it	eq
 800f526:	2020      	moveq	r0, #32
 800f528:	4770      	bx	lr

0800f52a <__lo0bits>:
 800f52a:	6803      	ldr	r3, [r0, #0]
 800f52c:	4602      	mov	r2, r0
 800f52e:	f013 0007 	ands.w	r0, r3, #7
 800f532:	d00b      	beq.n	800f54c <__lo0bits+0x22>
 800f534:	07d9      	lsls	r1, r3, #31
 800f536:	d421      	bmi.n	800f57c <__lo0bits+0x52>
 800f538:	0798      	lsls	r0, r3, #30
 800f53a:	bf49      	itett	mi
 800f53c:	085b      	lsrmi	r3, r3, #1
 800f53e:	089b      	lsrpl	r3, r3, #2
 800f540:	2001      	movmi	r0, #1
 800f542:	6013      	strmi	r3, [r2, #0]
 800f544:	bf5c      	itt	pl
 800f546:	6013      	strpl	r3, [r2, #0]
 800f548:	2002      	movpl	r0, #2
 800f54a:	4770      	bx	lr
 800f54c:	b299      	uxth	r1, r3
 800f54e:	b909      	cbnz	r1, 800f554 <__lo0bits+0x2a>
 800f550:	0c1b      	lsrs	r3, r3, #16
 800f552:	2010      	movs	r0, #16
 800f554:	b2d9      	uxtb	r1, r3
 800f556:	b909      	cbnz	r1, 800f55c <__lo0bits+0x32>
 800f558:	3008      	adds	r0, #8
 800f55a:	0a1b      	lsrs	r3, r3, #8
 800f55c:	0719      	lsls	r1, r3, #28
 800f55e:	bf04      	itt	eq
 800f560:	091b      	lsreq	r3, r3, #4
 800f562:	3004      	addeq	r0, #4
 800f564:	0799      	lsls	r1, r3, #30
 800f566:	bf04      	itt	eq
 800f568:	089b      	lsreq	r3, r3, #2
 800f56a:	3002      	addeq	r0, #2
 800f56c:	07d9      	lsls	r1, r3, #31
 800f56e:	d403      	bmi.n	800f578 <__lo0bits+0x4e>
 800f570:	085b      	lsrs	r3, r3, #1
 800f572:	f100 0001 	add.w	r0, r0, #1
 800f576:	d003      	beq.n	800f580 <__lo0bits+0x56>
 800f578:	6013      	str	r3, [r2, #0]
 800f57a:	4770      	bx	lr
 800f57c:	2000      	movs	r0, #0
 800f57e:	4770      	bx	lr
 800f580:	2020      	movs	r0, #32
 800f582:	4770      	bx	lr

0800f584 <__i2b>:
 800f584:	b510      	push	{r4, lr}
 800f586:	460c      	mov	r4, r1
 800f588:	2101      	movs	r1, #1
 800f58a:	f7ff febd 	bl	800f308 <_Balloc>
 800f58e:	4602      	mov	r2, r0
 800f590:	b928      	cbnz	r0, 800f59e <__i2b+0x1a>
 800f592:	4b05      	ldr	r3, [pc, #20]	@ (800f5a8 <__i2b+0x24>)
 800f594:	4805      	ldr	r0, [pc, #20]	@ (800f5ac <__i2b+0x28>)
 800f596:	f240 1145 	movw	r1, #325	@ 0x145
 800f59a:	f001 fbb9 	bl	8010d10 <__assert_func>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	6144      	str	r4, [r0, #20]
 800f5a2:	6103      	str	r3, [r0, #16]
 800f5a4:	bd10      	pop	{r4, pc}
 800f5a6:	bf00      	nop
 800f5a8:	0801466a 	.word	0x0801466a
 800f5ac:	0801467b 	.word	0x0801467b

0800f5b0 <__multiply>:
 800f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	4614      	mov	r4, r2
 800f5b6:	690a      	ldr	r2, [r1, #16]
 800f5b8:	6923      	ldr	r3, [r4, #16]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	bfa8      	it	ge
 800f5be:	4623      	movge	r3, r4
 800f5c0:	460f      	mov	r7, r1
 800f5c2:	bfa4      	itt	ge
 800f5c4:	460c      	movge	r4, r1
 800f5c6:	461f      	movge	r7, r3
 800f5c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f5cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f5d0:	68a3      	ldr	r3, [r4, #8]
 800f5d2:	6861      	ldr	r1, [r4, #4]
 800f5d4:	eb0a 0609 	add.w	r6, sl, r9
 800f5d8:	42b3      	cmp	r3, r6
 800f5da:	b085      	sub	sp, #20
 800f5dc:	bfb8      	it	lt
 800f5de:	3101      	addlt	r1, #1
 800f5e0:	f7ff fe92 	bl	800f308 <_Balloc>
 800f5e4:	b930      	cbnz	r0, 800f5f4 <__multiply+0x44>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	4b44      	ldr	r3, [pc, #272]	@ (800f6fc <__multiply+0x14c>)
 800f5ea:	4845      	ldr	r0, [pc, #276]	@ (800f700 <__multiply+0x150>)
 800f5ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f5f0:	f001 fb8e 	bl	8010d10 <__assert_func>
 800f5f4:	f100 0514 	add.w	r5, r0, #20
 800f5f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5fc:	462b      	mov	r3, r5
 800f5fe:	2200      	movs	r2, #0
 800f600:	4543      	cmp	r3, r8
 800f602:	d321      	bcc.n	800f648 <__multiply+0x98>
 800f604:	f107 0114 	add.w	r1, r7, #20
 800f608:	f104 0214 	add.w	r2, r4, #20
 800f60c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f610:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f614:	9302      	str	r3, [sp, #8]
 800f616:	1b13      	subs	r3, r2, r4
 800f618:	3b15      	subs	r3, #21
 800f61a:	f023 0303 	bic.w	r3, r3, #3
 800f61e:	3304      	adds	r3, #4
 800f620:	f104 0715 	add.w	r7, r4, #21
 800f624:	42ba      	cmp	r2, r7
 800f626:	bf38      	it	cc
 800f628:	2304      	movcc	r3, #4
 800f62a:	9301      	str	r3, [sp, #4]
 800f62c:	9b02      	ldr	r3, [sp, #8]
 800f62e:	9103      	str	r1, [sp, #12]
 800f630:	428b      	cmp	r3, r1
 800f632:	d80c      	bhi.n	800f64e <__multiply+0x9e>
 800f634:	2e00      	cmp	r6, #0
 800f636:	dd03      	ble.n	800f640 <__multiply+0x90>
 800f638:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d05b      	beq.n	800f6f8 <__multiply+0x148>
 800f640:	6106      	str	r6, [r0, #16]
 800f642:	b005      	add	sp, #20
 800f644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f648:	f843 2b04 	str.w	r2, [r3], #4
 800f64c:	e7d8      	b.n	800f600 <__multiply+0x50>
 800f64e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f652:	f1ba 0f00 	cmp.w	sl, #0
 800f656:	d024      	beq.n	800f6a2 <__multiply+0xf2>
 800f658:	f104 0e14 	add.w	lr, r4, #20
 800f65c:	46a9      	mov	r9, r5
 800f65e:	f04f 0c00 	mov.w	ip, #0
 800f662:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f666:	f8d9 3000 	ldr.w	r3, [r9]
 800f66a:	fa1f fb87 	uxth.w	fp, r7
 800f66e:	b29b      	uxth	r3, r3
 800f670:	fb0a 330b 	mla	r3, sl, fp, r3
 800f674:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f678:	f8d9 7000 	ldr.w	r7, [r9]
 800f67c:	4463      	add	r3, ip
 800f67e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f682:	fb0a c70b 	mla	r7, sl, fp, ip
 800f686:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f690:	4572      	cmp	r2, lr
 800f692:	f849 3b04 	str.w	r3, [r9], #4
 800f696:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f69a:	d8e2      	bhi.n	800f662 <__multiply+0xb2>
 800f69c:	9b01      	ldr	r3, [sp, #4]
 800f69e:	f845 c003 	str.w	ip, [r5, r3]
 800f6a2:	9b03      	ldr	r3, [sp, #12]
 800f6a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f6a8:	3104      	adds	r1, #4
 800f6aa:	f1b9 0f00 	cmp.w	r9, #0
 800f6ae:	d021      	beq.n	800f6f4 <__multiply+0x144>
 800f6b0:	682b      	ldr	r3, [r5, #0]
 800f6b2:	f104 0c14 	add.w	ip, r4, #20
 800f6b6:	46ae      	mov	lr, r5
 800f6b8:	f04f 0a00 	mov.w	sl, #0
 800f6bc:	f8bc b000 	ldrh.w	fp, [ip]
 800f6c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f6c4:	fb09 770b 	mla	r7, r9, fp, r7
 800f6c8:	4457      	add	r7, sl
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f6d0:	f84e 3b04 	str.w	r3, [lr], #4
 800f6d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6dc:	f8be 3000 	ldrh.w	r3, [lr]
 800f6e0:	fb09 330a 	mla	r3, r9, sl, r3
 800f6e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f6e8:	4562      	cmp	r2, ip
 800f6ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6ee:	d8e5      	bhi.n	800f6bc <__multiply+0x10c>
 800f6f0:	9f01      	ldr	r7, [sp, #4]
 800f6f2:	51eb      	str	r3, [r5, r7]
 800f6f4:	3504      	adds	r5, #4
 800f6f6:	e799      	b.n	800f62c <__multiply+0x7c>
 800f6f8:	3e01      	subs	r6, #1
 800f6fa:	e79b      	b.n	800f634 <__multiply+0x84>
 800f6fc:	0801466a 	.word	0x0801466a
 800f700:	0801467b 	.word	0x0801467b

0800f704 <__pow5mult>:
 800f704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f708:	4615      	mov	r5, r2
 800f70a:	f012 0203 	ands.w	r2, r2, #3
 800f70e:	4607      	mov	r7, r0
 800f710:	460e      	mov	r6, r1
 800f712:	d007      	beq.n	800f724 <__pow5mult+0x20>
 800f714:	4c25      	ldr	r4, [pc, #148]	@ (800f7ac <__pow5mult+0xa8>)
 800f716:	3a01      	subs	r2, #1
 800f718:	2300      	movs	r3, #0
 800f71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f71e:	f7ff fe55 	bl	800f3cc <__multadd>
 800f722:	4606      	mov	r6, r0
 800f724:	10ad      	asrs	r5, r5, #2
 800f726:	d03d      	beq.n	800f7a4 <__pow5mult+0xa0>
 800f728:	69fc      	ldr	r4, [r7, #28]
 800f72a:	b97c      	cbnz	r4, 800f74c <__pow5mult+0x48>
 800f72c:	2010      	movs	r0, #16
 800f72e:	f7ff fd35 	bl	800f19c <malloc>
 800f732:	4602      	mov	r2, r0
 800f734:	61f8      	str	r0, [r7, #28]
 800f736:	b928      	cbnz	r0, 800f744 <__pow5mult+0x40>
 800f738:	4b1d      	ldr	r3, [pc, #116]	@ (800f7b0 <__pow5mult+0xac>)
 800f73a:	481e      	ldr	r0, [pc, #120]	@ (800f7b4 <__pow5mult+0xb0>)
 800f73c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f740:	f001 fae6 	bl	8010d10 <__assert_func>
 800f744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f748:	6004      	str	r4, [r0, #0]
 800f74a:	60c4      	str	r4, [r0, #12]
 800f74c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f754:	b94c      	cbnz	r4, 800f76a <__pow5mult+0x66>
 800f756:	f240 2171 	movw	r1, #625	@ 0x271
 800f75a:	4638      	mov	r0, r7
 800f75c:	f7ff ff12 	bl	800f584 <__i2b>
 800f760:	2300      	movs	r3, #0
 800f762:	f8c8 0008 	str.w	r0, [r8, #8]
 800f766:	4604      	mov	r4, r0
 800f768:	6003      	str	r3, [r0, #0]
 800f76a:	f04f 0900 	mov.w	r9, #0
 800f76e:	07eb      	lsls	r3, r5, #31
 800f770:	d50a      	bpl.n	800f788 <__pow5mult+0x84>
 800f772:	4631      	mov	r1, r6
 800f774:	4622      	mov	r2, r4
 800f776:	4638      	mov	r0, r7
 800f778:	f7ff ff1a 	bl	800f5b0 <__multiply>
 800f77c:	4631      	mov	r1, r6
 800f77e:	4680      	mov	r8, r0
 800f780:	4638      	mov	r0, r7
 800f782:	f7ff fe01 	bl	800f388 <_Bfree>
 800f786:	4646      	mov	r6, r8
 800f788:	106d      	asrs	r5, r5, #1
 800f78a:	d00b      	beq.n	800f7a4 <__pow5mult+0xa0>
 800f78c:	6820      	ldr	r0, [r4, #0]
 800f78e:	b938      	cbnz	r0, 800f7a0 <__pow5mult+0x9c>
 800f790:	4622      	mov	r2, r4
 800f792:	4621      	mov	r1, r4
 800f794:	4638      	mov	r0, r7
 800f796:	f7ff ff0b 	bl	800f5b0 <__multiply>
 800f79a:	6020      	str	r0, [r4, #0]
 800f79c:	f8c0 9000 	str.w	r9, [r0]
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	e7e4      	b.n	800f76e <__pow5mult+0x6a>
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7aa:	bf00      	nop
 800f7ac:	080146d4 	.word	0x080146d4
 800f7b0:	080145fb 	.word	0x080145fb
 800f7b4:	0801467b 	.word	0x0801467b

0800f7b8 <__lshift>:
 800f7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7bc:	460c      	mov	r4, r1
 800f7be:	6849      	ldr	r1, [r1, #4]
 800f7c0:	6923      	ldr	r3, [r4, #16]
 800f7c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f7c6:	68a3      	ldr	r3, [r4, #8]
 800f7c8:	4607      	mov	r7, r0
 800f7ca:	4691      	mov	r9, r2
 800f7cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7d0:	f108 0601 	add.w	r6, r8, #1
 800f7d4:	42b3      	cmp	r3, r6
 800f7d6:	db0b      	blt.n	800f7f0 <__lshift+0x38>
 800f7d8:	4638      	mov	r0, r7
 800f7da:	f7ff fd95 	bl	800f308 <_Balloc>
 800f7de:	4605      	mov	r5, r0
 800f7e0:	b948      	cbnz	r0, 800f7f6 <__lshift+0x3e>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	4b28      	ldr	r3, [pc, #160]	@ (800f888 <__lshift+0xd0>)
 800f7e6:	4829      	ldr	r0, [pc, #164]	@ (800f88c <__lshift+0xd4>)
 800f7e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7ec:	f001 fa90 	bl	8010d10 <__assert_func>
 800f7f0:	3101      	adds	r1, #1
 800f7f2:	005b      	lsls	r3, r3, #1
 800f7f4:	e7ee      	b.n	800f7d4 <__lshift+0x1c>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	f100 0114 	add.w	r1, r0, #20
 800f7fc:	f100 0210 	add.w	r2, r0, #16
 800f800:	4618      	mov	r0, r3
 800f802:	4553      	cmp	r3, sl
 800f804:	db33      	blt.n	800f86e <__lshift+0xb6>
 800f806:	6920      	ldr	r0, [r4, #16]
 800f808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f80c:	f104 0314 	add.w	r3, r4, #20
 800f810:	f019 091f 	ands.w	r9, r9, #31
 800f814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f81c:	d02b      	beq.n	800f876 <__lshift+0xbe>
 800f81e:	f1c9 0e20 	rsb	lr, r9, #32
 800f822:	468a      	mov	sl, r1
 800f824:	2200      	movs	r2, #0
 800f826:	6818      	ldr	r0, [r3, #0]
 800f828:	fa00 f009 	lsl.w	r0, r0, r9
 800f82c:	4310      	orrs	r0, r2
 800f82e:	f84a 0b04 	str.w	r0, [sl], #4
 800f832:	f853 2b04 	ldr.w	r2, [r3], #4
 800f836:	459c      	cmp	ip, r3
 800f838:	fa22 f20e 	lsr.w	r2, r2, lr
 800f83c:	d8f3      	bhi.n	800f826 <__lshift+0x6e>
 800f83e:	ebac 0304 	sub.w	r3, ip, r4
 800f842:	3b15      	subs	r3, #21
 800f844:	f023 0303 	bic.w	r3, r3, #3
 800f848:	3304      	adds	r3, #4
 800f84a:	f104 0015 	add.w	r0, r4, #21
 800f84e:	4584      	cmp	ip, r0
 800f850:	bf38      	it	cc
 800f852:	2304      	movcc	r3, #4
 800f854:	50ca      	str	r2, [r1, r3]
 800f856:	b10a      	cbz	r2, 800f85c <__lshift+0xa4>
 800f858:	f108 0602 	add.w	r6, r8, #2
 800f85c:	3e01      	subs	r6, #1
 800f85e:	4638      	mov	r0, r7
 800f860:	612e      	str	r6, [r5, #16]
 800f862:	4621      	mov	r1, r4
 800f864:	f7ff fd90 	bl	800f388 <_Bfree>
 800f868:	4628      	mov	r0, r5
 800f86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f86e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f872:	3301      	adds	r3, #1
 800f874:	e7c5      	b.n	800f802 <__lshift+0x4a>
 800f876:	3904      	subs	r1, #4
 800f878:	f853 2b04 	ldr.w	r2, [r3], #4
 800f87c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f880:	459c      	cmp	ip, r3
 800f882:	d8f9      	bhi.n	800f878 <__lshift+0xc0>
 800f884:	e7ea      	b.n	800f85c <__lshift+0xa4>
 800f886:	bf00      	nop
 800f888:	0801466a 	.word	0x0801466a
 800f88c:	0801467b 	.word	0x0801467b

0800f890 <__mcmp>:
 800f890:	690a      	ldr	r2, [r1, #16]
 800f892:	4603      	mov	r3, r0
 800f894:	6900      	ldr	r0, [r0, #16]
 800f896:	1a80      	subs	r0, r0, r2
 800f898:	b530      	push	{r4, r5, lr}
 800f89a:	d10e      	bne.n	800f8ba <__mcmp+0x2a>
 800f89c:	3314      	adds	r3, #20
 800f89e:	3114      	adds	r1, #20
 800f8a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f8a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8b0:	4295      	cmp	r5, r2
 800f8b2:	d003      	beq.n	800f8bc <__mcmp+0x2c>
 800f8b4:	d205      	bcs.n	800f8c2 <__mcmp+0x32>
 800f8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ba:	bd30      	pop	{r4, r5, pc}
 800f8bc:	42a3      	cmp	r3, r4
 800f8be:	d3f3      	bcc.n	800f8a8 <__mcmp+0x18>
 800f8c0:	e7fb      	b.n	800f8ba <__mcmp+0x2a>
 800f8c2:	2001      	movs	r0, #1
 800f8c4:	e7f9      	b.n	800f8ba <__mcmp+0x2a>
	...

0800f8c8 <__mdiff>:
 800f8c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8cc:	4689      	mov	r9, r1
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	4611      	mov	r1, r2
 800f8d2:	4648      	mov	r0, r9
 800f8d4:	4614      	mov	r4, r2
 800f8d6:	f7ff ffdb 	bl	800f890 <__mcmp>
 800f8da:	1e05      	subs	r5, r0, #0
 800f8dc:	d112      	bne.n	800f904 <__mdiff+0x3c>
 800f8de:	4629      	mov	r1, r5
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	f7ff fd11 	bl	800f308 <_Balloc>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	b928      	cbnz	r0, 800f8f6 <__mdiff+0x2e>
 800f8ea:	4b3f      	ldr	r3, [pc, #252]	@ (800f9e8 <__mdiff+0x120>)
 800f8ec:	f240 2137 	movw	r1, #567	@ 0x237
 800f8f0:	483e      	ldr	r0, [pc, #248]	@ (800f9ec <__mdiff+0x124>)
 800f8f2:	f001 fa0d 	bl	8010d10 <__assert_func>
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8fc:	4610      	mov	r0, r2
 800f8fe:	b003      	add	sp, #12
 800f900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f904:	bfbc      	itt	lt
 800f906:	464b      	movlt	r3, r9
 800f908:	46a1      	movlt	r9, r4
 800f90a:	4630      	mov	r0, r6
 800f90c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f910:	bfba      	itte	lt
 800f912:	461c      	movlt	r4, r3
 800f914:	2501      	movlt	r5, #1
 800f916:	2500      	movge	r5, #0
 800f918:	f7ff fcf6 	bl	800f308 <_Balloc>
 800f91c:	4602      	mov	r2, r0
 800f91e:	b918      	cbnz	r0, 800f928 <__mdiff+0x60>
 800f920:	4b31      	ldr	r3, [pc, #196]	@ (800f9e8 <__mdiff+0x120>)
 800f922:	f240 2145 	movw	r1, #581	@ 0x245
 800f926:	e7e3      	b.n	800f8f0 <__mdiff+0x28>
 800f928:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f92c:	6926      	ldr	r6, [r4, #16]
 800f92e:	60c5      	str	r5, [r0, #12]
 800f930:	f109 0310 	add.w	r3, r9, #16
 800f934:	f109 0514 	add.w	r5, r9, #20
 800f938:	f104 0e14 	add.w	lr, r4, #20
 800f93c:	f100 0b14 	add.w	fp, r0, #20
 800f940:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f944:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f948:	9301      	str	r3, [sp, #4]
 800f94a:	46d9      	mov	r9, fp
 800f94c:	f04f 0c00 	mov.w	ip, #0
 800f950:	9b01      	ldr	r3, [sp, #4]
 800f952:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f956:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f95a:	9301      	str	r3, [sp, #4]
 800f95c:	fa1f f38a 	uxth.w	r3, sl
 800f960:	4619      	mov	r1, r3
 800f962:	b283      	uxth	r3, r0
 800f964:	1acb      	subs	r3, r1, r3
 800f966:	0c00      	lsrs	r0, r0, #16
 800f968:	4463      	add	r3, ip
 800f96a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f96e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f972:	b29b      	uxth	r3, r3
 800f974:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f978:	4576      	cmp	r6, lr
 800f97a:	f849 3b04 	str.w	r3, [r9], #4
 800f97e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f982:	d8e5      	bhi.n	800f950 <__mdiff+0x88>
 800f984:	1b33      	subs	r3, r6, r4
 800f986:	3b15      	subs	r3, #21
 800f988:	f023 0303 	bic.w	r3, r3, #3
 800f98c:	3415      	adds	r4, #21
 800f98e:	3304      	adds	r3, #4
 800f990:	42a6      	cmp	r6, r4
 800f992:	bf38      	it	cc
 800f994:	2304      	movcc	r3, #4
 800f996:	441d      	add	r5, r3
 800f998:	445b      	add	r3, fp
 800f99a:	461e      	mov	r6, r3
 800f99c:	462c      	mov	r4, r5
 800f99e:	4544      	cmp	r4, r8
 800f9a0:	d30e      	bcc.n	800f9c0 <__mdiff+0xf8>
 800f9a2:	f108 0103 	add.w	r1, r8, #3
 800f9a6:	1b49      	subs	r1, r1, r5
 800f9a8:	f021 0103 	bic.w	r1, r1, #3
 800f9ac:	3d03      	subs	r5, #3
 800f9ae:	45a8      	cmp	r8, r5
 800f9b0:	bf38      	it	cc
 800f9b2:	2100      	movcc	r1, #0
 800f9b4:	440b      	add	r3, r1
 800f9b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9ba:	b191      	cbz	r1, 800f9e2 <__mdiff+0x11a>
 800f9bc:	6117      	str	r7, [r2, #16]
 800f9be:	e79d      	b.n	800f8fc <__mdiff+0x34>
 800f9c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f9c4:	46e6      	mov	lr, ip
 800f9c6:	0c08      	lsrs	r0, r1, #16
 800f9c8:	fa1c fc81 	uxtah	ip, ip, r1
 800f9cc:	4471      	add	r1, lr
 800f9ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9d2:	b289      	uxth	r1, r1
 800f9d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9d8:	f846 1b04 	str.w	r1, [r6], #4
 800f9dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9e0:	e7dd      	b.n	800f99e <__mdiff+0xd6>
 800f9e2:	3f01      	subs	r7, #1
 800f9e4:	e7e7      	b.n	800f9b6 <__mdiff+0xee>
 800f9e6:	bf00      	nop
 800f9e8:	0801466a 	.word	0x0801466a
 800f9ec:	0801467b 	.word	0x0801467b

0800f9f0 <__ulp>:
 800f9f0:	b082      	sub	sp, #8
 800f9f2:	ed8d 0b00 	vstr	d0, [sp]
 800f9f6:	9a01      	ldr	r2, [sp, #4]
 800f9f8:	4b0f      	ldr	r3, [pc, #60]	@ (800fa38 <__ulp+0x48>)
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	dc08      	bgt.n	800fa16 <__ulp+0x26>
 800fa04:	425b      	negs	r3, r3
 800fa06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa0e:	da04      	bge.n	800fa1a <__ulp+0x2a>
 800fa10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa14:	4113      	asrs	r3, r2
 800fa16:	2200      	movs	r2, #0
 800fa18:	e008      	b.n	800fa2c <__ulp+0x3c>
 800fa1a:	f1a2 0314 	sub.w	r3, r2, #20
 800fa1e:	2b1e      	cmp	r3, #30
 800fa20:	bfda      	itte	le
 800fa22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fa26:	40da      	lsrle	r2, r3
 800fa28:	2201      	movgt	r2, #1
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	4610      	mov	r0, r2
 800fa30:	ec41 0b10 	vmov	d0, r0, r1
 800fa34:	b002      	add	sp, #8
 800fa36:	4770      	bx	lr
 800fa38:	7ff00000 	.word	0x7ff00000

0800fa3c <__b2d>:
 800fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa40:	6906      	ldr	r6, [r0, #16]
 800fa42:	f100 0814 	add.w	r8, r0, #20
 800fa46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa4a:	1f37      	subs	r7, r6, #4
 800fa4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa50:	4610      	mov	r0, r2
 800fa52:	f7ff fd4b 	bl	800f4ec <__hi0bits>
 800fa56:	f1c0 0320 	rsb	r3, r0, #32
 800fa5a:	280a      	cmp	r0, #10
 800fa5c:	600b      	str	r3, [r1, #0]
 800fa5e:	491b      	ldr	r1, [pc, #108]	@ (800facc <__b2d+0x90>)
 800fa60:	dc15      	bgt.n	800fa8e <__b2d+0x52>
 800fa62:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa66:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa6a:	45b8      	cmp	r8, r7
 800fa6c:	ea43 0501 	orr.w	r5, r3, r1
 800fa70:	bf34      	ite	cc
 800fa72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa76:	2300      	movcs	r3, #0
 800fa78:	3015      	adds	r0, #21
 800fa7a:	fa02 f000 	lsl.w	r0, r2, r0
 800fa7e:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa82:	4303      	orrs	r3, r0
 800fa84:	461c      	mov	r4, r3
 800fa86:	ec45 4b10 	vmov	d0, r4, r5
 800fa8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa8e:	45b8      	cmp	r8, r7
 800fa90:	bf3a      	itte	cc
 800fa92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa96:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa9a:	2300      	movcs	r3, #0
 800fa9c:	380b      	subs	r0, #11
 800fa9e:	d012      	beq.n	800fac6 <__b2d+0x8a>
 800faa0:	f1c0 0120 	rsb	r1, r0, #32
 800faa4:	fa23 f401 	lsr.w	r4, r3, r1
 800faa8:	4082      	lsls	r2, r0
 800faaa:	4322      	orrs	r2, r4
 800faac:	4547      	cmp	r7, r8
 800faae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fab2:	bf8c      	ite	hi
 800fab4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fab8:	2200      	movls	r2, #0
 800faba:	4083      	lsls	r3, r0
 800fabc:	40ca      	lsrs	r2, r1
 800fabe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fac2:	4313      	orrs	r3, r2
 800fac4:	e7de      	b.n	800fa84 <__b2d+0x48>
 800fac6:	ea42 0501 	orr.w	r5, r2, r1
 800faca:	e7db      	b.n	800fa84 <__b2d+0x48>
 800facc:	3ff00000 	.word	0x3ff00000

0800fad0 <__d2b>:
 800fad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fad4:	460f      	mov	r7, r1
 800fad6:	2101      	movs	r1, #1
 800fad8:	ec59 8b10 	vmov	r8, r9, d0
 800fadc:	4616      	mov	r6, r2
 800fade:	f7ff fc13 	bl	800f308 <_Balloc>
 800fae2:	4604      	mov	r4, r0
 800fae4:	b930      	cbnz	r0, 800faf4 <__d2b+0x24>
 800fae6:	4602      	mov	r2, r0
 800fae8:	4b23      	ldr	r3, [pc, #140]	@ (800fb78 <__d2b+0xa8>)
 800faea:	4824      	ldr	r0, [pc, #144]	@ (800fb7c <__d2b+0xac>)
 800faec:	f240 310f 	movw	r1, #783	@ 0x30f
 800faf0:	f001 f90e 	bl	8010d10 <__assert_func>
 800faf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800faf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fafc:	b10d      	cbz	r5, 800fb02 <__d2b+0x32>
 800fafe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	f1b8 0300 	subs.w	r3, r8, #0
 800fb08:	d023      	beq.n	800fb52 <__d2b+0x82>
 800fb0a:	4668      	mov	r0, sp
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	f7ff fd0c 	bl	800f52a <__lo0bits>
 800fb12:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb16:	b1d0      	cbz	r0, 800fb4e <__d2b+0x7e>
 800fb18:	f1c0 0320 	rsb	r3, r0, #32
 800fb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb20:	430b      	orrs	r3, r1
 800fb22:	40c2      	lsrs	r2, r0
 800fb24:	6163      	str	r3, [r4, #20]
 800fb26:	9201      	str	r2, [sp, #4]
 800fb28:	9b01      	ldr	r3, [sp, #4]
 800fb2a:	61a3      	str	r3, [r4, #24]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	bf0c      	ite	eq
 800fb30:	2201      	moveq	r2, #1
 800fb32:	2202      	movne	r2, #2
 800fb34:	6122      	str	r2, [r4, #16]
 800fb36:	b1a5      	cbz	r5, 800fb62 <__d2b+0x92>
 800fb38:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb3c:	4405      	add	r5, r0
 800fb3e:	603d      	str	r5, [r7, #0]
 800fb40:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb44:	6030      	str	r0, [r6, #0]
 800fb46:	4620      	mov	r0, r4
 800fb48:	b003      	add	sp, #12
 800fb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb4e:	6161      	str	r1, [r4, #20]
 800fb50:	e7ea      	b.n	800fb28 <__d2b+0x58>
 800fb52:	a801      	add	r0, sp, #4
 800fb54:	f7ff fce9 	bl	800f52a <__lo0bits>
 800fb58:	9b01      	ldr	r3, [sp, #4]
 800fb5a:	6163      	str	r3, [r4, #20]
 800fb5c:	3020      	adds	r0, #32
 800fb5e:	2201      	movs	r2, #1
 800fb60:	e7e8      	b.n	800fb34 <__d2b+0x64>
 800fb62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb6a:	6038      	str	r0, [r7, #0]
 800fb6c:	6918      	ldr	r0, [r3, #16]
 800fb6e:	f7ff fcbd 	bl	800f4ec <__hi0bits>
 800fb72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb76:	e7e5      	b.n	800fb44 <__d2b+0x74>
 800fb78:	0801466a 	.word	0x0801466a
 800fb7c:	0801467b 	.word	0x0801467b

0800fb80 <__ratio>:
 800fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb84:	b085      	sub	sp, #20
 800fb86:	e9cd 1000 	strd	r1, r0, [sp]
 800fb8a:	a902      	add	r1, sp, #8
 800fb8c:	f7ff ff56 	bl	800fa3c <__b2d>
 800fb90:	9800      	ldr	r0, [sp, #0]
 800fb92:	a903      	add	r1, sp, #12
 800fb94:	ec55 4b10 	vmov	r4, r5, d0
 800fb98:	f7ff ff50 	bl	800fa3c <__b2d>
 800fb9c:	9b01      	ldr	r3, [sp, #4]
 800fb9e:	6919      	ldr	r1, [r3, #16]
 800fba0:	9b00      	ldr	r3, [sp, #0]
 800fba2:	691b      	ldr	r3, [r3, #16]
 800fba4:	1ac9      	subs	r1, r1, r3
 800fba6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fbaa:	1a9b      	subs	r3, r3, r2
 800fbac:	ec5b ab10 	vmov	sl, fp, d0
 800fbb0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	bfce      	itee	gt
 800fbb8:	462a      	movgt	r2, r5
 800fbba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fbbe:	465a      	movle	r2, fp
 800fbc0:	462f      	mov	r7, r5
 800fbc2:	46d9      	mov	r9, fp
 800fbc4:	bfcc      	ite	gt
 800fbc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fbca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fbce:	464b      	mov	r3, r9
 800fbd0:	4652      	mov	r2, sl
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	4639      	mov	r1, r7
 800fbd6:	f7f0 fe49 	bl	800086c <__aeabi_ddiv>
 800fbda:	ec41 0b10 	vmov	d0, r0, r1
 800fbde:	b005      	add	sp, #20
 800fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbe4 <__copybits>:
 800fbe4:	3901      	subs	r1, #1
 800fbe6:	b570      	push	{r4, r5, r6, lr}
 800fbe8:	1149      	asrs	r1, r1, #5
 800fbea:	6914      	ldr	r4, [r2, #16]
 800fbec:	3101      	adds	r1, #1
 800fbee:	f102 0314 	add.w	r3, r2, #20
 800fbf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbfa:	1f05      	subs	r5, r0, #4
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	d30c      	bcc.n	800fc1a <__copybits+0x36>
 800fc00:	1aa3      	subs	r3, r4, r2
 800fc02:	3b11      	subs	r3, #17
 800fc04:	f023 0303 	bic.w	r3, r3, #3
 800fc08:	3211      	adds	r2, #17
 800fc0a:	42a2      	cmp	r2, r4
 800fc0c:	bf88      	it	hi
 800fc0e:	2300      	movhi	r3, #0
 800fc10:	4418      	add	r0, r3
 800fc12:	2300      	movs	r3, #0
 800fc14:	4288      	cmp	r0, r1
 800fc16:	d305      	bcc.n	800fc24 <__copybits+0x40>
 800fc18:	bd70      	pop	{r4, r5, r6, pc}
 800fc1a:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc1e:	f845 6f04 	str.w	r6, [r5, #4]!
 800fc22:	e7eb      	b.n	800fbfc <__copybits+0x18>
 800fc24:	f840 3b04 	str.w	r3, [r0], #4
 800fc28:	e7f4      	b.n	800fc14 <__copybits+0x30>

0800fc2a <__any_on>:
 800fc2a:	f100 0214 	add.w	r2, r0, #20
 800fc2e:	6900      	ldr	r0, [r0, #16]
 800fc30:	114b      	asrs	r3, r1, #5
 800fc32:	4298      	cmp	r0, r3
 800fc34:	b510      	push	{r4, lr}
 800fc36:	db11      	blt.n	800fc5c <__any_on+0x32>
 800fc38:	dd0a      	ble.n	800fc50 <__any_on+0x26>
 800fc3a:	f011 011f 	ands.w	r1, r1, #31
 800fc3e:	d007      	beq.n	800fc50 <__any_on+0x26>
 800fc40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc44:	fa24 f001 	lsr.w	r0, r4, r1
 800fc48:	fa00 f101 	lsl.w	r1, r0, r1
 800fc4c:	428c      	cmp	r4, r1
 800fc4e:	d10b      	bne.n	800fc68 <__any_on+0x3e>
 800fc50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d803      	bhi.n	800fc60 <__any_on+0x36>
 800fc58:	2000      	movs	r0, #0
 800fc5a:	bd10      	pop	{r4, pc}
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	e7f7      	b.n	800fc50 <__any_on+0x26>
 800fc60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc64:	2900      	cmp	r1, #0
 800fc66:	d0f5      	beq.n	800fc54 <__any_on+0x2a>
 800fc68:	2001      	movs	r0, #1
 800fc6a:	e7f6      	b.n	800fc5a <__any_on+0x30>

0800fc6c <sulp>:
 800fc6c:	b570      	push	{r4, r5, r6, lr}
 800fc6e:	4604      	mov	r4, r0
 800fc70:	460d      	mov	r5, r1
 800fc72:	ec45 4b10 	vmov	d0, r4, r5
 800fc76:	4616      	mov	r6, r2
 800fc78:	f7ff feba 	bl	800f9f0 <__ulp>
 800fc7c:	ec51 0b10 	vmov	r0, r1, d0
 800fc80:	b17e      	cbz	r6, 800fca2 <sulp+0x36>
 800fc82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc86:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	dd09      	ble.n	800fca2 <sulp+0x36>
 800fc8e:	051b      	lsls	r3, r3, #20
 800fc90:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fc94:	2400      	movs	r4, #0
 800fc96:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fc9a:	4622      	mov	r2, r4
 800fc9c:	462b      	mov	r3, r5
 800fc9e:	f7f0 fcbb 	bl	8000618 <__aeabi_dmul>
 800fca2:	ec41 0b10 	vmov	d0, r0, r1
 800fca6:	bd70      	pop	{r4, r5, r6, pc}

0800fca8 <_strtod_l>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	b09f      	sub	sp, #124	@ 0x7c
 800fcae:	460c      	mov	r4, r1
 800fcb0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	921a      	str	r2, [sp, #104]	@ 0x68
 800fcb6:	9005      	str	r0, [sp, #20]
 800fcb8:	f04f 0a00 	mov.w	sl, #0
 800fcbc:	f04f 0b00 	mov.w	fp, #0
 800fcc0:	460a      	mov	r2, r1
 800fcc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fcc4:	7811      	ldrb	r1, [r2, #0]
 800fcc6:	292b      	cmp	r1, #43	@ 0x2b
 800fcc8:	d04a      	beq.n	800fd60 <_strtod_l+0xb8>
 800fcca:	d838      	bhi.n	800fd3e <_strtod_l+0x96>
 800fccc:	290d      	cmp	r1, #13
 800fcce:	d832      	bhi.n	800fd36 <_strtod_l+0x8e>
 800fcd0:	2908      	cmp	r1, #8
 800fcd2:	d832      	bhi.n	800fd3a <_strtod_l+0x92>
 800fcd4:	2900      	cmp	r1, #0
 800fcd6:	d03b      	beq.n	800fd50 <_strtod_l+0xa8>
 800fcd8:	2200      	movs	r2, #0
 800fcda:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fcdc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fcde:	782a      	ldrb	r2, [r5, #0]
 800fce0:	2a30      	cmp	r2, #48	@ 0x30
 800fce2:	f040 80b3 	bne.w	800fe4c <_strtod_l+0x1a4>
 800fce6:	786a      	ldrb	r2, [r5, #1]
 800fce8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fcec:	2a58      	cmp	r2, #88	@ 0x58
 800fcee:	d16e      	bne.n	800fdce <_strtod_l+0x126>
 800fcf0:	9302      	str	r3, [sp, #8]
 800fcf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcf4:	9301      	str	r3, [sp, #4]
 800fcf6:	ab1a      	add	r3, sp, #104	@ 0x68
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	4a8e      	ldr	r2, [pc, #568]	@ (800ff34 <_strtod_l+0x28c>)
 800fcfc:	9805      	ldr	r0, [sp, #20]
 800fcfe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fd00:	a919      	add	r1, sp, #100	@ 0x64
 800fd02:	f001 f89f 	bl	8010e44 <__gethex>
 800fd06:	f010 060f 	ands.w	r6, r0, #15
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	d005      	beq.n	800fd1a <_strtod_l+0x72>
 800fd0e:	2e06      	cmp	r6, #6
 800fd10:	d128      	bne.n	800fd64 <_strtod_l+0xbc>
 800fd12:	3501      	adds	r5, #1
 800fd14:	2300      	movs	r3, #0
 800fd16:	9519      	str	r5, [sp, #100]	@ 0x64
 800fd18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f040 858e 	bne.w	801083e <_strtod_l+0xb96>
 800fd22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd24:	b1cb      	cbz	r3, 800fd5a <_strtod_l+0xb2>
 800fd26:	4652      	mov	r2, sl
 800fd28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fd2c:	ec43 2b10 	vmov	d0, r2, r3
 800fd30:	b01f      	add	sp, #124	@ 0x7c
 800fd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd36:	2920      	cmp	r1, #32
 800fd38:	d1ce      	bne.n	800fcd8 <_strtod_l+0x30>
 800fd3a:	3201      	adds	r2, #1
 800fd3c:	e7c1      	b.n	800fcc2 <_strtod_l+0x1a>
 800fd3e:	292d      	cmp	r1, #45	@ 0x2d
 800fd40:	d1ca      	bne.n	800fcd8 <_strtod_l+0x30>
 800fd42:	2101      	movs	r1, #1
 800fd44:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fd46:	1c51      	adds	r1, r2, #1
 800fd48:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd4a:	7852      	ldrb	r2, [r2, #1]
 800fd4c:	2a00      	cmp	r2, #0
 800fd4e:	d1c5      	bne.n	800fcdc <_strtod_l+0x34>
 800fd50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd52:	9419      	str	r4, [sp, #100]	@ 0x64
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f040 8570 	bne.w	801083a <_strtod_l+0xb92>
 800fd5a:	4652      	mov	r2, sl
 800fd5c:	465b      	mov	r3, fp
 800fd5e:	e7e5      	b.n	800fd2c <_strtod_l+0x84>
 800fd60:	2100      	movs	r1, #0
 800fd62:	e7ef      	b.n	800fd44 <_strtod_l+0x9c>
 800fd64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd66:	b13a      	cbz	r2, 800fd78 <_strtod_l+0xd0>
 800fd68:	2135      	movs	r1, #53	@ 0x35
 800fd6a:	a81c      	add	r0, sp, #112	@ 0x70
 800fd6c:	f7ff ff3a 	bl	800fbe4 <__copybits>
 800fd70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd72:	9805      	ldr	r0, [sp, #20]
 800fd74:	f7ff fb08 	bl	800f388 <_Bfree>
 800fd78:	3e01      	subs	r6, #1
 800fd7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd7c:	2e04      	cmp	r6, #4
 800fd7e:	d806      	bhi.n	800fd8e <_strtod_l+0xe6>
 800fd80:	e8df f006 	tbb	[pc, r6]
 800fd84:	201d0314 	.word	0x201d0314
 800fd88:	14          	.byte	0x14
 800fd89:	00          	.byte	0x00
 800fd8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fd8e:	05e1      	lsls	r1, r4, #23
 800fd90:	bf48      	it	mi
 800fd92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fd96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fd9a:	0d1b      	lsrs	r3, r3, #20
 800fd9c:	051b      	lsls	r3, r3, #20
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1bb      	bne.n	800fd1a <_strtod_l+0x72>
 800fda2:	f7fe fb21 	bl	800e3e8 <__errno>
 800fda6:	2322      	movs	r3, #34	@ 0x22
 800fda8:	6003      	str	r3, [r0, #0]
 800fdaa:	e7b6      	b.n	800fd1a <_strtod_l+0x72>
 800fdac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fdb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fdb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fdb8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdbc:	e7e7      	b.n	800fd8e <_strtod_l+0xe6>
 800fdbe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ff3c <_strtod_l+0x294>
 800fdc2:	e7e4      	b.n	800fd8e <_strtod_l+0xe6>
 800fdc4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fdc8:	f04f 3aff 	mov.w	sl, #4294967295
 800fdcc:	e7df      	b.n	800fd8e <_strtod_l+0xe6>
 800fdce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdd0:	1c5a      	adds	r2, r3, #1
 800fdd2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fdd4:	785b      	ldrb	r3, [r3, #1]
 800fdd6:	2b30      	cmp	r3, #48	@ 0x30
 800fdd8:	d0f9      	beq.n	800fdce <_strtod_l+0x126>
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d09d      	beq.n	800fd1a <_strtod_l+0x72>
 800fdde:	2301      	movs	r3, #1
 800fde0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fde2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fde4:	930c      	str	r3, [sp, #48]	@ 0x30
 800fde6:	2300      	movs	r3, #0
 800fde8:	9308      	str	r3, [sp, #32]
 800fdea:	930a      	str	r3, [sp, #40]	@ 0x28
 800fdec:	461f      	mov	r7, r3
 800fdee:	220a      	movs	r2, #10
 800fdf0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fdf2:	7805      	ldrb	r5, [r0, #0]
 800fdf4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fdf8:	b2d9      	uxtb	r1, r3
 800fdfa:	2909      	cmp	r1, #9
 800fdfc:	d928      	bls.n	800fe50 <_strtod_l+0x1a8>
 800fdfe:	494e      	ldr	r1, [pc, #312]	@ (800ff38 <_strtod_l+0x290>)
 800fe00:	2201      	movs	r2, #1
 800fe02:	f000 ff59 	bl	8010cb8 <strncmp>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d032      	beq.n	800fe70 <_strtod_l+0x1c8>
 800fe0a:	2000      	movs	r0, #0
 800fe0c:	462a      	mov	r2, r5
 800fe0e:	4681      	mov	r9, r0
 800fe10:	463d      	mov	r5, r7
 800fe12:	4603      	mov	r3, r0
 800fe14:	2a65      	cmp	r2, #101	@ 0x65
 800fe16:	d001      	beq.n	800fe1c <_strtod_l+0x174>
 800fe18:	2a45      	cmp	r2, #69	@ 0x45
 800fe1a:	d114      	bne.n	800fe46 <_strtod_l+0x19e>
 800fe1c:	b91d      	cbnz	r5, 800fe26 <_strtod_l+0x17e>
 800fe1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe20:	4302      	orrs	r2, r0
 800fe22:	d095      	beq.n	800fd50 <_strtod_l+0xa8>
 800fe24:	2500      	movs	r5, #0
 800fe26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fe28:	1c62      	adds	r2, r4, #1
 800fe2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe2c:	7862      	ldrb	r2, [r4, #1]
 800fe2e:	2a2b      	cmp	r2, #43	@ 0x2b
 800fe30:	d077      	beq.n	800ff22 <_strtod_l+0x27a>
 800fe32:	2a2d      	cmp	r2, #45	@ 0x2d
 800fe34:	d07b      	beq.n	800ff2e <_strtod_l+0x286>
 800fe36:	f04f 0c00 	mov.w	ip, #0
 800fe3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fe3e:	2909      	cmp	r1, #9
 800fe40:	f240 8082 	bls.w	800ff48 <_strtod_l+0x2a0>
 800fe44:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe46:	f04f 0800 	mov.w	r8, #0
 800fe4a:	e0a2      	b.n	800ff92 <_strtod_l+0x2ea>
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	e7c7      	b.n	800fde0 <_strtod_l+0x138>
 800fe50:	2f08      	cmp	r7, #8
 800fe52:	bfd5      	itete	le
 800fe54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fe56:	9908      	ldrgt	r1, [sp, #32]
 800fe58:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fe60:	f100 0001 	add.w	r0, r0, #1
 800fe64:	bfd4      	ite	le
 800fe66:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fe68:	9308      	strgt	r3, [sp, #32]
 800fe6a:	3701      	adds	r7, #1
 800fe6c:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe6e:	e7bf      	b.n	800fdf0 <_strtod_l+0x148>
 800fe70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe72:	1c5a      	adds	r2, r3, #1
 800fe74:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe76:	785a      	ldrb	r2, [r3, #1]
 800fe78:	b37f      	cbz	r7, 800feda <_strtod_l+0x232>
 800fe7a:	4681      	mov	r9, r0
 800fe7c:	463d      	mov	r5, r7
 800fe7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fe82:	2b09      	cmp	r3, #9
 800fe84:	d912      	bls.n	800feac <_strtod_l+0x204>
 800fe86:	2301      	movs	r3, #1
 800fe88:	e7c4      	b.n	800fe14 <_strtod_l+0x16c>
 800fe8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe90:	785a      	ldrb	r2, [r3, #1]
 800fe92:	3001      	adds	r0, #1
 800fe94:	2a30      	cmp	r2, #48	@ 0x30
 800fe96:	d0f8      	beq.n	800fe8a <_strtod_l+0x1e2>
 800fe98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fe9c:	2b08      	cmp	r3, #8
 800fe9e:	f200 84d3 	bhi.w	8010848 <_strtod_l+0xba0>
 800fea2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fea4:	930c      	str	r3, [sp, #48]	@ 0x30
 800fea6:	4681      	mov	r9, r0
 800fea8:	2000      	movs	r0, #0
 800feaa:	4605      	mov	r5, r0
 800feac:	3a30      	subs	r2, #48	@ 0x30
 800feae:	f100 0301 	add.w	r3, r0, #1
 800feb2:	d02a      	beq.n	800ff0a <_strtod_l+0x262>
 800feb4:	4499      	add	r9, r3
 800feb6:	eb00 0c05 	add.w	ip, r0, r5
 800feba:	462b      	mov	r3, r5
 800febc:	210a      	movs	r1, #10
 800febe:	4563      	cmp	r3, ip
 800fec0:	d10d      	bne.n	800fede <_strtod_l+0x236>
 800fec2:	1c69      	adds	r1, r5, #1
 800fec4:	4401      	add	r1, r0
 800fec6:	4428      	add	r0, r5
 800fec8:	2808      	cmp	r0, #8
 800feca:	dc16      	bgt.n	800fefa <_strtod_l+0x252>
 800fecc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fece:	230a      	movs	r3, #10
 800fed0:	fb03 2300 	mla	r3, r3, r0, r2
 800fed4:	930a      	str	r3, [sp, #40]	@ 0x28
 800fed6:	2300      	movs	r3, #0
 800fed8:	e018      	b.n	800ff0c <_strtod_l+0x264>
 800feda:	4638      	mov	r0, r7
 800fedc:	e7da      	b.n	800fe94 <_strtod_l+0x1ec>
 800fede:	2b08      	cmp	r3, #8
 800fee0:	f103 0301 	add.w	r3, r3, #1
 800fee4:	dc03      	bgt.n	800feee <_strtod_l+0x246>
 800fee6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fee8:	434e      	muls	r6, r1
 800feea:	960a      	str	r6, [sp, #40]	@ 0x28
 800feec:	e7e7      	b.n	800febe <_strtod_l+0x216>
 800feee:	2b10      	cmp	r3, #16
 800fef0:	bfde      	ittt	le
 800fef2:	9e08      	ldrle	r6, [sp, #32]
 800fef4:	434e      	mulle	r6, r1
 800fef6:	9608      	strle	r6, [sp, #32]
 800fef8:	e7e1      	b.n	800febe <_strtod_l+0x216>
 800fefa:	280f      	cmp	r0, #15
 800fefc:	dceb      	bgt.n	800fed6 <_strtod_l+0x22e>
 800fefe:	9808      	ldr	r0, [sp, #32]
 800ff00:	230a      	movs	r3, #10
 800ff02:	fb03 2300 	mla	r3, r3, r0, r2
 800ff06:	9308      	str	r3, [sp, #32]
 800ff08:	e7e5      	b.n	800fed6 <_strtod_l+0x22e>
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff0e:	1c50      	adds	r0, r2, #1
 800ff10:	9019      	str	r0, [sp, #100]	@ 0x64
 800ff12:	7852      	ldrb	r2, [r2, #1]
 800ff14:	4618      	mov	r0, r3
 800ff16:	460d      	mov	r5, r1
 800ff18:	e7b1      	b.n	800fe7e <_strtod_l+0x1d6>
 800ff1a:	f04f 0900 	mov.w	r9, #0
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e77d      	b.n	800fe1e <_strtod_l+0x176>
 800ff22:	f04f 0c00 	mov.w	ip, #0
 800ff26:	1ca2      	adds	r2, r4, #2
 800ff28:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff2a:	78a2      	ldrb	r2, [r4, #2]
 800ff2c:	e785      	b.n	800fe3a <_strtod_l+0x192>
 800ff2e:	f04f 0c01 	mov.w	ip, #1
 800ff32:	e7f8      	b.n	800ff26 <_strtod_l+0x27e>
 800ff34:	080147e8 	.word	0x080147e8
 800ff38:	080147d0 	.word	0x080147d0
 800ff3c:	7ff00000 	.word	0x7ff00000
 800ff40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff42:	1c51      	adds	r1, r2, #1
 800ff44:	9119      	str	r1, [sp, #100]	@ 0x64
 800ff46:	7852      	ldrb	r2, [r2, #1]
 800ff48:	2a30      	cmp	r2, #48	@ 0x30
 800ff4a:	d0f9      	beq.n	800ff40 <_strtod_l+0x298>
 800ff4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ff50:	2908      	cmp	r1, #8
 800ff52:	f63f af78 	bhi.w	800fe46 <_strtod_l+0x19e>
 800ff56:	3a30      	subs	r2, #48	@ 0x30
 800ff58:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ff5e:	f04f 080a 	mov.w	r8, #10
 800ff62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff64:	1c56      	adds	r6, r2, #1
 800ff66:	9619      	str	r6, [sp, #100]	@ 0x64
 800ff68:	7852      	ldrb	r2, [r2, #1]
 800ff6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ff6e:	f1be 0f09 	cmp.w	lr, #9
 800ff72:	d939      	bls.n	800ffe8 <_strtod_l+0x340>
 800ff74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff76:	1a76      	subs	r6, r6, r1
 800ff78:	2e08      	cmp	r6, #8
 800ff7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ff7e:	dc03      	bgt.n	800ff88 <_strtod_l+0x2e0>
 800ff80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff82:	4588      	cmp	r8, r1
 800ff84:	bfa8      	it	ge
 800ff86:	4688      	movge	r8, r1
 800ff88:	f1bc 0f00 	cmp.w	ip, #0
 800ff8c:	d001      	beq.n	800ff92 <_strtod_l+0x2ea>
 800ff8e:	f1c8 0800 	rsb	r8, r8, #0
 800ff92:	2d00      	cmp	r5, #0
 800ff94:	d14e      	bne.n	8010034 <_strtod_l+0x38c>
 800ff96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff98:	4308      	orrs	r0, r1
 800ff9a:	f47f aebe 	bne.w	800fd1a <_strtod_l+0x72>
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	f47f aed6 	bne.w	800fd50 <_strtod_l+0xa8>
 800ffa4:	2a69      	cmp	r2, #105	@ 0x69
 800ffa6:	d028      	beq.n	800fffa <_strtod_l+0x352>
 800ffa8:	dc25      	bgt.n	800fff6 <_strtod_l+0x34e>
 800ffaa:	2a49      	cmp	r2, #73	@ 0x49
 800ffac:	d025      	beq.n	800fffa <_strtod_l+0x352>
 800ffae:	2a4e      	cmp	r2, #78	@ 0x4e
 800ffb0:	f47f aece 	bne.w	800fd50 <_strtod_l+0xa8>
 800ffb4:	499b      	ldr	r1, [pc, #620]	@ (8010224 <_strtod_l+0x57c>)
 800ffb6:	a819      	add	r0, sp, #100	@ 0x64
 800ffb8:	f001 f966 	bl	8011288 <__match>
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	f43f aec7 	beq.w	800fd50 <_strtod_l+0xa8>
 800ffc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	2b28      	cmp	r3, #40	@ 0x28
 800ffc8:	d12e      	bne.n	8010028 <_strtod_l+0x380>
 800ffca:	4997      	ldr	r1, [pc, #604]	@ (8010228 <_strtod_l+0x580>)
 800ffcc:	aa1c      	add	r2, sp, #112	@ 0x70
 800ffce:	a819      	add	r0, sp, #100	@ 0x64
 800ffd0:	f001 f96e 	bl	80112b0 <__hexnan>
 800ffd4:	2805      	cmp	r0, #5
 800ffd6:	d127      	bne.n	8010028 <_strtod_l+0x380>
 800ffd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ffde:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ffe2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ffe6:	e698      	b.n	800fd1a <_strtod_l+0x72>
 800ffe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ffea:	fb08 2101 	mla	r1, r8, r1, r2
 800ffee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fff2:	920e      	str	r2, [sp, #56]	@ 0x38
 800fff4:	e7b5      	b.n	800ff62 <_strtod_l+0x2ba>
 800fff6:	2a6e      	cmp	r2, #110	@ 0x6e
 800fff8:	e7da      	b.n	800ffb0 <_strtod_l+0x308>
 800fffa:	498c      	ldr	r1, [pc, #560]	@ (801022c <_strtod_l+0x584>)
 800fffc:	a819      	add	r0, sp, #100	@ 0x64
 800fffe:	f001 f943 	bl	8011288 <__match>
 8010002:	2800      	cmp	r0, #0
 8010004:	f43f aea4 	beq.w	800fd50 <_strtod_l+0xa8>
 8010008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801000a:	4989      	ldr	r1, [pc, #548]	@ (8010230 <_strtod_l+0x588>)
 801000c:	3b01      	subs	r3, #1
 801000e:	a819      	add	r0, sp, #100	@ 0x64
 8010010:	9319      	str	r3, [sp, #100]	@ 0x64
 8010012:	f001 f939 	bl	8011288 <__match>
 8010016:	b910      	cbnz	r0, 801001e <_strtod_l+0x376>
 8010018:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801001a:	3301      	adds	r3, #1
 801001c:	9319      	str	r3, [sp, #100]	@ 0x64
 801001e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010240 <_strtod_l+0x598>
 8010022:	f04f 0a00 	mov.w	sl, #0
 8010026:	e678      	b.n	800fd1a <_strtod_l+0x72>
 8010028:	4882      	ldr	r0, [pc, #520]	@ (8010234 <_strtod_l+0x58c>)
 801002a:	f000 fe69 	bl	8010d00 <nan>
 801002e:	ec5b ab10 	vmov	sl, fp, d0
 8010032:	e672      	b.n	800fd1a <_strtod_l+0x72>
 8010034:	eba8 0309 	sub.w	r3, r8, r9
 8010038:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801003a:	9309      	str	r3, [sp, #36]	@ 0x24
 801003c:	2f00      	cmp	r7, #0
 801003e:	bf08      	it	eq
 8010040:	462f      	moveq	r7, r5
 8010042:	2d10      	cmp	r5, #16
 8010044:	462c      	mov	r4, r5
 8010046:	bfa8      	it	ge
 8010048:	2410      	movge	r4, #16
 801004a:	f7f0 fa6b 	bl	8000524 <__aeabi_ui2d>
 801004e:	2d09      	cmp	r5, #9
 8010050:	4682      	mov	sl, r0
 8010052:	468b      	mov	fp, r1
 8010054:	dc13      	bgt.n	801007e <_strtod_l+0x3d6>
 8010056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010058:	2b00      	cmp	r3, #0
 801005a:	f43f ae5e 	beq.w	800fd1a <_strtod_l+0x72>
 801005e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010060:	dd78      	ble.n	8010154 <_strtod_l+0x4ac>
 8010062:	2b16      	cmp	r3, #22
 8010064:	dc5f      	bgt.n	8010126 <_strtod_l+0x47e>
 8010066:	4974      	ldr	r1, [pc, #464]	@ (8010238 <_strtod_l+0x590>)
 8010068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801006c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010070:	4652      	mov	r2, sl
 8010072:	465b      	mov	r3, fp
 8010074:	f7f0 fad0 	bl	8000618 <__aeabi_dmul>
 8010078:	4682      	mov	sl, r0
 801007a:	468b      	mov	fp, r1
 801007c:	e64d      	b.n	800fd1a <_strtod_l+0x72>
 801007e:	4b6e      	ldr	r3, [pc, #440]	@ (8010238 <_strtod_l+0x590>)
 8010080:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010084:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010088:	f7f0 fac6 	bl	8000618 <__aeabi_dmul>
 801008c:	4682      	mov	sl, r0
 801008e:	9808      	ldr	r0, [sp, #32]
 8010090:	468b      	mov	fp, r1
 8010092:	f7f0 fa47 	bl	8000524 <__aeabi_ui2d>
 8010096:	4602      	mov	r2, r0
 8010098:	460b      	mov	r3, r1
 801009a:	4650      	mov	r0, sl
 801009c:	4659      	mov	r1, fp
 801009e:	f7f0 f905 	bl	80002ac <__adddf3>
 80100a2:	2d0f      	cmp	r5, #15
 80100a4:	4682      	mov	sl, r0
 80100a6:	468b      	mov	fp, r1
 80100a8:	ddd5      	ble.n	8010056 <_strtod_l+0x3ae>
 80100aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ac:	1b2c      	subs	r4, r5, r4
 80100ae:	441c      	add	r4, r3
 80100b0:	2c00      	cmp	r4, #0
 80100b2:	f340 8096 	ble.w	80101e2 <_strtod_l+0x53a>
 80100b6:	f014 030f 	ands.w	r3, r4, #15
 80100ba:	d00a      	beq.n	80100d2 <_strtod_l+0x42a>
 80100bc:	495e      	ldr	r1, [pc, #376]	@ (8010238 <_strtod_l+0x590>)
 80100be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100c2:	4652      	mov	r2, sl
 80100c4:	465b      	mov	r3, fp
 80100c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ca:	f7f0 faa5 	bl	8000618 <__aeabi_dmul>
 80100ce:	4682      	mov	sl, r0
 80100d0:	468b      	mov	fp, r1
 80100d2:	f034 040f 	bics.w	r4, r4, #15
 80100d6:	d073      	beq.n	80101c0 <_strtod_l+0x518>
 80100d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80100dc:	dd48      	ble.n	8010170 <_strtod_l+0x4c8>
 80100de:	2400      	movs	r4, #0
 80100e0:	46a0      	mov	r8, r4
 80100e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80100e4:	46a1      	mov	r9, r4
 80100e6:	9a05      	ldr	r2, [sp, #20]
 80100e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010240 <_strtod_l+0x598>
 80100ec:	2322      	movs	r3, #34	@ 0x22
 80100ee:	6013      	str	r3, [r2, #0]
 80100f0:	f04f 0a00 	mov.w	sl, #0
 80100f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	f43f ae0f 	beq.w	800fd1a <_strtod_l+0x72>
 80100fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100fe:	9805      	ldr	r0, [sp, #20]
 8010100:	f7ff f942 	bl	800f388 <_Bfree>
 8010104:	9805      	ldr	r0, [sp, #20]
 8010106:	4649      	mov	r1, r9
 8010108:	f7ff f93e 	bl	800f388 <_Bfree>
 801010c:	9805      	ldr	r0, [sp, #20]
 801010e:	4641      	mov	r1, r8
 8010110:	f7ff f93a 	bl	800f388 <_Bfree>
 8010114:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010116:	9805      	ldr	r0, [sp, #20]
 8010118:	f7ff f936 	bl	800f388 <_Bfree>
 801011c:	9805      	ldr	r0, [sp, #20]
 801011e:	4621      	mov	r1, r4
 8010120:	f7ff f932 	bl	800f388 <_Bfree>
 8010124:	e5f9      	b.n	800fd1a <_strtod_l+0x72>
 8010126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010128:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801012c:	4293      	cmp	r3, r2
 801012e:	dbbc      	blt.n	80100aa <_strtod_l+0x402>
 8010130:	4c41      	ldr	r4, [pc, #260]	@ (8010238 <_strtod_l+0x590>)
 8010132:	f1c5 050f 	rsb	r5, r5, #15
 8010136:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801013a:	4652      	mov	r2, sl
 801013c:	465b      	mov	r3, fp
 801013e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010142:	f7f0 fa69 	bl	8000618 <__aeabi_dmul>
 8010146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010148:	1b5d      	subs	r5, r3, r5
 801014a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801014e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010152:	e78f      	b.n	8010074 <_strtod_l+0x3cc>
 8010154:	3316      	adds	r3, #22
 8010156:	dba8      	blt.n	80100aa <_strtod_l+0x402>
 8010158:	4b37      	ldr	r3, [pc, #220]	@ (8010238 <_strtod_l+0x590>)
 801015a:	eba9 0808 	sub.w	r8, r9, r8
 801015e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010162:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010166:	4650      	mov	r0, sl
 8010168:	4659      	mov	r1, fp
 801016a:	f7f0 fb7f 	bl	800086c <__aeabi_ddiv>
 801016e:	e783      	b.n	8010078 <_strtod_l+0x3d0>
 8010170:	4b32      	ldr	r3, [pc, #200]	@ (801023c <_strtod_l+0x594>)
 8010172:	9308      	str	r3, [sp, #32]
 8010174:	2300      	movs	r3, #0
 8010176:	1124      	asrs	r4, r4, #4
 8010178:	4650      	mov	r0, sl
 801017a:	4659      	mov	r1, fp
 801017c:	461e      	mov	r6, r3
 801017e:	2c01      	cmp	r4, #1
 8010180:	dc21      	bgt.n	80101c6 <_strtod_l+0x51e>
 8010182:	b10b      	cbz	r3, 8010188 <_strtod_l+0x4e0>
 8010184:	4682      	mov	sl, r0
 8010186:	468b      	mov	fp, r1
 8010188:	492c      	ldr	r1, [pc, #176]	@ (801023c <_strtod_l+0x594>)
 801018a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801018e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010192:	4652      	mov	r2, sl
 8010194:	465b      	mov	r3, fp
 8010196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801019a:	f7f0 fa3d 	bl	8000618 <__aeabi_dmul>
 801019e:	4b28      	ldr	r3, [pc, #160]	@ (8010240 <_strtod_l+0x598>)
 80101a0:	460a      	mov	r2, r1
 80101a2:	400b      	ands	r3, r1
 80101a4:	4927      	ldr	r1, [pc, #156]	@ (8010244 <_strtod_l+0x59c>)
 80101a6:	428b      	cmp	r3, r1
 80101a8:	4682      	mov	sl, r0
 80101aa:	d898      	bhi.n	80100de <_strtod_l+0x436>
 80101ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80101b0:	428b      	cmp	r3, r1
 80101b2:	bf86      	itte	hi
 80101b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010248 <_strtod_l+0x5a0>
 80101b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80101bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80101c0:	2300      	movs	r3, #0
 80101c2:	9308      	str	r3, [sp, #32]
 80101c4:	e07a      	b.n	80102bc <_strtod_l+0x614>
 80101c6:	07e2      	lsls	r2, r4, #31
 80101c8:	d505      	bpl.n	80101d6 <_strtod_l+0x52e>
 80101ca:	9b08      	ldr	r3, [sp, #32]
 80101cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d0:	f7f0 fa22 	bl	8000618 <__aeabi_dmul>
 80101d4:	2301      	movs	r3, #1
 80101d6:	9a08      	ldr	r2, [sp, #32]
 80101d8:	3208      	adds	r2, #8
 80101da:	3601      	adds	r6, #1
 80101dc:	1064      	asrs	r4, r4, #1
 80101de:	9208      	str	r2, [sp, #32]
 80101e0:	e7cd      	b.n	801017e <_strtod_l+0x4d6>
 80101e2:	d0ed      	beq.n	80101c0 <_strtod_l+0x518>
 80101e4:	4264      	negs	r4, r4
 80101e6:	f014 020f 	ands.w	r2, r4, #15
 80101ea:	d00a      	beq.n	8010202 <_strtod_l+0x55a>
 80101ec:	4b12      	ldr	r3, [pc, #72]	@ (8010238 <_strtod_l+0x590>)
 80101ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101f2:	4650      	mov	r0, sl
 80101f4:	4659      	mov	r1, fp
 80101f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fa:	f7f0 fb37 	bl	800086c <__aeabi_ddiv>
 80101fe:	4682      	mov	sl, r0
 8010200:	468b      	mov	fp, r1
 8010202:	1124      	asrs	r4, r4, #4
 8010204:	d0dc      	beq.n	80101c0 <_strtod_l+0x518>
 8010206:	2c1f      	cmp	r4, #31
 8010208:	dd20      	ble.n	801024c <_strtod_l+0x5a4>
 801020a:	2400      	movs	r4, #0
 801020c:	46a0      	mov	r8, r4
 801020e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010210:	46a1      	mov	r9, r4
 8010212:	9a05      	ldr	r2, [sp, #20]
 8010214:	2322      	movs	r3, #34	@ 0x22
 8010216:	f04f 0a00 	mov.w	sl, #0
 801021a:	f04f 0b00 	mov.w	fp, #0
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	e768      	b.n	80100f4 <_strtod_l+0x44c>
 8010222:	bf00      	nop
 8010224:	080145c2 	.word	0x080145c2
 8010228:	080147d4 	.word	0x080147d4
 801022c:	080145ba 	.word	0x080145ba
 8010230:	080145f1 	.word	0x080145f1
 8010234:	0801487c 	.word	0x0801487c
 8010238:	08014708 	.word	0x08014708
 801023c:	080146e0 	.word	0x080146e0
 8010240:	7ff00000 	.word	0x7ff00000
 8010244:	7ca00000 	.word	0x7ca00000
 8010248:	7fefffff 	.word	0x7fefffff
 801024c:	f014 0310 	ands.w	r3, r4, #16
 8010250:	bf18      	it	ne
 8010252:	236a      	movne	r3, #106	@ 0x6a
 8010254:	4ea9      	ldr	r6, [pc, #676]	@ (80104fc <_strtod_l+0x854>)
 8010256:	9308      	str	r3, [sp, #32]
 8010258:	4650      	mov	r0, sl
 801025a:	4659      	mov	r1, fp
 801025c:	2300      	movs	r3, #0
 801025e:	07e2      	lsls	r2, r4, #31
 8010260:	d504      	bpl.n	801026c <_strtod_l+0x5c4>
 8010262:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010266:	f7f0 f9d7 	bl	8000618 <__aeabi_dmul>
 801026a:	2301      	movs	r3, #1
 801026c:	1064      	asrs	r4, r4, #1
 801026e:	f106 0608 	add.w	r6, r6, #8
 8010272:	d1f4      	bne.n	801025e <_strtod_l+0x5b6>
 8010274:	b10b      	cbz	r3, 801027a <_strtod_l+0x5d2>
 8010276:	4682      	mov	sl, r0
 8010278:	468b      	mov	fp, r1
 801027a:	9b08      	ldr	r3, [sp, #32]
 801027c:	b1b3      	cbz	r3, 80102ac <_strtod_l+0x604>
 801027e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010282:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010286:	2b00      	cmp	r3, #0
 8010288:	4659      	mov	r1, fp
 801028a:	dd0f      	ble.n	80102ac <_strtod_l+0x604>
 801028c:	2b1f      	cmp	r3, #31
 801028e:	dd55      	ble.n	801033c <_strtod_l+0x694>
 8010290:	2b34      	cmp	r3, #52	@ 0x34
 8010292:	bfde      	ittt	le
 8010294:	f04f 33ff 	movle.w	r3, #4294967295
 8010298:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801029c:	4093      	lslle	r3, r2
 801029e:	f04f 0a00 	mov.w	sl, #0
 80102a2:	bfcc      	ite	gt
 80102a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80102a8:	ea03 0b01 	andle.w	fp, r3, r1
 80102ac:	2200      	movs	r2, #0
 80102ae:	2300      	movs	r3, #0
 80102b0:	4650      	mov	r0, sl
 80102b2:	4659      	mov	r1, fp
 80102b4:	f7f0 fc18 	bl	8000ae8 <__aeabi_dcmpeq>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d1a6      	bne.n	801020a <_strtod_l+0x562>
 80102bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102c2:	9805      	ldr	r0, [sp, #20]
 80102c4:	462b      	mov	r3, r5
 80102c6:	463a      	mov	r2, r7
 80102c8:	f7ff f8c6 	bl	800f458 <__s2b>
 80102cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80102ce:	2800      	cmp	r0, #0
 80102d0:	f43f af05 	beq.w	80100de <_strtod_l+0x436>
 80102d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102d6:	2a00      	cmp	r2, #0
 80102d8:	eba9 0308 	sub.w	r3, r9, r8
 80102dc:	bfa8      	it	ge
 80102de:	2300      	movge	r3, #0
 80102e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80102e2:	2400      	movs	r4, #0
 80102e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80102ea:	46a0      	mov	r8, r4
 80102ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102ee:	9805      	ldr	r0, [sp, #20]
 80102f0:	6859      	ldr	r1, [r3, #4]
 80102f2:	f7ff f809 	bl	800f308 <_Balloc>
 80102f6:	4681      	mov	r9, r0
 80102f8:	2800      	cmp	r0, #0
 80102fa:	f43f aef4 	beq.w	80100e6 <_strtod_l+0x43e>
 80102fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010300:	691a      	ldr	r2, [r3, #16]
 8010302:	3202      	adds	r2, #2
 8010304:	f103 010c 	add.w	r1, r3, #12
 8010308:	0092      	lsls	r2, r2, #2
 801030a:	300c      	adds	r0, #12
 801030c:	f7fe f899 	bl	800e442 <memcpy>
 8010310:	ec4b ab10 	vmov	d0, sl, fp
 8010314:	9805      	ldr	r0, [sp, #20]
 8010316:	aa1c      	add	r2, sp, #112	@ 0x70
 8010318:	a91b      	add	r1, sp, #108	@ 0x6c
 801031a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801031e:	f7ff fbd7 	bl	800fad0 <__d2b>
 8010322:	901a      	str	r0, [sp, #104]	@ 0x68
 8010324:	2800      	cmp	r0, #0
 8010326:	f43f aede 	beq.w	80100e6 <_strtod_l+0x43e>
 801032a:	9805      	ldr	r0, [sp, #20]
 801032c:	2101      	movs	r1, #1
 801032e:	f7ff f929 	bl	800f584 <__i2b>
 8010332:	4680      	mov	r8, r0
 8010334:	b948      	cbnz	r0, 801034a <_strtod_l+0x6a2>
 8010336:	f04f 0800 	mov.w	r8, #0
 801033a:	e6d4      	b.n	80100e6 <_strtod_l+0x43e>
 801033c:	f04f 32ff 	mov.w	r2, #4294967295
 8010340:	fa02 f303 	lsl.w	r3, r2, r3
 8010344:	ea03 0a0a 	and.w	sl, r3, sl
 8010348:	e7b0      	b.n	80102ac <_strtod_l+0x604>
 801034a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801034c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801034e:	2d00      	cmp	r5, #0
 8010350:	bfab      	itete	ge
 8010352:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010354:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010356:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010358:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801035a:	bfac      	ite	ge
 801035c:	18ef      	addge	r7, r5, r3
 801035e:	1b5e      	sublt	r6, r3, r5
 8010360:	9b08      	ldr	r3, [sp, #32]
 8010362:	1aed      	subs	r5, r5, r3
 8010364:	4415      	add	r5, r2
 8010366:	4b66      	ldr	r3, [pc, #408]	@ (8010500 <_strtod_l+0x858>)
 8010368:	3d01      	subs	r5, #1
 801036a:	429d      	cmp	r5, r3
 801036c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010370:	da50      	bge.n	8010414 <_strtod_l+0x76c>
 8010372:	1b5b      	subs	r3, r3, r5
 8010374:	2b1f      	cmp	r3, #31
 8010376:	eba2 0203 	sub.w	r2, r2, r3
 801037a:	f04f 0101 	mov.w	r1, #1
 801037e:	dc3d      	bgt.n	80103fc <_strtod_l+0x754>
 8010380:	fa01 f303 	lsl.w	r3, r1, r3
 8010384:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010386:	2300      	movs	r3, #0
 8010388:	9310      	str	r3, [sp, #64]	@ 0x40
 801038a:	18bd      	adds	r5, r7, r2
 801038c:	9b08      	ldr	r3, [sp, #32]
 801038e:	42af      	cmp	r7, r5
 8010390:	4416      	add	r6, r2
 8010392:	441e      	add	r6, r3
 8010394:	463b      	mov	r3, r7
 8010396:	bfa8      	it	ge
 8010398:	462b      	movge	r3, r5
 801039a:	42b3      	cmp	r3, r6
 801039c:	bfa8      	it	ge
 801039e:	4633      	movge	r3, r6
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	bfc2      	ittt	gt
 80103a4:	1aed      	subgt	r5, r5, r3
 80103a6:	1af6      	subgt	r6, r6, r3
 80103a8:	1aff      	subgt	r7, r7, r3
 80103aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	dd16      	ble.n	80103de <_strtod_l+0x736>
 80103b0:	4641      	mov	r1, r8
 80103b2:	9805      	ldr	r0, [sp, #20]
 80103b4:	461a      	mov	r2, r3
 80103b6:	f7ff f9a5 	bl	800f704 <__pow5mult>
 80103ba:	4680      	mov	r8, r0
 80103bc:	2800      	cmp	r0, #0
 80103be:	d0ba      	beq.n	8010336 <_strtod_l+0x68e>
 80103c0:	4601      	mov	r1, r0
 80103c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80103c4:	9805      	ldr	r0, [sp, #20]
 80103c6:	f7ff f8f3 	bl	800f5b0 <__multiply>
 80103ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80103cc:	2800      	cmp	r0, #0
 80103ce:	f43f ae8a 	beq.w	80100e6 <_strtod_l+0x43e>
 80103d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80103d4:	9805      	ldr	r0, [sp, #20]
 80103d6:	f7fe ffd7 	bl	800f388 <_Bfree>
 80103da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80103de:	2d00      	cmp	r5, #0
 80103e0:	dc1d      	bgt.n	801041e <_strtod_l+0x776>
 80103e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	dd23      	ble.n	8010430 <_strtod_l+0x788>
 80103e8:	4649      	mov	r1, r9
 80103ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80103ec:	9805      	ldr	r0, [sp, #20]
 80103ee:	f7ff f989 	bl	800f704 <__pow5mult>
 80103f2:	4681      	mov	r9, r0
 80103f4:	b9e0      	cbnz	r0, 8010430 <_strtod_l+0x788>
 80103f6:	f04f 0900 	mov.w	r9, #0
 80103fa:	e674      	b.n	80100e6 <_strtod_l+0x43e>
 80103fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010400:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010404:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010408:	35e2      	adds	r5, #226	@ 0xe2
 801040a:	fa01 f305 	lsl.w	r3, r1, r5
 801040e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010410:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010412:	e7ba      	b.n	801038a <_strtod_l+0x6e2>
 8010414:	2300      	movs	r3, #0
 8010416:	9310      	str	r3, [sp, #64]	@ 0x40
 8010418:	2301      	movs	r3, #1
 801041a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801041c:	e7b5      	b.n	801038a <_strtod_l+0x6e2>
 801041e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010420:	9805      	ldr	r0, [sp, #20]
 8010422:	462a      	mov	r2, r5
 8010424:	f7ff f9c8 	bl	800f7b8 <__lshift>
 8010428:	901a      	str	r0, [sp, #104]	@ 0x68
 801042a:	2800      	cmp	r0, #0
 801042c:	d1d9      	bne.n	80103e2 <_strtod_l+0x73a>
 801042e:	e65a      	b.n	80100e6 <_strtod_l+0x43e>
 8010430:	2e00      	cmp	r6, #0
 8010432:	dd07      	ble.n	8010444 <_strtod_l+0x79c>
 8010434:	4649      	mov	r1, r9
 8010436:	9805      	ldr	r0, [sp, #20]
 8010438:	4632      	mov	r2, r6
 801043a:	f7ff f9bd 	bl	800f7b8 <__lshift>
 801043e:	4681      	mov	r9, r0
 8010440:	2800      	cmp	r0, #0
 8010442:	d0d8      	beq.n	80103f6 <_strtod_l+0x74e>
 8010444:	2f00      	cmp	r7, #0
 8010446:	dd08      	ble.n	801045a <_strtod_l+0x7b2>
 8010448:	4641      	mov	r1, r8
 801044a:	9805      	ldr	r0, [sp, #20]
 801044c:	463a      	mov	r2, r7
 801044e:	f7ff f9b3 	bl	800f7b8 <__lshift>
 8010452:	4680      	mov	r8, r0
 8010454:	2800      	cmp	r0, #0
 8010456:	f43f ae46 	beq.w	80100e6 <_strtod_l+0x43e>
 801045a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801045c:	9805      	ldr	r0, [sp, #20]
 801045e:	464a      	mov	r2, r9
 8010460:	f7ff fa32 	bl	800f8c8 <__mdiff>
 8010464:	4604      	mov	r4, r0
 8010466:	2800      	cmp	r0, #0
 8010468:	f43f ae3d 	beq.w	80100e6 <_strtod_l+0x43e>
 801046c:	68c3      	ldr	r3, [r0, #12]
 801046e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010470:	2300      	movs	r3, #0
 8010472:	60c3      	str	r3, [r0, #12]
 8010474:	4641      	mov	r1, r8
 8010476:	f7ff fa0b 	bl	800f890 <__mcmp>
 801047a:	2800      	cmp	r0, #0
 801047c:	da46      	bge.n	801050c <_strtod_l+0x864>
 801047e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010480:	ea53 030a 	orrs.w	r3, r3, sl
 8010484:	d16c      	bne.n	8010560 <_strtod_l+0x8b8>
 8010486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801048a:	2b00      	cmp	r3, #0
 801048c:	d168      	bne.n	8010560 <_strtod_l+0x8b8>
 801048e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010492:	0d1b      	lsrs	r3, r3, #20
 8010494:	051b      	lsls	r3, r3, #20
 8010496:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801049a:	d961      	bls.n	8010560 <_strtod_l+0x8b8>
 801049c:	6963      	ldr	r3, [r4, #20]
 801049e:	b913      	cbnz	r3, 80104a6 <_strtod_l+0x7fe>
 80104a0:	6923      	ldr	r3, [r4, #16]
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	dd5c      	ble.n	8010560 <_strtod_l+0x8b8>
 80104a6:	4621      	mov	r1, r4
 80104a8:	2201      	movs	r2, #1
 80104aa:	9805      	ldr	r0, [sp, #20]
 80104ac:	f7ff f984 	bl	800f7b8 <__lshift>
 80104b0:	4641      	mov	r1, r8
 80104b2:	4604      	mov	r4, r0
 80104b4:	f7ff f9ec 	bl	800f890 <__mcmp>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	dd51      	ble.n	8010560 <_strtod_l+0x8b8>
 80104bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104c0:	9a08      	ldr	r2, [sp, #32]
 80104c2:	0d1b      	lsrs	r3, r3, #20
 80104c4:	051b      	lsls	r3, r3, #20
 80104c6:	2a00      	cmp	r2, #0
 80104c8:	d06b      	beq.n	80105a2 <_strtod_l+0x8fa>
 80104ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104ce:	d868      	bhi.n	80105a2 <_strtod_l+0x8fa>
 80104d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80104d4:	f67f ae9d 	bls.w	8010212 <_strtod_l+0x56a>
 80104d8:	4b0a      	ldr	r3, [pc, #40]	@ (8010504 <_strtod_l+0x85c>)
 80104da:	4650      	mov	r0, sl
 80104dc:	4659      	mov	r1, fp
 80104de:	2200      	movs	r2, #0
 80104e0:	f7f0 f89a 	bl	8000618 <__aeabi_dmul>
 80104e4:	4b08      	ldr	r3, [pc, #32]	@ (8010508 <_strtod_l+0x860>)
 80104e6:	400b      	ands	r3, r1
 80104e8:	4682      	mov	sl, r0
 80104ea:	468b      	mov	fp, r1
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f47f ae05 	bne.w	80100fc <_strtod_l+0x454>
 80104f2:	9a05      	ldr	r2, [sp, #20]
 80104f4:	2322      	movs	r3, #34	@ 0x22
 80104f6:	6013      	str	r3, [r2, #0]
 80104f8:	e600      	b.n	80100fc <_strtod_l+0x454>
 80104fa:	bf00      	nop
 80104fc:	08014800 	.word	0x08014800
 8010500:	fffffc02 	.word	0xfffffc02
 8010504:	39500000 	.word	0x39500000
 8010508:	7ff00000 	.word	0x7ff00000
 801050c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010510:	d165      	bne.n	80105de <_strtod_l+0x936>
 8010512:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010518:	b35a      	cbz	r2, 8010572 <_strtod_l+0x8ca>
 801051a:	4a9f      	ldr	r2, [pc, #636]	@ (8010798 <_strtod_l+0xaf0>)
 801051c:	4293      	cmp	r3, r2
 801051e:	d12b      	bne.n	8010578 <_strtod_l+0x8d0>
 8010520:	9b08      	ldr	r3, [sp, #32]
 8010522:	4651      	mov	r1, sl
 8010524:	b303      	cbz	r3, 8010568 <_strtod_l+0x8c0>
 8010526:	4b9d      	ldr	r3, [pc, #628]	@ (801079c <_strtod_l+0xaf4>)
 8010528:	465a      	mov	r2, fp
 801052a:	4013      	ands	r3, r2
 801052c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010530:	f04f 32ff 	mov.w	r2, #4294967295
 8010534:	d81b      	bhi.n	801056e <_strtod_l+0x8c6>
 8010536:	0d1b      	lsrs	r3, r3, #20
 8010538:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801053c:	fa02 f303 	lsl.w	r3, r2, r3
 8010540:	4299      	cmp	r1, r3
 8010542:	d119      	bne.n	8010578 <_strtod_l+0x8d0>
 8010544:	4b96      	ldr	r3, [pc, #600]	@ (80107a0 <_strtod_l+0xaf8>)
 8010546:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010548:	429a      	cmp	r2, r3
 801054a:	d102      	bne.n	8010552 <_strtod_l+0x8aa>
 801054c:	3101      	adds	r1, #1
 801054e:	f43f adca 	beq.w	80100e6 <_strtod_l+0x43e>
 8010552:	4b92      	ldr	r3, [pc, #584]	@ (801079c <_strtod_l+0xaf4>)
 8010554:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010556:	401a      	ands	r2, r3
 8010558:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801055c:	f04f 0a00 	mov.w	sl, #0
 8010560:	9b08      	ldr	r3, [sp, #32]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1b8      	bne.n	80104d8 <_strtod_l+0x830>
 8010566:	e5c9      	b.n	80100fc <_strtod_l+0x454>
 8010568:	f04f 33ff 	mov.w	r3, #4294967295
 801056c:	e7e8      	b.n	8010540 <_strtod_l+0x898>
 801056e:	4613      	mov	r3, r2
 8010570:	e7e6      	b.n	8010540 <_strtod_l+0x898>
 8010572:	ea53 030a 	orrs.w	r3, r3, sl
 8010576:	d0a1      	beq.n	80104bc <_strtod_l+0x814>
 8010578:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801057a:	b1db      	cbz	r3, 80105b4 <_strtod_l+0x90c>
 801057c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801057e:	4213      	tst	r3, r2
 8010580:	d0ee      	beq.n	8010560 <_strtod_l+0x8b8>
 8010582:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010584:	9a08      	ldr	r2, [sp, #32]
 8010586:	4650      	mov	r0, sl
 8010588:	4659      	mov	r1, fp
 801058a:	b1bb      	cbz	r3, 80105bc <_strtod_l+0x914>
 801058c:	f7ff fb6e 	bl	800fc6c <sulp>
 8010590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010594:	ec53 2b10 	vmov	r2, r3, d0
 8010598:	f7ef fe88 	bl	80002ac <__adddf3>
 801059c:	4682      	mov	sl, r0
 801059e:	468b      	mov	fp, r1
 80105a0:	e7de      	b.n	8010560 <_strtod_l+0x8b8>
 80105a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80105a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80105aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80105ae:	f04f 3aff 	mov.w	sl, #4294967295
 80105b2:	e7d5      	b.n	8010560 <_strtod_l+0x8b8>
 80105b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105b6:	ea13 0f0a 	tst.w	r3, sl
 80105ba:	e7e1      	b.n	8010580 <_strtod_l+0x8d8>
 80105bc:	f7ff fb56 	bl	800fc6c <sulp>
 80105c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105c4:	ec53 2b10 	vmov	r2, r3, d0
 80105c8:	f7ef fe6e 	bl	80002a8 <__aeabi_dsub>
 80105cc:	2200      	movs	r2, #0
 80105ce:	2300      	movs	r3, #0
 80105d0:	4682      	mov	sl, r0
 80105d2:	468b      	mov	fp, r1
 80105d4:	f7f0 fa88 	bl	8000ae8 <__aeabi_dcmpeq>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d0c1      	beq.n	8010560 <_strtod_l+0x8b8>
 80105dc:	e619      	b.n	8010212 <_strtod_l+0x56a>
 80105de:	4641      	mov	r1, r8
 80105e0:	4620      	mov	r0, r4
 80105e2:	f7ff facd 	bl	800fb80 <__ratio>
 80105e6:	ec57 6b10 	vmov	r6, r7, d0
 80105ea:	2200      	movs	r2, #0
 80105ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80105f0:	4630      	mov	r0, r6
 80105f2:	4639      	mov	r1, r7
 80105f4:	f7f0 fa8c 	bl	8000b10 <__aeabi_dcmple>
 80105f8:	2800      	cmp	r0, #0
 80105fa:	d06f      	beq.n	80106dc <_strtod_l+0xa34>
 80105fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d17a      	bne.n	80106f8 <_strtod_l+0xa50>
 8010602:	f1ba 0f00 	cmp.w	sl, #0
 8010606:	d158      	bne.n	80106ba <_strtod_l+0xa12>
 8010608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801060a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801060e:	2b00      	cmp	r3, #0
 8010610:	d15a      	bne.n	80106c8 <_strtod_l+0xa20>
 8010612:	4b64      	ldr	r3, [pc, #400]	@ (80107a4 <_strtod_l+0xafc>)
 8010614:	2200      	movs	r2, #0
 8010616:	4630      	mov	r0, r6
 8010618:	4639      	mov	r1, r7
 801061a:	f7f0 fa6f 	bl	8000afc <__aeabi_dcmplt>
 801061e:	2800      	cmp	r0, #0
 8010620:	d159      	bne.n	80106d6 <_strtod_l+0xa2e>
 8010622:	4630      	mov	r0, r6
 8010624:	4639      	mov	r1, r7
 8010626:	4b60      	ldr	r3, [pc, #384]	@ (80107a8 <_strtod_l+0xb00>)
 8010628:	2200      	movs	r2, #0
 801062a:	f7ef fff5 	bl	8000618 <__aeabi_dmul>
 801062e:	4606      	mov	r6, r0
 8010630:	460f      	mov	r7, r1
 8010632:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010636:	9606      	str	r6, [sp, #24]
 8010638:	9307      	str	r3, [sp, #28]
 801063a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801063e:	4d57      	ldr	r5, [pc, #348]	@ (801079c <_strtod_l+0xaf4>)
 8010640:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010646:	401d      	ands	r5, r3
 8010648:	4b58      	ldr	r3, [pc, #352]	@ (80107ac <_strtod_l+0xb04>)
 801064a:	429d      	cmp	r5, r3
 801064c:	f040 80b2 	bne.w	80107b4 <_strtod_l+0xb0c>
 8010650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010652:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010656:	ec4b ab10 	vmov	d0, sl, fp
 801065a:	f7ff f9c9 	bl	800f9f0 <__ulp>
 801065e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010662:	ec51 0b10 	vmov	r0, r1, d0
 8010666:	f7ef ffd7 	bl	8000618 <__aeabi_dmul>
 801066a:	4652      	mov	r2, sl
 801066c:	465b      	mov	r3, fp
 801066e:	f7ef fe1d 	bl	80002ac <__adddf3>
 8010672:	460b      	mov	r3, r1
 8010674:	4949      	ldr	r1, [pc, #292]	@ (801079c <_strtod_l+0xaf4>)
 8010676:	4a4e      	ldr	r2, [pc, #312]	@ (80107b0 <_strtod_l+0xb08>)
 8010678:	4019      	ands	r1, r3
 801067a:	4291      	cmp	r1, r2
 801067c:	4682      	mov	sl, r0
 801067e:	d942      	bls.n	8010706 <_strtod_l+0xa5e>
 8010680:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010682:	4b47      	ldr	r3, [pc, #284]	@ (80107a0 <_strtod_l+0xaf8>)
 8010684:	429a      	cmp	r2, r3
 8010686:	d103      	bne.n	8010690 <_strtod_l+0x9e8>
 8010688:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801068a:	3301      	adds	r3, #1
 801068c:	f43f ad2b 	beq.w	80100e6 <_strtod_l+0x43e>
 8010690:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80107a0 <_strtod_l+0xaf8>
 8010694:	f04f 3aff 	mov.w	sl, #4294967295
 8010698:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801069a:	9805      	ldr	r0, [sp, #20]
 801069c:	f7fe fe74 	bl	800f388 <_Bfree>
 80106a0:	9805      	ldr	r0, [sp, #20]
 80106a2:	4649      	mov	r1, r9
 80106a4:	f7fe fe70 	bl	800f388 <_Bfree>
 80106a8:	9805      	ldr	r0, [sp, #20]
 80106aa:	4641      	mov	r1, r8
 80106ac:	f7fe fe6c 	bl	800f388 <_Bfree>
 80106b0:	9805      	ldr	r0, [sp, #20]
 80106b2:	4621      	mov	r1, r4
 80106b4:	f7fe fe68 	bl	800f388 <_Bfree>
 80106b8:	e618      	b.n	80102ec <_strtod_l+0x644>
 80106ba:	f1ba 0f01 	cmp.w	sl, #1
 80106be:	d103      	bne.n	80106c8 <_strtod_l+0xa20>
 80106c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f43f ada5 	beq.w	8010212 <_strtod_l+0x56a>
 80106c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010778 <_strtod_l+0xad0>
 80106cc:	4f35      	ldr	r7, [pc, #212]	@ (80107a4 <_strtod_l+0xafc>)
 80106ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106d2:	2600      	movs	r6, #0
 80106d4:	e7b1      	b.n	801063a <_strtod_l+0x992>
 80106d6:	4f34      	ldr	r7, [pc, #208]	@ (80107a8 <_strtod_l+0xb00>)
 80106d8:	2600      	movs	r6, #0
 80106da:	e7aa      	b.n	8010632 <_strtod_l+0x98a>
 80106dc:	4b32      	ldr	r3, [pc, #200]	@ (80107a8 <_strtod_l+0xb00>)
 80106de:	4630      	mov	r0, r6
 80106e0:	4639      	mov	r1, r7
 80106e2:	2200      	movs	r2, #0
 80106e4:	f7ef ff98 	bl	8000618 <__aeabi_dmul>
 80106e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106ea:	4606      	mov	r6, r0
 80106ec:	460f      	mov	r7, r1
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d09f      	beq.n	8010632 <_strtod_l+0x98a>
 80106f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80106f6:	e7a0      	b.n	801063a <_strtod_l+0x992>
 80106f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010780 <_strtod_l+0xad8>
 80106fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010700:	ec57 6b17 	vmov	r6, r7, d7
 8010704:	e799      	b.n	801063a <_strtod_l+0x992>
 8010706:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801070a:	9b08      	ldr	r3, [sp, #32]
 801070c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010710:	2b00      	cmp	r3, #0
 8010712:	d1c1      	bne.n	8010698 <_strtod_l+0x9f0>
 8010714:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010718:	0d1b      	lsrs	r3, r3, #20
 801071a:	051b      	lsls	r3, r3, #20
 801071c:	429d      	cmp	r5, r3
 801071e:	d1bb      	bne.n	8010698 <_strtod_l+0x9f0>
 8010720:	4630      	mov	r0, r6
 8010722:	4639      	mov	r1, r7
 8010724:	f7f0 fad8 	bl	8000cd8 <__aeabi_d2lz>
 8010728:	f7ef ff48 	bl	80005bc <__aeabi_l2d>
 801072c:	4602      	mov	r2, r0
 801072e:	460b      	mov	r3, r1
 8010730:	4630      	mov	r0, r6
 8010732:	4639      	mov	r1, r7
 8010734:	f7ef fdb8 	bl	80002a8 <__aeabi_dsub>
 8010738:	460b      	mov	r3, r1
 801073a:	4602      	mov	r2, r0
 801073c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010740:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010746:	ea46 060a 	orr.w	r6, r6, sl
 801074a:	431e      	orrs	r6, r3
 801074c:	d06f      	beq.n	801082e <_strtod_l+0xb86>
 801074e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010788 <_strtod_l+0xae0>)
 8010750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010754:	f7f0 f9d2 	bl	8000afc <__aeabi_dcmplt>
 8010758:	2800      	cmp	r0, #0
 801075a:	f47f accf 	bne.w	80100fc <_strtod_l+0x454>
 801075e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010790 <_strtod_l+0xae8>)
 8010760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010764:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010768:	f7f0 f9e6 	bl	8000b38 <__aeabi_dcmpgt>
 801076c:	2800      	cmp	r0, #0
 801076e:	d093      	beq.n	8010698 <_strtod_l+0x9f0>
 8010770:	e4c4      	b.n	80100fc <_strtod_l+0x454>
 8010772:	bf00      	nop
 8010774:	f3af 8000 	nop.w
 8010778:	00000000 	.word	0x00000000
 801077c:	bff00000 	.word	0xbff00000
 8010780:	00000000 	.word	0x00000000
 8010784:	3ff00000 	.word	0x3ff00000
 8010788:	94a03595 	.word	0x94a03595
 801078c:	3fdfffff 	.word	0x3fdfffff
 8010790:	35afe535 	.word	0x35afe535
 8010794:	3fe00000 	.word	0x3fe00000
 8010798:	000fffff 	.word	0x000fffff
 801079c:	7ff00000 	.word	0x7ff00000
 80107a0:	7fefffff 	.word	0x7fefffff
 80107a4:	3ff00000 	.word	0x3ff00000
 80107a8:	3fe00000 	.word	0x3fe00000
 80107ac:	7fe00000 	.word	0x7fe00000
 80107b0:	7c9fffff 	.word	0x7c9fffff
 80107b4:	9b08      	ldr	r3, [sp, #32]
 80107b6:	b323      	cbz	r3, 8010802 <_strtod_l+0xb5a>
 80107b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80107bc:	d821      	bhi.n	8010802 <_strtod_l+0xb5a>
 80107be:	a328      	add	r3, pc, #160	@ (adr r3, 8010860 <_strtod_l+0xbb8>)
 80107c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c4:	4630      	mov	r0, r6
 80107c6:	4639      	mov	r1, r7
 80107c8:	f7f0 f9a2 	bl	8000b10 <__aeabi_dcmple>
 80107cc:	b1a0      	cbz	r0, 80107f8 <_strtod_l+0xb50>
 80107ce:	4639      	mov	r1, r7
 80107d0:	4630      	mov	r0, r6
 80107d2:	f7f0 f9f9 	bl	8000bc8 <__aeabi_d2uiz>
 80107d6:	2801      	cmp	r0, #1
 80107d8:	bf38      	it	cc
 80107da:	2001      	movcc	r0, #1
 80107dc:	f7ef fea2 	bl	8000524 <__aeabi_ui2d>
 80107e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107e2:	4606      	mov	r6, r0
 80107e4:	460f      	mov	r7, r1
 80107e6:	b9fb      	cbnz	r3, 8010828 <_strtod_l+0xb80>
 80107e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80107ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80107ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80107f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80107f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80107f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80107fe:	1b5b      	subs	r3, r3, r5
 8010800:	9311      	str	r3, [sp, #68]	@ 0x44
 8010802:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010806:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801080a:	f7ff f8f1 	bl	800f9f0 <__ulp>
 801080e:	4650      	mov	r0, sl
 8010810:	ec53 2b10 	vmov	r2, r3, d0
 8010814:	4659      	mov	r1, fp
 8010816:	f7ef feff 	bl	8000618 <__aeabi_dmul>
 801081a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801081e:	f7ef fd45 	bl	80002ac <__adddf3>
 8010822:	4682      	mov	sl, r0
 8010824:	468b      	mov	fp, r1
 8010826:	e770      	b.n	801070a <_strtod_l+0xa62>
 8010828:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801082c:	e7e0      	b.n	80107f0 <_strtod_l+0xb48>
 801082e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010868 <_strtod_l+0xbc0>)
 8010830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010834:	f7f0 f962 	bl	8000afc <__aeabi_dcmplt>
 8010838:	e798      	b.n	801076c <_strtod_l+0xac4>
 801083a:	2300      	movs	r3, #0
 801083c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801083e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010840:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010842:	6013      	str	r3, [r2, #0]
 8010844:	f7ff ba6d 	b.w	800fd22 <_strtod_l+0x7a>
 8010848:	2a65      	cmp	r2, #101	@ 0x65
 801084a:	f43f ab66 	beq.w	800ff1a <_strtod_l+0x272>
 801084e:	2a45      	cmp	r2, #69	@ 0x45
 8010850:	f43f ab63 	beq.w	800ff1a <_strtod_l+0x272>
 8010854:	2301      	movs	r3, #1
 8010856:	f7ff bb9e 	b.w	800ff96 <_strtod_l+0x2ee>
 801085a:	bf00      	nop
 801085c:	f3af 8000 	nop.w
 8010860:	ffc00000 	.word	0xffc00000
 8010864:	41dfffff 	.word	0x41dfffff
 8010868:	94a03595 	.word	0x94a03595
 801086c:	3fcfffff 	.word	0x3fcfffff

08010870 <_strtod_r>:
 8010870:	4b01      	ldr	r3, [pc, #4]	@ (8010878 <_strtod_r+0x8>)
 8010872:	f7ff ba19 	b.w	800fca8 <_strtod_l>
 8010876:	bf00      	nop
 8010878:	20000444 	.word	0x20000444

0801087c <__ssputs_r>:
 801087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010880:	688e      	ldr	r6, [r1, #8]
 8010882:	461f      	mov	r7, r3
 8010884:	42be      	cmp	r6, r7
 8010886:	680b      	ldr	r3, [r1, #0]
 8010888:	4682      	mov	sl, r0
 801088a:	460c      	mov	r4, r1
 801088c:	4690      	mov	r8, r2
 801088e:	d82d      	bhi.n	80108ec <__ssputs_r+0x70>
 8010890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010894:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010898:	d026      	beq.n	80108e8 <__ssputs_r+0x6c>
 801089a:	6965      	ldr	r5, [r4, #20]
 801089c:	6909      	ldr	r1, [r1, #16]
 801089e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108a2:	eba3 0901 	sub.w	r9, r3, r1
 80108a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108aa:	1c7b      	adds	r3, r7, #1
 80108ac:	444b      	add	r3, r9
 80108ae:	106d      	asrs	r5, r5, #1
 80108b0:	429d      	cmp	r5, r3
 80108b2:	bf38      	it	cc
 80108b4:	461d      	movcc	r5, r3
 80108b6:	0553      	lsls	r3, r2, #21
 80108b8:	d527      	bpl.n	801090a <__ssputs_r+0x8e>
 80108ba:	4629      	mov	r1, r5
 80108bc:	f7fe fc98 	bl	800f1f0 <_malloc_r>
 80108c0:	4606      	mov	r6, r0
 80108c2:	b360      	cbz	r0, 801091e <__ssputs_r+0xa2>
 80108c4:	6921      	ldr	r1, [r4, #16]
 80108c6:	464a      	mov	r2, r9
 80108c8:	f7fd fdbb 	bl	800e442 <memcpy>
 80108cc:	89a3      	ldrh	r3, [r4, #12]
 80108ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80108d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108d6:	81a3      	strh	r3, [r4, #12]
 80108d8:	6126      	str	r6, [r4, #16]
 80108da:	6165      	str	r5, [r4, #20]
 80108dc:	444e      	add	r6, r9
 80108de:	eba5 0509 	sub.w	r5, r5, r9
 80108e2:	6026      	str	r6, [r4, #0]
 80108e4:	60a5      	str	r5, [r4, #8]
 80108e6:	463e      	mov	r6, r7
 80108e8:	42be      	cmp	r6, r7
 80108ea:	d900      	bls.n	80108ee <__ssputs_r+0x72>
 80108ec:	463e      	mov	r6, r7
 80108ee:	6820      	ldr	r0, [r4, #0]
 80108f0:	4632      	mov	r2, r6
 80108f2:	4641      	mov	r1, r8
 80108f4:	f000 f9c6 	bl	8010c84 <memmove>
 80108f8:	68a3      	ldr	r3, [r4, #8]
 80108fa:	1b9b      	subs	r3, r3, r6
 80108fc:	60a3      	str	r3, [r4, #8]
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	4433      	add	r3, r6
 8010902:	6023      	str	r3, [r4, #0]
 8010904:	2000      	movs	r0, #0
 8010906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801090a:	462a      	mov	r2, r5
 801090c:	f000 fd7d 	bl	801140a <_realloc_r>
 8010910:	4606      	mov	r6, r0
 8010912:	2800      	cmp	r0, #0
 8010914:	d1e0      	bne.n	80108d8 <__ssputs_r+0x5c>
 8010916:	6921      	ldr	r1, [r4, #16]
 8010918:	4650      	mov	r0, sl
 801091a:	f7fe fbf5 	bl	800f108 <_free_r>
 801091e:	230c      	movs	r3, #12
 8010920:	f8ca 3000 	str.w	r3, [sl]
 8010924:	89a3      	ldrh	r3, [r4, #12]
 8010926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801092a:	81a3      	strh	r3, [r4, #12]
 801092c:	f04f 30ff 	mov.w	r0, #4294967295
 8010930:	e7e9      	b.n	8010906 <__ssputs_r+0x8a>
	...

08010934 <_svfiprintf_r>:
 8010934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010938:	4698      	mov	r8, r3
 801093a:	898b      	ldrh	r3, [r1, #12]
 801093c:	061b      	lsls	r3, r3, #24
 801093e:	b09d      	sub	sp, #116	@ 0x74
 8010940:	4607      	mov	r7, r0
 8010942:	460d      	mov	r5, r1
 8010944:	4614      	mov	r4, r2
 8010946:	d510      	bpl.n	801096a <_svfiprintf_r+0x36>
 8010948:	690b      	ldr	r3, [r1, #16]
 801094a:	b973      	cbnz	r3, 801096a <_svfiprintf_r+0x36>
 801094c:	2140      	movs	r1, #64	@ 0x40
 801094e:	f7fe fc4f 	bl	800f1f0 <_malloc_r>
 8010952:	6028      	str	r0, [r5, #0]
 8010954:	6128      	str	r0, [r5, #16]
 8010956:	b930      	cbnz	r0, 8010966 <_svfiprintf_r+0x32>
 8010958:	230c      	movs	r3, #12
 801095a:	603b      	str	r3, [r7, #0]
 801095c:	f04f 30ff 	mov.w	r0, #4294967295
 8010960:	b01d      	add	sp, #116	@ 0x74
 8010962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010966:	2340      	movs	r3, #64	@ 0x40
 8010968:	616b      	str	r3, [r5, #20]
 801096a:	2300      	movs	r3, #0
 801096c:	9309      	str	r3, [sp, #36]	@ 0x24
 801096e:	2320      	movs	r3, #32
 8010970:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010974:	f8cd 800c 	str.w	r8, [sp, #12]
 8010978:	2330      	movs	r3, #48	@ 0x30
 801097a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010b18 <_svfiprintf_r+0x1e4>
 801097e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010982:	f04f 0901 	mov.w	r9, #1
 8010986:	4623      	mov	r3, r4
 8010988:	469a      	mov	sl, r3
 801098a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801098e:	b10a      	cbz	r2, 8010994 <_svfiprintf_r+0x60>
 8010990:	2a25      	cmp	r2, #37	@ 0x25
 8010992:	d1f9      	bne.n	8010988 <_svfiprintf_r+0x54>
 8010994:	ebba 0b04 	subs.w	fp, sl, r4
 8010998:	d00b      	beq.n	80109b2 <_svfiprintf_r+0x7e>
 801099a:	465b      	mov	r3, fp
 801099c:	4622      	mov	r2, r4
 801099e:	4629      	mov	r1, r5
 80109a0:	4638      	mov	r0, r7
 80109a2:	f7ff ff6b 	bl	801087c <__ssputs_r>
 80109a6:	3001      	adds	r0, #1
 80109a8:	f000 80a7 	beq.w	8010afa <_svfiprintf_r+0x1c6>
 80109ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109ae:	445a      	add	r2, fp
 80109b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80109b2:	f89a 3000 	ldrb.w	r3, [sl]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	f000 809f 	beq.w	8010afa <_svfiprintf_r+0x1c6>
 80109bc:	2300      	movs	r3, #0
 80109be:	f04f 32ff 	mov.w	r2, #4294967295
 80109c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109c6:	f10a 0a01 	add.w	sl, sl, #1
 80109ca:	9304      	str	r3, [sp, #16]
 80109cc:	9307      	str	r3, [sp, #28]
 80109ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80109d4:	4654      	mov	r4, sl
 80109d6:	2205      	movs	r2, #5
 80109d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109dc:	484e      	ldr	r0, [pc, #312]	@ (8010b18 <_svfiprintf_r+0x1e4>)
 80109de:	f7ef fc07 	bl	80001f0 <memchr>
 80109e2:	9a04      	ldr	r2, [sp, #16]
 80109e4:	b9d8      	cbnz	r0, 8010a1e <_svfiprintf_r+0xea>
 80109e6:	06d0      	lsls	r0, r2, #27
 80109e8:	bf44      	itt	mi
 80109ea:	2320      	movmi	r3, #32
 80109ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109f0:	0711      	lsls	r1, r2, #28
 80109f2:	bf44      	itt	mi
 80109f4:	232b      	movmi	r3, #43	@ 0x2b
 80109f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109fa:	f89a 3000 	ldrb.w	r3, [sl]
 80109fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a00:	d015      	beq.n	8010a2e <_svfiprintf_r+0xfa>
 8010a02:	9a07      	ldr	r2, [sp, #28]
 8010a04:	4654      	mov	r4, sl
 8010a06:	2000      	movs	r0, #0
 8010a08:	f04f 0c0a 	mov.w	ip, #10
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a12:	3b30      	subs	r3, #48	@ 0x30
 8010a14:	2b09      	cmp	r3, #9
 8010a16:	d94b      	bls.n	8010ab0 <_svfiprintf_r+0x17c>
 8010a18:	b1b0      	cbz	r0, 8010a48 <_svfiprintf_r+0x114>
 8010a1a:	9207      	str	r2, [sp, #28]
 8010a1c:	e014      	b.n	8010a48 <_svfiprintf_r+0x114>
 8010a1e:	eba0 0308 	sub.w	r3, r0, r8
 8010a22:	fa09 f303 	lsl.w	r3, r9, r3
 8010a26:	4313      	orrs	r3, r2
 8010a28:	9304      	str	r3, [sp, #16]
 8010a2a:	46a2      	mov	sl, r4
 8010a2c:	e7d2      	b.n	80109d4 <_svfiprintf_r+0xa0>
 8010a2e:	9b03      	ldr	r3, [sp, #12]
 8010a30:	1d19      	adds	r1, r3, #4
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	9103      	str	r1, [sp, #12]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	bfbb      	ittet	lt
 8010a3a:	425b      	neglt	r3, r3
 8010a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8010a40:	9307      	strge	r3, [sp, #28]
 8010a42:	9307      	strlt	r3, [sp, #28]
 8010a44:	bfb8      	it	lt
 8010a46:	9204      	strlt	r2, [sp, #16]
 8010a48:	7823      	ldrb	r3, [r4, #0]
 8010a4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a4c:	d10a      	bne.n	8010a64 <_svfiprintf_r+0x130>
 8010a4e:	7863      	ldrb	r3, [r4, #1]
 8010a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a52:	d132      	bne.n	8010aba <_svfiprintf_r+0x186>
 8010a54:	9b03      	ldr	r3, [sp, #12]
 8010a56:	1d1a      	adds	r2, r3, #4
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	9203      	str	r2, [sp, #12]
 8010a5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a60:	3402      	adds	r4, #2
 8010a62:	9305      	str	r3, [sp, #20]
 8010a64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010b28 <_svfiprintf_r+0x1f4>
 8010a68:	7821      	ldrb	r1, [r4, #0]
 8010a6a:	2203      	movs	r2, #3
 8010a6c:	4650      	mov	r0, sl
 8010a6e:	f7ef fbbf 	bl	80001f0 <memchr>
 8010a72:	b138      	cbz	r0, 8010a84 <_svfiprintf_r+0x150>
 8010a74:	9b04      	ldr	r3, [sp, #16]
 8010a76:	eba0 000a 	sub.w	r0, r0, sl
 8010a7a:	2240      	movs	r2, #64	@ 0x40
 8010a7c:	4082      	lsls	r2, r0
 8010a7e:	4313      	orrs	r3, r2
 8010a80:	3401      	adds	r4, #1
 8010a82:	9304      	str	r3, [sp, #16]
 8010a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a88:	4824      	ldr	r0, [pc, #144]	@ (8010b1c <_svfiprintf_r+0x1e8>)
 8010a8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a8e:	2206      	movs	r2, #6
 8010a90:	f7ef fbae 	bl	80001f0 <memchr>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d036      	beq.n	8010b06 <_svfiprintf_r+0x1d2>
 8010a98:	4b21      	ldr	r3, [pc, #132]	@ (8010b20 <_svfiprintf_r+0x1ec>)
 8010a9a:	bb1b      	cbnz	r3, 8010ae4 <_svfiprintf_r+0x1b0>
 8010a9c:	9b03      	ldr	r3, [sp, #12]
 8010a9e:	3307      	adds	r3, #7
 8010aa0:	f023 0307 	bic.w	r3, r3, #7
 8010aa4:	3308      	adds	r3, #8
 8010aa6:	9303      	str	r3, [sp, #12]
 8010aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aaa:	4433      	add	r3, r6
 8010aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8010aae:	e76a      	b.n	8010986 <_svfiprintf_r+0x52>
 8010ab0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ab4:	460c      	mov	r4, r1
 8010ab6:	2001      	movs	r0, #1
 8010ab8:	e7a8      	b.n	8010a0c <_svfiprintf_r+0xd8>
 8010aba:	2300      	movs	r3, #0
 8010abc:	3401      	adds	r4, #1
 8010abe:	9305      	str	r3, [sp, #20]
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	f04f 0c0a 	mov.w	ip, #10
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010acc:	3a30      	subs	r2, #48	@ 0x30
 8010ace:	2a09      	cmp	r2, #9
 8010ad0:	d903      	bls.n	8010ada <_svfiprintf_r+0x1a6>
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d0c6      	beq.n	8010a64 <_svfiprintf_r+0x130>
 8010ad6:	9105      	str	r1, [sp, #20]
 8010ad8:	e7c4      	b.n	8010a64 <_svfiprintf_r+0x130>
 8010ada:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ade:	4604      	mov	r4, r0
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e7f0      	b.n	8010ac6 <_svfiprintf_r+0x192>
 8010ae4:	ab03      	add	r3, sp, #12
 8010ae6:	9300      	str	r3, [sp, #0]
 8010ae8:	462a      	mov	r2, r5
 8010aea:	4b0e      	ldr	r3, [pc, #56]	@ (8010b24 <_svfiprintf_r+0x1f0>)
 8010aec:	a904      	add	r1, sp, #16
 8010aee:	4638      	mov	r0, r7
 8010af0:	f7fc fd36 	bl	800d560 <_printf_float>
 8010af4:	1c42      	adds	r2, r0, #1
 8010af6:	4606      	mov	r6, r0
 8010af8:	d1d6      	bne.n	8010aa8 <_svfiprintf_r+0x174>
 8010afa:	89ab      	ldrh	r3, [r5, #12]
 8010afc:	065b      	lsls	r3, r3, #25
 8010afe:	f53f af2d 	bmi.w	801095c <_svfiprintf_r+0x28>
 8010b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b04:	e72c      	b.n	8010960 <_svfiprintf_r+0x2c>
 8010b06:	ab03      	add	r3, sp, #12
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	462a      	mov	r2, r5
 8010b0c:	4b05      	ldr	r3, [pc, #20]	@ (8010b24 <_svfiprintf_r+0x1f0>)
 8010b0e:	a904      	add	r1, sp, #16
 8010b10:	4638      	mov	r0, r7
 8010b12:	f7fc ffbd 	bl	800da90 <_printf_i>
 8010b16:	e7ed      	b.n	8010af4 <_svfiprintf_r+0x1c0>
 8010b18:	08014828 	.word	0x08014828
 8010b1c:	08014832 	.word	0x08014832
 8010b20:	0800d561 	.word	0x0800d561
 8010b24:	0801087d 	.word	0x0801087d
 8010b28:	0801482e 	.word	0x0801482e

08010b2c <__sflush_r>:
 8010b2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b34:	0716      	lsls	r6, r2, #28
 8010b36:	4605      	mov	r5, r0
 8010b38:	460c      	mov	r4, r1
 8010b3a:	d454      	bmi.n	8010be6 <__sflush_r+0xba>
 8010b3c:	684b      	ldr	r3, [r1, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	dc02      	bgt.n	8010b48 <__sflush_r+0x1c>
 8010b42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	dd48      	ble.n	8010bda <__sflush_r+0xae>
 8010b48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b4a:	2e00      	cmp	r6, #0
 8010b4c:	d045      	beq.n	8010bda <__sflush_r+0xae>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b54:	682f      	ldr	r7, [r5, #0]
 8010b56:	6a21      	ldr	r1, [r4, #32]
 8010b58:	602b      	str	r3, [r5, #0]
 8010b5a:	d030      	beq.n	8010bbe <__sflush_r+0x92>
 8010b5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b5e:	89a3      	ldrh	r3, [r4, #12]
 8010b60:	0759      	lsls	r1, r3, #29
 8010b62:	d505      	bpl.n	8010b70 <__sflush_r+0x44>
 8010b64:	6863      	ldr	r3, [r4, #4]
 8010b66:	1ad2      	subs	r2, r2, r3
 8010b68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b6a:	b10b      	cbz	r3, 8010b70 <__sflush_r+0x44>
 8010b6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b6e:	1ad2      	subs	r2, r2, r3
 8010b70:	2300      	movs	r3, #0
 8010b72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b74:	6a21      	ldr	r1, [r4, #32]
 8010b76:	4628      	mov	r0, r5
 8010b78:	47b0      	blx	r6
 8010b7a:	1c43      	adds	r3, r0, #1
 8010b7c:	89a3      	ldrh	r3, [r4, #12]
 8010b7e:	d106      	bne.n	8010b8e <__sflush_r+0x62>
 8010b80:	6829      	ldr	r1, [r5, #0]
 8010b82:	291d      	cmp	r1, #29
 8010b84:	d82b      	bhi.n	8010bde <__sflush_r+0xb2>
 8010b86:	4a2a      	ldr	r2, [pc, #168]	@ (8010c30 <__sflush_r+0x104>)
 8010b88:	410a      	asrs	r2, r1
 8010b8a:	07d6      	lsls	r6, r2, #31
 8010b8c:	d427      	bmi.n	8010bde <__sflush_r+0xb2>
 8010b8e:	2200      	movs	r2, #0
 8010b90:	6062      	str	r2, [r4, #4]
 8010b92:	04d9      	lsls	r1, r3, #19
 8010b94:	6922      	ldr	r2, [r4, #16]
 8010b96:	6022      	str	r2, [r4, #0]
 8010b98:	d504      	bpl.n	8010ba4 <__sflush_r+0x78>
 8010b9a:	1c42      	adds	r2, r0, #1
 8010b9c:	d101      	bne.n	8010ba2 <__sflush_r+0x76>
 8010b9e:	682b      	ldr	r3, [r5, #0]
 8010ba0:	b903      	cbnz	r3, 8010ba4 <__sflush_r+0x78>
 8010ba2:	6560      	str	r0, [r4, #84]	@ 0x54
 8010ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ba6:	602f      	str	r7, [r5, #0]
 8010ba8:	b1b9      	cbz	r1, 8010bda <__sflush_r+0xae>
 8010baa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bae:	4299      	cmp	r1, r3
 8010bb0:	d002      	beq.n	8010bb8 <__sflush_r+0x8c>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	f7fe faa8 	bl	800f108 <_free_r>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bbc:	e00d      	b.n	8010bda <__sflush_r+0xae>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	47b0      	blx	r6
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	1c50      	adds	r0, r2, #1
 8010bc8:	d1c9      	bne.n	8010b5e <__sflush_r+0x32>
 8010bca:	682b      	ldr	r3, [r5, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d0c6      	beq.n	8010b5e <__sflush_r+0x32>
 8010bd0:	2b1d      	cmp	r3, #29
 8010bd2:	d001      	beq.n	8010bd8 <__sflush_r+0xac>
 8010bd4:	2b16      	cmp	r3, #22
 8010bd6:	d11e      	bne.n	8010c16 <__sflush_r+0xea>
 8010bd8:	602f      	str	r7, [r5, #0]
 8010bda:	2000      	movs	r0, #0
 8010bdc:	e022      	b.n	8010c24 <__sflush_r+0xf8>
 8010bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010be2:	b21b      	sxth	r3, r3
 8010be4:	e01b      	b.n	8010c1e <__sflush_r+0xf2>
 8010be6:	690f      	ldr	r7, [r1, #16]
 8010be8:	2f00      	cmp	r7, #0
 8010bea:	d0f6      	beq.n	8010bda <__sflush_r+0xae>
 8010bec:	0793      	lsls	r3, r2, #30
 8010bee:	680e      	ldr	r6, [r1, #0]
 8010bf0:	bf08      	it	eq
 8010bf2:	694b      	ldreq	r3, [r1, #20]
 8010bf4:	600f      	str	r7, [r1, #0]
 8010bf6:	bf18      	it	ne
 8010bf8:	2300      	movne	r3, #0
 8010bfa:	eba6 0807 	sub.w	r8, r6, r7
 8010bfe:	608b      	str	r3, [r1, #8]
 8010c00:	f1b8 0f00 	cmp.w	r8, #0
 8010c04:	dde9      	ble.n	8010bda <__sflush_r+0xae>
 8010c06:	6a21      	ldr	r1, [r4, #32]
 8010c08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c0a:	4643      	mov	r3, r8
 8010c0c:	463a      	mov	r2, r7
 8010c0e:	4628      	mov	r0, r5
 8010c10:	47b0      	blx	r6
 8010c12:	2800      	cmp	r0, #0
 8010c14:	dc08      	bgt.n	8010c28 <__sflush_r+0xfc>
 8010c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c1e:	81a3      	strh	r3, [r4, #12]
 8010c20:	f04f 30ff 	mov.w	r0, #4294967295
 8010c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c28:	4407      	add	r7, r0
 8010c2a:	eba8 0800 	sub.w	r8, r8, r0
 8010c2e:	e7e7      	b.n	8010c00 <__sflush_r+0xd4>
 8010c30:	dfbffffe 	.word	0xdfbffffe

08010c34 <_fflush_r>:
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	690b      	ldr	r3, [r1, #16]
 8010c38:	4605      	mov	r5, r0
 8010c3a:	460c      	mov	r4, r1
 8010c3c:	b913      	cbnz	r3, 8010c44 <_fflush_r+0x10>
 8010c3e:	2500      	movs	r5, #0
 8010c40:	4628      	mov	r0, r5
 8010c42:	bd38      	pop	{r3, r4, r5, pc}
 8010c44:	b118      	cbz	r0, 8010c4e <_fflush_r+0x1a>
 8010c46:	6a03      	ldr	r3, [r0, #32]
 8010c48:	b90b      	cbnz	r3, 8010c4e <_fflush_r+0x1a>
 8010c4a:	f7fd fae1 	bl	800e210 <__sinit>
 8010c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0f3      	beq.n	8010c3e <_fflush_r+0xa>
 8010c56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c58:	07d0      	lsls	r0, r2, #31
 8010c5a:	d404      	bmi.n	8010c66 <_fflush_r+0x32>
 8010c5c:	0599      	lsls	r1, r3, #22
 8010c5e:	d402      	bmi.n	8010c66 <_fflush_r+0x32>
 8010c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c62:	f7fd fbec 	bl	800e43e <__retarget_lock_acquire_recursive>
 8010c66:	4628      	mov	r0, r5
 8010c68:	4621      	mov	r1, r4
 8010c6a:	f7ff ff5f 	bl	8010b2c <__sflush_r>
 8010c6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c70:	07da      	lsls	r2, r3, #31
 8010c72:	4605      	mov	r5, r0
 8010c74:	d4e4      	bmi.n	8010c40 <_fflush_r+0xc>
 8010c76:	89a3      	ldrh	r3, [r4, #12]
 8010c78:	059b      	lsls	r3, r3, #22
 8010c7a:	d4e1      	bmi.n	8010c40 <_fflush_r+0xc>
 8010c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c7e:	f7fd fbdf 	bl	800e440 <__retarget_lock_release_recursive>
 8010c82:	e7dd      	b.n	8010c40 <_fflush_r+0xc>

08010c84 <memmove>:
 8010c84:	4288      	cmp	r0, r1
 8010c86:	b510      	push	{r4, lr}
 8010c88:	eb01 0402 	add.w	r4, r1, r2
 8010c8c:	d902      	bls.n	8010c94 <memmove+0x10>
 8010c8e:	4284      	cmp	r4, r0
 8010c90:	4623      	mov	r3, r4
 8010c92:	d807      	bhi.n	8010ca4 <memmove+0x20>
 8010c94:	1e43      	subs	r3, r0, #1
 8010c96:	42a1      	cmp	r1, r4
 8010c98:	d008      	beq.n	8010cac <memmove+0x28>
 8010c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ca2:	e7f8      	b.n	8010c96 <memmove+0x12>
 8010ca4:	4402      	add	r2, r0
 8010ca6:	4601      	mov	r1, r0
 8010ca8:	428a      	cmp	r2, r1
 8010caa:	d100      	bne.n	8010cae <memmove+0x2a>
 8010cac:	bd10      	pop	{r4, pc}
 8010cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010cb6:	e7f7      	b.n	8010ca8 <memmove+0x24>

08010cb8 <strncmp>:
 8010cb8:	b510      	push	{r4, lr}
 8010cba:	b16a      	cbz	r2, 8010cd8 <strncmp+0x20>
 8010cbc:	3901      	subs	r1, #1
 8010cbe:	1884      	adds	r4, r0, r2
 8010cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d103      	bne.n	8010cd4 <strncmp+0x1c>
 8010ccc:	42a0      	cmp	r0, r4
 8010cce:	d001      	beq.n	8010cd4 <strncmp+0x1c>
 8010cd0:	2a00      	cmp	r2, #0
 8010cd2:	d1f5      	bne.n	8010cc0 <strncmp+0x8>
 8010cd4:	1ad0      	subs	r0, r2, r3
 8010cd6:	bd10      	pop	{r4, pc}
 8010cd8:	4610      	mov	r0, r2
 8010cda:	e7fc      	b.n	8010cd6 <strncmp+0x1e>

08010cdc <_sbrk_r>:
 8010cdc:	b538      	push	{r3, r4, r5, lr}
 8010cde:	4d06      	ldr	r5, [pc, #24]	@ (8010cf8 <_sbrk_r+0x1c>)
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	4608      	mov	r0, r1
 8010ce6:	602b      	str	r3, [r5, #0]
 8010ce8:	f7f8 fb0c 	bl	8009304 <_sbrk>
 8010cec:	1c43      	adds	r3, r0, #1
 8010cee:	d102      	bne.n	8010cf6 <_sbrk_r+0x1a>
 8010cf0:	682b      	ldr	r3, [r5, #0]
 8010cf2:	b103      	cbz	r3, 8010cf6 <_sbrk_r+0x1a>
 8010cf4:	6023      	str	r3, [r4, #0]
 8010cf6:	bd38      	pop	{r3, r4, r5, pc}
 8010cf8:	20004e00 	.word	0x20004e00
 8010cfc:	00000000 	.word	0x00000000

08010d00 <nan>:
 8010d00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d08 <nan+0x8>
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	00000000 	.word	0x00000000
 8010d0c:	7ff80000 	.word	0x7ff80000

08010d10 <__assert_func>:
 8010d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d12:	4614      	mov	r4, r2
 8010d14:	461a      	mov	r2, r3
 8010d16:	4b09      	ldr	r3, [pc, #36]	@ (8010d3c <__assert_func+0x2c>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	68d8      	ldr	r0, [r3, #12]
 8010d1e:	b954      	cbnz	r4, 8010d36 <__assert_func+0x26>
 8010d20:	4b07      	ldr	r3, [pc, #28]	@ (8010d40 <__assert_func+0x30>)
 8010d22:	461c      	mov	r4, r3
 8010d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d28:	9100      	str	r1, [sp, #0]
 8010d2a:	462b      	mov	r3, r5
 8010d2c:	4905      	ldr	r1, [pc, #20]	@ (8010d44 <__assert_func+0x34>)
 8010d2e:	f000 fba7 	bl	8011480 <fiprintf>
 8010d32:	f000 fbb7 	bl	80114a4 <abort>
 8010d36:	4b04      	ldr	r3, [pc, #16]	@ (8010d48 <__assert_func+0x38>)
 8010d38:	e7f4      	b.n	8010d24 <__assert_func+0x14>
 8010d3a:	bf00      	nop
 8010d3c:	200003f4 	.word	0x200003f4
 8010d40:	0801487c 	.word	0x0801487c
 8010d44:	0801484e 	.word	0x0801484e
 8010d48:	08014841 	.word	0x08014841

08010d4c <_calloc_r>:
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	fba1 5402 	umull	r5, r4, r1, r2
 8010d52:	b93c      	cbnz	r4, 8010d64 <_calloc_r+0x18>
 8010d54:	4629      	mov	r1, r5
 8010d56:	f7fe fa4b 	bl	800f1f0 <_malloc_r>
 8010d5a:	4606      	mov	r6, r0
 8010d5c:	b928      	cbnz	r0, 8010d6a <_calloc_r+0x1e>
 8010d5e:	2600      	movs	r6, #0
 8010d60:	4630      	mov	r0, r6
 8010d62:	bd70      	pop	{r4, r5, r6, pc}
 8010d64:	220c      	movs	r2, #12
 8010d66:	6002      	str	r2, [r0, #0]
 8010d68:	e7f9      	b.n	8010d5e <_calloc_r+0x12>
 8010d6a:	462a      	mov	r2, r5
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	f7fd fae8 	bl	800e342 <memset>
 8010d72:	e7f5      	b.n	8010d60 <_calloc_r+0x14>

08010d74 <rshift>:
 8010d74:	6903      	ldr	r3, [r0, #16]
 8010d76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010d7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010d82:	f100 0414 	add.w	r4, r0, #20
 8010d86:	dd45      	ble.n	8010e14 <rshift+0xa0>
 8010d88:	f011 011f 	ands.w	r1, r1, #31
 8010d8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010d90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010d94:	d10c      	bne.n	8010db0 <rshift+0x3c>
 8010d96:	f100 0710 	add.w	r7, r0, #16
 8010d9a:	4629      	mov	r1, r5
 8010d9c:	42b1      	cmp	r1, r6
 8010d9e:	d334      	bcc.n	8010e0a <rshift+0x96>
 8010da0:	1a9b      	subs	r3, r3, r2
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	1eea      	subs	r2, r5, #3
 8010da6:	4296      	cmp	r6, r2
 8010da8:	bf38      	it	cc
 8010daa:	2300      	movcc	r3, #0
 8010dac:	4423      	add	r3, r4
 8010dae:	e015      	b.n	8010ddc <rshift+0x68>
 8010db0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010db4:	f1c1 0820 	rsb	r8, r1, #32
 8010db8:	40cf      	lsrs	r7, r1
 8010dba:	f105 0e04 	add.w	lr, r5, #4
 8010dbe:	46a1      	mov	r9, r4
 8010dc0:	4576      	cmp	r6, lr
 8010dc2:	46f4      	mov	ip, lr
 8010dc4:	d815      	bhi.n	8010df2 <rshift+0x7e>
 8010dc6:	1a9a      	subs	r2, r3, r2
 8010dc8:	0092      	lsls	r2, r2, #2
 8010dca:	3a04      	subs	r2, #4
 8010dcc:	3501      	adds	r5, #1
 8010dce:	42ae      	cmp	r6, r5
 8010dd0:	bf38      	it	cc
 8010dd2:	2200      	movcc	r2, #0
 8010dd4:	18a3      	adds	r3, r4, r2
 8010dd6:	50a7      	str	r7, [r4, r2]
 8010dd8:	b107      	cbz	r7, 8010ddc <rshift+0x68>
 8010dda:	3304      	adds	r3, #4
 8010ddc:	1b1a      	subs	r2, r3, r4
 8010dde:	42a3      	cmp	r3, r4
 8010de0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010de4:	bf08      	it	eq
 8010de6:	2300      	moveq	r3, #0
 8010de8:	6102      	str	r2, [r0, #16]
 8010dea:	bf08      	it	eq
 8010dec:	6143      	streq	r3, [r0, #20]
 8010dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010df2:	f8dc c000 	ldr.w	ip, [ip]
 8010df6:	fa0c fc08 	lsl.w	ip, ip, r8
 8010dfa:	ea4c 0707 	orr.w	r7, ip, r7
 8010dfe:	f849 7b04 	str.w	r7, [r9], #4
 8010e02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e06:	40cf      	lsrs	r7, r1
 8010e08:	e7da      	b.n	8010dc0 <rshift+0x4c>
 8010e0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010e0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010e12:	e7c3      	b.n	8010d9c <rshift+0x28>
 8010e14:	4623      	mov	r3, r4
 8010e16:	e7e1      	b.n	8010ddc <rshift+0x68>

08010e18 <__hexdig_fun>:
 8010e18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010e1c:	2b09      	cmp	r3, #9
 8010e1e:	d802      	bhi.n	8010e26 <__hexdig_fun+0xe>
 8010e20:	3820      	subs	r0, #32
 8010e22:	b2c0      	uxtb	r0, r0
 8010e24:	4770      	bx	lr
 8010e26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010e2a:	2b05      	cmp	r3, #5
 8010e2c:	d801      	bhi.n	8010e32 <__hexdig_fun+0x1a>
 8010e2e:	3847      	subs	r0, #71	@ 0x47
 8010e30:	e7f7      	b.n	8010e22 <__hexdig_fun+0xa>
 8010e32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010e36:	2b05      	cmp	r3, #5
 8010e38:	d801      	bhi.n	8010e3e <__hexdig_fun+0x26>
 8010e3a:	3827      	subs	r0, #39	@ 0x27
 8010e3c:	e7f1      	b.n	8010e22 <__hexdig_fun+0xa>
 8010e3e:	2000      	movs	r0, #0
 8010e40:	4770      	bx	lr
	...

08010e44 <__gethex>:
 8010e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e48:	b085      	sub	sp, #20
 8010e4a:	468a      	mov	sl, r1
 8010e4c:	9302      	str	r3, [sp, #8]
 8010e4e:	680b      	ldr	r3, [r1, #0]
 8010e50:	9001      	str	r0, [sp, #4]
 8010e52:	4690      	mov	r8, r2
 8010e54:	1c9c      	adds	r4, r3, #2
 8010e56:	46a1      	mov	r9, r4
 8010e58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010e5c:	2830      	cmp	r0, #48	@ 0x30
 8010e5e:	d0fa      	beq.n	8010e56 <__gethex+0x12>
 8010e60:	eba9 0303 	sub.w	r3, r9, r3
 8010e64:	f1a3 0b02 	sub.w	fp, r3, #2
 8010e68:	f7ff ffd6 	bl	8010e18 <__hexdig_fun>
 8010e6c:	4605      	mov	r5, r0
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d168      	bne.n	8010f44 <__gethex+0x100>
 8010e72:	49a0      	ldr	r1, [pc, #640]	@ (80110f4 <__gethex+0x2b0>)
 8010e74:	2201      	movs	r2, #1
 8010e76:	4648      	mov	r0, r9
 8010e78:	f7ff ff1e 	bl	8010cb8 <strncmp>
 8010e7c:	4607      	mov	r7, r0
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	d167      	bne.n	8010f52 <__gethex+0x10e>
 8010e82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010e86:	4626      	mov	r6, r4
 8010e88:	f7ff ffc6 	bl	8010e18 <__hexdig_fun>
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d062      	beq.n	8010f56 <__gethex+0x112>
 8010e90:	4623      	mov	r3, r4
 8010e92:	7818      	ldrb	r0, [r3, #0]
 8010e94:	2830      	cmp	r0, #48	@ 0x30
 8010e96:	4699      	mov	r9, r3
 8010e98:	f103 0301 	add.w	r3, r3, #1
 8010e9c:	d0f9      	beq.n	8010e92 <__gethex+0x4e>
 8010e9e:	f7ff ffbb 	bl	8010e18 <__hexdig_fun>
 8010ea2:	fab0 f580 	clz	r5, r0
 8010ea6:	096d      	lsrs	r5, r5, #5
 8010ea8:	f04f 0b01 	mov.w	fp, #1
 8010eac:	464a      	mov	r2, r9
 8010eae:	4616      	mov	r6, r2
 8010eb0:	3201      	adds	r2, #1
 8010eb2:	7830      	ldrb	r0, [r6, #0]
 8010eb4:	f7ff ffb0 	bl	8010e18 <__hexdig_fun>
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	d1f8      	bne.n	8010eae <__gethex+0x6a>
 8010ebc:	498d      	ldr	r1, [pc, #564]	@ (80110f4 <__gethex+0x2b0>)
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7ff fef9 	bl	8010cb8 <strncmp>
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	d13f      	bne.n	8010f4a <__gethex+0x106>
 8010eca:	b944      	cbnz	r4, 8010ede <__gethex+0x9a>
 8010ecc:	1c74      	adds	r4, r6, #1
 8010ece:	4622      	mov	r2, r4
 8010ed0:	4616      	mov	r6, r2
 8010ed2:	3201      	adds	r2, #1
 8010ed4:	7830      	ldrb	r0, [r6, #0]
 8010ed6:	f7ff ff9f 	bl	8010e18 <__hexdig_fun>
 8010eda:	2800      	cmp	r0, #0
 8010edc:	d1f8      	bne.n	8010ed0 <__gethex+0x8c>
 8010ede:	1ba4      	subs	r4, r4, r6
 8010ee0:	00a7      	lsls	r7, r4, #2
 8010ee2:	7833      	ldrb	r3, [r6, #0]
 8010ee4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010ee8:	2b50      	cmp	r3, #80	@ 0x50
 8010eea:	d13e      	bne.n	8010f6a <__gethex+0x126>
 8010eec:	7873      	ldrb	r3, [r6, #1]
 8010eee:	2b2b      	cmp	r3, #43	@ 0x2b
 8010ef0:	d033      	beq.n	8010f5a <__gethex+0x116>
 8010ef2:	2b2d      	cmp	r3, #45	@ 0x2d
 8010ef4:	d034      	beq.n	8010f60 <__gethex+0x11c>
 8010ef6:	1c71      	adds	r1, r6, #1
 8010ef8:	2400      	movs	r4, #0
 8010efa:	7808      	ldrb	r0, [r1, #0]
 8010efc:	f7ff ff8c 	bl	8010e18 <__hexdig_fun>
 8010f00:	1e43      	subs	r3, r0, #1
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	2b18      	cmp	r3, #24
 8010f06:	d830      	bhi.n	8010f6a <__gethex+0x126>
 8010f08:	f1a0 0210 	sub.w	r2, r0, #16
 8010f0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f10:	f7ff ff82 	bl	8010e18 <__hexdig_fun>
 8010f14:	f100 3cff 	add.w	ip, r0, #4294967295
 8010f18:	fa5f fc8c 	uxtb.w	ip, ip
 8010f1c:	f1bc 0f18 	cmp.w	ip, #24
 8010f20:	f04f 030a 	mov.w	r3, #10
 8010f24:	d91e      	bls.n	8010f64 <__gethex+0x120>
 8010f26:	b104      	cbz	r4, 8010f2a <__gethex+0xe6>
 8010f28:	4252      	negs	r2, r2
 8010f2a:	4417      	add	r7, r2
 8010f2c:	f8ca 1000 	str.w	r1, [sl]
 8010f30:	b1ed      	cbz	r5, 8010f6e <__gethex+0x12a>
 8010f32:	f1bb 0f00 	cmp.w	fp, #0
 8010f36:	bf0c      	ite	eq
 8010f38:	2506      	moveq	r5, #6
 8010f3a:	2500      	movne	r5, #0
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	b005      	add	sp, #20
 8010f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f44:	2500      	movs	r5, #0
 8010f46:	462c      	mov	r4, r5
 8010f48:	e7b0      	b.n	8010eac <__gethex+0x68>
 8010f4a:	2c00      	cmp	r4, #0
 8010f4c:	d1c7      	bne.n	8010ede <__gethex+0x9a>
 8010f4e:	4627      	mov	r7, r4
 8010f50:	e7c7      	b.n	8010ee2 <__gethex+0x9e>
 8010f52:	464e      	mov	r6, r9
 8010f54:	462f      	mov	r7, r5
 8010f56:	2501      	movs	r5, #1
 8010f58:	e7c3      	b.n	8010ee2 <__gethex+0x9e>
 8010f5a:	2400      	movs	r4, #0
 8010f5c:	1cb1      	adds	r1, r6, #2
 8010f5e:	e7cc      	b.n	8010efa <__gethex+0xb6>
 8010f60:	2401      	movs	r4, #1
 8010f62:	e7fb      	b.n	8010f5c <__gethex+0x118>
 8010f64:	fb03 0002 	mla	r0, r3, r2, r0
 8010f68:	e7ce      	b.n	8010f08 <__gethex+0xc4>
 8010f6a:	4631      	mov	r1, r6
 8010f6c:	e7de      	b.n	8010f2c <__gethex+0xe8>
 8010f6e:	eba6 0309 	sub.w	r3, r6, r9
 8010f72:	3b01      	subs	r3, #1
 8010f74:	4629      	mov	r1, r5
 8010f76:	2b07      	cmp	r3, #7
 8010f78:	dc0a      	bgt.n	8010f90 <__gethex+0x14c>
 8010f7a:	9801      	ldr	r0, [sp, #4]
 8010f7c:	f7fe f9c4 	bl	800f308 <_Balloc>
 8010f80:	4604      	mov	r4, r0
 8010f82:	b940      	cbnz	r0, 8010f96 <__gethex+0x152>
 8010f84:	4b5c      	ldr	r3, [pc, #368]	@ (80110f8 <__gethex+0x2b4>)
 8010f86:	4602      	mov	r2, r0
 8010f88:	21e4      	movs	r1, #228	@ 0xe4
 8010f8a:	485c      	ldr	r0, [pc, #368]	@ (80110fc <__gethex+0x2b8>)
 8010f8c:	f7ff fec0 	bl	8010d10 <__assert_func>
 8010f90:	3101      	adds	r1, #1
 8010f92:	105b      	asrs	r3, r3, #1
 8010f94:	e7ef      	b.n	8010f76 <__gethex+0x132>
 8010f96:	f100 0a14 	add.w	sl, r0, #20
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	4655      	mov	r5, sl
 8010f9e:	469b      	mov	fp, r3
 8010fa0:	45b1      	cmp	r9, r6
 8010fa2:	d337      	bcc.n	8011014 <__gethex+0x1d0>
 8010fa4:	f845 bb04 	str.w	fp, [r5], #4
 8010fa8:	eba5 050a 	sub.w	r5, r5, sl
 8010fac:	10ad      	asrs	r5, r5, #2
 8010fae:	6125      	str	r5, [r4, #16]
 8010fb0:	4658      	mov	r0, fp
 8010fb2:	f7fe fa9b 	bl	800f4ec <__hi0bits>
 8010fb6:	016d      	lsls	r5, r5, #5
 8010fb8:	f8d8 6000 	ldr.w	r6, [r8]
 8010fbc:	1a2d      	subs	r5, r5, r0
 8010fbe:	42b5      	cmp	r5, r6
 8010fc0:	dd54      	ble.n	801106c <__gethex+0x228>
 8010fc2:	1bad      	subs	r5, r5, r6
 8010fc4:	4629      	mov	r1, r5
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f7fe fe2f 	bl	800fc2a <__any_on>
 8010fcc:	4681      	mov	r9, r0
 8010fce:	b178      	cbz	r0, 8010ff0 <__gethex+0x1ac>
 8010fd0:	1e6b      	subs	r3, r5, #1
 8010fd2:	1159      	asrs	r1, r3, #5
 8010fd4:	f003 021f 	and.w	r2, r3, #31
 8010fd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010fdc:	f04f 0901 	mov.w	r9, #1
 8010fe0:	fa09 f202 	lsl.w	r2, r9, r2
 8010fe4:	420a      	tst	r2, r1
 8010fe6:	d003      	beq.n	8010ff0 <__gethex+0x1ac>
 8010fe8:	454b      	cmp	r3, r9
 8010fea:	dc36      	bgt.n	801105a <__gethex+0x216>
 8010fec:	f04f 0902 	mov.w	r9, #2
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f7ff febe 	bl	8010d74 <rshift>
 8010ff8:	442f      	add	r7, r5
 8010ffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ffe:	42bb      	cmp	r3, r7
 8011000:	da42      	bge.n	8011088 <__gethex+0x244>
 8011002:	9801      	ldr	r0, [sp, #4]
 8011004:	4621      	mov	r1, r4
 8011006:	f7fe f9bf 	bl	800f388 <_Bfree>
 801100a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801100c:	2300      	movs	r3, #0
 801100e:	6013      	str	r3, [r2, #0]
 8011010:	25a3      	movs	r5, #163	@ 0xa3
 8011012:	e793      	b.n	8010f3c <__gethex+0xf8>
 8011014:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011018:	2a2e      	cmp	r2, #46	@ 0x2e
 801101a:	d012      	beq.n	8011042 <__gethex+0x1fe>
 801101c:	2b20      	cmp	r3, #32
 801101e:	d104      	bne.n	801102a <__gethex+0x1e6>
 8011020:	f845 bb04 	str.w	fp, [r5], #4
 8011024:	f04f 0b00 	mov.w	fp, #0
 8011028:	465b      	mov	r3, fp
 801102a:	7830      	ldrb	r0, [r6, #0]
 801102c:	9303      	str	r3, [sp, #12]
 801102e:	f7ff fef3 	bl	8010e18 <__hexdig_fun>
 8011032:	9b03      	ldr	r3, [sp, #12]
 8011034:	f000 000f 	and.w	r0, r0, #15
 8011038:	4098      	lsls	r0, r3
 801103a:	ea4b 0b00 	orr.w	fp, fp, r0
 801103e:	3304      	adds	r3, #4
 8011040:	e7ae      	b.n	8010fa0 <__gethex+0x15c>
 8011042:	45b1      	cmp	r9, r6
 8011044:	d8ea      	bhi.n	801101c <__gethex+0x1d8>
 8011046:	492b      	ldr	r1, [pc, #172]	@ (80110f4 <__gethex+0x2b0>)
 8011048:	9303      	str	r3, [sp, #12]
 801104a:	2201      	movs	r2, #1
 801104c:	4630      	mov	r0, r6
 801104e:	f7ff fe33 	bl	8010cb8 <strncmp>
 8011052:	9b03      	ldr	r3, [sp, #12]
 8011054:	2800      	cmp	r0, #0
 8011056:	d1e1      	bne.n	801101c <__gethex+0x1d8>
 8011058:	e7a2      	b.n	8010fa0 <__gethex+0x15c>
 801105a:	1ea9      	subs	r1, r5, #2
 801105c:	4620      	mov	r0, r4
 801105e:	f7fe fde4 	bl	800fc2a <__any_on>
 8011062:	2800      	cmp	r0, #0
 8011064:	d0c2      	beq.n	8010fec <__gethex+0x1a8>
 8011066:	f04f 0903 	mov.w	r9, #3
 801106a:	e7c1      	b.n	8010ff0 <__gethex+0x1ac>
 801106c:	da09      	bge.n	8011082 <__gethex+0x23e>
 801106e:	1b75      	subs	r5, r6, r5
 8011070:	4621      	mov	r1, r4
 8011072:	9801      	ldr	r0, [sp, #4]
 8011074:	462a      	mov	r2, r5
 8011076:	f7fe fb9f 	bl	800f7b8 <__lshift>
 801107a:	1b7f      	subs	r7, r7, r5
 801107c:	4604      	mov	r4, r0
 801107e:	f100 0a14 	add.w	sl, r0, #20
 8011082:	f04f 0900 	mov.w	r9, #0
 8011086:	e7b8      	b.n	8010ffa <__gethex+0x1b6>
 8011088:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801108c:	42bd      	cmp	r5, r7
 801108e:	dd6f      	ble.n	8011170 <__gethex+0x32c>
 8011090:	1bed      	subs	r5, r5, r7
 8011092:	42ae      	cmp	r6, r5
 8011094:	dc34      	bgt.n	8011100 <__gethex+0x2bc>
 8011096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801109a:	2b02      	cmp	r3, #2
 801109c:	d022      	beq.n	80110e4 <__gethex+0x2a0>
 801109e:	2b03      	cmp	r3, #3
 80110a0:	d024      	beq.n	80110ec <__gethex+0x2a8>
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d115      	bne.n	80110d2 <__gethex+0x28e>
 80110a6:	42ae      	cmp	r6, r5
 80110a8:	d113      	bne.n	80110d2 <__gethex+0x28e>
 80110aa:	2e01      	cmp	r6, #1
 80110ac:	d10b      	bne.n	80110c6 <__gethex+0x282>
 80110ae:	9a02      	ldr	r2, [sp, #8]
 80110b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80110b4:	6013      	str	r3, [r2, #0]
 80110b6:	2301      	movs	r3, #1
 80110b8:	6123      	str	r3, [r4, #16]
 80110ba:	f8ca 3000 	str.w	r3, [sl]
 80110be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110c0:	2562      	movs	r5, #98	@ 0x62
 80110c2:	601c      	str	r4, [r3, #0]
 80110c4:	e73a      	b.n	8010f3c <__gethex+0xf8>
 80110c6:	1e71      	subs	r1, r6, #1
 80110c8:	4620      	mov	r0, r4
 80110ca:	f7fe fdae 	bl	800fc2a <__any_on>
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d1ed      	bne.n	80110ae <__gethex+0x26a>
 80110d2:	9801      	ldr	r0, [sp, #4]
 80110d4:	4621      	mov	r1, r4
 80110d6:	f7fe f957 	bl	800f388 <_Bfree>
 80110da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110dc:	2300      	movs	r3, #0
 80110de:	6013      	str	r3, [r2, #0]
 80110e0:	2550      	movs	r5, #80	@ 0x50
 80110e2:	e72b      	b.n	8010f3c <__gethex+0xf8>
 80110e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d1f3      	bne.n	80110d2 <__gethex+0x28e>
 80110ea:	e7e0      	b.n	80110ae <__gethex+0x26a>
 80110ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d1dd      	bne.n	80110ae <__gethex+0x26a>
 80110f2:	e7ee      	b.n	80110d2 <__gethex+0x28e>
 80110f4:	080147d0 	.word	0x080147d0
 80110f8:	0801466a 	.word	0x0801466a
 80110fc:	0801487d 	.word	0x0801487d
 8011100:	1e6f      	subs	r7, r5, #1
 8011102:	f1b9 0f00 	cmp.w	r9, #0
 8011106:	d130      	bne.n	801116a <__gethex+0x326>
 8011108:	b127      	cbz	r7, 8011114 <__gethex+0x2d0>
 801110a:	4639      	mov	r1, r7
 801110c:	4620      	mov	r0, r4
 801110e:	f7fe fd8c 	bl	800fc2a <__any_on>
 8011112:	4681      	mov	r9, r0
 8011114:	117a      	asrs	r2, r7, #5
 8011116:	2301      	movs	r3, #1
 8011118:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801111c:	f007 071f 	and.w	r7, r7, #31
 8011120:	40bb      	lsls	r3, r7
 8011122:	4213      	tst	r3, r2
 8011124:	4629      	mov	r1, r5
 8011126:	4620      	mov	r0, r4
 8011128:	bf18      	it	ne
 801112a:	f049 0902 	orrne.w	r9, r9, #2
 801112e:	f7ff fe21 	bl	8010d74 <rshift>
 8011132:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011136:	1b76      	subs	r6, r6, r5
 8011138:	2502      	movs	r5, #2
 801113a:	f1b9 0f00 	cmp.w	r9, #0
 801113e:	d047      	beq.n	80111d0 <__gethex+0x38c>
 8011140:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011144:	2b02      	cmp	r3, #2
 8011146:	d015      	beq.n	8011174 <__gethex+0x330>
 8011148:	2b03      	cmp	r3, #3
 801114a:	d017      	beq.n	801117c <__gethex+0x338>
 801114c:	2b01      	cmp	r3, #1
 801114e:	d109      	bne.n	8011164 <__gethex+0x320>
 8011150:	f019 0f02 	tst.w	r9, #2
 8011154:	d006      	beq.n	8011164 <__gethex+0x320>
 8011156:	f8da 3000 	ldr.w	r3, [sl]
 801115a:	ea49 0903 	orr.w	r9, r9, r3
 801115e:	f019 0f01 	tst.w	r9, #1
 8011162:	d10e      	bne.n	8011182 <__gethex+0x33e>
 8011164:	f045 0510 	orr.w	r5, r5, #16
 8011168:	e032      	b.n	80111d0 <__gethex+0x38c>
 801116a:	f04f 0901 	mov.w	r9, #1
 801116e:	e7d1      	b.n	8011114 <__gethex+0x2d0>
 8011170:	2501      	movs	r5, #1
 8011172:	e7e2      	b.n	801113a <__gethex+0x2f6>
 8011174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011176:	f1c3 0301 	rsb	r3, r3, #1
 801117a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801117c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801117e:	2b00      	cmp	r3, #0
 8011180:	d0f0      	beq.n	8011164 <__gethex+0x320>
 8011182:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011186:	f104 0314 	add.w	r3, r4, #20
 801118a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801118e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011192:	f04f 0c00 	mov.w	ip, #0
 8011196:	4618      	mov	r0, r3
 8011198:	f853 2b04 	ldr.w	r2, [r3], #4
 801119c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80111a0:	d01b      	beq.n	80111da <__gethex+0x396>
 80111a2:	3201      	adds	r2, #1
 80111a4:	6002      	str	r2, [r0, #0]
 80111a6:	2d02      	cmp	r5, #2
 80111a8:	f104 0314 	add.w	r3, r4, #20
 80111ac:	d13c      	bne.n	8011228 <__gethex+0x3e4>
 80111ae:	f8d8 2000 	ldr.w	r2, [r8]
 80111b2:	3a01      	subs	r2, #1
 80111b4:	42b2      	cmp	r2, r6
 80111b6:	d109      	bne.n	80111cc <__gethex+0x388>
 80111b8:	1171      	asrs	r1, r6, #5
 80111ba:	2201      	movs	r2, #1
 80111bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80111c0:	f006 061f 	and.w	r6, r6, #31
 80111c4:	fa02 f606 	lsl.w	r6, r2, r6
 80111c8:	421e      	tst	r6, r3
 80111ca:	d13a      	bne.n	8011242 <__gethex+0x3fe>
 80111cc:	f045 0520 	orr.w	r5, r5, #32
 80111d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111d2:	601c      	str	r4, [r3, #0]
 80111d4:	9b02      	ldr	r3, [sp, #8]
 80111d6:	601f      	str	r7, [r3, #0]
 80111d8:	e6b0      	b.n	8010f3c <__gethex+0xf8>
 80111da:	4299      	cmp	r1, r3
 80111dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80111e0:	d8d9      	bhi.n	8011196 <__gethex+0x352>
 80111e2:	68a3      	ldr	r3, [r4, #8]
 80111e4:	459b      	cmp	fp, r3
 80111e6:	db17      	blt.n	8011218 <__gethex+0x3d4>
 80111e8:	6861      	ldr	r1, [r4, #4]
 80111ea:	9801      	ldr	r0, [sp, #4]
 80111ec:	3101      	adds	r1, #1
 80111ee:	f7fe f88b 	bl	800f308 <_Balloc>
 80111f2:	4681      	mov	r9, r0
 80111f4:	b918      	cbnz	r0, 80111fe <__gethex+0x3ba>
 80111f6:	4b1a      	ldr	r3, [pc, #104]	@ (8011260 <__gethex+0x41c>)
 80111f8:	4602      	mov	r2, r0
 80111fa:	2184      	movs	r1, #132	@ 0x84
 80111fc:	e6c5      	b.n	8010f8a <__gethex+0x146>
 80111fe:	6922      	ldr	r2, [r4, #16]
 8011200:	3202      	adds	r2, #2
 8011202:	f104 010c 	add.w	r1, r4, #12
 8011206:	0092      	lsls	r2, r2, #2
 8011208:	300c      	adds	r0, #12
 801120a:	f7fd f91a 	bl	800e442 <memcpy>
 801120e:	4621      	mov	r1, r4
 8011210:	9801      	ldr	r0, [sp, #4]
 8011212:	f7fe f8b9 	bl	800f388 <_Bfree>
 8011216:	464c      	mov	r4, r9
 8011218:	6923      	ldr	r3, [r4, #16]
 801121a:	1c5a      	adds	r2, r3, #1
 801121c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011220:	6122      	str	r2, [r4, #16]
 8011222:	2201      	movs	r2, #1
 8011224:	615a      	str	r2, [r3, #20]
 8011226:	e7be      	b.n	80111a6 <__gethex+0x362>
 8011228:	6922      	ldr	r2, [r4, #16]
 801122a:	455a      	cmp	r2, fp
 801122c:	dd0b      	ble.n	8011246 <__gethex+0x402>
 801122e:	2101      	movs	r1, #1
 8011230:	4620      	mov	r0, r4
 8011232:	f7ff fd9f 	bl	8010d74 <rshift>
 8011236:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801123a:	3701      	adds	r7, #1
 801123c:	42bb      	cmp	r3, r7
 801123e:	f6ff aee0 	blt.w	8011002 <__gethex+0x1be>
 8011242:	2501      	movs	r5, #1
 8011244:	e7c2      	b.n	80111cc <__gethex+0x388>
 8011246:	f016 061f 	ands.w	r6, r6, #31
 801124a:	d0fa      	beq.n	8011242 <__gethex+0x3fe>
 801124c:	4453      	add	r3, sl
 801124e:	f1c6 0620 	rsb	r6, r6, #32
 8011252:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011256:	f7fe f949 	bl	800f4ec <__hi0bits>
 801125a:	42b0      	cmp	r0, r6
 801125c:	dbe7      	blt.n	801122e <__gethex+0x3ea>
 801125e:	e7f0      	b.n	8011242 <__gethex+0x3fe>
 8011260:	0801466a 	.word	0x0801466a

08011264 <L_shift>:
 8011264:	f1c2 0208 	rsb	r2, r2, #8
 8011268:	0092      	lsls	r2, r2, #2
 801126a:	b570      	push	{r4, r5, r6, lr}
 801126c:	f1c2 0620 	rsb	r6, r2, #32
 8011270:	6843      	ldr	r3, [r0, #4]
 8011272:	6804      	ldr	r4, [r0, #0]
 8011274:	fa03 f506 	lsl.w	r5, r3, r6
 8011278:	432c      	orrs	r4, r5
 801127a:	40d3      	lsrs	r3, r2
 801127c:	6004      	str	r4, [r0, #0]
 801127e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011282:	4288      	cmp	r0, r1
 8011284:	d3f4      	bcc.n	8011270 <L_shift+0xc>
 8011286:	bd70      	pop	{r4, r5, r6, pc}

08011288 <__match>:
 8011288:	b530      	push	{r4, r5, lr}
 801128a:	6803      	ldr	r3, [r0, #0]
 801128c:	3301      	adds	r3, #1
 801128e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011292:	b914      	cbnz	r4, 801129a <__match+0x12>
 8011294:	6003      	str	r3, [r0, #0]
 8011296:	2001      	movs	r0, #1
 8011298:	bd30      	pop	{r4, r5, pc}
 801129a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801129e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80112a2:	2d19      	cmp	r5, #25
 80112a4:	bf98      	it	ls
 80112a6:	3220      	addls	r2, #32
 80112a8:	42a2      	cmp	r2, r4
 80112aa:	d0f0      	beq.n	801128e <__match+0x6>
 80112ac:	2000      	movs	r0, #0
 80112ae:	e7f3      	b.n	8011298 <__match+0x10>

080112b0 <__hexnan>:
 80112b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b4:	680b      	ldr	r3, [r1, #0]
 80112b6:	6801      	ldr	r1, [r0, #0]
 80112b8:	115e      	asrs	r6, r3, #5
 80112ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80112be:	f013 031f 	ands.w	r3, r3, #31
 80112c2:	b087      	sub	sp, #28
 80112c4:	bf18      	it	ne
 80112c6:	3604      	addne	r6, #4
 80112c8:	2500      	movs	r5, #0
 80112ca:	1f37      	subs	r7, r6, #4
 80112cc:	4682      	mov	sl, r0
 80112ce:	4690      	mov	r8, r2
 80112d0:	9301      	str	r3, [sp, #4]
 80112d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80112d6:	46b9      	mov	r9, r7
 80112d8:	463c      	mov	r4, r7
 80112da:	9502      	str	r5, [sp, #8]
 80112dc:	46ab      	mov	fp, r5
 80112de:	784a      	ldrb	r2, [r1, #1]
 80112e0:	1c4b      	adds	r3, r1, #1
 80112e2:	9303      	str	r3, [sp, #12]
 80112e4:	b342      	cbz	r2, 8011338 <__hexnan+0x88>
 80112e6:	4610      	mov	r0, r2
 80112e8:	9105      	str	r1, [sp, #20]
 80112ea:	9204      	str	r2, [sp, #16]
 80112ec:	f7ff fd94 	bl	8010e18 <__hexdig_fun>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	d151      	bne.n	8011398 <__hexnan+0xe8>
 80112f4:	9a04      	ldr	r2, [sp, #16]
 80112f6:	9905      	ldr	r1, [sp, #20]
 80112f8:	2a20      	cmp	r2, #32
 80112fa:	d818      	bhi.n	801132e <__hexnan+0x7e>
 80112fc:	9b02      	ldr	r3, [sp, #8]
 80112fe:	459b      	cmp	fp, r3
 8011300:	dd13      	ble.n	801132a <__hexnan+0x7a>
 8011302:	454c      	cmp	r4, r9
 8011304:	d206      	bcs.n	8011314 <__hexnan+0x64>
 8011306:	2d07      	cmp	r5, #7
 8011308:	dc04      	bgt.n	8011314 <__hexnan+0x64>
 801130a:	462a      	mov	r2, r5
 801130c:	4649      	mov	r1, r9
 801130e:	4620      	mov	r0, r4
 8011310:	f7ff ffa8 	bl	8011264 <L_shift>
 8011314:	4544      	cmp	r4, r8
 8011316:	d952      	bls.n	80113be <__hexnan+0x10e>
 8011318:	2300      	movs	r3, #0
 801131a:	f1a4 0904 	sub.w	r9, r4, #4
 801131e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011322:	f8cd b008 	str.w	fp, [sp, #8]
 8011326:	464c      	mov	r4, r9
 8011328:	461d      	mov	r5, r3
 801132a:	9903      	ldr	r1, [sp, #12]
 801132c:	e7d7      	b.n	80112de <__hexnan+0x2e>
 801132e:	2a29      	cmp	r2, #41	@ 0x29
 8011330:	d157      	bne.n	80113e2 <__hexnan+0x132>
 8011332:	3102      	adds	r1, #2
 8011334:	f8ca 1000 	str.w	r1, [sl]
 8011338:	f1bb 0f00 	cmp.w	fp, #0
 801133c:	d051      	beq.n	80113e2 <__hexnan+0x132>
 801133e:	454c      	cmp	r4, r9
 8011340:	d206      	bcs.n	8011350 <__hexnan+0xa0>
 8011342:	2d07      	cmp	r5, #7
 8011344:	dc04      	bgt.n	8011350 <__hexnan+0xa0>
 8011346:	462a      	mov	r2, r5
 8011348:	4649      	mov	r1, r9
 801134a:	4620      	mov	r0, r4
 801134c:	f7ff ff8a 	bl	8011264 <L_shift>
 8011350:	4544      	cmp	r4, r8
 8011352:	d936      	bls.n	80113c2 <__hexnan+0x112>
 8011354:	f1a8 0204 	sub.w	r2, r8, #4
 8011358:	4623      	mov	r3, r4
 801135a:	f853 1b04 	ldr.w	r1, [r3], #4
 801135e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011362:	429f      	cmp	r7, r3
 8011364:	d2f9      	bcs.n	801135a <__hexnan+0xaa>
 8011366:	1b3b      	subs	r3, r7, r4
 8011368:	f023 0303 	bic.w	r3, r3, #3
 801136c:	3304      	adds	r3, #4
 801136e:	3401      	adds	r4, #1
 8011370:	3e03      	subs	r6, #3
 8011372:	42b4      	cmp	r4, r6
 8011374:	bf88      	it	hi
 8011376:	2304      	movhi	r3, #4
 8011378:	4443      	add	r3, r8
 801137a:	2200      	movs	r2, #0
 801137c:	f843 2b04 	str.w	r2, [r3], #4
 8011380:	429f      	cmp	r7, r3
 8011382:	d2fb      	bcs.n	801137c <__hexnan+0xcc>
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	b91b      	cbnz	r3, 8011390 <__hexnan+0xe0>
 8011388:	4547      	cmp	r7, r8
 801138a:	d128      	bne.n	80113de <__hexnan+0x12e>
 801138c:	2301      	movs	r3, #1
 801138e:	603b      	str	r3, [r7, #0]
 8011390:	2005      	movs	r0, #5
 8011392:	b007      	add	sp, #28
 8011394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011398:	3501      	adds	r5, #1
 801139a:	2d08      	cmp	r5, #8
 801139c:	f10b 0b01 	add.w	fp, fp, #1
 80113a0:	dd06      	ble.n	80113b0 <__hexnan+0x100>
 80113a2:	4544      	cmp	r4, r8
 80113a4:	d9c1      	bls.n	801132a <__hexnan+0x7a>
 80113a6:	2300      	movs	r3, #0
 80113a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80113ac:	2501      	movs	r5, #1
 80113ae:	3c04      	subs	r4, #4
 80113b0:	6822      	ldr	r2, [r4, #0]
 80113b2:	f000 000f 	and.w	r0, r0, #15
 80113b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80113ba:	6020      	str	r0, [r4, #0]
 80113bc:	e7b5      	b.n	801132a <__hexnan+0x7a>
 80113be:	2508      	movs	r5, #8
 80113c0:	e7b3      	b.n	801132a <__hexnan+0x7a>
 80113c2:	9b01      	ldr	r3, [sp, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d0dd      	beq.n	8011384 <__hexnan+0xd4>
 80113c8:	f1c3 0320 	rsb	r3, r3, #32
 80113cc:	f04f 32ff 	mov.w	r2, #4294967295
 80113d0:	40da      	lsrs	r2, r3
 80113d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80113d6:	4013      	ands	r3, r2
 80113d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80113dc:	e7d2      	b.n	8011384 <__hexnan+0xd4>
 80113de:	3f04      	subs	r7, #4
 80113e0:	e7d0      	b.n	8011384 <__hexnan+0xd4>
 80113e2:	2004      	movs	r0, #4
 80113e4:	e7d5      	b.n	8011392 <__hexnan+0xe2>

080113e6 <__ascii_mbtowc>:
 80113e6:	b082      	sub	sp, #8
 80113e8:	b901      	cbnz	r1, 80113ec <__ascii_mbtowc+0x6>
 80113ea:	a901      	add	r1, sp, #4
 80113ec:	b142      	cbz	r2, 8011400 <__ascii_mbtowc+0x1a>
 80113ee:	b14b      	cbz	r3, 8011404 <__ascii_mbtowc+0x1e>
 80113f0:	7813      	ldrb	r3, [r2, #0]
 80113f2:	600b      	str	r3, [r1, #0]
 80113f4:	7812      	ldrb	r2, [r2, #0]
 80113f6:	1e10      	subs	r0, r2, #0
 80113f8:	bf18      	it	ne
 80113fa:	2001      	movne	r0, #1
 80113fc:	b002      	add	sp, #8
 80113fe:	4770      	bx	lr
 8011400:	4610      	mov	r0, r2
 8011402:	e7fb      	b.n	80113fc <__ascii_mbtowc+0x16>
 8011404:	f06f 0001 	mvn.w	r0, #1
 8011408:	e7f8      	b.n	80113fc <__ascii_mbtowc+0x16>

0801140a <_realloc_r>:
 801140a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801140e:	4680      	mov	r8, r0
 8011410:	4615      	mov	r5, r2
 8011412:	460c      	mov	r4, r1
 8011414:	b921      	cbnz	r1, 8011420 <_realloc_r+0x16>
 8011416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801141a:	4611      	mov	r1, r2
 801141c:	f7fd bee8 	b.w	800f1f0 <_malloc_r>
 8011420:	b92a      	cbnz	r2, 801142e <_realloc_r+0x24>
 8011422:	f7fd fe71 	bl	800f108 <_free_r>
 8011426:	2400      	movs	r4, #0
 8011428:	4620      	mov	r0, r4
 801142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801142e:	f000 f840 	bl	80114b2 <_malloc_usable_size_r>
 8011432:	4285      	cmp	r5, r0
 8011434:	4606      	mov	r6, r0
 8011436:	d802      	bhi.n	801143e <_realloc_r+0x34>
 8011438:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801143c:	d8f4      	bhi.n	8011428 <_realloc_r+0x1e>
 801143e:	4629      	mov	r1, r5
 8011440:	4640      	mov	r0, r8
 8011442:	f7fd fed5 	bl	800f1f0 <_malloc_r>
 8011446:	4607      	mov	r7, r0
 8011448:	2800      	cmp	r0, #0
 801144a:	d0ec      	beq.n	8011426 <_realloc_r+0x1c>
 801144c:	42b5      	cmp	r5, r6
 801144e:	462a      	mov	r2, r5
 8011450:	4621      	mov	r1, r4
 8011452:	bf28      	it	cs
 8011454:	4632      	movcs	r2, r6
 8011456:	f7fc fff4 	bl	800e442 <memcpy>
 801145a:	4621      	mov	r1, r4
 801145c:	4640      	mov	r0, r8
 801145e:	f7fd fe53 	bl	800f108 <_free_r>
 8011462:	463c      	mov	r4, r7
 8011464:	e7e0      	b.n	8011428 <_realloc_r+0x1e>

08011466 <__ascii_wctomb>:
 8011466:	4603      	mov	r3, r0
 8011468:	4608      	mov	r0, r1
 801146a:	b141      	cbz	r1, 801147e <__ascii_wctomb+0x18>
 801146c:	2aff      	cmp	r2, #255	@ 0xff
 801146e:	d904      	bls.n	801147a <__ascii_wctomb+0x14>
 8011470:	228a      	movs	r2, #138	@ 0x8a
 8011472:	601a      	str	r2, [r3, #0]
 8011474:	f04f 30ff 	mov.w	r0, #4294967295
 8011478:	4770      	bx	lr
 801147a:	700a      	strb	r2, [r1, #0]
 801147c:	2001      	movs	r0, #1
 801147e:	4770      	bx	lr

08011480 <fiprintf>:
 8011480:	b40e      	push	{r1, r2, r3}
 8011482:	b503      	push	{r0, r1, lr}
 8011484:	4601      	mov	r1, r0
 8011486:	ab03      	add	r3, sp, #12
 8011488:	4805      	ldr	r0, [pc, #20]	@ (80114a0 <fiprintf+0x20>)
 801148a:	f853 2b04 	ldr.w	r2, [r3], #4
 801148e:	6800      	ldr	r0, [r0, #0]
 8011490:	9301      	str	r3, [sp, #4]
 8011492:	f000 f83f 	bl	8011514 <_vfiprintf_r>
 8011496:	b002      	add	sp, #8
 8011498:	f85d eb04 	ldr.w	lr, [sp], #4
 801149c:	b003      	add	sp, #12
 801149e:	4770      	bx	lr
 80114a0:	200003f4 	.word	0x200003f4

080114a4 <abort>:
 80114a4:	b508      	push	{r3, lr}
 80114a6:	2006      	movs	r0, #6
 80114a8:	f000 fa08 	bl	80118bc <raise>
 80114ac:	2001      	movs	r0, #1
 80114ae:	f7f7 feb1 	bl	8009214 <_exit>

080114b2 <_malloc_usable_size_r>:
 80114b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114b6:	1f18      	subs	r0, r3, #4
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	bfbc      	itt	lt
 80114bc:	580b      	ldrlt	r3, [r1, r0]
 80114be:	18c0      	addlt	r0, r0, r3
 80114c0:	4770      	bx	lr

080114c2 <__sfputc_r>:
 80114c2:	6893      	ldr	r3, [r2, #8]
 80114c4:	3b01      	subs	r3, #1
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	b410      	push	{r4}
 80114ca:	6093      	str	r3, [r2, #8]
 80114cc:	da08      	bge.n	80114e0 <__sfputc_r+0x1e>
 80114ce:	6994      	ldr	r4, [r2, #24]
 80114d0:	42a3      	cmp	r3, r4
 80114d2:	db01      	blt.n	80114d8 <__sfputc_r+0x16>
 80114d4:	290a      	cmp	r1, #10
 80114d6:	d103      	bne.n	80114e0 <__sfputc_r+0x1e>
 80114d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114dc:	f000 b932 	b.w	8011744 <__swbuf_r>
 80114e0:	6813      	ldr	r3, [r2, #0]
 80114e2:	1c58      	adds	r0, r3, #1
 80114e4:	6010      	str	r0, [r2, #0]
 80114e6:	7019      	strb	r1, [r3, #0]
 80114e8:	4608      	mov	r0, r1
 80114ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114ee:	4770      	bx	lr

080114f0 <__sfputs_r>:
 80114f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114f2:	4606      	mov	r6, r0
 80114f4:	460f      	mov	r7, r1
 80114f6:	4614      	mov	r4, r2
 80114f8:	18d5      	adds	r5, r2, r3
 80114fa:	42ac      	cmp	r4, r5
 80114fc:	d101      	bne.n	8011502 <__sfputs_r+0x12>
 80114fe:	2000      	movs	r0, #0
 8011500:	e007      	b.n	8011512 <__sfputs_r+0x22>
 8011502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011506:	463a      	mov	r2, r7
 8011508:	4630      	mov	r0, r6
 801150a:	f7ff ffda 	bl	80114c2 <__sfputc_r>
 801150e:	1c43      	adds	r3, r0, #1
 8011510:	d1f3      	bne.n	80114fa <__sfputs_r+0xa>
 8011512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011514 <_vfiprintf_r>:
 8011514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011518:	460d      	mov	r5, r1
 801151a:	b09d      	sub	sp, #116	@ 0x74
 801151c:	4614      	mov	r4, r2
 801151e:	4698      	mov	r8, r3
 8011520:	4606      	mov	r6, r0
 8011522:	b118      	cbz	r0, 801152c <_vfiprintf_r+0x18>
 8011524:	6a03      	ldr	r3, [r0, #32]
 8011526:	b90b      	cbnz	r3, 801152c <_vfiprintf_r+0x18>
 8011528:	f7fc fe72 	bl	800e210 <__sinit>
 801152c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801152e:	07d9      	lsls	r1, r3, #31
 8011530:	d405      	bmi.n	801153e <_vfiprintf_r+0x2a>
 8011532:	89ab      	ldrh	r3, [r5, #12]
 8011534:	059a      	lsls	r2, r3, #22
 8011536:	d402      	bmi.n	801153e <_vfiprintf_r+0x2a>
 8011538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801153a:	f7fc ff80 	bl	800e43e <__retarget_lock_acquire_recursive>
 801153e:	89ab      	ldrh	r3, [r5, #12]
 8011540:	071b      	lsls	r3, r3, #28
 8011542:	d501      	bpl.n	8011548 <_vfiprintf_r+0x34>
 8011544:	692b      	ldr	r3, [r5, #16]
 8011546:	b99b      	cbnz	r3, 8011570 <_vfiprintf_r+0x5c>
 8011548:	4629      	mov	r1, r5
 801154a:	4630      	mov	r0, r6
 801154c:	f000 f938 	bl	80117c0 <__swsetup_r>
 8011550:	b170      	cbz	r0, 8011570 <_vfiprintf_r+0x5c>
 8011552:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011554:	07dc      	lsls	r4, r3, #31
 8011556:	d504      	bpl.n	8011562 <_vfiprintf_r+0x4e>
 8011558:	f04f 30ff 	mov.w	r0, #4294967295
 801155c:	b01d      	add	sp, #116	@ 0x74
 801155e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011562:	89ab      	ldrh	r3, [r5, #12]
 8011564:	0598      	lsls	r0, r3, #22
 8011566:	d4f7      	bmi.n	8011558 <_vfiprintf_r+0x44>
 8011568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801156a:	f7fc ff69 	bl	800e440 <__retarget_lock_release_recursive>
 801156e:	e7f3      	b.n	8011558 <_vfiprintf_r+0x44>
 8011570:	2300      	movs	r3, #0
 8011572:	9309      	str	r3, [sp, #36]	@ 0x24
 8011574:	2320      	movs	r3, #32
 8011576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801157a:	f8cd 800c 	str.w	r8, [sp, #12]
 801157e:	2330      	movs	r3, #48	@ 0x30
 8011580:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011730 <_vfiprintf_r+0x21c>
 8011584:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011588:	f04f 0901 	mov.w	r9, #1
 801158c:	4623      	mov	r3, r4
 801158e:	469a      	mov	sl, r3
 8011590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011594:	b10a      	cbz	r2, 801159a <_vfiprintf_r+0x86>
 8011596:	2a25      	cmp	r2, #37	@ 0x25
 8011598:	d1f9      	bne.n	801158e <_vfiprintf_r+0x7a>
 801159a:	ebba 0b04 	subs.w	fp, sl, r4
 801159e:	d00b      	beq.n	80115b8 <_vfiprintf_r+0xa4>
 80115a0:	465b      	mov	r3, fp
 80115a2:	4622      	mov	r2, r4
 80115a4:	4629      	mov	r1, r5
 80115a6:	4630      	mov	r0, r6
 80115a8:	f7ff ffa2 	bl	80114f0 <__sfputs_r>
 80115ac:	3001      	adds	r0, #1
 80115ae:	f000 80a7 	beq.w	8011700 <_vfiprintf_r+0x1ec>
 80115b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115b4:	445a      	add	r2, fp
 80115b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80115b8:	f89a 3000 	ldrb.w	r3, [sl]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 809f 	beq.w	8011700 <_vfiprintf_r+0x1ec>
 80115c2:	2300      	movs	r3, #0
 80115c4:	f04f 32ff 	mov.w	r2, #4294967295
 80115c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115cc:	f10a 0a01 	add.w	sl, sl, #1
 80115d0:	9304      	str	r3, [sp, #16]
 80115d2:	9307      	str	r3, [sp, #28]
 80115d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80115da:	4654      	mov	r4, sl
 80115dc:	2205      	movs	r2, #5
 80115de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115e2:	4853      	ldr	r0, [pc, #332]	@ (8011730 <_vfiprintf_r+0x21c>)
 80115e4:	f7ee fe04 	bl	80001f0 <memchr>
 80115e8:	9a04      	ldr	r2, [sp, #16]
 80115ea:	b9d8      	cbnz	r0, 8011624 <_vfiprintf_r+0x110>
 80115ec:	06d1      	lsls	r1, r2, #27
 80115ee:	bf44      	itt	mi
 80115f0:	2320      	movmi	r3, #32
 80115f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115f6:	0713      	lsls	r3, r2, #28
 80115f8:	bf44      	itt	mi
 80115fa:	232b      	movmi	r3, #43	@ 0x2b
 80115fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011600:	f89a 3000 	ldrb.w	r3, [sl]
 8011604:	2b2a      	cmp	r3, #42	@ 0x2a
 8011606:	d015      	beq.n	8011634 <_vfiprintf_r+0x120>
 8011608:	9a07      	ldr	r2, [sp, #28]
 801160a:	4654      	mov	r4, sl
 801160c:	2000      	movs	r0, #0
 801160e:	f04f 0c0a 	mov.w	ip, #10
 8011612:	4621      	mov	r1, r4
 8011614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011618:	3b30      	subs	r3, #48	@ 0x30
 801161a:	2b09      	cmp	r3, #9
 801161c:	d94b      	bls.n	80116b6 <_vfiprintf_r+0x1a2>
 801161e:	b1b0      	cbz	r0, 801164e <_vfiprintf_r+0x13a>
 8011620:	9207      	str	r2, [sp, #28]
 8011622:	e014      	b.n	801164e <_vfiprintf_r+0x13a>
 8011624:	eba0 0308 	sub.w	r3, r0, r8
 8011628:	fa09 f303 	lsl.w	r3, r9, r3
 801162c:	4313      	orrs	r3, r2
 801162e:	9304      	str	r3, [sp, #16]
 8011630:	46a2      	mov	sl, r4
 8011632:	e7d2      	b.n	80115da <_vfiprintf_r+0xc6>
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	1d19      	adds	r1, r3, #4
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	9103      	str	r1, [sp, #12]
 801163c:	2b00      	cmp	r3, #0
 801163e:	bfbb      	ittet	lt
 8011640:	425b      	neglt	r3, r3
 8011642:	f042 0202 	orrlt.w	r2, r2, #2
 8011646:	9307      	strge	r3, [sp, #28]
 8011648:	9307      	strlt	r3, [sp, #28]
 801164a:	bfb8      	it	lt
 801164c:	9204      	strlt	r2, [sp, #16]
 801164e:	7823      	ldrb	r3, [r4, #0]
 8011650:	2b2e      	cmp	r3, #46	@ 0x2e
 8011652:	d10a      	bne.n	801166a <_vfiprintf_r+0x156>
 8011654:	7863      	ldrb	r3, [r4, #1]
 8011656:	2b2a      	cmp	r3, #42	@ 0x2a
 8011658:	d132      	bne.n	80116c0 <_vfiprintf_r+0x1ac>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	1d1a      	adds	r2, r3, #4
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	9203      	str	r2, [sp, #12]
 8011662:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011666:	3402      	adds	r4, #2
 8011668:	9305      	str	r3, [sp, #20]
 801166a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011740 <_vfiprintf_r+0x22c>
 801166e:	7821      	ldrb	r1, [r4, #0]
 8011670:	2203      	movs	r2, #3
 8011672:	4650      	mov	r0, sl
 8011674:	f7ee fdbc 	bl	80001f0 <memchr>
 8011678:	b138      	cbz	r0, 801168a <_vfiprintf_r+0x176>
 801167a:	9b04      	ldr	r3, [sp, #16]
 801167c:	eba0 000a 	sub.w	r0, r0, sl
 8011680:	2240      	movs	r2, #64	@ 0x40
 8011682:	4082      	lsls	r2, r0
 8011684:	4313      	orrs	r3, r2
 8011686:	3401      	adds	r4, #1
 8011688:	9304      	str	r3, [sp, #16]
 801168a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801168e:	4829      	ldr	r0, [pc, #164]	@ (8011734 <_vfiprintf_r+0x220>)
 8011690:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011694:	2206      	movs	r2, #6
 8011696:	f7ee fdab 	bl	80001f0 <memchr>
 801169a:	2800      	cmp	r0, #0
 801169c:	d03f      	beq.n	801171e <_vfiprintf_r+0x20a>
 801169e:	4b26      	ldr	r3, [pc, #152]	@ (8011738 <_vfiprintf_r+0x224>)
 80116a0:	bb1b      	cbnz	r3, 80116ea <_vfiprintf_r+0x1d6>
 80116a2:	9b03      	ldr	r3, [sp, #12]
 80116a4:	3307      	adds	r3, #7
 80116a6:	f023 0307 	bic.w	r3, r3, #7
 80116aa:	3308      	adds	r3, #8
 80116ac:	9303      	str	r3, [sp, #12]
 80116ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116b0:	443b      	add	r3, r7
 80116b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80116b4:	e76a      	b.n	801158c <_vfiprintf_r+0x78>
 80116b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80116ba:	460c      	mov	r4, r1
 80116bc:	2001      	movs	r0, #1
 80116be:	e7a8      	b.n	8011612 <_vfiprintf_r+0xfe>
 80116c0:	2300      	movs	r3, #0
 80116c2:	3401      	adds	r4, #1
 80116c4:	9305      	str	r3, [sp, #20]
 80116c6:	4619      	mov	r1, r3
 80116c8:	f04f 0c0a 	mov.w	ip, #10
 80116cc:	4620      	mov	r0, r4
 80116ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116d2:	3a30      	subs	r2, #48	@ 0x30
 80116d4:	2a09      	cmp	r2, #9
 80116d6:	d903      	bls.n	80116e0 <_vfiprintf_r+0x1cc>
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d0c6      	beq.n	801166a <_vfiprintf_r+0x156>
 80116dc:	9105      	str	r1, [sp, #20]
 80116de:	e7c4      	b.n	801166a <_vfiprintf_r+0x156>
 80116e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80116e4:	4604      	mov	r4, r0
 80116e6:	2301      	movs	r3, #1
 80116e8:	e7f0      	b.n	80116cc <_vfiprintf_r+0x1b8>
 80116ea:	ab03      	add	r3, sp, #12
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	462a      	mov	r2, r5
 80116f0:	4b12      	ldr	r3, [pc, #72]	@ (801173c <_vfiprintf_r+0x228>)
 80116f2:	a904      	add	r1, sp, #16
 80116f4:	4630      	mov	r0, r6
 80116f6:	f7fb ff33 	bl	800d560 <_printf_float>
 80116fa:	4607      	mov	r7, r0
 80116fc:	1c78      	adds	r0, r7, #1
 80116fe:	d1d6      	bne.n	80116ae <_vfiprintf_r+0x19a>
 8011700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011702:	07d9      	lsls	r1, r3, #31
 8011704:	d405      	bmi.n	8011712 <_vfiprintf_r+0x1fe>
 8011706:	89ab      	ldrh	r3, [r5, #12]
 8011708:	059a      	lsls	r2, r3, #22
 801170a:	d402      	bmi.n	8011712 <_vfiprintf_r+0x1fe>
 801170c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801170e:	f7fc fe97 	bl	800e440 <__retarget_lock_release_recursive>
 8011712:	89ab      	ldrh	r3, [r5, #12]
 8011714:	065b      	lsls	r3, r3, #25
 8011716:	f53f af1f 	bmi.w	8011558 <_vfiprintf_r+0x44>
 801171a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801171c:	e71e      	b.n	801155c <_vfiprintf_r+0x48>
 801171e:	ab03      	add	r3, sp, #12
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	462a      	mov	r2, r5
 8011724:	4b05      	ldr	r3, [pc, #20]	@ (801173c <_vfiprintf_r+0x228>)
 8011726:	a904      	add	r1, sp, #16
 8011728:	4630      	mov	r0, r6
 801172a:	f7fc f9b1 	bl	800da90 <_printf_i>
 801172e:	e7e4      	b.n	80116fa <_vfiprintf_r+0x1e6>
 8011730:	08014828 	.word	0x08014828
 8011734:	08014832 	.word	0x08014832
 8011738:	0800d561 	.word	0x0800d561
 801173c:	080114f1 	.word	0x080114f1
 8011740:	0801482e 	.word	0x0801482e

08011744 <__swbuf_r>:
 8011744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011746:	460e      	mov	r6, r1
 8011748:	4614      	mov	r4, r2
 801174a:	4605      	mov	r5, r0
 801174c:	b118      	cbz	r0, 8011756 <__swbuf_r+0x12>
 801174e:	6a03      	ldr	r3, [r0, #32]
 8011750:	b90b      	cbnz	r3, 8011756 <__swbuf_r+0x12>
 8011752:	f7fc fd5d 	bl	800e210 <__sinit>
 8011756:	69a3      	ldr	r3, [r4, #24]
 8011758:	60a3      	str	r3, [r4, #8]
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	071a      	lsls	r2, r3, #28
 801175e:	d501      	bpl.n	8011764 <__swbuf_r+0x20>
 8011760:	6923      	ldr	r3, [r4, #16]
 8011762:	b943      	cbnz	r3, 8011776 <__swbuf_r+0x32>
 8011764:	4621      	mov	r1, r4
 8011766:	4628      	mov	r0, r5
 8011768:	f000 f82a 	bl	80117c0 <__swsetup_r>
 801176c:	b118      	cbz	r0, 8011776 <__swbuf_r+0x32>
 801176e:	f04f 37ff 	mov.w	r7, #4294967295
 8011772:	4638      	mov	r0, r7
 8011774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011776:	6823      	ldr	r3, [r4, #0]
 8011778:	6922      	ldr	r2, [r4, #16]
 801177a:	1a98      	subs	r0, r3, r2
 801177c:	6963      	ldr	r3, [r4, #20]
 801177e:	b2f6      	uxtb	r6, r6
 8011780:	4283      	cmp	r3, r0
 8011782:	4637      	mov	r7, r6
 8011784:	dc05      	bgt.n	8011792 <__swbuf_r+0x4e>
 8011786:	4621      	mov	r1, r4
 8011788:	4628      	mov	r0, r5
 801178a:	f7ff fa53 	bl	8010c34 <_fflush_r>
 801178e:	2800      	cmp	r0, #0
 8011790:	d1ed      	bne.n	801176e <__swbuf_r+0x2a>
 8011792:	68a3      	ldr	r3, [r4, #8]
 8011794:	3b01      	subs	r3, #1
 8011796:	60a3      	str	r3, [r4, #8]
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	1c5a      	adds	r2, r3, #1
 801179c:	6022      	str	r2, [r4, #0]
 801179e:	701e      	strb	r6, [r3, #0]
 80117a0:	6962      	ldr	r2, [r4, #20]
 80117a2:	1c43      	adds	r3, r0, #1
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d004      	beq.n	80117b2 <__swbuf_r+0x6e>
 80117a8:	89a3      	ldrh	r3, [r4, #12]
 80117aa:	07db      	lsls	r3, r3, #31
 80117ac:	d5e1      	bpl.n	8011772 <__swbuf_r+0x2e>
 80117ae:	2e0a      	cmp	r6, #10
 80117b0:	d1df      	bne.n	8011772 <__swbuf_r+0x2e>
 80117b2:	4621      	mov	r1, r4
 80117b4:	4628      	mov	r0, r5
 80117b6:	f7ff fa3d 	bl	8010c34 <_fflush_r>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d0d9      	beq.n	8011772 <__swbuf_r+0x2e>
 80117be:	e7d6      	b.n	801176e <__swbuf_r+0x2a>

080117c0 <__swsetup_r>:
 80117c0:	b538      	push	{r3, r4, r5, lr}
 80117c2:	4b29      	ldr	r3, [pc, #164]	@ (8011868 <__swsetup_r+0xa8>)
 80117c4:	4605      	mov	r5, r0
 80117c6:	6818      	ldr	r0, [r3, #0]
 80117c8:	460c      	mov	r4, r1
 80117ca:	b118      	cbz	r0, 80117d4 <__swsetup_r+0x14>
 80117cc:	6a03      	ldr	r3, [r0, #32]
 80117ce:	b90b      	cbnz	r3, 80117d4 <__swsetup_r+0x14>
 80117d0:	f7fc fd1e 	bl	800e210 <__sinit>
 80117d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117d8:	0719      	lsls	r1, r3, #28
 80117da:	d422      	bmi.n	8011822 <__swsetup_r+0x62>
 80117dc:	06da      	lsls	r2, r3, #27
 80117de:	d407      	bmi.n	80117f0 <__swsetup_r+0x30>
 80117e0:	2209      	movs	r2, #9
 80117e2:	602a      	str	r2, [r5, #0]
 80117e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117e8:	81a3      	strh	r3, [r4, #12]
 80117ea:	f04f 30ff 	mov.w	r0, #4294967295
 80117ee:	e033      	b.n	8011858 <__swsetup_r+0x98>
 80117f0:	0758      	lsls	r0, r3, #29
 80117f2:	d512      	bpl.n	801181a <__swsetup_r+0x5a>
 80117f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117f6:	b141      	cbz	r1, 801180a <__swsetup_r+0x4a>
 80117f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117fc:	4299      	cmp	r1, r3
 80117fe:	d002      	beq.n	8011806 <__swsetup_r+0x46>
 8011800:	4628      	mov	r0, r5
 8011802:	f7fd fc81 	bl	800f108 <_free_r>
 8011806:	2300      	movs	r3, #0
 8011808:	6363      	str	r3, [r4, #52]	@ 0x34
 801180a:	89a3      	ldrh	r3, [r4, #12]
 801180c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011810:	81a3      	strh	r3, [r4, #12]
 8011812:	2300      	movs	r3, #0
 8011814:	6063      	str	r3, [r4, #4]
 8011816:	6923      	ldr	r3, [r4, #16]
 8011818:	6023      	str	r3, [r4, #0]
 801181a:	89a3      	ldrh	r3, [r4, #12]
 801181c:	f043 0308 	orr.w	r3, r3, #8
 8011820:	81a3      	strh	r3, [r4, #12]
 8011822:	6923      	ldr	r3, [r4, #16]
 8011824:	b94b      	cbnz	r3, 801183a <__swsetup_r+0x7a>
 8011826:	89a3      	ldrh	r3, [r4, #12]
 8011828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801182c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011830:	d003      	beq.n	801183a <__swsetup_r+0x7a>
 8011832:	4621      	mov	r1, r4
 8011834:	4628      	mov	r0, r5
 8011836:	f000 f883 	bl	8011940 <__smakebuf_r>
 801183a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801183e:	f013 0201 	ands.w	r2, r3, #1
 8011842:	d00a      	beq.n	801185a <__swsetup_r+0x9a>
 8011844:	2200      	movs	r2, #0
 8011846:	60a2      	str	r2, [r4, #8]
 8011848:	6962      	ldr	r2, [r4, #20]
 801184a:	4252      	negs	r2, r2
 801184c:	61a2      	str	r2, [r4, #24]
 801184e:	6922      	ldr	r2, [r4, #16]
 8011850:	b942      	cbnz	r2, 8011864 <__swsetup_r+0xa4>
 8011852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011856:	d1c5      	bne.n	80117e4 <__swsetup_r+0x24>
 8011858:	bd38      	pop	{r3, r4, r5, pc}
 801185a:	0799      	lsls	r1, r3, #30
 801185c:	bf58      	it	pl
 801185e:	6962      	ldrpl	r2, [r4, #20]
 8011860:	60a2      	str	r2, [r4, #8]
 8011862:	e7f4      	b.n	801184e <__swsetup_r+0x8e>
 8011864:	2000      	movs	r0, #0
 8011866:	e7f7      	b.n	8011858 <__swsetup_r+0x98>
 8011868:	200003f4 	.word	0x200003f4

0801186c <_raise_r>:
 801186c:	291f      	cmp	r1, #31
 801186e:	b538      	push	{r3, r4, r5, lr}
 8011870:	4605      	mov	r5, r0
 8011872:	460c      	mov	r4, r1
 8011874:	d904      	bls.n	8011880 <_raise_r+0x14>
 8011876:	2316      	movs	r3, #22
 8011878:	6003      	str	r3, [r0, #0]
 801187a:	f04f 30ff 	mov.w	r0, #4294967295
 801187e:	bd38      	pop	{r3, r4, r5, pc}
 8011880:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011882:	b112      	cbz	r2, 801188a <_raise_r+0x1e>
 8011884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011888:	b94b      	cbnz	r3, 801189e <_raise_r+0x32>
 801188a:	4628      	mov	r0, r5
 801188c:	f000 f830 	bl	80118f0 <_getpid_r>
 8011890:	4622      	mov	r2, r4
 8011892:	4601      	mov	r1, r0
 8011894:	4628      	mov	r0, r5
 8011896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801189a:	f000 b817 	b.w	80118cc <_kill_r>
 801189e:	2b01      	cmp	r3, #1
 80118a0:	d00a      	beq.n	80118b8 <_raise_r+0x4c>
 80118a2:	1c59      	adds	r1, r3, #1
 80118a4:	d103      	bne.n	80118ae <_raise_r+0x42>
 80118a6:	2316      	movs	r3, #22
 80118a8:	6003      	str	r3, [r0, #0]
 80118aa:	2001      	movs	r0, #1
 80118ac:	e7e7      	b.n	801187e <_raise_r+0x12>
 80118ae:	2100      	movs	r1, #0
 80118b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80118b4:	4620      	mov	r0, r4
 80118b6:	4798      	blx	r3
 80118b8:	2000      	movs	r0, #0
 80118ba:	e7e0      	b.n	801187e <_raise_r+0x12>

080118bc <raise>:
 80118bc:	4b02      	ldr	r3, [pc, #8]	@ (80118c8 <raise+0xc>)
 80118be:	4601      	mov	r1, r0
 80118c0:	6818      	ldr	r0, [r3, #0]
 80118c2:	f7ff bfd3 	b.w	801186c <_raise_r>
 80118c6:	bf00      	nop
 80118c8:	200003f4 	.word	0x200003f4

080118cc <_kill_r>:
 80118cc:	b538      	push	{r3, r4, r5, lr}
 80118ce:	4d07      	ldr	r5, [pc, #28]	@ (80118ec <_kill_r+0x20>)
 80118d0:	2300      	movs	r3, #0
 80118d2:	4604      	mov	r4, r0
 80118d4:	4608      	mov	r0, r1
 80118d6:	4611      	mov	r1, r2
 80118d8:	602b      	str	r3, [r5, #0]
 80118da:	f7f7 fc8b 	bl	80091f4 <_kill>
 80118de:	1c43      	adds	r3, r0, #1
 80118e0:	d102      	bne.n	80118e8 <_kill_r+0x1c>
 80118e2:	682b      	ldr	r3, [r5, #0]
 80118e4:	b103      	cbz	r3, 80118e8 <_kill_r+0x1c>
 80118e6:	6023      	str	r3, [r4, #0]
 80118e8:	bd38      	pop	{r3, r4, r5, pc}
 80118ea:	bf00      	nop
 80118ec:	20004e00 	.word	0x20004e00

080118f0 <_getpid_r>:
 80118f0:	f7f7 bc78 	b.w	80091e4 <_getpid>

080118f4 <__swhatbuf_r>:
 80118f4:	b570      	push	{r4, r5, r6, lr}
 80118f6:	460c      	mov	r4, r1
 80118f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118fc:	2900      	cmp	r1, #0
 80118fe:	b096      	sub	sp, #88	@ 0x58
 8011900:	4615      	mov	r5, r2
 8011902:	461e      	mov	r6, r3
 8011904:	da0d      	bge.n	8011922 <__swhatbuf_r+0x2e>
 8011906:	89a3      	ldrh	r3, [r4, #12]
 8011908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801190c:	f04f 0100 	mov.w	r1, #0
 8011910:	bf14      	ite	ne
 8011912:	2340      	movne	r3, #64	@ 0x40
 8011914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011918:	2000      	movs	r0, #0
 801191a:	6031      	str	r1, [r6, #0]
 801191c:	602b      	str	r3, [r5, #0]
 801191e:	b016      	add	sp, #88	@ 0x58
 8011920:	bd70      	pop	{r4, r5, r6, pc}
 8011922:	466a      	mov	r2, sp
 8011924:	f000 f848 	bl	80119b8 <_fstat_r>
 8011928:	2800      	cmp	r0, #0
 801192a:	dbec      	blt.n	8011906 <__swhatbuf_r+0x12>
 801192c:	9901      	ldr	r1, [sp, #4]
 801192e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011936:	4259      	negs	r1, r3
 8011938:	4159      	adcs	r1, r3
 801193a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801193e:	e7eb      	b.n	8011918 <__swhatbuf_r+0x24>

08011940 <__smakebuf_r>:
 8011940:	898b      	ldrh	r3, [r1, #12]
 8011942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011944:	079d      	lsls	r5, r3, #30
 8011946:	4606      	mov	r6, r0
 8011948:	460c      	mov	r4, r1
 801194a:	d507      	bpl.n	801195c <__smakebuf_r+0x1c>
 801194c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011950:	6023      	str	r3, [r4, #0]
 8011952:	6123      	str	r3, [r4, #16]
 8011954:	2301      	movs	r3, #1
 8011956:	6163      	str	r3, [r4, #20]
 8011958:	b003      	add	sp, #12
 801195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801195c:	ab01      	add	r3, sp, #4
 801195e:	466a      	mov	r2, sp
 8011960:	f7ff ffc8 	bl	80118f4 <__swhatbuf_r>
 8011964:	9f00      	ldr	r7, [sp, #0]
 8011966:	4605      	mov	r5, r0
 8011968:	4639      	mov	r1, r7
 801196a:	4630      	mov	r0, r6
 801196c:	f7fd fc40 	bl	800f1f0 <_malloc_r>
 8011970:	b948      	cbnz	r0, 8011986 <__smakebuf_r+0x46>
 8011972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011976:	059a      	lsls	r2, r3, #22
 8011978:	d4ee      	bmi.n	8011958 <__smakebuf_r+0x18>
 801197a:	f023 0303 	bic.w	r3, r3, #3
 801197e:	f043 0302 	orr.w	r3, r3, #2
 8011982:	81a3      	strh	r3, [r4, #12]
 8011984:	e7e2      	b.n	801194c <__smakebuf_r+0xc>
 8011986:	89a3      	ldrh	r3, [r4, #12]
 8011988:	6020      	str	r0, [r4, #0]
 801198a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801198e:	81a3      	strh	r3, [r4, #12]
 8011990:	9b01      	ldr	r3, [sp, #4]
 8011992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011996:	b15b      	cbz	r3, 80119b0 <__smakebuf_r+0x70>
 8011998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801199c:	4630      	mov	r0, r6
 801199e:	f000 f81d 	bl	80119dc <_isatty_r>
 80119a2:	b128      	cbz	r0, 80119b0 <__smakebuf_r+0x70>
 80119a4:	89a3      	ldrh	r3, [r4, #12]
 80119a6:	f023 0303 	bic.w	r3, r3, #3
 80119aa:	f043 0301 	orr.w	r3, r3, #1
 80119ae:	81a3      	strh	r3, [r4, #12]
 80119b0:	89a3      	ldrh	r3, [r4, #12]
 80119b2:	431d      	orrs	r5, r3
 80119b4:	81a5      	strh	r5, [r4, #12]
 80119b6:	e7cf      	b.n	8011958 <__smakebuf_r+0x18>

080119b8 <_fstat_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4d07      	ldr	r5, [pc, #28]	@ (80119d8 <_fstat_r+0x20>)
 80119bc:	2300      	movs	r3, #0
 80119be:	4604      	mov	r4, r0
 80119c0:	4608      	mov	r0, r1
 80119c2:	4611      	mov	r1, r2
 80119c4:	602b      	str	r3, [r5, #0]
 80119c6:	f7f7 fc75 	bl	80092b4 <_fstat>
 80119ca:	1c43      	adds	r3, r0, #1
 80119cc:	d102      	bne.n	80119d4 <_fstat_r+0x1c>
 80119ce:	682b      	ldr	r3, [r5, #0]
 80119d0:	b103      	cbz	r3, 80119d4 <_fstat_r+0x1c>
 80119d2:	6023      	str	r3, [r4, #0]
 80119d4:	bd38      	pop	{r3, r4, r5, pc}
 80119d6:	bf00      	nop
 80119d8:	20004e00 	.word	0x20004e00

080119dc <_isatty_r>:
 80119dc:	b538      	push	{r3, r4, r5, lr}
 80119de:	4d06      	ldr	r5, [pc, #24]	@ (80119f8 <_isatty_r+0x1c>)
 80119e0:	2300      	movs	r3, #0
 80119e2:	4604      	mov	r4, r0
 80119e4:	4608      	mov	r0, r1
 80119e6:	602b      	str	r3, [r5, #0]
 80119e8:	f7f7 fc74 	bl	80092d4 <_isatty>
 80119ec:	1c43      	adds	r3, r0, #1
 80119ee:	d102      	bne.n	80119f6 <_isatty_r+0x1a>
 80119f0:	682b      	ldr	r3, [r5, #0]
 80119f2:	b103      	cbz	r3, 80119f6 <_isatty_r+0x1a>
 80119f4:	6023      	str	r3, [r4, #0]
 80119f6:	bd38      	pop	{r3, r4, r5, pc}
 80119f8:	20004e00 	.word	0x20004e00

080119fc <_init>:
 80119fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119fe:	bf00      	nop
 8011a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a02:	bc08      	pop	{r3}
 8011a04:	469e      	mov	lr, r3
 8011a06:	4770      	bx	lr

08011a08 <_fini>:
 8011a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0a:	bf00      	nop
 8011a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a0e:	bc08      	pop	{r3}
 8011a10:	469e      	mov	lr, r3
 8011a12:	4770      	bx	lr
